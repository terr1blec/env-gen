"""
12306 MCP Server - FastMCP-compliant server for 12306 train ticket search.

This server provides search functionality for train tickets using the offline database
generated by the Database Synthesizer. It loads data from the generated JSON file
and provides a search tool to find train tickets based on departure station,
arrival station, and date.
"""

import json
import logging
from pathlib import Path
from typing import Dict, List, Optional

from fastmcp import FastMCP

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize FastMCP server
mcp = FastMCP(name="12306 MCP Server")


def load_database() -> Dict[str, List[Dict]]:
    """
    Load train ticket database from generated JSON file.
    
    Returns:
        Dict containing train_tickets list, or empty structure if loading fails.
    """
    database_path = Path(__file__).parent / "12306_mcp_server_database.json"
    
    try:
        if not database_path.exists():
            logger.warning(f"Database file not found at {database_path}")
            return {"train_tickets": []}
            
        with open(database_path, 'r', encoding='utf-8') as f:
            database = json.load(f)
            
        # Validate basic structure
        if not isinstance(database, dict) or "train_tickets" not in database:
            logger.error("Database structure invalid: missing 'train_tickets' key")
            return {"train_tickets": []}
            
        if not isinstance(database["train_tickets"], list):
            logger.error("Database structure invalid: 'train_tickets' is not a list")
            return {"train_tickets": []}
            
        logger.info(f"Successfully loaded database with {len(database['train_tickets'])} train tickets")
        return database
        
    except json.JSONDecodeError as e:
        logger.error(f"Failed to parse database JSON: {e}")
        return {"train_tickets": []}
    except Exception as e:
        logger.error(f"Unexpected error loading database: {e}")
        return {"train_tickets": []}


@mcp.tool()
def search(
    departure_station: str,
    arrival_station: str,
    date: str
) -> Dict:
    """
    查询12306火车票 (Search 12306 train tickets)
    
    Search for train tickets based on departure station, arrival station, and date.
    Returns matching train tickets with details including train number, times,
    seat types, prices, and available seats.

    Args:
        departure_station (str): 出发站 (Departure station)
        arrival_station (str): 到达站 (Arrival station)
        date (str): 出发日期，格式为 YYYY-MM-DD (Departure date in YYYY-MM-DD format)

    Returns:
        Dict: Search results containing matching train tickets and search parameters
    """
    # Load database
    database = load_database()
    train_tickets = database.get("train_tickets", [])
    
    # Filter tickets based on search criteria
    matching_tickets = []
    for ticket in train_tickets:
        if (ticket.get("departure_station") == departure_station and
            ticket.get("arrival_station") == arrival_station and
            ticket.get("date") == date):
            matching_tickets.append(ticket)
    
    # Prepare search parameters for response
    search_parameters = {
        "departure_station": departure_station,
        "arrival_station": arrival_station,
        "date": date,
        "total_results": len(matching_tickets)
    }
    
    logger.info(f"Search completed: {len(matching_tickets)} tickets found for {departure_station} -> {arrival_station} on {date}")
    
    return {
        "train_tickets": matching_tickets,
        "search_parameters": search_parameters
    }


if __name__ == "__main__":
    mcp.run()