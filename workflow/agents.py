from __future__ import annotations

from dataclasses import dataclass
from typing import Any

from agents import Agent
from agents.models.interface import Model

from .context import WorkflowContext
from .tools import (
    describe_schema,
    ensure_dir,
    get_notes,
    get_recommended_paths,
    list_directory,
    read_text,
    record_note,
    run_python,
    write_text,
)


@dataclass
class AgentSuite:
    schema_planner: Agent[Any]
    dataset_builder: Agent[Any]
    server_builder: Agent[Any]
    reviewer: Agent[Any]
    dataset_executor: Agent[Any]
    test_agent: Agent[Any]


def build_agent_suite(context: WorkflowContext, model: Model) -> AgentSuite:
    schema_planner = Agent(
        name="Schema Planner",
        instructions=(
            "You interpret the provided MCP schema and translate it into an actionable plan. "
            "Use `describe_schema` and `get_recommended_paths` to understand requirements. "
            "Summarize the mandatory tool functions, expected inputs/outputs, and dataset needs. "
            "Capture concrete tasks for the implementation agents via `record_note` so they have "
            "clear guidance. Finish by returning a concise plan summary."
        ),
        tools=[describe_schema, get_recommended_paths, record_note, get_notes],
        model=model,
    )

    dataset_builder = Agent(
        name="Dataset Synthesizer",
        instructions=(
            "Produce a Python module that can synthesize deterministic mock datasets for the server. "
            "Follow naming guidance from `get_recommended_paths`. The script should accept parameters "
            "like counts or seeds where reasonable and write outputs to the recommended dataset JSON path. "
            "Avoid using external APIsâ€”only generate synthetic data. Use `write_text` for files and "
            "`ensure_dir` for directories. Document usage inside the module."
        ),
        tools=[get_recommended_paths, ensure_dir, write_text, read_text, list_directory],
        model=model,
    )

    server_builder = Agent(
        name="Server Builder",
        instructions=(
            "Implement the FastMCP server module described in the schema. "
            "Rely on planning notes (`get_notes`) and the recommended paths to build the module. "
            "Generate well-structured code that exposes the required MCP tools and uses only the offline dataset "
            "generated by the Dataset Synthesizer. Write code using `write_text`, create directories with "
            "`ensure_dir`, and re-read files with `read_text` to validate before finishing."
        ),
        tools=[get_notes, get_recommended_paths, ensure_dir, write_text, read_text, list_directory],
        model=model,
    )

    reviewer = Agent(
        name="Code Reviewer",
        instructions=(
            "Review the generated Python code for correctness, readability, and adherence to the requirements. "
            "Read relevant files with `read_text`. If issues exist, describe them clearly and request revisions. "
            "Approve only when the server module and dataset generator are coherent, import without errors, and "
            "align with the schema. Prefix your final verdict with either `APPROVED:` or `REVISIONS_NEEDED:`."
        ),
        tools=[read_text, get_recommended_paths, get_notes, record_note],
        model=model,
    )

    dataset_executor = Agent(
        name="Dataset Executor",
        instructions=(
            "Execute the approved dataset generator. Use `run_python` to run the dataset script so that it writes "
            "the offline JSON dataset. Confirm the file exists by reading it afterward with `read_text` or "
            "`list_directory`. Record execution details via `record_note` for the test agent."
        ),
        tools=[run_python, read_text, get_recommended_paths, record_note, get_notes, list_directory],
        model=model,
    )

    test_agent = Agent(
        name="Test Agent",
        instructions=(
            "Author tests that validate the FastMCP server can load the offline dataset and satisfy schema behaviors. "
            "Create tests in the recommended tests directory via `ensure_dir` and `write_text`. "
            "Execute them with `run_python` (pytest). Surface failings clearly and iterate until they pass, "
            "updating or regenerating tests as needed."
        ),
        tools=[ensure_dir, write_text, read_text, run_python, get_recommended_paths, get_notes],
        model=model,
    )

    return AgentSuite(
        schema_planner=schema_planner,
        dataset_builder=dataset_builder,
        server_builder=server_builder,
        reviewer=reviewer,
        dataset_executor=dataset_executor,
        test_agent=test_agent,
    )


__all__ = ["AgentSuite", "build_agent_suite"]
