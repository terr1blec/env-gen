{
  "labels": {
    "analysis": "The LlamaCloud Index Server primarily functions as a private information retrieval system that integrates LlamaCloud indexes with applications. It enables querying custom data sources like Google Drive or uploaded documents through a local MCP server, facilitating real-time, context-aware responses. The available tool suggests a focus on documentation deployment and integration, particularly for the LlamaCloud Index Server framework. This server is designed to enhance workflows by providing seamless access to private data sources, improving productivity and information management.",
    "reasoning": "The primary label \"Memory Management\" was chosen because the server's core functionality revolves around storing, retrieving, and managing private documents and data sources. This fits well with the concept of knowledge bases and note-taking. The secondary label \"API Integration\" is included because the server integrates with clients like Claude Desktop, indicating an API-driven interaction model. While \"Web Search & Research\" and \"Development Tools\" could also be relevant, they are less central to the server's primary purpose.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": "Private Data Retrieval",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1097,
    "server_name": "LlamaCloud Index Server",
    "rank_by_usage": 1098,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@sub-arjun_omnibase-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@sub-arjun/omnibase-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1097,
      "name": "LlamaCloud Index Server",
      "author": "@sub-arjun/omnibase-mcp",
      "overview": "Provide up-to-date private information retrieval tools by integrating LlamaCloud indexes with your applications. Enable querying of custom data sources like Google Drive or uploaded documents through a local MCP server. Seamlessly connect with clients such as Claude Desktop to enhance your workflows with real-time, context-aware responses.",
      "repository_url": "https://github.com/sub-arjun/omnibase-mcp",
      "homepage": "https://smithery.ai/server/@sub-arjun/omnibase-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@sub-arjun_omnibase-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "llama_index_documentation",
          "description": "Deploy Server LlamaCloud Index Server @sub-arjun/omnibase-mcp Try in Playground llama_index_documentation",
          "parameters": [
            {
              "name": "llama_index_documentation",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@sub-arjun/omnibase-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "openaiApiKey",
          "required": true,
          "description": ""
        },
        {
          "name": "llamaCloudApiKey",
          "required": true,
          "description": ""
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@sub-arjun/omnibase-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1098.@sub-arjun_omnibase-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1075
  }
}