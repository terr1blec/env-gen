{
  "labels": {
    "analysis": "The MCP Server described as \"File Operator\" is primarily focused on enabling file management and operations within LLM applications. The available tool, \"view_file\", allows users to view text files at specified paths. This suggests the server's core functionality revolves around file handling, specifically reading and potentially managing files to support various workflows involving text data.",
    "reasoning": "The primary label \"File Management\" was chosen because the server's main functionality is centered around file operations, particularly viewing files. While \"File Management\" could be argued as a broader category, it aligns closely with the described capabilities. No additional secondary labels are needed as the server's functionality is narrowly focused on file operations. No custom label is required as the predefined categories adequately cover the server's purpose.",
    "primary_label": "File Management",
    "secondary_labels": [],
    "custom_label": "None",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1111,
    "server_name": "File Operator",
    "rank_by_usage": 1112,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@Reculi_file-operator.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Reculi/file-operator/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "view_file",
          "description": "View a text file at the specified path",
          "input_schema": {
            "properties": {
              "path": {
                "title": "Path",
                "type": "string"
              }
            },
            "required": [
              "path"
            ],
            "title": "view_fileArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "view_file"
      ]
    },
    "server_info_crawled": {
      "id": 1111,
      "name": "File Operator",
      "author": "@Reculi/file-operator",
      "overview": "Enable seamless file operations through a dedicated MCP server. Perform file management tasks efficiently within your LLM applications. Simplify integration of file handling capabilities in your workflows.",
      "repository_url": "https://github.com/Reculi/file-operator",
      "homepage": "https://smithery.ai/server/@Reculi/file-operator",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Reculi_file-operator.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "view_file",
          "description": "View a text file at the specified path",
          "input_schema": {
            "properties": {
              "path": {
                "title": "Path",
                "type": "string"
              }
            },
            "required": [
              "path"
            ],
            "title": "view_fileArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Reculi/file-operator/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Reculi/file-operator/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1112.@Reculi_file-operator_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1089
  }
}