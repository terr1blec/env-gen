{
  "labels": {
    "analysis": "The MCP Server \"Estate Crawler\" focuses on extracting real estate data from websites using a Python-based crawler. It converts unstructured web content into structured formats, simplifying data collection for real estate applications. The available tool \"get_result\" suggests deploying this crawler to parse data efficiently. The primary functionality involves web scraping and data extraction tailored for real estate information.",
    "reasoning": "The primary label \"Web scraping\" is chosen because the core functionality involves extracting data from websites. The secondary label \"Data Analysis & Processing\" is selected because the tool converts unstructured data into structured formats for analysis. The custom label \"Real Estate Data Extraction\" is created to highlight the specific niche of real estate data collection.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": "Real Estate Data Extraction",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1889,
    "server_name": "Estate Crawler",
    "rank_by_usage": 1890,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Yanghojun_smithery-estate-crawler.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Yanghojun/smithery-estate-crawler/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1889,
      "name": "Estate Crawler",
      "author": "@Yanghojun/smithery-estate-crawler",
      "overview": "Crawl and extract real estate data efficiently using a Python-based crawler. Leverage modern dependencies to parse and convert web content into structured formats. Simplify data collection workflows for real estate applications.",
      "repository_url": "https://github.com/Yanghojun/Smithery-Estate-Crawler",
      "homepage": "https://smithery.ai/server/@Yanghojun/smithery-estate-crawler",
      "remote_or_local": "Remote",
      "license": "@Yanghojun/smithery-estate-crawler",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Yanghojun_smithery-estate-crawler.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_result",
          "description": "Deploy Server Estate Crawler @Yanghojun/smithery-estate-crawler Try in Playground",
          "parameters": [
            {
              "name": "jiyeok",
              "required": true,
              "type": "string"
            },
            {
              "name": "house_type",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Yanghojun/smithery-estate-crawler/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "X_NCP_APIGW_API_KEY",
          "required": true,
          "description": "Naver Open API Key"
        },
        {
          "name": "EstateCrawlerSecretKey",
          "required": true,
          "description": "발급 희망 시 문의 바랍니다."
        },
        {
          "name": "X_NCP_APIGW_API_KEY_ID",
          "required": true,
          "description": "Naver Open API Key ID"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Yanghojun/smithery-estate-crawler/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1890.@Yanghojun_smithery-estate-crawler_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1671
  }
}