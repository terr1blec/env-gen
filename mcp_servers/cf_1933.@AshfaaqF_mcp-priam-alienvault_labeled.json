{
  "labels": {
    "analysis": "The MCP Server is designed to integrate with AlienVault's OTX (Open Threat Exchange) platform, providing access to threat intelligence and security reports. Its primary functionality revolves around retrieving security-related data for various identifiers (IPs, domains, hashes, CVE IDs) and searching for threat patterns (pulses). The server's tools enable users to dynamically access security context and threat intelligence, making it particularly valuable for security researchers, analysts, and automated threat detection systems.",
    "reasoning": "The primary label is chosen because the server's core functionality is centered around retrieving and analyzing security threat data. Security tools is a natural fit as it directly addresses threat intelligence and security event monitoring. The secondary labels are added because the server integrates with external APIs (AlienVault OTX) and handles database-like operations through its query capabilities.",
    "primary_label": "Security & Authentication",
    "secondary_labels": [
      "API Integration",
      "Database Operations"
    ],
    "custom_label": "Threat Intelligence Analysis",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1932,
    "server_name": "Priam AlienVault MCP Server",
    "rank_by_usage": 1933,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@AshfaaqF_mcp-priam-alienvault.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@AshfaaqF/mcp-priam-alienvault/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1932,
      "name": "Priam AlienVault MCP Server",
      "author": "@AshfaaqF/mcp-priam-alienvault",
      "overview": "Provide seamless integration with AlienVault data sources to enhance your LLM applications with security context and threat intelligence. Enable dynamic access to security events and actionable insights through standardized MCP tools and resources. Empower your agents to interact with real-world security data effortlessly.",
      "repository_url": "https://github.com/AshfaaqF/mcp-priam-alienvault",
      "homepage": "https://smithery.ai/server/@AshfaaqF/mcp-priam-alienvault",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@AshfaaqF_mcp-priam-alienvault.json",
      "tools_count": 10,
      "tools": [
        {
          "name": "otx_get_ipv4_report",
          "description": "Deploy Server Priam AlienVault MCP Server @AshfaaqF/mcp-priam-alienvault Try in Playground otx_get_ipv4_report",
          "parameters": []
        },
        {
          "name": "otx_get_ipv6_report",
          "description": "Retrieves the AlienVault OTX report for a given IPv6 address. Input: The IPv6 address (e.g., '2001:0db8:85a3:0000:0000:8a2e:0370:7334').",
          "parameters": []
        },
        {
          "name": "otx_get_domain_report",
          "description": "Retrieves the AlienVault OTX report for a given domain name. Input: The domain name (e.g., 'example.com').",
          "parameters": []
        },
        {
          "name": "otx_get_hostname_report",
          "description": "Retrieves the AlienVault OTX report for a given hostname. Input: The hostname (e.g., 'server.example.com').",
          "parameters": [
            {
              "name": "The",
              "required": false,
              "type": "string"
            },
            {
              "name": "hostname",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "otx_get_url_report",
          "description": "Retrieves the AlienVault OTX report for a given URL. Input: The URL (e.g., 'http://example.com/malicious').",
          "parameters": [
            {
              "name": "url",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "otx_get_md5_report",
          "description": "Retrieves the AlienVault OTX report for a given MD5 file hash. Input: The MD5 hash (e.g., 'd41d8cd98f00b204e9800998ecf8427e').",
          "parameters": []
        },
        {
          "name": "otx_get_sha1_report",
          "description": "Retrieves the AlienVault OTX report for a given SHA-1 file hash. Input: The SHA-1 hash (e.g., 'a9993e364706816aba3e25717850c26d9c3d').",
          "parameters": []
        },
        {
          "name": "otx_get_sha256_report",
          "description": "Retrieves the AlienVault OTX report for a given SHA-256 file hash. Input: The SHA-256 hash (e.g., 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855').",
          "parameters": []
        },
        {
          "name": "otx_get_cve_report",
          "description": "Retrieves the AlienVault OTX report for a given CVE ID. Input: The CVE ID (e.g., 'CVE-2024-12345').",
          "parameters": []
        },
        {
          "name": "otx_search_pulses",
          "description": "Searches AlienVault OTX pulses for a given keyword or phrase. Useful for finding information about threat groups, campaigns, or attack types. Input: The search query (e.g., 'APT28', 'phishing', 'ransomware as a service').",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@AshfaaqF/mcp-priam-alienvault/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "alienvaultApiKey",
          "required": true,
          "description": "The API key for accessing the Alient Vault OTX API."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@AshfaaqF/mcp-priam-alienvault/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1933.@AshfaaqF_mcp-priam-alienvault_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1702
  }
}