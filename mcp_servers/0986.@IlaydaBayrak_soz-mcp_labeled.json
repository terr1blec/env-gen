{
  "labels": {
    "analysis": "The MCP Server is designed to act as a lightweight middleware that facilitates seamless integration of language models with external tools and resources. Its primary function is to serve as a bridge, enabling LLMs to dynamically interact with data and perform actions through a standardized protocol. The available tool \"get_advice\" suggests a focus on generating random advice or recommendations, which indicates potential use in decision-making assistance or content generation. The server's core purpose revolves around tool integration and enabling real-world context for language models.",
    "reasoning": "The primary label, \"API Integration\", is chosen because the MCP Server's core functionality is to enable communication and tool integration between language models and external resources via a standardized protocol. This aligns with the predefined category of \"API Integration\". There is no clear secondary functionality from the description and available tools that would warrant additional labels. The server's unique aspect of acting as a bridge between LLMs and external tools could be described by a custom label indicating its mediation role.",
    "primary_label": "API Integration",
    "secondary_labels": [],
    "custom_label": "LLM-Tool Mediator",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 985,
    "server_name": "Soz MCP Server",
    "rank_by_usage": 986,
    "usage_count": "2",
    "original_file": "../crawler/smithery/@IlaydaBayrak_soz-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@IlaydaBayrak/soz-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_advice",
          "description": "\n    Rastgele tavsiye döner.\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_adviceArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_advice"
      ]
    },
    "server_info_crawled": {
      "id": 985,
      "name": "Soz MCP Server",
      "author": "@IlaydaBayrak/soz-mcp",
      "overview": "Provide a lightweight and efficient MCP server implementation to enable seamless integration of language models with external tools and resources. Facilitate dynamic interaction with data and actions through a standardized protocol. Enhance your applications by bridging LLMs with real-world context effortlessly.",
      "repository_url": "https://github.com/IlaydaBayrak/soz-mcp",
      "homepage": "https://smithery.ai/server/@IlaydaBayrak/soz-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "2",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@IlaydaBayrak_soz-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_advice",
          "description": "\n    Rastgele tavsiye döner.\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_adviceArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@IlaydaBayrak/soz-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@IlaydaBayrak/soz-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0986.@IlaydaBayrak_soz-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 964
  }
}