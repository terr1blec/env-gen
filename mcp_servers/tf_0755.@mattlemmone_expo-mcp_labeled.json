{
  "labels": {
    "analysis": "The MCP Server is primarily focused on managing and monitoring Expo development servers, which are used for React Native application development. The available tools allow for file operations (reading, writing, listing), log viewing (tailing), and basic system monitoring (server status queries). This functionality is tailored toward developers working with Expo projects, streamlining their workflow with automation and AI-driven processes.",
    "reasoning": "The primary label is \"Development Tools\" because the server provides utilities essential for software development, particularly React Native/Expo workflows. The secondary label \"File Management\" is added due to the file operation tools, while \"Operating System\" is included because listing tools and querying server status are system-level operations. No custom label is needed as the predefined categories sufficiently describe the server's functionality.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "File Management",
      "Operating System"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 754,
    "server_name": "Expo Development Server Manager",
    "rank_by_usage": 755,
    "usage_count": "8",
    "original_file": "../crawler/smithery/@mattlemmone_expo-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mattlemmone/expo-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "readFile",
          "description": "Read the contents of a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "filePath": {
                "type": "string",
                "description": "The path to the file to read"
              }
            },
            "required": [
              "filePath"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "writeFile",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "filePath": {
                "type": "string",
                "description": "The path to the file to write"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "filePath",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "listFiles",
          "description": "List files in a directory",
          "input_schema": {
            "type": "object",
            "properties": {
              "directoryPath": {
                "type": "string",
                "description": "The path to the directory to list files from"
              }
            },
            "required": [
              "directoryPath"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "tailFile",
          "description": "Read the last N lines from a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "filePath": {
                "type": "string",
                "description": "The path to the file to tail"
              },
              "lines": {
                "type": "integer",
                "exclusiveMinimum": 0,
                "description": "Number of lines to read from the end of the file"
              }
            },
            "required": [
              "filePath",
              "lines"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "listTools",
          "description": "List all available tools in this MCP server",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 5,
      "tool_names": [
        "readFile",
        "writeFile",
        "listFiles",
        "tailFile",
        "listTools"
      ]
    },
    "server_info_crawled": {
      "id": 754,
      "name": "Expo Development Server Manager",
      "author": "@mattlemmone/expo-mcp",
      "overview": "Manage and monitor Expo development servers with ease. Start, stop, and query server status while accessing logs and file operations to streamline your React Native development workflow. Enhance automation and AI-driven processes with extendable tools tailored for Expo projects.",
      "repository_url": "https://github.com/mattlemmone/expo-mcp",
      "homepage": "https://smithery.ai/server/@mattlemmone/expo-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "8",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mattlemmone_expo-mcp.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "readFile",
          "description": "Read the contents of a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "filePath": {
                "type": "string",
                "description": "The path to the file to read"
              }
            },
            "required": [
              "filePath"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "writeFile",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "filePath": {
                "type": "string",
                "description": "The path to the file to write"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "filePath",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "listFiles",
          "description": "List files in a directory",
          "input_schema": {
            "type": "object",
            "properties": {
              "directoryPath": {
                "type": "string",
                "description": "The path to the directory to list files from"
              }
            },
            "required": [
              "directoryPath"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "tailFile",
          "description": "Read the last N lines from a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "filePath": {
                "type": "string",
                "description": "The path to the file to tail"
              },
              "lines": {
                "type": "integer",
                "exclusiveMinimum": 0,
                "description": "Number of lines to read from the end of the file"
              }
            },
            "required": [
              "filePath",
              "lines"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "listTools",
          "description": "List all available tools in this MCP server",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mattlemmone/expo-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mattlemmone/expo-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0755.@mattlemmone_expo-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 737
  }
}