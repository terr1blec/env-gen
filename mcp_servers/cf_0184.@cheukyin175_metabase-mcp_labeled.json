{
  "labels": {
    "analysis": "The MCP Server primarily facilitates integration between AI assistants and the Metabase analytics platform. It enables users to interact with Metabase dashboards, cards (questions), databases, and execute queries through a conversational interface. The server's tools focus on data access, visualization, and manipulation within Metabase, simplifying data-driven decision-making by bridging AI capabilities with existing analytics infrastructure.",
    "reasoning": "The primary label is chosen because the server's core functionality revolves around accessing and manipulating analytics data within Metabase, which aligns with data analysis goals. Secondary labels are included for database operations due to direct query execution and management capabilities, and API integration since the server acts as a bridge between AI assistants and Metabase's API.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "Database Operations",
      "API Integration"
    ],
    "custom_label": "Metabase Analytics Integration",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 183,
    "server_name": "Metabase Analytics Integration Server",
    "rank_by_usage": 184,
    "usage_count": "258",
    "original_file": "../crawler/smithery/@cheukyin175_metabase-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@cheukyin175/metabase-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 183,
      "name": "Metabase Analytics Integration Server",
      "author": "@cheukyin175/metabase-mcp",
      "overview": "Enable AI assistants to seamlessly interact with your Metabase analytics platform. Access dashboards, cards, databases, and execute queries through a unified conversational interface. Simplify data-driven decision making by bridging your analytics with powerful AI capabilities.",
      "repository_url": "https://github.com/cheukyin175/metabase-mcp",
      "homepage": "https://smithery.ai/server/@cheukyin175/metabase-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "258",
      "success_rate": "99.70%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@cheukyin175_metabase-mcp.json",
      "tools_count": 16,
      "tools": [
        {
          "name": "list_dashboards",
          "description": "Deploy Server Metabase Analytics Integration Server @cheukyin175/metabase-mcp Try in Playground list_dashboards",
          "parameters": [
            {
              "name": "list_dashboards",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_cards",
          "description": "List all questions/cards in Metabase",
          "parameters": [
            {
              "name": "list_cards",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_databases",
          "description": "List all databases in Metabase",
          "parameters": [
            {
              "name": "list_databases",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "execute_card",
          "description": "Execute a Metabase question/card and get results",
          "parameters": [
            {
              "name": "card_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "parameters",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_dashboard_cards",
          "description": "Get all cards in a dashboard",
          "parameters": [
            {
              "name": "get_dashboard_cards",
              "required": false,
              "type": "string"
            },
            {
              "name": "dashboard_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "execute_query",
          "description": "Execute a SQL query against a Metabase database",
          "parameters": [
            {
              "name": "execute_query",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_card",
          "description": "Create a new question/card in Metabase",
          "parameters": [
            {
              "name": "create_card",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_card_visualization",
          "description": "Update visualization settings for a card",
          "parameters": [
            {
              "name": "update_card_visualization",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "add_card_to_dashboard",
          "description": "Add a card to a dashboard",
          "parameters": [
            {
              "name": "row",
              "required": false,
              "type": "string"
            },
            {
              "name": "size_x",
              "required": false,
              "type": "string"
            },
            {
              "name": "size_y",
              "required": false,
              "type": "string"
            },
            {
              "name": "card_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "dashboard_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_dashboard",
          "description": "Create a new dashboard in Metabase",
          "parameters": [
            {
              "name": "create_dashboard",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_collections",
          "description": "List all collections in Metabase",
          "parameters": [
            {
              "name": "list_collections",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_collection",
          "description": "Create a new collection in Metabase",
          "parameters": [
            {
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "name": "color",
              "required": false,
              "type": "string"
            },
            {
              "name": "parent_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "description",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_tables",
          "description": "List all tables in a database",
          "parameters": [
            {
              "name": "list_tables",
              "required": false,
              "type": "string"
            },
            {
              "name": "database_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_table_fields",
          "description": "Get all fields/columns in a table",
          "parameters": [
            {
              "name": "get_table_fields",
              "required": false,
              "type": "string"
            },
            {
              "name": "table_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_dashboard",
          "description": "Update an existing dashboard",
          "parameters": [
            {
              "name": "update_dashboard",
              "required": false,
              "type": "string"
            },
            {
              "name": "Update",
              "required": false,
              "type": "string"
            },
            {
              "name": "an",
              "required": false,
              "type": "string"
            },
            {
              "name": "existing",
              "required": false,
              "type": "string"
            },
            {
              "name": "dashboard",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_dashboard",
          "description": "Description not available",
          "parameters": [
            {
              "name": "delete_dashboard",
              "required": false,
              "type": "string"
            },
            {
              "name": "Delete",
              "required": false,
              "type": "string"
            },
            {
              "name": "a",
              "required": false,
              "type": "string"
            },
            {
              "name": "dashboard",
              "required": false,
              "type": "string"
            },
            {
              "name": "dashboard_id",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@cheukyin175/metabase-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@cheukyin175/metabase-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0184.@cheukyin175_metabase-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 180
  }
}