{
  "labels": {
    "analysis": "The MCP Server \"Tradovate\" is focused on integrating Tradovate's trading API to facilitate trading automation and management. Its core functionality revolves around accessing real-time market data, managing trade accounts, and executing trades, with an emphasis on enhancing the trading experience through automation tools. The available tool (Optional Settings for server management) suggests a utility for account and server access control, though the primary focus remains on trading-related operations.",
    "reasoning": "The primary label reflects the core functionality of trading automation and market data access. The secondary labels \"Data Analysis & Processing\" and \"API Integration\" are included due to the server's role in processing market data and integrating Tradovate's API. No custom label is necessary, as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Financial Services",
    "secondary_labels": [
      "Data Analysis & Processing",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1673,
    "server_name": "Tradovate",
    "rank_by_usage": 1674,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@0xjmp_mcp-tradovate.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@0xjmp/mcp-tradovate/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1673,
      "name": "Tradovate",
      "author": "@0xjmp/mcp-tradovate",
      "overview": "Integrate Tradovate's trading API for seamless trading automation and management. Access real-time market data, manage accounts, and execute trades effortlessly. Enhance your trading experience with powerful tools and automation capabilities.",
      "repository_url": "https://github.com/0xjmp/tradovate-mcp",
      "homepage": "https://smithery.ai/server/@0xjmp/mcp-tradovate",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@0xjmp_mcp-tradovate.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "Optional Settings",
          "description": "Access and manage servers by signing in.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@0xjmp/mcp-tradovate/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@0xjmp/mcp-tradovate/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1674.@0xjmp_mcp-tradovate_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1515
  }
}