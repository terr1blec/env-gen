{
  "labels": {
    "analysis": "The MCP Server specializes in retrieving and constructing comprehensive financial statements for companies listed on the Securities Exchange of Thailand (SET). It offers a streamlined way to access income statements, balance sheets, and cash flow statements through a CLI or programmatically via Python. This server solves problems related to accessing standardized financial data, particularly in the Thai stock market, making it valuable for financial analysis, investment research, or automated financial data processing.",
    "reasoning": "The Primary Label, \"Financial Services,\" is selected because the server's core functionality revolves around providing financial data (income statements, balance sheets, cash flow statements), which is central to financial services. The Secondary Label, \"Database Operations,\" is chosen because the server likely interacts with a database to retrieve and format financial data. \"Financial Services\" is the most fitting primary label, while \"Database Operations\" adds context to how the data is managed.",
    "primary_label": "Financial Services",
    "secondary_labels": [
      "Database Operations"
    ],
    "custom_label": "Stock Market Financial Data",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1584,
    "server_name": "SET-MCP",
    "rank_by_usage": 1585,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@batprem_set-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@batprem/set-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_financial_statement",
          "description": "Get the balance sheet of stock in The Securities Exchange of Thailand (SET).\n\n    Args:\n        symbol (str): Stock symbol in The Securities Exchange of Thailand (SET).\n        from_year (int): The start YEAR of the financial statement for example 2024.\n        to_year (int): The end YEAR of the financial statement for example 2024.\n\n    Returns:\n        str: The constructed financial statement.\n        Include Income Statement, Balance Sheet, and Cash Flow Statement in CSV format with | as the delimiter.\n    ",
          "input_schema": {
            "properties": {
              "symbol": {
                "title": "Symbol",
                "type": "string"
              },
              "from_year": {
                "title": "From Year",
                "type": "integer"
              },
              "to_year": {
                "title": "To Year",
                "type": "integer"
              }
            },
            "required": [
              "symbol",
              "from_year",
              "to_year"
            ],
            "title": "get_financial_statementArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_financial_statement"
      ]
    },
    "server_info_crawled": {
      "id": 1584,
      "name": "SET-MCP",
      "author": "@batprem/set-mcp",
      "overview": "Retrieve comprehensive financial statements for SET-listed companies with ease. Access income statements, balance sheets, and cash flow statements through a simple command-line interface or programmatically in Python. Enhance your AI agents' financial data capabilities effortlessly.",
      "repository_url": "https://github.com/batprem/set-mcp",
      "homepage": "https://smithery.ai/server/@batprem/set-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@batprem_set-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_financial_statement",
          "description": "Get the balance sheet of stock in The Securities Exchange of Thailand (SET).\n\n    Args:\n        symbol (str): Stock symbol in The Securities Exchange of Thailand (SET).\n        from_year (int): The start YEAR of the financial statement for example 2024.\n        to_year (int): The end YEAR of the financial statement for example 2024.\n\n    Returns:\n        str: The constructed financial statement.\n        Include Income Statement, Balance Sheet, and Cash Flow Statement in CSV format with | as the delimiter.\n    ",
          "input_schema": {
            "properties": {
              "symbol": {
                "title": "Symbol",
                "type": "string"
              },
              "from_year": {
                "title": "From Year",
                "type": "integer"
              },
              "to_year": {
                "title": "To Year",
                "type": "integer"
              }
            },
            "required": [
              "symbol",
              "from_year",
              "to_year"
            ],
            "title": "get_financial_statementArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@batprem/set-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@batprem/set-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1585.@batprem_set-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1446
  }
}