{
  "labels": {
    "analysis": "The MCP Server is designed to scrape chart images from TradingView by accepting ticker symbols and time intervals. It provides a tool to generate direct URLs for TradingView charts, which can be integrated into applications or workflows requiring financial chart visuals. The server solves the problem of programmatically accessing TradingView charts without manual screenshots, enabling automation in financial data visualization and monitoring.",
    "reasoning": "The primary functionality aligns with fetching and processing financial chart data, which falls under Financial Services. The use of TradingView charts suggests relevance to Cryptocurrency & Blockchain tools, given TradingView's popularity in that domain. No unique functionality requires a custom label.",
    "primary_label": "Financial Services",
    "secondary_labels": [
      "Cryptocurrency & Blockchain"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1650,
    "server_name": "TradingView Chart Image Scraper",
    "rank_by_usage": 1651,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@ertugrul59_tradingview-chart-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ertugrul59/tradingview-chart-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1650,
      "name": "TradingView Chart Image Scraper",
      "author": "@ertugrul59/tradingview-chart-mcp",
      "overview": "Fetch TradingView chart images by specifying ticker symbols and intervals. Easily integrate with MCP clients to retrieve direct chart image URLs for various financial instruments. Simplify access to up-to-date TradingView charts for your applications or workflows.",
      "repository_url": "https://github.com/ertugrul59/tradingview-chart-mcp",
      "homepage": "https://smithery.ai/server/@ertugrul59/tradingview-chart-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ertugrul59_tradingview-chart-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_tradingview_chart_image",
          "description": "Deploy Server TradingView Chart Image Scraper Claim Server @ertugrul59/tradingview-chart-mcp Try in Playground get_tradingview_chart_image",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@ertugrul59/tradingview-chart-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@ertugrul59/tradingview-chart-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1651.@ertugrul59_tradingview-chart-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1496
  }
}