{
  "labels": {
    "analysis": "The MCP Server is specialized for accessing and analyzing Korean financial disclosure data from the DART system. It provides extensive tools for retrieving corporate filings, financial statements, and shareholder information in structured formats (XML/CSV). The server enables real-time search, parsing, and query capabilities, making it valuable for financial analysis, regulatory compliance, and investment decision-making.",
    "reasoning": "The primary functionality of this server revolves around accessing, parsing, and analyzing financial disclosure data, which aligns best with the \"Financial Services\" category. Secondary labels are chosen based on the tools for querying and processing structured financial data (Database Operations) and the parsing/extraction capabilities for financial documents (Data Analysis & Processing). No custom label is needed as the predefined categories adequately cover the server's functionalities.",
    "primary_label": "Financial Services",
    "secondary_labels": [
      "Database Operations",
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 628,
    "server_name": "DART Financial Disclosure Access Server",
    "rank_by_usage": 629,
    "usage_count": "15",
    "original_file": "../crawler/smithery/@snaiws_dart-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@snaiws/dart-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 628,
      "name": "DART Financial Disclosure Access Server",
      "author": "@snaiws/dart-mcp-server",
      "overview": "Provide AI models with seamless access to Korean financial disclosure data from the DART system. Enable real-time search and analysis of corporate filings, financial statements, and shareholder information to enhance financial insights and decision-making.",
      "repository_url": "https://github.com/snaiws/DART-mcp-server",
      "homepage": "https://smithery.ai/server/@snaiws/dart-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "15",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@snaiws_dart-mcp-server.json",
      "tools_count": 17,
      "tools": [
        {
          "name": "get_corpcode",
          "description": "Deploy Server DART Financial Disclosure Access Server @snaiws/dart-mcp-server Try in Playground get_corpcode",
          "parameters": [
            {
              "name": "get_corpcode",
              "required": false,
              "type": "string"
            },
            {
              "name": "corp_name",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_corp_candidates",
          "description": "Use this when user-requested-corp-name is not exactly matching official corp-names. if a company reveals twice in the result, select recent one using modify_date.",
          "parameters": [
            {
              "name": "get_corp_candidates",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "xmlparser_step1_structure",
          "description": "xml parsing Step 1: Explore XML/HTML document structure Analyzes the hierarchical structure of an XML/HTML document and returns a tree view showing element types and their counts at each level.",
          "parameters": []
        },
        {
          "name": "xmlparser_step2_contents",
          "description": "xml parsing Step 2: Extract document contents and table of contents Identifies and extracts document structure including titles and sections. Users can specify which tags to treat as titles and sections based on the structure discovered in step 1.",
          "parameters": []
        },
        {
          "name": "xmlparser_step3_query",
          "description": "xml parsing Step 3: Query specific elements using CSS selectors or tag names Searches for specific elements using CSS selectors or simple tag names and returns a simplified preview of the found elements.",
          "parameters": []
        },
        {
          "name": "xmlparser_get_table_csv",
          "description": "xml parsing - Extract table data as CSV format Converts a specific table from the XML/HTML document into CSV format. Handles both uppercase (XML) and lowercase (HTML) table tags.",
          "parameters": [
            {
              "name": "path_xml",
              "required": true,
              "type": "string"
            },
            {
              "name": "table_index",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_disclosurelist",
          "description": "[공시정보 - 공시검색] Get list of disclosure of a company. you can narrow the result by optional inputs.",
          "parameters": [
            {
              "name": "get_disclosurelist",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_corpinfo",
          "description": "[공시정보 - 기업개황]\n    Get rough infomation of a company from DART system.",
          "parameters": [
            {
              "name": "corp_code",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_disclosure",
          "description": "[공시정보 - 공시서류원본파일]\n    Download a disclosure of a company by corp_code(고유번호) and rcept_no(접수번호)\n    재무제표 원본파일의 경우 get_xbrl_financial_statements를 사용할 것",
          "parameters": [
            {
              "name": "get_disclosurelist",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_corplist",
          "description": "[공시정보 - 고유번호] download corp_list, that contains corp_code/corp_name, for using other APIs.",
          "parameters": [
            {
              "name": "update_corplist",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_xbrl_financial_statements",
          "description": "[공시정보 - 공시서류원본파일] Download a disclosure of a company by corp_code(고유번호) and rcept_no(접수번호) 재무제표 원본파일의 경우 get_xbrl_financial_statements를 사용할 것",
          "parameters": []
        },
        {
          "name": "get_complete_financial_statements",
          "description": "[정기보고서 재무정보 - 단일회사 전체 재무제표] \"Provides all account items from XBRL financial statements within periodic disclosure submitted by listed corporations (securities and KOSDAQ) and major unlisted corporations (subject to business report submission & IFRS application). - 주의사항 - 1. 본 tool은 재무상태표, 손익계산서, 포괄손익계산서, 현금흐름표, 자본변동표를 제공합니다. 2. 공시보고서 검색 결과 같은 기간에 연결재무제표와 개별재무제표 둘 다 있다면 연결 재무제표를 우선시합니다. 3. 당기금액에 대한 계산은 다음과 같습니다. - 1분기보고서 (포괄)손익계산서 당기금액 : 1분기 금액 - 반기보고서 (포괄)손익계산서 당기금액 : 2분기 금액 - 3분기보고서 (포괄)손익계산서 당기금액 : 3분기 금액 - 사업보고서 (포괄)손익계산서 당기금액 : 1,2,3,4분기 금액 - 1분기보고서 현금흐름표 당기금액 : 1분기 금액 - 반기보고서 현금흐름표 당기금액 : 1,2분기 금액 - 3분기보고서 현금흐름표 당기금액 : 3분기 금액 - 사업보고서 현금흐름표 당기금액 : 1,2,3,4분기 금액 * 따라서 4분기 당기금액 분석을 위해선 모든 보고서를 참고 후 계산해야합니다. 4. 비교 분석 시 동일한 기간의 금액을 비교하도록 주의하고 반드시 표를 활용하세요.",
          "parameters": []
        },
        {
          "name": "get_single_company_key_indicators",
          "description": "[정기보고서 재무정보 - 단일회사 주요 재무지표] Provide key financial indicators extracted from XBRL financial statements in periodic reports filed by listed companies (KRX Securities and KOSDAQ) and major unlisted companies (required to file business reports & applying IFRS).",
          "parameters": [
            {
              "name": "get_single_company_key_indicators",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_paid_capital_increase",
          "description": "[주요사항보고서 주요정보 - 유상증자 결정] Provides key information of paid-in capital increase decision, within the major disclosure report",
          "parameters": [
            {
              "name": "get_paid_capital_increase",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_convertible_bond_issuance",
          "description": "[주요사항보고서 주요정보 - 전환사채권 발행결정] Provides key information of Decision on Issuance of Convertible Bonds, within the Major Event Report.",
          "parameters": [
            {
              "name": "get_convertible_bond_issuance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_bond_with_warrants_issuance",
          "description": "[주요사항보고서 주요정보 - 신주인수권부사채권 발행결정] Provides key information of Decision on Issuance of Bonds with Warrants, within the Major Event Report.",
          "parameters": [
            {
              "name": "get_bond_with_warrants_issuance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_exchangeable_bond_issuance",
          "description": "[주요사항보고서 주요정보 - 교환사채권 발행결정] Provides key information of Decision on Issuance of Exchangeable Bonds, within the Major Event Report.",
          "parameters": [
            {
              "name": "get_exchangeable_bond_issuance",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@snaiws/dart-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "dartApiKey",
          "required": true,
          "description": "DART API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@snaiws/dart-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0629.@snaiws_dart-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 614
  }
}