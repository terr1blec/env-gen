{
  "labels": {
    "analysis": "The Confluence MCP Server is designed to integrate with Confluence's REST API, enabling users to programmatically interact with Confluence content. Its primary functionality includes managing spaces, pages, and executing content searches. The available tools suggest it is focused on retrieving and manipulating Confluence data, such as listing spaces, getting page content, searching for content within Confluence, and listing pages in a specific space. This server is particularly useful for automating content management tasks and retrieving data from Confluence for integration with other applications or workflows.",
    "reasoning": "The primary label \"API Integration\" is chosen because the server's core functionality revolves around interacting via Confluence's REST API. \"Content Creation\" is selected as a secondary label because the tools allow users to search, retrieve, and manage content within Confluence, which is closely related to content creation and management. No custom label is needed as the functionality is well-covered by the predefined categories.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Content Creation"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2131,
    "server_name": "Confluence MCP Server",
    "rank_by_usage": 2132,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@MahithChigurupati_confluence-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@MahithChigurupati/confluence-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2131,
      "name": "Confluence MCP Server",
      "author": "@MahithChigurupati/confluence-mcp-server",
      "overview": "Integrate seamlessly with Confluence's REST API to manage spaces, pages, and execute content searches programmatically. Enhance your workflow by accessing and manipulating Confluence content directly from your applications.",
      "repository_url": "https://github.com/MahithChigurupati/Confluence-MCP-Server",
      "homepage": "https://smithery.ai/server/@MahithChigurupati/confluence-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@MahithChigurupati_confluence-mcp-server.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "list_spaces",
          "description": "Deploy Server Confluence MCP Server @MahithChigurupati/confluence-mcp-server Try in Playground list_spaces",
          "parameters": []
        },
        {
          "name": "get_page_content",
          "description": "Get the content of a specific Confluence page. Args: page_id: The ID of the Confluence page",
          "parameters": []
        },
        {
          "name": "search_content",
          "description": "Search for content in Confluence. Args: query: Text to search for space_key: Optional space key to limit search to limit: Maximum number of results to return (default: 25)",
          "parameters": []
        },
        {
          "name": "list_pages_in_space",
          "description": "List all pages in a Confluence space. Args: space_key: The key of the space to list pages from limit: Maximum number of pages to return (default: 25)",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@MahithChigurupati/confluence-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiToken",
          "required": true,
          "description": "Confluence API token for authentication"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@MahithChigurupati/confluence-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2132.@MahithChigurupati_confluence-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1849
  }
}