{
  "labels": {
    "analysis": "The MCP Server is designed specifically for Reddit interaction, providing tools to browse, search, and retrieve detailed content from the Reddit platform. Its core functionality revolves around accessing and processing Reddit data, including subreddits, submissions, comments, and search functionalities. The tools enable seamless integration of Reddit data into other applications or workflows, making it ideal for developers or users who need programmatic access to Reddit's content.",
    "reasoning": "The primary label \"API Integration\" was chosen because the server primarily functions as an interface to access and interact with Reddit's data programmatically. The secondary label \"Web Search & Research\" was selected because the server's search and retrieval tools facilitate information gathering from Reddit. The custom label \"Reddit Automation\" was added to highlight the server's unique focus on Reddit-related operations.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Web Search & Research"
    ],
    "custom_label": "Reddit Automation",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 99,
    "server_name": "Reddit MCP",
    "rank_by_usage": 100,
    "usage_count": "713",
    "original_file": "../crawler/smithery/@GridfireAI_reddit-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@GridfireAI/reddit-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 99,
      "name": "Reddit MCP",
      "author": "@GridfireAI/reddit-mcp",
      "overview": "Browse, search, and read Reddit effortlessly. Access detailed Reddit content and comments through a simple interface, enhancing your interaction with the platform. Perfect for integrating Reddit data into your applications or workflows.",
      "repository_url": "https://github.com/GridfireAI/reddit-mcp",
      "homepage": "https://smithery.ai/server/@GridfireAI/reddit-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "713",
      "success_rate": "99.93%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@GridfireAI_reddit-mcp.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "get_submission",
          "description": "Deploy Server Claim Server @GridfireAI/reddit-mcp Try in Playground get_submission",
          "parameters": []
        },
        {
          "name": "get_subreddit",
          "description": "Retrieve a subreddit by name. Args: subreddit_name: Name of the subreddit to retrieve Returns: Detailed information about the subreddit",
          "parameters": []
        },
        {
          "name": "get_comments_by_submission",
          "description": "Retrieve comments from a specific submission. Args: submission_id: ID of the submission to get comments from replace_more: Whether to replace MoreComments objects with actual comments Returns: List of comments with their replies",
          "parameters": []
        },
        {
          "name": "get_comment_by_id",
          "description": "Retrieve a specific comment by ID. Args: comment_id: ID of the comment to retrieve Returns: Comment details with any replies",
          "parameters": []
        },
        {
          "name": "search_posts",
          "description": "Search for posts within a subreddit. Args: params: Search parameters including subreddit name, query, and filters Returns: List of matching posts with their details",
          "parameters": []
        },
        {
          "name": "search_subreddits",
          "description": "Search for subreddits using either name-based or description-based search. Args: by: Search parameters, either SearchByName or SearchByDescription Returns: List of matching subreddits with their details",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@GridfireAI/reddit-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "redditClientSecret",
          "required": true,
          "description": "Reddit API Client Secret"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@GridfireAI/reddit-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0100.@GridfireAI_reddit-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 97
  }
}