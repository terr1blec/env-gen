{
  "labels": {
    "analysis": "The ACI MCP Server acts as an intermediary system for managing and executing various functions (tools) provided by ACI.dev. It offers two modes of operation: direct tool access and unified discovery/execution, which simplifies integration with large language model (LLM) clients. The server's primary function is to facilitate efficient tool calling by dynamically retrieving and executing functions based on LLM requests, avoiding context window overload. The available tools (ACI_SEARCH_FUNCTIONS and ACI_EXECUTE_FUNCTION) directly support this functionality by enabling search for available functions and their execution with specified parameters.",
    "reasoning": "The primary label of \"API Integration\" is chosen because the MCP Server primarily functions as a bridge between LLM clients and various tool functions, enabling seamless integration and dynamic execution. The secondary label of \"Development Tools\" is justified as it supports coding tasks by providing function calling capabilities. The secondary label of \"Browser Automation\" is included because the search and execution of functions resembles browsing through available tools. While the custom label \"Dynamic Function Execution Framework\" would describe the core functionality precisely, it seems to be sufficiently covered by the primary label, making it unnecessary to add a custom label in this case.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Development Tools",
      "Browser Automation"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1828,
    "server_name": "ACI MCP Server",
    "rank_by_usage": 1829,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@aipotheosis-labs_aci-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@aipotheosis-labs/aci-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1828,
      "name": "ACI MCP Server",
      "author": "@aipotheosis-labs/aci-mcp",
      "overview": "Provide dynamic access to a wide range of functions (tools) managed by ACI.dev through two MCP server types: one for direct app-specific tool access and another for unified dynamic discovery and execution of all available tools. Simplify integration with LLM clients by enabling efficient tool calling without overloading the model's context window. Enhance your agents with seamless, scalable function calling capabilities across multiple apps.",
      "repository_url": "https://github.com/aipotheosis-labs/aci-mcp",
      "homepage": "https://smithery.ai/server/@aipotheosis-labs/aci-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@aipotheosis-labs_aci-mcp.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "ACI_SEARCH_FUNCTIONS",
          "description": "Deploy Server ACI MCP Server Claim Server @aipotheosis-labs/aci-mcp Try in Playground ACI_SEARCH_FUNCTIONS",
          "parameters": []
        },
        {
          "name": "ACI_EXECUTE_FUNCTION",
          "description": "Execute a specific retrieved function. Provide the executable function name, and the required function parameters for that function based on function definition retrieved.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@aipotheosis-labs/aci-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "aciApiKey",
          "required": true,
          "description": "ACI.dev API key for authentication"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@aipotheosis-labs/aci-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1829.@aipotheosis-labs_aci-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1625
  }
}