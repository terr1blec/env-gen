{
  "labels": {
    "analysis": "The MCP Server described is primarily a registry and routing system for Model Context Protocol (MCP) servers within the Smithery ecosystem. It allows users to search for and interact with various MCP servers that can perform specialized tasks through their available tools. The core functionality revolves around discovery and execution of tools provided by other MCPs, effectively acting as a centralized interface to a distributed toolset.",
    "reasoning": "The primary label is \"API Integration\" because the server facilitates interaction with external MCP servers (third-party services) through tool execution, requiring routing and Integration. Secondary labels like \"Browser Automation\" and \"Communication Tools\" are relevant as MCPs might include tools for web interactions or messaging. No custom label is needed as the predefined categories adequately cover the functionality.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Browser Automation",
      "Communication Tools"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 10,
    "server_name": "Toolbox",
    "rank_by_usage": 11,
    "usage_count": "10,881",
    "original_file": "../crawler/smithery/@smithery_toolbox.json",
    "mode": "smithery",
    "timestamp": 1751937975,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@smithery/toolbox/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "search_servers",
          "description": "Search for Model Context Protocol (MCP) servers in the Smithery MCP registry. MCPs are tools that allow you to interact with other services to perform tasks. This tool allows you to find MCP servers by name, description, or other attributes. Each server on the registry comes with a set of available tools, which can be used once added.",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query for finding MCP servers. You can either write keywords if you want something broad or are referencing a specific server by name, or you can write a detailed description (1-2 sentences) specifying exactly what you are looking for. We perform hybrid search."
              },
              "n": {
                "type": "number",
                "maximum": 5,
                "description": "Number of results to return (default: 3)"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "use_tool",
          "description": "Execute a specific tool call on an MCP server.",
          "input_schema": {
            "type": "object",
            "properties": {
              "qualifiedName": {
                "type": "string",
                "description": "The qualified name of the server to use"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the tool to call"
                  },
                  "arguments": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "The arguments to pass to the tool"
                  }
                },
                "required": [
                  "name"
                ],
                "additionalProperties": false
              }
            },
            "required": [
              "qualifiedName",
              "parameters"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "search_servers",
        "use_tool"
      ]
    },
    "server_info_crawled": {
      "id": 10,
      "name": "Toolbox",
      "author": "@smithery/toolbox",
      "overview": "Toolbox dynamically routes to all MCPs in the Smithery registry based on your agent's need. When an MCP requires configuration, our tool will prompt the user to configure their tool with a callback link.\n\nRecommended use in Claude Desktop: This MCP provides a prompt that encourages Claude Desktop to use Smithery MCPs. You can include the prompt by clicking the \"Attach from MCP\" icon.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@smithery/toolbox",
      "remote_or_local": "Remote",
      "license": "Not specified",
      "usage_count": "10,881",
      "success_rate": "95.40%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@smithery_toolbox.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "search_servers",
          "description": "Search for Model Context Protocol (MCP) servers in the Smithery MCP registry. MCPs are tools that allow you to interact with other services to perform tasks. This tool allows you to find MCP servers by name, description, or other attributes. Each server on the registry comes with a set of available tools, which can be used once added.",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query for finding MCP servers. You can either write keywords if you want something broad or are referencing a specific server by name, or you can write a detailed description (1-2 sentences) specifying exactly what you are looking for. We perform hybrid search."
              },
              "n": {
                "type": "number",
                "maximum": 5,
                "description": "Number of results to return (default: 3)"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "use_tool",
          "description": "Execute a specific tool call on an MCP server.",
          "input_schema": {
            "type": "object",
            "properties": {
              "qualifiedName": {
                "type": "string",
                "description": "The qualified name of the server to use"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the tool to call"
                  },
                  "arguments": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "The arguments to pass to the tool"
                  }
                },
                "required": [
                  "name"
                ],
                "additionalProperties": false
              }
            },
            "required": [
              "qualifiedName",
              "parameters"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@smithery/toolbox/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "smitheryApiKey",
          "required": true,
          "description": "The API key to authenticate against Smithery services."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@smithery/toolbox/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0011.@smithery_toolbox_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 11
  }
}