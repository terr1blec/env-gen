{
  "labels": {
    "analysis": "The OpenRPC MCP Server provides a framework for interacting with JSON-RPC servers via the Model Context Protocol (MCP). Its core functionality revolves around making remote procedure calls (RPC) to other servers and discovering available methods on those servers. This is particularly useful for developers and systems that need to programmatically interact with JSON-RPC-compliant services, explore their capabilities, and call specific methods with parameters.",
    "reasoning": "The primary functionality is API interaction and remote method invocation, which fits squarely under the predefined \"API Integration\" category. Since the server facilitates method discovery and execution, it directly supports integrating with and managing external services. There is no secondary label as the core functionality is already well-covered by the primary label.",
    "primary_label": "API Integration",
    "secondary_labels": [],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1474,
    "server_name": "OpenRPC MCP Server",
    "rank_by_usage": 1475,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/openrpc-mcp-server_openrpc-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/openrpc-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "rpc_call",
          "description": "Call any JSON-RPC method on a server with parameters. A user would prompt: Call method <method> on <server url> with params <params>",
          "input_schema": {
            "type": "object",
            "properties": {
              "server": {
                "type": "string",
                "description": "Server URL"
              },
              "method": {
                "type": "string",
                "description": "JSON-RPC method name to call"
              },
              "params": {
                "type": "string",
                "description": "Stringified Parameters to pass to the method"
              }
            },
            "required": [
              "server",
              "method"
            ]
          },
          "annotations": null
        },
        {
          "name": "rpc_discover",
          "description": "This uses JSON-RPC to call `rpc.discover` which is part of the OpenRPC Specification for discovery for JSON-RPC servers. A user would prompt: What JSON-RPC methods does this server have? <server url>",
          "input_schema": {
            "type": "object",
            "properties": {
              "server": {
                "type": "string",
                "description": "Server URL"
              }
            },
            "required": [
              "server"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "rpc_call",
        "rpc_discover"
      ]
    },
    "server_info_crawled": {
      "id": 1474,
      "name": "OpenRPC MCP Server",
      "author": "openrpc-mcp-server",
      "overview": "A Model Context Protocol (MCP) server that provides JSON-RPC functionality through OpenRPC.",
      "repository_url": "https://github.com/shanejonas/openrpc-mpc-server",
      "homepage": "https://smithery.ai/server/openrpc-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/openrpc-mcp-server_openrpc-mcp-server.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "rpc_call",
          "description": "Call any JSON-RPC method on a server with parameters. A user would prompt: Call method <method> on <server url> with params <params>",
          "input_schema": {
            "type": "object",
            "properties": {
              "server": {
                "type": "string",
                "description": "Server URL"
              },
              "method": {
                "type": "string",
                "description": "JSON-RPC method name to call"
              },
              "params": {
                "type": "string",
                "description": "Stringified Parameters to pass to the method"
              }
            },
            "required": [
              "server",
              "method"
            ]
          },
          "annotations": null
        },
        {
          "name": "rpc_discover",
          "description": "This uses JSON-RPC to call `rpc.discover` which is part of the OpenRPC Specification for discovery for JSON-RPC servers. A user would prompt: What JSON-RPC methods does this server have? <server url>",
          "input_schema": {
            "type": "object",
            "properties": {
              "server": {
                "type": "string",
                "description": "Server URL"
              }
            },
            "required": [
              "server"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/openrpc-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/openrpc-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1475.openrpc-mcp-server_openrpc-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1364
  }
}