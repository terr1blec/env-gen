{
  "labels": {
    "analysis": "The MCP Server provides a comprehensive API integration with MyAnimeList, enabling users to access, search, and interact with anime and manga data. It supports fetching detailed information about anime and manga, retrieving rankings, seasonal content, and user-specific lists. Additionally, the server allows authenticated users to update and manage their personal anime and manga lists. This makes it particularly valuable for applications and users interested in anime/manga tracking, recommendations, and community information.",
    "reasoning": "The primary label \"API Integration\" is chosen because the server's core functionality revolves around interacting with the MyAnimeList API. The secondary labels \"Entertainment\" and \"Database Operations\" are selected because the server provides access to a rich database of anime and manga content, and it focuses on entertainment-related data. A custom label \"Anime & Manga\" is added as a more specific descriptor of the server's unique content focus.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "AI/ML Tools",
      "Database Operations"
    ],
    "custom_label": "Anime & Manga",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 743,
    "server_name": "MyAnimeList API Integration Server",
    "rank_by_usage": 744,
    "usage_count": "9",
    "original_file": "../crawler/smithery/@nicoaguerrero_myanimelist-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@nicoaguerrero/myanimelist-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 743,
      "name": "MyAnimeList API Integration Server",
      "author": "@nicoaguerrero/myanimelist-mcp-server",
      "overview": "Enable LLM clients to access and interact with MyAnimeList data including anime, manga, user profiles, and rankings. Perform searches, retrieve detailed information, and update user lists with authenticated requests. Enhance your applications with rich MyAnimeList content and personalized recommendations.",
      "repository_url": "https://github.com/nicoaguerrero/myanimelist-mcp-server",
      "homepage": "https://smithery.ai/server/@nicoaguerrero/myanimelist-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "9",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@nicoaguerrero_myanimelist-mcp-server.json",
      "tools_count": 15,
      "tools": [
        {
          "name": "get_anime",
          "description": "Deploy Server MyAnimeList API Integration Server @nicoaguerrero/myanimelist-mcp-server Try in Playground",
          "parameters": []
        },
        {
          "name": "get_anime_details",
          "description": "Fetches details of an anime by its ID from MyAnimeList. Args: anime_id (int): The ID of the anime to fetch details for. fields (List[str]): List of fields to include in the response. If None, includes common fields: id, title, main_pictures. Valid fields: id, title, main_picture, alternative_titles, start_date, end_date, synopsis, mean, rank, popularity, num_list_users, num_scoring_users, nsfw, created_at, updated_at, media_type, status, genres, my_list_status, num_episodes, start_season, broadcast, source, average_episode_duration, rating, pictures, background, related_anime, related_manga, recommendations, studios, statistics. Examples: - To get the score: get_anime_details(30230, fields=[\"mean\"]) - To get similar animes: get_anime_details(30230, fields=[\"recommendations\"]) - To get genres and synopsis: get_anime_details(30230, fields=[\"genres\", \"synopsis\"])",
          "parameters": []
        },
        {
          "name": "get_anime_ranking",
          "description": "Fetches anime rankings from MyAnimeList. Args: ranking_type (AnimeRanking): The type of ranking to fetch. Options: \"all\", \"airing\", \"upcoming\", \"tv\", \"ova\", \"movie\", \"special\", \"bypopularity\", \"favorite\". limit (int): The number of results to return (default is 10 and max 500). offset (int): The offset for pagination (default is 0).",
          "parameters": []
        },
        {
          "name": "get_seasonal_anime",
          "description": "Fetches seasonal anime from MyAnimeList. Args: season (Season): The season to fetch. Options: \"winter\", \"spring\", \"summer\", \"fall\". year (int): The year of the season. sort (SeasonSort, optional): Sort order by \"anime_score\" or \"anime_num_list_users\". Default is None. limit (int): The number of results to return (default is 10 and max 500). offset (int): The offset for pagination (default is 0).",
          "parameters": []
        },
        {
          "name": "get_anime_list",
          "description": "Fetches an anime list for a user from MyAnimeList. Args: username (str): The username of the MyAnimeList user. status (AnimeStatus): The status of the anime list to fetch. Options: \"watching\", \"completed\", \"on_hold\", \"dropped\", \"plan_to_watch\". sort (AnimeStatusSort, optional): Sort order by \"list_score\", \"list_updated_at\", \"anime_title\" or \"anime_start_date\". Default is None. limit (int): The number of results to return (default is 10 and max 500). offset (int): The offset for pagination (default is 0).",
          "parameters": []
        },
        {
          "name": "get_manga",
          "description": "Fetches a list of manga from MyAnimeList based on a search query. Args: q (str): The search query for the manga. limit (int): The number of results to return (default is 10 and max 100). offset (int): The offset for pagination (default is 0).",
          "parameters": []
        },
        {
          "name": "get_manga_details",
          "description": "Fetches details of a manga by its ID from MyAnimeList. Args: manga_id (int): The ID of the manga to fetch details for. fields (List[str]): List of fields to include in the response. If None, includes common fields: id, title, main_picture. Valid fields: id, title, main_picture, alternative_titles, start_date, end_date, synopsis, mean, rank, popularity, num_list_users, num_scoring_users, nsfw, created_at, updated_at, media_type, status, genres, my_list_status, num_volumes, num_chapters, authors, pictures, background, related_anime, related_manga, recommendations, serialization Examples: - To get the score: get_manga_details(30230, fields=[\"mean\"]) - To get similar mangas: get_manga_details(30230, fields=[\"recommendations\"]) - To get genres and synopsis: get_manga_details(30230, fields=[\"genres\", \"synopsis\"])",
          "parameters": []
        },
        {
          "name": "get_manga_ranking",
          "description": "Fetches manga rankings from MyAnimeList. Args: ranking_type (MangaRanking): The type of ranking to fetch. Options: \"all\", \"manga\", \"novels\", \"oneshot\", \"doujin\", \"manhwa\", \"manhua\", \"bypopularity\", \"favorite\". limit (int): The number of results to return (default is 10 and max 500). offset (int): The offset for pagination (default is 0).",
          "parameters": []
        },
        {
          "name": "get_manga_list",
          "description": "Fetches a manga list for a user from MyAnimeList. Args: username (str): The username of the MyAnimeList user. status (MangaStatus): The status of the manga list to fetch. Options: \"reading\", \"completed\", \"on_hold\", \"dropped\", \"plan_to_read\". sort (MangaStatusSort, optional): Sort order by \"list_score\", \"list_updated_at\", \"manga_title\" or \"manga_start_date\". Default is None. limit (int): The number of results to return (default is 10 and max 500). offset (int): The offset for pagination (default is 0).",
          "parameters": []
        },
        {
          "name": "get_suggested_anime",
          "description": "Fetches suggested anime for the current user from MyAnimeList. Args: limit (int): The number of results to return (default is 10 and max 100). offset (int): The offset for pagination (default is 0).",
          "parameters": []
        },
        {
          "name": "get_user_profile",
          "description": "Fetches the profile of the current user from MyAnimeList. Args: fields (str, optional): Set to \"anime_statistics\" to include anime statistics. Default is None.",
          "parameters": []
        },
        {
          "name": "delete_myanimelist_item",
          "description": "Deletes an anime from the authenticated user's MyAnimeList. Args: anime_id: The ID of the anime to delete.",
          "parameters": []
        },
        {
          "name": "delete_mymangalist_item",
          "description": "Deletes an anime from the authenticated user's MyAnimeList. Args: anime_id: The ID of the anime to delete.",
          "parameters": []
        },
        {
          "name": "update_myanimelist",
          "description": "Updates an anime's status in the authenticated user's MyAnimeList. Args: anime_id: The ID of the anime to update. status: The watch status (watching, completed, on_hold, dropped, plan_to_watch). score: The score given to the anime (0-10). num_watched_episodes: Number of episodes watched. is_rewatching: Whether the anime is being rewatched. priority: Priority of the anime (0-2). num_times_rewatched: Number of times the anime was rewatched. rewatch_value: Value of rewatching the anime (0-5). tags: Comma-separated tags for the anime. comments: Comments about the anime.",
          "parameters": []
        },
        {
          "name": "update_mymangalist",
          "description": "Updates a manga's status in the authenticated user's MyAnimeList. Args: manga_id: The ID of the manga to update. status: The read status (reading, completed, on_hold, dropped, plan_to_read). is_rereading: Whether the manga is being reread. score: The score given to the manga (0-10). num_volumes_read: Number of volumes read. num_chapters_read: Number of chapters read. priority: Priority of the manga (0-2). num_times_reread: Number of times the manga was reread. reread_value: Value of reread the manga (0-5). tags: Comma-separated tags for the manga. comments: Comments about the manga.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@nicoaguerrero/myanimelist-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "malClientSecret",
          "required": true,
          "description": "MyAnimeList API client secret"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@nicoaguerrero/myanimelist-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0744.@nicoaguerrero_myanimelist-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 726
  }
}