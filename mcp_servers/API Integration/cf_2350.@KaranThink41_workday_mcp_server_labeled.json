{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate integration between Workday, an enterprise HR and financial management platform, and language models. It provides tools to access employee data (e.g., leave balances) and other Workday resources through a standardized protocol. The primary use case appears to be enterprise automation and contextual data access for AI-driven applications, particularly in areas like HR and workforce management.",
    "reasoning": "The primary label \"Enterprise HR Integration\" was chosen because the server's core functionality revolves around integrating Workday's HR data with AI systems. The secondary label \"Data Analysis & Processing\" aligns with the tools' ability to retrieve and potentially analyze employee data. No custom label is needed as the predefined categories sufficiently cover the server's functionality.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2349,
    "server_name": "Workday MCP Server",
    "rank_by_usage": 2350,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@KaranThink41_workday_mcp_server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@KaranThink41/workday_mcp_server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2349,
      "name": "Workday MCP Server",
      "author": "@KaranThink41/workday_mcp_server",
      "overview": "Enable seamless integration of Workday data and services with language models through a standardized protocol. Facilitate dynamic access to Workday resources, tools, and prompts to enhance automation and contextual understanding. Streamline workflows by bridging Workday's enterprise capabilities with AI-driven applications.",
      "repository_url": "https://github.com/KaranThink41/workday_mcp",
      "homepage": "https://smithery.ai/server/@KaranThink41/workday_mcp_server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@KaranThink41_workday_mcp_server.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "workday_get_employees",
          "description": "Deploy Server Workday MCP Server @KaranThink41/workday_mcp_server Try in Playground workday_get_employees",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "type": "string"
            },
            {
              "name": "page_size",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "workday_get_eligible_leave_balance",
          "description": "Get the eligible absence types and leave balance for an employee from Workday.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@KaranThink41/workday_mcp_server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "workdayAcessToken",
          "required": true,
          "description": "Access Token for your Workday API"
        },
        {
          "name": "workdayClientSecret",
          "required": true,
          "description": "Client Secret for your Workday application"
        },
        {
          "name": "workdayRefreshToken",
          "required": true,
          "description": "Refresh Token for your Workday application"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@KaranThink41/workday_mcp_server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2350.@KaranThink41_workday_mcp_server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2018
  }
}