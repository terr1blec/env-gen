{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate interaction with Kong Konnect APIs through AI assistants. It provides tools for querying and analyzing API Gateway configurations, traffic, and analytics. The core functionality includes retrieving and analyzing API requests, listing services, routes, consumers, plugins, and control planes, as well as managing control plane group memberships. It enables natural language interactions to streamline API management and gain insights from API traffic data.",
    "reasoning": "The primary label \"API Integration\" was chosen because the server's main purpose is to interact with Kong Konnect APIs and provide a layer for AI assistants to query and analyze API Gateway configurations and traffic. The secondary label \"Data Analysis & Processing\" is relevant because the server offers tools to analyze API requests, traffic statistics, and breakdowns of usage data. There is no need for a custom label as the predefined categories adequately cover the server's functionality.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1852,
    "server_name": "Kong Konnect MCP Server",
    "rank_by_usage": 1853,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Kong_mcp-konnect.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Kong/mcp-konnect/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1852,
      "name": "Kong Konnect MCP Server",
      "author": "@Kong/mcp-konnect",
      "overview": "Enable AI assistants to interact with Kong Konnect APIs for querying and analyzing API Gateway configurations, traffic, and analytics. Streamline your API management and gain insights through natural language conversations with your AI assistant.",
      "repository_url": "https://github.com/Kong/mcp-konnect",
      "homepage": "https://smithery.ai/server/@Kong/mcp-konnect",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Kong_mcp-konnect.json",
      "tools_count": 10,
      "tools": [
        {
          "name": "query_api_requests",
          "description": "Deploy Server Kong Konnect MCP Server Claim Server @Kong/mcp-konnect Try in Playground query_api_requests",
          "parameters": []
        },
        {
          "name": "get_consumer_requests",
          "description": "Retrieve and analyze API requests made by a specific consumer. INPUT: - consumerId: String - ID of the consumer to analyze. The format of this field must be \"controlPlaneID:consumerId\". - timeRange: String - Time range for data retrieval (15M, 1H, 6H, 12H, 24H, 7D) - successOnly: Boolean - Filter to only show successful (2xx) requests (default: false) - failureOnly: Boolean - Filter to only show failed (non-2xx) requests (default: false) - maxResults: Number - Maximum number of results to return (1-1000) OUTPUT: - metadata: Object - Contains consumerId, totalRequests, timeRange, and filters - statistics: Object - Usage statistics including: - averageLatencyMs: Number - Average response time in milliseconds - successRate: Number - Percentage of successful requests - statusCodeDistribution: Array - Breakdown of requests by status code - serviceDistribution: Array - Breakdown of requests by service - requests: Array - List of requests with details for each request",
          "parameters": []
        },
        {
          "name": "list_services",
          "description": "List all services associated with a control plane. INPUT: - controlPlaneId: String - ID of the control plane - size: Number - Number of services to return (1-1000, default: 100) - offset: String (optional) - Pagination offset token from previous response OUTPUT: - metadata: Object - Contains controlPlaneId, size, offset, nextOffset, totalCount - services: Array - List of services with details for each including: - serviceId: String - Unique identifier for the service - name: String - Display name of the service - host: String - Target host for the service - port: Number - Target port for the service - protocol: String - Protocol used (http, https, grpc, etc.) - path: String - Path prefix for the service - retries: Number - Number of retries on failure - connectTimeout: Number - Connection timeout in milliseconds - writeTimeout: Number - Write timeout in milliseconds - readTimeout: Number - Read timeout in milliseconds - tags: Array - Tags associated with the service - enabled: Boolean - Whether the service is enabled - metadata: Object - Creation and update timestamps - relatedTools: Array - List of related tools for further analysis",
          "parameters": []
        },
        {
          "name": "list_routes",
          "description": "List all routes associated with a control plane. INPUT: - controlPlaneId: String - ID of the control plane - size: Number - Number of routes to return (1-1000, default: 100) - offset: String (optional) - Pagination offset token from previous response OUTPUT: - metadata: Object - Contains controlPlaneId, size, offset, nextOffset, totalCount - routes: Array - List of routes with details for each including: - routeId: String - Unique identifier for the route - name: String - Display name of the route - protocols: Array - Protocols this route accepts (http, https, grpc, etc.) - methods: Array - HTTP methods this route accepts - hosts: Array - Hostnames this route matches - paths: Array - URL paths this route matches - stripPath: Boolean - Whether to strip the matched path prefix - preserveHost: Boolean - Whether to preserve the host header - serviceId: String - ID of the service this route forwards to - enabled: Boolean - Whether the route is enabled - metadata: Object - Creation and update timestamps - relatedTools: Array - List of related tools for further analysis",
          "parameters": []
        },
        {
          "name": "list_consumers",
          "description": "List all consumers associated with a control plane. INPUT: - controlPlaneId: String - ID of the control plane - size: Number - Number of consumers to return (1-1000, default: 100) - offset: String (optional) - Pagination offset token from previous response OUTPUT: - metadata: Object - Contains controlPlaneId, size, offset, nextOffset, totalCount - consumers: Array - List of consumers with details for each including: - consumerId: String - Unique identifier for the consumer - username: String - Username for this consumer - customId: String - Custom identifier for this consumer - tags: Array - Tags associated with the consumer - enabled: Boolean - Whether the consumer is enabled - metadata: Object - Creation and update timestamps - relatedTools: Array - List of related tools for consumer analysis",
          "parameters": []
        },
        {
          "name": "list_plugins",
          "description": "List all plugins associated with a control plane. INPUT: - controlPlaneId: String - ID of the control plane - size: Number - Number of plugins to return (1-1000, default: 100) - offset: String (optional) - Pagination offset token from previous response OUTPUT: - metadata: Object - Contains controlPlaneId, size, offset, nextOffset, totalCount - plugins: Array - List of plugins with details for each including: - pluginId: String - Unique identifier for the plugin - name: String - Name of the plugin (e.g., rate-limiting, cors, etc.) - enabled: Boolean - Whether the plugin is enabled - config: Object - Plugin-specific configuration - protocols: Array - Protocols this plugin applies to - tags: Array - Tags associated with the plugin - scoping: Object - Defines plugin scope including: - consumerId: String - Consumer this plugin applies to (if any) - serviceId: String - Service this plugin applies to (if any) - routeId: String - Route this plugin applies to (if any) - global: Boolean - Whether this is a global plugin - metadata: Object - Creation and update timestamps - relatedTools: Array - List of related tools for plugin configuration",
          "parameters": []
        },
        {
          "name": "list_control_planes",
          "description": "List all control planes in your organization. INPUT: - pageSize: Number - Number of control planes per page (1-1000, default: 10) - pageNumber: Number (optional) - Page number to retrieve - filterName: String (optional) - Filter control planes by name - filterClusterType: String (optional) - Filter by cluster type (kubernetes, docker, etc.) - filterCloudGateway: Boolean (optional) - Filter by cloud gateway capability - labels: String (optional) - Filter by labels (format: 'key:value,existCheck') - sort: String (optional) - Sort field and direction (e.g. 'name,created_at desc') OUTPUT: - metadata: Object - Contains pageSize, pageNumber, totalPages, totalCount, filters, sort - controlPlanes: Array - List of control planes with details for each including: - controlPlaneId: String - Unique identifier for the control plane - name: String - Display name of the control plane - description: String - Description of the control plane - type: String - Type of the control plane - clusterType: String - Underlying cluster type - controlPlaneEndpoint: String - URL endpoint for the control plane - telemetryEndpoint: String - URL endpoint for telemetry - hasCloudGateway: Boolean - Whether cloud gateway is enabled - labels: Object - Labels assigned to this control plane - metadata: Object - Creation and update timestamps - usage: Object - Information about how to use these results",
          "parameters": []
        },
        {
          "name": "get_control_plane",
          "description": "Get detailed information about a specific control plane. INPUT: - controlPlaneId: String - ID of the control plane to retrieve OUTPUT: - controlPlaneDetails: Object - Detailed information including: - controlPlaneId: String - Unique identifier for the control plane - name: String - Display name of the control plane - description: String - Description of the control plane - type: String - Type of the control plane - clusterType: String - Underlying cluster type - controlPlaneEndpoint: String - URL endpoint for the control plane - telemetryEndpoint: String - URL endpoint for telemetry - hasCloudGateway: Boolean - Whether cloud gateway is enabled - labels: Object - Labels assigned to this control plane - metadata: Object - Creation and update timestamps - relatedTools: Array - List of related tools for further analysis",
          "parameters": []
        },
        {
          "name": "list_control_plane_group_memberships",
          "description": "List all control planes that are members of a specific control plane group. INPUT: - groupId: String - ID of the control plane group (control plane that acts as the group) - pageSize: Number - Number of members to return per page (1-1000, default: 10) - pageAfter: String (optional) - Cursor for pagination after a specific item OUTPUT: - metadata: Object - Contains groupId, pageSize, pageAfter, nextPageAfter, totalCount - members: Array - List of member control planes with details for each including: - controlPlaneId: String - Unique identifier for the control plane - name: String - Display name of the control plane - description: String - Description of the control plane - type: String - Type of the control plane - clusterType: String - Underlying cluster type - membershipStatus: Object - Group membership status including: - status: String - Current status (OK, CONFLICT, etc.) - message: String - Status message - conflicts: Array - List of configuration conflicts if any - metadata: Object - Creation and update timestamps - relatedTools: Array - List of related tools for group management",
          "parameters": []
        },
        {
          "name": "check_control_plane_group_membership",
          "description": "Check if a control plane is a member of any group. INPUT: - controlPlaneId: String - ID of the control plane to check OUTPUT: - controlPlaneId: String - ID of the control plane that was checked - groupMembership: Object - Membership information including: - isMember: Boolean - Whether the control plane is a member of any group - groupId: String - ID of the group this control plane belongs to (if any) - groupName: String - Name of the group this control plane belongs to - status: String - Membership status (OK, CONFLICT, etc.) - message: String - Status message - conflicts: Array - List of configuration conflicts if any - relatedTools: Array - List of related tools for group management",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Kong/mcp-konnect/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "accessToken",
          "required": true,
          "description": "Kong Konnect API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Kong/mcp-konnect/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1853.@Kong_mcp-konnect_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1644
  }
}