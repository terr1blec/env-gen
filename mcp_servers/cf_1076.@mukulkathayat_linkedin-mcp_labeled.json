{
  "labels": {
    "analysis": "The MCP Server is designed for seamless integration with LinkedIn, enabling dynamic access to LinkedIn data such as profiles, posts, companies, and interactions. It primarily facilitates data scraping, search functionalities, and engagement tracking on LinkedIn. Key capabilities include scraping profile information, company details, posts, reactions, and job listings, as well as filtering and searching data based on various parameters. The server appears to cater to professionals, recruiters, researchers, and businesses looking to automate and streamline LinkedIn data extraction for analytics, lead generation, or competitive intelligence.",
    "reasoning": "The primary label is \"Web Scraping & Automation\" because the server's core function revolves around scraping LinkedIn data and automating interactions. \"Social Media\" is a secondary label due to its specific focus on LinkedIn, a prominent social networking platform. There are no predefined categories that perfectly encapsulate the server's LinkedIn-specific functionality beyond these, so no custom label is needed.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Social Media"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1075,
    "server_name": "LinkedIn MCP Server",
    "rank_by_usage": 1076,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@mukulkathayat_linkedin-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mukulkathayat/linkedin-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1075,
      "name": "LinkedIn MCP Server",
      "author": "@mukulkathayat/linkedin-mcp",
      "overview": "Provide seamless integration with LinkedIn data and actions through a standardized protocol. Enable LLM applications to access LinkedIn profiles, posts, and interactions dynamically. Enhance your agents with real-time LinkedIn context and capabilities.",
      "repository_url": "https://github.com/mukulkathayat/linkedin-mcp",
      "homepage": "https://smithery.ai/server/@mukulkathayat/linkedin-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mukulkathayat_linkedin-mcp.json",
      "tools_count": 45,
      "tools": [
        {
          "name": "profiles",
          "description": "Deploy Server LinkedIn MCP Server @mukulkathayat/linkedin-mcp Try in Playground",
          "parameters": []
        },
        {
          "name": "companies",
          "description": "Can scrape up to 100 companies data in a go Request Body Example: \"links\": [ \"https://www.linkedin.com/company/huzzle-app/\", \"http://www.linkedin.com/company/aep-energy\" \"count\": 1",
          "parameters": []
        },
        {
          "name": "company_posts",
          "description": "Can scrape 100 posts of 50 linkedin companies Request Body Example: \"links\": [ \"https://www.linkedin.com/company/huzzle-app/\", \"http://www.linkedin.com/company/aep-energy\" \"count\": 1",
          "parameters": []
        },
        {
          "name": "person",
          "description": "Scrapes all data of a person from linkedin Request Body Example: \"link\": \"https://www.linkedin.com/in/ingmar-klein\"",
          "parameters": []
        },
        {
          "name": "person_skills",
          "description": "Scrapes all skills of a linkedin user Request Body Example: \"link\": \"https://www.linkedin.com/in/ingmar-klein\"",
          "parameters": []
        },
        {
          "name": "search_people_with_filters",
          "description": "Search for people from linkedin using all filters as per linkedin Request Body Example: \"keyword\": \"ingmar\", \"page\": 1, \"title_free_text\": \"CEO\", \"company_free_text\": \"Huzzle\", \"first_name\": \"Ingmar\", \"last_name\": \"Klein\"",
          "parameters": []
        },
        {
          "name": "company",
          "description": "Request Body Example: \"https://www.linkedin.com/company/huzzle-app/\", \"http://www.linkedin.com/company/aep-energy\"",
          "parameters": []
        },
        {
          "name": "company_jobs",
          "description": "Scrapes jobs of a specific linkedin company Request Body Example: \"company_url\": \"https://www.linkedin.com/company/google\", \"starts_from\": 0, \"count\": 10",
          "parameters": []
        },
        {
          "name": "search_company_with_filters",
          "description": "Search for companies as per linkedin search engine Request Body Example: \"keyword\": \"G\", \"page\": 1, \"company_size_list\": \"A,D\", \"hasJobs\": false, \"location_list\": \"\", \"industry_list\": \"\"",
          "parameters": []
        },
        {
          "name": "post",
          "description": "Request Body Example: \"query\": \"Top 10\", \"filters\": [ \"key\": \"datePosted\", \"values\": \"past-week\"",
          "parameters": []
        },
        {
          "name": "search_posts",
          "description": "Search posts as per linkedin.com search engine (with filters) Request Body Example: \"page\": 1, \"query\": \"Top 10\", \"filters\": [ \"key\": \"datePosted\", \"values\": \"past-week\"",
          "parameters": []
        },
        {
          "name": "profile_updates",
          "description": "Scrapes updates posted by a linkedin user NOTE: API doc specifies profile_url and page as required GET parameters. Get Request Parameters: - profile_url: LinkedIn profile URL (paramType: STRING, required) (e.g., \"http://www.linkedin.com/in/ingmar-klein\") - page: Page number (paramType: NUMBER, required) (e.g., 1) - paginationToken: For pagination (paramType: STRING, optional)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "comments_from_recent_activity",
          "description": "Scrapes comments posted by a person as per his recent activity NOTE: API doc specifies profile_url and page as required GET parameters. Get Request Parameters: - profile_url: LinkedIn profile URL (paramType: STRING, required) (e.g., \"http://www.linkedin.com/in/ingmar-klein\") - page: Page number (paramType: NUMBER, required) (e.g., 1) - paginationToken: For pagination (paramType: STRING, optional)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "company_updates",
          "description": "Scrapes updates of a given company NOTE: API doc specifies company_url and page as required GET parameters. Get Request Parameters: - company_url: LinkedIn company URL (paramType: STRING, required) (e.g., \"https://www.linkedin.com/company/google\") - page: Page number (paramType: STRING, required) (e.g., \"1\") - paginationToken: For pagination (paramType: STRING, optional)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "school_alumini_count_per_skill",
          "description": "Returns alumni count of a school/university NOTE: API doc example uses camelCase 'schoolUrl' in the request body. NOTE: This tool failed during testing with 400 Bad Request. Request Body Example: \"keyword\": \"\", \"schoolUrl\": \"https://www.linkedin.com/school/abertay-university\", \"skillExplicits\": \"260\"",
          "parameters": []
        },
        {
          "name": "company_employee",
          "description": "Scrapes 12 people from a company (People Tab) NOTE: API doc specifies company_id and page as required GET parameters. NOTE: This tool failed persistently during testing (status 400, error: Couldn't recognize the parameter keys provided), unable to recognize parameters even when matching doc.",
          "parameters": []
        },
        {
          "name": "post_reactions",
          "description": "Data of the people who reacted to a particular post NOTE: Obtain 'reactionsUrn' from 'Company Updates' or 'Profile Updates' endpoints. Get Request Parameters: - reactionsUrn: URN for the post reactions (paramType: STRING, required) (e.g., \"urn:li:activity:7219434359085252608/reactions\") - paginationToken: For pagination (paramType: STRING, optional)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "post_comments",
          "description": "Scrapes all commenters data who commented below a post NOTE: Obtain 'commentsUrn' from 'Company Updates' or 'Profile Updates' endpoints. Get Request Parameters: - commentsUrn: URN for the post comments (paramType: STRING, required) (e.g., \"urn:li:activity:7219434359085252608/comments\") - paginationToken: For pagination (paramType: STRING, optional)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "post_reposts",
          "description": "Scrapes all Reposters data who reposted a post NOTE: Obtain 'repostsUrn' from 'Company Updates' or 'Profile Updates' endpoints. Get Request Parameters: - repostsUrn: URN for the post reposts (paramType: STRING, required) (e.g., \"urn:li:activity:7219434359085252608/reposts\") - paginationToken: For pagination (paramType: STRING, optional)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_posts_with_filters",
          "description": "Search for posts as per linkedin using all the available filters NOTE: API doc shows this endpoint uses different parameter names than previously implemented. Get Request Parameters: - query: Search term (paramType: STRING, optional) (e.g., \"Top 10\") - sort_by: Sorting option (paramType: STRING, optional) - from_member: Filter by member (paramType: STRING, optional) - from_organization: Filter by organization (paramType: STRING, optional) - author_job_title: Filter by author's job title (paramType: STRING, optional) - author_company: Filter by author's company (paramType: STRING, optional) - content_type: Filter by content type (paramType: STRING, optional) - mentions_organization: Filter by mentioned organization (paramType: STRING, optional) - author_industry: Filter by author's industry (paramType: STRING, optional) - mentions_member: Filter by mentioned member (paramType: STRING, optional) - page: Page number (paramType: STRING, optional) (e.g., \"1\")",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_jobs",
          "description": "Search for jobs with filters as per linkedin NOTE: API doc shows this endpoint uses different parameter names than previously implemented. Get Request Parameters: - query: Job search keywords (paramType: STRING, required) (e.g., \"software engineer\") - page: Page number (paramType: STRING, required) (e.g., \"1\") - searchLocationId: Location ID (paramType: STRING, optional) (e.g., \"Europe\") - experience: Experience level (paramType: STRING, optional) - postedAgo: Filter by post date (paramType: STRING, optional) - locationIdsList: List of location IDs (paramType: STRING, optional) - sortBy: Sort results by (paramType: STRING, optional) - titleIdsList: List of job title IDs (paramType: STRING, optional) - workplaceType: Type of workplace (paramType: STRING, optional) - functionIdsList: List of function IDs (paramType: STRING, optional) - industryIdsList: List of industry IDs (paramType: STRING, optional) - jobType: Type of job (paramType: STRING, optional) - companyIdsList: List of company IDs (paramType: STRING, optional) - easyApply: Filter for easy apply jobs (paramType: STRING, optional)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "job_details",
          "description": "Get detailed information about a specific job Get Request Parameters: - jobId: LinkedIn job ID (paramType: STRING, required) (e.g., \"3862806121\" - obtain from search results)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "similar_profiles",
          "description": "Returns similar profiles to a given linkedin profile url Get Request Parameters: - profileUrl: LinkedIn profile URL (paramType: STRING, required) (e.g., \"https://www.linkedin.com/in/williamhgates/\")",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "suggestion_location",
          "description": "Suggestions per query Get Request Parameters: - query: Search query (paramType: STRING, required) (e.g., \"California\")",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "suggestion_company",
          "description": "Suggestions per query Get Request Parameters: - query: Search query (paramType: STRING, required) (e.g., \"Google\")",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "suggestion_school",
          "description": "Suggestions per query Get Request Parameters: - query: Search query (paramType: STRING, required) (e.g., \"Stanford\")",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "suggestion_industry",
          "description": "Suggestions per query Get Request Parameters: - query: Search query (paramType: STRING, required) (e.g., \"Technology\")",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "suggestion_service_catagory",
          "description": "Suggestions as per query Get Request Parameters: - query: Search query (paramType: STRING, required) (e.g., \"Consulting\")",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "suggestion_person",
          "description": "Returns a list of people suggestion from linkedin. Get Request Parameters: - query: Search query (paramType: STRING, required) (e.g., \"Bill Gates\")",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_geourns",
          "description": "Suggestions per query NOTE: Failed during testing when keyword contained spaces (e.g., \"New York\"). Needs URL encoding or API fix. Get Request Parameters: - keyword: Search keyword (paramType: STRING, required) (e.g., \"California\", avoid spaces)",
          "parameters": [
            {
              "name": "Suggestions",
              "required": false,
              "type": "string"
            },
            {
              "name": "per",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "suggestion_function",
          "description": "Gets suggestions for Job Function Get Request Parameters: - query: Search query (paramType: STRING, optional) (e.g., \"Engineering\")",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "suggestion_company_size",
          "description": "Suggestions for company size filter",
          "parameters": [
            {
              "name": "suggestion_company_size",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "suggestion_language",
          "description": "Suggestions for language filter",
          "parameters": [
            {
              "name": "suggestion_language",
              "required": false,
              "type": "string"
            },
            {
              "name": "Suggestions",
              "required": false,
              "type": "string"
            },
            {
              "name": "for",
              "required": false,
              "type": "string"
            },
            {
              "name": "language",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "profiles_david",
          "description": "Scrape 100 profiles in a single API call NOTE: Marked as private/premium in documentation. Request Body Example: \"links\": [ \"http://www.linkedin.com/in/luke-sharp-b3838719a\", \"http://www.linkedin.com/in/hollie-smith-96ab44b5\"",
          "parameters": [
            {
              "name": "Request",
              "required": false,
              "type": "string"
            },
            {
              "name": "Body",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "private_chtiouisk",
          "description": "This is a private endpoint for our premium user NOTE: Marked as private/premium in documentation. Request Body Example: \"links\": [ \"http://www.linkedin.com/in/luke-sharp-b3838719a\", \"http://www.linkedin.com/in/rodneydbainjr\" \"count\": 5",
          "parameters": [
            {
              "name": "Request",
              "required": false,
              "type": "string"
            },
            {
              "name": "Body",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "person_data_with_open_to_work_flag",
          "description": "Scrapes person data with open to work flag Request Body Example: \"link\": \"https://www.linkedin.com/in/ingmar-klein\"",
          "parameters": []
        },
        {
          "name": "original_search_posts_with_filters",
          "description": "Search for posts as per linkedin using all the available filters NOTE: Marked as private/premium in documentation. Get Request Parameters: - query: Search query (paramType: STRING, optional) - author_company: Filter by author's company (paramType: STRING, optional) - author_job_title: Filter by author's job title (paramType: STRING, optional) - author_industry: Filter by author's industry (paramType: STRING, optional) - from_member: Filter by member (paramType: STRING, optional) - from_organization: Filter by organization (paramType: STRING, optional) - mentions_member: Filter by mentioned member (paramType: STRING, optional) - mentions_organization: Filter by mentioned organization (paramType: STRING, optional) - content_type: Filter by content type (paramType: STRING, optional) - sort_by: Sort results by (paramType: STRING, optional) - page: Page number (paramType: STRING, optional)",
          "parameters": []
        },
        {
          "name": "private_company_insights_2",
          "description": "Private endpoint to scrapes company insights NOTE: Marked as private/premium in documentation. Get Request Parameters: - link: Company LinkedIn URL (paramType: STRING, required)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "post_reposts_original",
          "description": "Private\n\n    NOTE: Marked as private/premium in documentation.\n    \n    Get Request Parameters:\n    - repostsUrn: URN for the post reposts (paramType: STRING, required)\n    - page: Page number (paramType: STRING, required)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "profile_updates_original",
          "description": "Private\n\n    NOTE: Marked as private/premium in documentation.\n    \n    Get Request Parameters:\n    - profile_url: LinkedIn profile URL (paramType: STRING, required)\n    - page: Page number (paramType: STRING, required)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "company_updates_original",
          "description": "Original data NOTE: Marked as private/premium in documentation. Get Request Parameters: - company_url: LinkedIn company URL (paramType: STRING, required) - page: Page number (paramType: STRING, required)",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "Request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "profile_posts_all",
          "description": "This endpoint scrapes all posts posted by a user at linkedin.com since joined. NOTE: Marked as private/premium in documentation. Request Body Example: \"link\": \"https://www.linkedin.com/in/ingmar-klein\"",
          "parameters": []
        },
        {
          "name": "person_data_with_experiences",
          "description": "Scrapes all linkedin profile data alongwith all the experiences. Request Body Example: \"link\": \"https://www.linkedin.com/in/ingmar-klein\"",
          "parameters": []
        },
        {
          "name": "person_data_with_languages",
          "description": "Scrapers person data with all languages data Request Body Example: \"link\": \"https://www.linkedin.com/in/matiss-brunavs/\"",
          "parameters": []
        },
        {
          "name": "person_data_with_educations",
          "description": "Scrapers person data along with all the educations data. Request Body Example: \"link\": \"https://www.linkedin.com/in/ingmar-klein\"",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mukulkathayat/linkedin-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "linkedinApiKey",
          "required": true,
          "description": "LinkedIn API Key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mukulkathayat/linkedin-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1076.@mukulkathayat_linkedin-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1053
  }
}