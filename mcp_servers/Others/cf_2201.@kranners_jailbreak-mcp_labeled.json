{
  "labels": {
    "analysis": "The MCP Server is designed to enable unrestricted access to tools and resources by \"jailbreaking\" limitations imposed by the Model Context Protocol. It focuses on managing and configuring modes that expose different sets of capabilities, allowing users to selectively enable or disable features. The primary function appears to be providing flexibility and control over tool availability within the MCP framework. The available tools are centered around managing these modes, enabling dynamic switching between different configurations.",
    "reasoning": "The \"Configuration & Mode Management\" custom label is chosen because the server's core functionality revolves around managing different modes that control tool exposure. While this could loosely fit under \"Development Tools\" due to its organizational nature, the predefined categories don't accurately capture the specialized mode-switching capability. \"API Integration\" could be a secondary label as the server appears to wrap and forward commands, but it seems less central to the core functionality.",
    "primary_label": "Others",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": "Custom MCP Mode Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2200,
    "server_name": "Jailbreak MCP Server",
    "rank_by_usage": 2201,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@kranners_jailbreak-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@kranners/jailbreak-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2200,
      "name": "Jailbreak MCP Server",
      "author": "@kranners/jailbreak-mcp",
      "overview": "Enable full utilization of the Model Context Protocol by exposing all tools, resources, and prompts without limitations. Manage context window usage efficiently with configurable modes that allow selective exposure of capabilities. Simplify integration with MCP clients by wrapping and forwarding commands to respective MCP servers seamlessly.",
      "repository_url": "https://github.com/kranners/jailbreak-mcp",
      "homepage": "https://smithery.ai/server/@kranners/jailbreak-mcp",
      "remote_or_local": "Remote",
      "license": "GPL-3.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@kranners_jailbreak-mcp.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "list_modes",
          "description": "Deploy Server Jailbreak MCP Server Claim Server @kranners/jailbreak-mcp Try in Playground",
          "parameters": [
            {
              "name": "list_modes",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "change_mode",
          "description": "Change to a new MCP mode with different tools. Get the available modes with list_modes.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@kranners/jailbreak-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@kranners/jailbreak-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2201.@kranners_jailbreak-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1898
  }
}