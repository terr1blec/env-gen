{
  "labels": {
    "analysis": "The MCP Server \"Untun Secure Tunnel Manager\" is designed to manage secure network tunnels between local servers and the public internet using natural language commands. It abstracts away complex CLI operations by providing simple commands to start, list, and stop tunnels, making it easier to expose local services to the internet for development and testing purposes. The core functionality revolves around network connectivity and port management.",
    "reasoning": "The primary label is chosen because the server's main function is managing network tunnels, which is a form of interconnectivity. Secondary labels are selected because the server simplifies system operations and could be useful for developing web services. No custom label is needed as the predefined categories sufficiently cover the functionality.",
    "primary_label": "Others",
    "secondary_labels": [
      "Development Tools",
      "Operating System"
    ],
    "custom_label": "Network Management",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 887,
    "server_name": "Untun Secure Tunnel Manager",
    "rank_by_usage": 888,
    "usage_count": "4",
    "original_file": "../crawler/smithery/@minte-app_untun-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@minte-app/untun-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "start_tunnel",
          "description": "Creates a secure tunnel from a public internet address to your local server.\n  \n  This tool will:\n  - Start an untun tunnel process connecting to your specified local URL\n  - Return a public URL that can be used to access your local server\n  - Allow you to name your tunnel for easier management\n  \n  After starting a tunnel, wait a few seconds and use 'list_tunnels' to check its status and get the public URL.",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The local URL to expose (e.g., http://localhost:3000)"
              },
              "name": {
                "type": "string",
                "description": "Optional custom name for the tunnel. If not provided, 'default' will be used."
              }
            },
            "required": [
              "url"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {}
        },
        {
          "name": "stop_tunnel",
          "description": "Stops a running tunnel or all local tunnels.\n  \n  This tool will:\n  - Stop a specific tunnel identified by name (if provided)\n  - Stop all local tunnels (if no name is provided)\n  - Only affects tunnels running on the current machine\n  - Will not affect tunnels running on other machines\n  \n  After stopping tunnels, you can use 'list_tunnels' to confirm they've been terminated.",
          "input_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Optional name of a specific tunnel to stop. If not provided, all local tunnels will be stopped."
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {}
        },
        {
          "name": "list_tunnels",
          "description": "Lists all active tunnels including their status and details.\n  \n  This tool will:\n  - Show all tunnels in the registry\n  - Auto-detect any running tunnels not in the registry\n  - Display tunnel status, name, URLs, and runtime information\n  - Indicate whether tunnels are local or running on remote machines\n  \n  Use this tool to check the status of your tunnels and get their public URLs.",
          "input_schema": {
            "type": "object"
          },
          "annotations": {
            "title": null,
            "readOnlyHint": null,
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": null
          }
        }
      ],
      "tool_count": 3,
      "tool_names": [
        "start_tunnel",
        "stop_tunnel",
        "list_tunnels"
      ]
    },
    "server_info_crawled": {
      "id": 887,
      "name": "Untun Secure Tunnel Manager",
      "author": "@minte-app/untun-mcp",
      "overview": "Create and manage secure tunnels from your local servers to the public internet using simple natural language commands. Easily start, list, and stop tunnels without complex CLI usage or multiple terminal sessions. Streamline local development by controlling all your tunnels through your AI assistant.",
      "repository_url": "https://github.com/minte-app/untun-mcp",
      "homepage": "https://smithery.ai/server/@minte-app/untun-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "4",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@minte-app_untun-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "start_tunnel",
          "description": "Creates a secure tunnel from a public internet address to your local server.\n  \n  This tool will:\n  - Start an untun tunnel process connecting to your specified local URL\n  - Return a public URL that can be used to access your local server\n  - Allow you to name your tunnel for easier management\n  \n  After starting a tunnel, wait a few seconds and use 'list_tunnels' to check its status and get the public URL.",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The local URL to expose (e.g., http://localhost:3000)"
              },
              "name": {
                "type": "string",
                "description": "Optional custom name for the tunnel. If not provided, 'default' will be used."
              }
            },
            "required": [
              "url"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {}
        },
        {
          "name": "stop_tunnel",
          "description": "Stops a running tunnel or all local tunnels.\n  \n  This tool will:\n  - Stop a specific tunnel identified by name (if provided)\n  - Stop all local tunnels (if no name is provided)\n  - Only affects tunnels running on the current machine\n  - Will not affect tunnels running on other machines\n  \n  After stopping tunnels, you can use 'list_tunnels' to confirm they've been terminated.",
          "input_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Optional name of a specific tunnel to stop. If not provided, all local tunnels will be stopped."
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {}
        },
        {
          "name": "list_tunnels",
          "description": "Lists all active tunnels including their status and details.\n  \n  This tool will:\n  - Show all tunnels in the registry\n  - Auto-detect any running tunnels not in the registry\n  - Display tunnel status, name, URLs, and runtime information\n  - Indicate whether tunnels are local or running on remote machines\n  \n  Use this tool to check the status of your tunnels and get their public URLs.",
          "input_schema": {
            "type": "object"
          },
          "annotations": {
            "title": null,
            "readOnlyHint": null,
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": null
          }
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@minte-app/untun-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@minte-app/untun-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0888.@minte-app_untun-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 869
  }
}