{
  "labels": {
    "analysis": "The MCP Server is designed to enhance problem-solving capabilities through systematic thinking and mental models. Its tools focus on structured reasoning, collaborative analysis, and methodical inquiry. Key functionalities include applying mental models, debugging approaches, decision frameworks, and metacognitive monitoring. The server also supports session management for tracking and exporting reasoning processes. It is predominantly a tool for cognitive enhancement, logical analysis, and structured thinking rather than specific domain operations.",
    "reasoning": "The primary label \"Decision Support\" captures the server's core functionality of aiding structured decision-making and problem-solving. Secondary labels \"Collaborative Tools\" and \"Cognitive Enhancement\" reflect its ability to facilitate group reasoning and improve thinking processes. A custom label is added to highlight its niche as a \"Structured Reasoning Assistant\" due to its unique focus on systematic thinking methodologies.",
    "primary_label": "Others",
    "secondary_labels": [],
    "custom_label": "Structured Reasoning Assistant",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 28,
    "server_name": "Clear Thought",
    "rank_by_usage": 29,
    "usage_count": "4,112",
    "original_file": "../crawler/smithery/@waldzellai_clear-thought.json",
    "mode": "smithery",
    "timestamp": 1751937975,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@waldzellai/clear-thought/mcp?config=eyJkZWJ1ZyI6IGZhbHNlLCAiZW5hYmxlTWV0cmljcyI6IGZhbHNlLCAic2Vzc2lvblRpbWVvdXQiOiAzNjAwMDAwLCAibWF4VGhvdWdodHNQZXJTZXNzaW9uIjogMTAwfQ==&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "sequentialthinking",
          "description": "Process sequential thoughts with branching, revision, and memory management capabilities",
          "input_schema": {
            "type": "object",
            "properties": {
              "thought": {
                "type": "string",
                "description": "The thought content"
              },
              "thoughtNumber": {
                "type": "number",
                "description": "Current thought number in sequence"
              },
              "totalThoughts": {
                "type": "number",
                "description": "Total expected thoughts in sequence"
              },
              "nextThoughtNeeded": {
                "type": "boolean",
                "description": "Whether the next thought is needed"
              },
              "isRevision": {
                "type": "boolean",
                "description": "Whether this is a revision of a previous thought"
              },
              "revisesThought": {
                "type": "number",
                "description": "Which thought number this revises"
              },
              "branchFromThought": {
                "type": "number",
                "description": "Which thought this branches from"
              },
              "branchId": {
                "type": "string",
                "description": "Unique identifier for this branch"
              },
              "needsMoreThoughts": {
                "type": "boolean",
                "description": "Whether more thoughts are needed"
              }
            },
            "required": [
              "thought",
              "thoughtNumber",
              "totalThoughts",
              "nextThoughtNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "mentalmodel",
          "description": "Apply mental models to analyze problems systematically",
          "input_schema": {
            "type": "object",
            "properties": {
              "modelName": {
                "type": "string",
                "enum": [
                  "first_principles",
                  "opportunity_cost",
                  "error_propagation",
                  "rubber_duck",
                  "pareto_principle",
                  "occams_razor"
                ],
                "description": "Name of the mental model"
              },
              "problem": {
                "type": "string",
                "description": "The problem being analyzed"
              },
              "steps": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Steps to apply the model"
              },
              "reasoning": {
                "type": "string",
                "description": "Reasoning process"
              },
              "conclusion": {
                "type": "string",
                "description": "Conclusions drawn"
              }
            },
            "required": [
              "modelName",
              "problem",
              "steps",
              "reasoning",
              "conclusion"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "debuggingapproach",
          "description": "Apply systematic debugging approaches to identify and resolve issues",
          "input_schema": {
            "type": "object",
            "properties": {
              "approachName": {
                "type": "string",
                "enum": [
                  "binary_search",
                  "reverse_engineering",
                  "divide_conquer",
                  "backtracking",
                  "cause_elimination",
                  "program_slicing",
                  "log_analysis",
                  "static_analysis",
                  "root_cause_analysis",
                  "delta_debugging",
                  "fuzzing",
                  "incremental_testing"
                ],
                "description": "Debugging approach"
              },
              "issue": {
                "type": "string",
                "description": "Description of the issue being debugged"
              },
              "steps": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Steps taken to debug"
              },
              "findings": {
                "type": "string",
                "description": "Findings discovered during debugging"
              },
              "resolution": {
                "type": "string",
                "description": "How the issue was resolved"
              }
            },
            "required": [
              "approachName",
              "issue",
              "steps",
              "findings",
              "resolution"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "collaborativereasoning",
          "description": "Facilitate collaborative reasoning with multiple perspectives and personas",
          "input_schema": {
            "type": "object",
            "properties": {
              "topic": {
                "type": "string"
              },
              "personas": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "expertise": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "background": {
                      "type": "string"
                    },
                    "perspective": {
                      "type": "string"
                    },
                    "biases": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "communication": {
                      "type": "object",
                      "properties": {
                        "style": {
                          "type": "string",
                          "enum": [
                            "formal",
                            "casual",
                            "technical",
                            "creative"
                          ]
                        },
                        "tone": {
                          "type": "string",
                          "enum": [
                            "analytical",
                            "supportive",
                            "challenging",
                            "neutral"
                          ]
                        }
                      },
                      "required": [
                        "style",
                        "tone"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "expertise",
                    "background",
                    "perspective",
                    "biases",
                    "communication"
                  ],
                  "additionalProperties": false
                }
              },
              "contributions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "personaId": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "observation",
                        "question",
                        "insight",
                        "concern",
                        "suggestion",
                        "challenge",
                        "synthesis"
                      ]
                    },
                    "confidence": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1
                    },
                    "referenceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "personaId",
                    "content",
                    "type",
                    "confidence"
                  ],
                  "additionalProperties": false
                }
              },
              "stage": {
                "type": "string",
                "enum": [
                  "problem-definition",
                  "ideation",
                  "critique",
                  "integration",
                  "decision",
                  "reflection"
                ]
              },
              "activePersonaId": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "iteration": {
                "type": "number"
              },
              "nextContributionNeeded": {
                "type": "boolean"
              }
            },
            "required": [
              "topic",
              "personas",
              "contributions",
              "stage",
              "activePersonaId",
              "sessionId",
              "iteration",
              "nextContributionNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "decisionframework",
          "description": "Apply structured decision-making frameworks",
          "input_schema": {
            "type": "object",
            "properties": {
              "decisionStatement": {
                "type": "string"
              },
              "options": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "description"
                  ],
                  "additionalProperties": false
                }
              },
              "analysisType": {
                "type": "string"
              },
              "stage": {
                "type": "string"
              },
              "decisionId": {
                "type": "string"
              },
              "iteration": {
                "type": "number"
              },
              "nextStageNeeded": {
                "type": "boolean"
              }
            },
            "required": [
              "decisionStatement",
              "options",
              "analysisType",
              "stage",
              "decisionId",
              "iteration",
              "nextStageNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "metacognitivemonitoring",
          "description": "Monitor and assess thinking processes and knowledge",
          "input_schema": {
            "type": "object",
            "properties": {
              "task": {
                "type": "string"
              },
              "stage": {
                "type": "string"
              },
              "overallConfidence": {
                "type": "number"
              },
              "uncertaintyAreas": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "recommendedApproach": {
                "type": "string"
              },
              "monitoringId": {
                "type": "string"
              },
              "iteration": {
                "type": "number"
              },
              "nextAssessmentNeeded": {
                "type": "boolean"
              }
            },
            "required": [
              "task",
              "stage",
              "overallConfidence",
              "uncertaintyAreas",
              "recommendedApproach",
              "monitoringId",
              "iteration",
              "nextAssessmentNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "socraticmethod",
          "description": "Guide inquiry through systematic questioning",
          "input_schema": {
            "type": "object",
            "properties": {
              "claim": {
                "type": "string",
                "description": "The main claim or topic being explored"
              },
              "premises": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Supporting premises or assumptions"
              },
              "conclusion": {
                "type": "string",
                "description": "Conclusion or insight reached"
              },
              "question": {
                "type": "string",
                "description": "Socratic question being asked"
              },
              "stage": {
                "type": "string",
                "enum": [
                  "clarification",
                  "assumptions",
                  "evidence",
                  "perspectives",
                  "implications",
                  "questions"
                ],
                "description": "Method stage"
              },
              "argumentType": {
                "type": "string",
                "enum": [
                  "deductive",
                  "inductive",
                  "abductive",
                  "analogical"
                ],
                "description": "Type of argument"
              },
              "confidence": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Confidence level (0.0-1.0)"
              },
              "sessionId": {
                "type": "string",
                "description": "Session identifier"
              },
              "iteration": {
                "type": "number",
                "description": "Current iteration"
              },
              "nextArgumentNeeded": {
                "type": "boolean",
                "description": "Whether next argument is needed"
              }
            },
            "required": [
              "claim",
              "premises",
              "conclusion",
              "question",
              "stage",
              "argumentType",
              "confidence",
              "sessionId",
              "iteration",
              "nextArgumentNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "creativethinking",
          "description": "Engage in creative and lateral thinking approaches",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Creative prompt or challenge"
              },
              "ideas": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Ideas generated"
              },
              "techniques": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Techniques used"
              },
              "connections": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Connections made"
              },
              "insights": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Novel insights"
              },
              "sessionId": {
                "type": "string",
                "description": "Session identifier"
              },
              "iteration": {
                "type": "number",
                "description": "Current iteration"
              },
              "nextIdeaNeeded": {
                "type": "boolean",
                "description": "Whether more creativity is needed"
              }
            },
            "required": [
              "prompt",
              "ideas",
              "techniques",
              "connections",
              "insights",
              "sessionId",
              "iteration",
              "nextIdeaNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "systemsthinking",
          "description": "Analyze complex systems and their interactions",
          "input_schema": {
            "type": "object",
            "properties": {
              "system": {
                "type": "string",
                "description": "System being analyzed"
              },
              "components": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Components identified"
              },
              "relationships": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "from": {
                      "type": "string"
                    },
                    "to": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "strength": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "from",
                    "to",
                    "type"
                  ],
                  "additionalProperties": false
                },
                "description": "Relationships between components"
              },
              "feedbackLoops": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "components": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "positive",
                        "negative"
                      ]
                    },
                    "description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "components",
                    "type",
                    "description"
                  ],
                  "additionalProperties": false
                },
                "description": "Feedback loops identified"
              },
              "emergentProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Emergent properties"
              },
              "leveragePoints": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Leverage points"
              },
              "sessionId": {
                "type": "string",
                "description": "Session ID"
              },
              "iteration": {
                "type": "number",
                "description": "Current iteration"
              },
              "nextAnalysisNeeded": {
                "type": "boolean",
                "description": "Whether more analysis is needed"
              }
            },
            "required": [
              "system",
              "components",
              "relationships",
              "feedbackLoops",
              "emergentProperties",
              "leveragePoints",
              "sessionId",
              "iteration",
              "nextAnalysisNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "scientificmethod",
          "description": "Apply scientific method for systematic inquiry",
          "input_schema": {
            "type": "object",
            "properties": {
              "stage": {
                "type": "string",
                "enum": [
                  "observation",
                  "question",
                  "hypothesis",
                  "experiment",
                  "analysis",
                  "conclusion",
                  "iteration"
                ],
                "description": "Current stage"
              },
              "observation": {
                "type": "string",
                "description": "Initial observation"
              },
              "question": {
                "type": "string",
                "description": "Research question"
              },
              "hypothesis": {
                "type": "object",
                "properties": {
                  "statement": {
                    "type": "string"
                  },
                  "variables": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "independent",
                            "dependent",
                            "controlled",
                            "confounding"
                          ]
                        },
                        "operationalization": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "type"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "assumptions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "hypothesisId": {
                    "type": "string"
                  },
                  "confidence": {
                    "type": "number"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "iteration": {
                    "type": "number"
                  },
                  "alternativeTo": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "refinementOf": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "proposed",
                      "testing",
                      "supported",
                      "refuted",
                      "refined"
                    ]
                  }
                },
                "required": [
                  "statement",
                  "variables",
                  "assumptions",
                  "hypothesisId",
                  "confidence",
                  "domain",
                  "iteration",
                  "status"
                ],
                "additionalProperties": false,
                "description": "Hypothesis data"
              },
              "experiment": {
                "type": "object",
                "properties": {
                  "design": {
                    "type": "string"
                  },
                  "methodology": {
                    "type": "string"
                  },
                  "predictions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "if": {
                          "type": "string"
                        },
                        "then": {
                          "type": "string"
                        },
                        "else": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "if",
                        "then"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "experimentId": {
                    "type": "string"
                  },
                  "hypothesisId": {
                    "type": "string"
                  },
                  "controlMeasures": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "results": {
                    "type": "string"
                  },
                  "outcomeMatched": {
                    "type": "boolean"
                  },
                  "unexpectedObservations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "limitations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nextSteps": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "design",
                  "methodology",
                  "predictions",
                  "experimentId",
                  "hypothesisId",
                  "controlMeasures"
                ],
                "additionalProperties": false,
                "description": "Experiment data"
              },
              "analysis": {
                "type": "string",
                "description": "Analysis results"
              },
              "conclusion": {
                "type": "string",
                "description": "Conclusions drawn"
              },
              "inquiryId": {
                "type": "string",
                "description": "Inquiry ID"
              },
              "iteration": {
                "type": "number",
                "description": "Current iteration"
              },
              "nextStageNeeded": {
                "type": "boolean",
                "description": "Whether next stage is needed"
              }
            },
            "required": [
              "stage",
              "inquiryId",
              "iteration",
              "nextStageNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "structuredargumentation",
          "description": "Construct and analyze structured arguments",
          "input_schema": {
            "type": "object",
            "properties": {
              "claim": {
                "type": "string"
              },
              "premises": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "conclusion": {
                "type": "string"
              },
              "argumentType": {
                "type": "string"
              },
              "confidence": {
                "type": "number"
              },
              "nextArgumentNeeded": {
                "type": "boolean"
              }
            },
            "required": [
              "claim",
              "premises",
              "conclusion",
              "argumentType",
              "confidence",
              "nextArgumentNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "visualreasoning",
          "description": "Process visual reasoning and diagram operations",
          "input_schema": {
            "type": "object",
            "properties": {
              "operation": {
                "type": "string"
              },
              "diagramId": {
                "type": "string"
              },
              "diagramType": {
                "type": "string"
              },
              "iteration": {
                "type": "number"
              },
              "nextOperationNeeded": {
                "type": "boolean"
              }
            },
            "required": [
              "operation",
              "diagramId",
              "diagramType",
              "iteration",
              "nextOperationNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "session_info",
          "description": "Get information about the current session including statistics and recent activity",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "session_export",
          "description": "Export the entire session state for backup or sharing",
          "input_schema": {
            "type": "object",
            "properties": {
              "format": {
                "type": "string",
                "enum": [
                  "json",
                  "summary"
                ],
                "description": "Export format (default: json)"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "session_import",
          "description": "Import a previously exported session state",
          "input_schema": {
            "type": "object",
            "properties": {
              "sessionData": {
                "type": "string",
                "description": "JSON string of exported session data"
              },
              "merge": {
                "type": "boolean",
                "description": "Whether to merge with existing session data (default: false)"
              }
            },
            "required": [
              "sessionData"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 15,
      "tool_names": [
        "sequentialthinking",
        "mentalmodel",
        "debuggingapproach",
        "collaborativereasoning",
        "decisionframework",
        "metacognitivemonitoring",
        "socraticmethod",
        "creativethinking",
        "systemsthinking",
        "scientificmethod",
        "structuredargumentation",
        "visualreasoning",
        "session_info",
        "session_export",
        "session_import"
      ]
    },
    "server_info_crawled": {
      "id": 28,
      "name": "Clear Thought",
      "author": "@waldzellai/clear-thought",
      "overview": "Enhance problem-solving capabilities using systematic thinking and mental models.",
      "repository_url": "https://github.com/waldzellai/waldzell-mcp",
      "homepage": "https://smithery.ai/server/@waldzellai/clear-thought",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "4,112",
      "success_rate": "98.88%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@waldzellai_clear-thought.json",
      "tools_count": 15,
      "tools": [
        {
          "name": "sequentialthinking",
          "description": "Process sequential thoughts with branching, revision, and memory management capabilities",
          "input_schema": {
            "type": "object",
            "properties": {
              "thought": {
                "type": "string",
                "description": "The thought content"
              },
              "thoughtNumber": {
                "type": "number",
                "description": "Current thought number in sequence"
              },
              "totalThoughts": {
                "type": "number",
                "description": "Total expected thoughts in sequence"
              },
              "nextThoughtNeeded": {
                "type": "boolean",
                "description": "Whether the next thought is needed"
              },
              "isRevision": {
                "type": "boolean",
                "description": "Whether this is a revision of a previous thought"
              },
              "revisesThought": {
                "type": "number",
                "description": "Which thought number this revises"
              },
              "branchFromThought": {
                "type": "number",
                "description": "Which thought this branches from"
              },
              "branchId": {
                "type": "string",
                "description": "Unique identifier for this branch"
              },
              "needsMoreThoughts": {
                "type": "boolean",
                "description": "Whether more thoughts are needed"
              }
            },
            "required": [
              "thought",
              "thoughtNumber",
              "totalThoughts",
              "nextThoughtNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "mentalmodel",
          "description": "Apply mental models to analyze problems systematically",
          "input_schema": {
            "type": "object",
            "properties": {
              "modelName": {
                "type": "string",
                "enum": [
                  "first_principles",
                  "opportunity_cost",
                  "error_propagation",
                  "rubber_duck",
                  "pareto_principle",
                  "occams_razor"
                ],
                "description": "Name of the mental model"
              },
              "problem": {
                "type": "string",
                "description": "The problem being analyzed"
              },
              "steps": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Steps to apply the model"
              },
              "reasoning": {
                "type": "string",
                "description": "Reasoning process"
              },
              "conclusion": {
                "type": "string",
                "description": "Conclusions drawn"
              }
            },
            "required": [
              "modelName",
              "problem",
              "steps",
              "reasoning",
              "conclusion"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "debuggingapproach",
          "description": "Apply systematic debugging approaches to identify and resolve issues",
          "input_schema": {
            "type": "object",
            "properties": {
              "approachName": {
                "type": "string",
                "enum": [
                  "binary_search",
                  "reverse_engineering",
                  "divide_conquer",
                  "backtracking",
                  "cause_elimination",
                  "program_slicing",
                  "log_analysis",
                  "static_analysis",
                  "root_cause_analysis",
                  "delta_debugging",
                  "fuzzing",
                  "incremental_testing"
                ],
                "description": "Debugging approach"
              },
              "issue": {
                "type": "string",
                "description": "Description of the issue being debugged"
              },
              "steps": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Steps taken to debug"
              },
              "findings": {
                "type": "string",
                "description": "Findings discovered during debugging"
              },
              "resolution": {
                "type": "string",
                "description": "How the issue was resolved"
              }
            },
            "required": [
              "approachName",
              "issue",
              "steps",
              "findings",
              "resolution"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "collaborativereasoning",
          "description": "Facilitate collaborative reasoning with multiple perspectives and personas",
          "input_schema": {
            "type": "object",
            "properties": {
              "topic": {
                "type": "string"
              },
              "personas": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "expertise": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "background": {
                      "type": "string"
                    },
                    "perspective": {
                      "type": "string"
                    },
                    "biases": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "communication": {
                      "type": "object",
                      "properties": {
                        "style": {
                          "type": "string",
                          "enum": [
                            "formal",
                            "casual",
                            "technical",
                            "creative"
                          ]
                        },
                        "tone": {
                          "type": "string",
                          "enum": [
                            "analytical",
                            "supportive",
                            "challenging",
                            "neutral"
                          ]
                        }
                      },
                      "required": [
                        "style",
                        "tone"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "expertise",
                    "background",
                    "perspective",
                    "biases",
                    "communication"
                  ],
                  "additionalProperties": false
                }
              },
              "contributions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "personaId": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "observation",
                        "question",
                        "insight",
                        "concern",
                        "suggestion",
                        "challenge",
                        "synthesis"
                      ]
                    },
                    "confidence": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1
                    },
                    "referenceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "personaId",
                    "content",
                    "type",
                    "confidence"
                  ],
                  "additionalProperties": false
                }
              },
              "stage": {
                "type": "string",
                "enum": [
                  "problem-definition",
                  "ideation",
                  "critique",
                  "integration",
                  "decision",
                  "reflection"
                ]
              },
              "activePersonaId": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "iteration": {
                "type": "number"
              },
              "nextContributionNeeded": {
                "type": "boolean"
              }
            },
            "required": [
              "topic",
              "personas",
              "contributions",
              "stage",
              "activePersonaId",
              "sessionId",
              "iteration",
              "nextContributionNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "decisionframework",
          "description": "Apply structured decision-making frameworks",
          "input_schema": {
            "type": "object",
            "properties": {
              "decisionStatement": {
                "type": "string"
              },
              "options": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "description"
                  ],
                  "additionalProperties": false
                }
              },
              "analysisType": {
                "type": "string"
              },
              "stage": {
                "type": "string"
              },
              "decisionId": {
                "type": "string"
              },
              "iteration": {
                "type": "number"
              },
              "nextStageNeeded": {
                "type": "boolean"
              }
            },
            "required": [
              "decisionStatement",
              "options",
              "analysisType",
              "stage",
              "decisionId",
              "iteration",
              "nextStageNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "metacognitivemonitoring",
          "description": "Monitor and assess thinking processes and knowledge",
          "input_schema": {
            "type": "object",
            "properties": {
              "task": {
                "type": "string"
              },
              "stage": {
                "type": "string"
              },
              "overallConfidence": {
                "type": "number"
              },
              "uncertaintyAreas": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "recommendedApproach": {
                "type": "string"
              },
              "monitoringId": {
                "type": "string"
              },
              "iteration": {
                "type": "number"
              },
              "nextAssessmentNeeded": {
                "type": "boolean"
              }
            },
            "required": [
              "task",
              "stage",
              "overallConfidence",
              "uncertaintyAreas",
              "recommendedApproach",
              "monitoringId",
              "iteration",
              "nextAssessmentNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "socraticmethod",
          "description": "Guide inquiry through systematic questioning",
          "input_schema": {
            "type": "object",
            "properties": {
              "claim": {
                "type": "string",
                "description": "The main claim or topic being explored"
              },
              "premises": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Supporting premises or assumptions"
              },
              "conclusion": {
                "type": "string",
                "description": "Conclusion or insight reached"
              },
              "question": {
                "type": "string",
                "description": "Socratic question being asked"
              },
              "stage": {
                "type": "string",
                "enum": [
                  "clarification",
                  "assumptions",
                  "evidence",
                  "perspectives",
                  "implications",
                  "questions"
                ],
                "description": "Method stage"
              },
              "argumentType": {
                "type": "string",
                "enum": [
                  "deductive",
                  "inductive",
                  "abductive",
                  "analogical"
                ],
                "description": "Type of argument"
              },
              "confidence": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Confidence level (0.0-1.0)"
              },
              "sessionId": {
                "type": "string",
                "description": "Session identifier"
              },
              "iteration": {
                "type": "number",
                "description": "Current iteration"
              },
              "nextArgumentNeeded": {
                "type": "boolean",
                "description": "Whether next argument is needed"
              }
            },
            "required": [
              "claim",
              "premises",
              "conclusion",
              "question",
              "stage",
              "argumentType",
              "confidence",
              "sessionId",
              "iteration",
              "nextArgumentNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "creativethinking",
          "description": "Engage in creative and lateral thinking approaches",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Creative prompt or challenge"
              },
              "ideas": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Ideas generated"
              },
              "techniques": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Techniques used"
              },
              "connections": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Connections made"
              },
              "insights": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Novel insights"
              },
              "sessionId": {
                "type": "string",
                "description": "Session identifier"
              },
              "iteration": {
                "type": "number",
                "description": "Current iteration"
              },
              "nextIdeaNeeded": {
                "type": "boolean",
                "description": "Whether more creativity is needed"
              }
            },
            "required": [
              "prompt",
              "ideas",
              "techniques",
              "connections",
              "insights",
              "sessionId",
              "iteration",
              "nextIdeaNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "systemsthinking",
          "description": "Analyze complex systems and their interactions",
          "input_schema": {
            "type": "object",
            "properties": {
              "system": {
                "type": "string",
                "description": "System being analyzed"
              },
              "components": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Components identified"
              },
              "relationships": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "from": {
                      "type": "string"
                    },
                    "to": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "strength": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "from",
                    "to",
                    "type"
                  ],
                  "additionalProperties": false
                },
                "description": "Relationships between components"
              },
              "feedbackLoops": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "components": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "positive",
                        "negative"
                      ]
                    },
                    "description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "components",
                    "type",
                    "description"
                  ],
                  "additionalProperties": false
                },
                "description": "Feedback loops identified"
              },
              "emergentProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Emergent properties"
              },
              "leveragePoints": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Leverage points"
              },
              "sessionId": {
                "type": "string",
                "description": "Session ID"
              },
              "iteration": {
                "type": "number",
                "description": "Current iteration"
              },
              "nextAnalysisNeeded": {
                "type": "boolean",
                "description": "Whether more analysis is needed"
              }
            },
            "required": [
              "system",
              "components",
              "relationships",
              "feedbackLoops",
              "emergentProperties",
              "leveragePoints",
              "sessionId",
              "iteration",
              "nextAnalysisNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "scientificmethod",
          "description": "Apply scientific method for systematic inquiry",
          "input_schema": {
            "type": "object",
            "properties": {
              "stage": {
                "type": "string",
                "enum": [
                  "observation",
                  "question",
                  "hypothesis",
                  "experiment",
                  "analysis",
                  "conclusion",
                  "iteration"
                ],
                "description": "Current stage"
              },
              "observation": {
                "type": "string",
                "description": "Initial observation"
              },
              "question": {
                "type": "string",
                "description": "Research question"
              },
              "hypothesis": {
                "type": "object",
                "properties": {
                  "statement": {
                    "type": "string"
                  },
                  "variables": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "independent",
                            "dependent",
                            "controlled",
                            "confounding"
                          ]
                        },
                        "operationalization": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "type"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "assumptions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "hypothesisId": {
                    "type": "string"
                  },
                  "confidence": {
                    "type": "number"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "iteration": {
                    "type": "number"
                  },
                  "alternativeTo": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "refinementOf": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "proposed",
                      "testing",
                      "supported",
                      "refuted",
                      "refined"
                    ]
                  }
                },
                "required": [
                  "statement",
                  "variables",
                  "assumptions",
                  "hypothesisId",
                  "confidence",
                  "domain",
                  "iteration",
                  "status"
                ],
                "additionalProperties": false,
                "description": "Hypothesis data"
              },
              "experiment": {
                "type": "object",
                "properties": {
                  "design": {
                    "type": "string"
                  },
                  "methodology": {
                    "type": "string"
                  },
                  "predictions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "if": {
                          "type": "string"
                        },
                        "then": {
                          "type": "string"
                        },
                        "else": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "if",
                        "then"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "experimentId": {
                    "type": "string"
                  },
                  "hypothesisId": {
                    "type": "string"
                  },
                  "controlMeasures": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "results": {
                    "type": "string"
                  },
                  "outcomeMatched": {
                    "type": "boolean"
                  },
                  "unexpectedObservations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "limitations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nextSteps": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "design",
                  "methodology",
                  "predictions",
                  "experimentId",
                  "hypothesisId",
                  "controlMeasures"
                ],
                "additionalProperties": false,
                "description": "Experiment data"
              },
              "analysis": {
                "type": "string",
                "description": "Analysis results"
              },
              "conclusion": {
                "type": "string",
                "description": "Conclusions drawn"
              },
              "inquiryId": {
                "type": "string",
                "description": "Inquiry ID"
              },
              "iteration": {
                "type": "number",
                "description": "Current iteration"
              },
              "nextStageNeeded": {
                "type": "boolean",
                "description": "Whether next stage is needed"
              }
            },
            "required": [
              "stage",
              "inquiryId",
              "iteration",
              "nextStageNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "structuredargumentation",
          "description": "Construct and analyze structured arguments",
          "input_schema": {
            "type": "object",
            "properties": {
              "claim": {
                "type": "string"
              },
              "premises": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "conclusion": {
                "type": "string"
              },
              "argumentType": {
                "type": "string"
              },
              "confidence": {
                "type": "number"
              },
              "nextArgumentNeeded": {
                "type": "boolean"
              }
            },
            "required": [
              "claim",
              "premises",
              "conclusion",
              "argumentType",
              "confidence",
              "nextArgumentNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "visualreasoning",
          "description": "Process visual reasoning and diagram operations",
          "input_schema": {
            "type": "object",
            "properties": {
              "operation": {
                "type": "string"
              },
              "diagramId": {
                "type": "string"
              },
              "diagramType": {
                "type": "string"
              },
              "iteration": {
                "type": "number"
              },
              "nextOperationNeeded": {
                "type": "boolean"
              }
            },
            "required": [
              "operation",
              "diagramId",
              "diagramType",
              "iteration",
              "nextOperationNeeded"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "session_info",
          "description": "Get information about the current session including statistics and recent activity",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "session_export",
          "description": "Export the entire session state for backup or sharing",
          "input_schema": {
            "type": "object",
            "properties": {
              "format": {
                "type": "string",
                "enum": [
                  "json",
                  "summary"
                ],
                "description": "Export format (default: json)"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "session_import",
          "description": "Import a previously exported session state",
          "input_schema": {
            "type": "object",
            "properties": {
              "sessionData": {
                "type": "string",
                "description": "JSON string of exported session data"
              },
              "merge": {
                "type": "boolean",
                "description": "Whether to merge with existing session data (default: false)"
              }
            },
            "required": [
              "sessionData"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"debug\": false,\n  \"enableMetrics\": false,\n  \"sessionTimeout\": 3600000,\n  \"maxThoughtsPerSession\": 100\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@waldzellai/clear-thought/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"debug\": false,\n  \"enableMetrics\": false,\n  \"sessionTimeout\": 3600000,\n  \"maxThoughtsPerSession\": 100\n}",
      "python_sdk_url": "https://server.smithery.ai/@waldzellai/clear-thought/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0029.@waldzellai_clear-thought_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 28
  }
}