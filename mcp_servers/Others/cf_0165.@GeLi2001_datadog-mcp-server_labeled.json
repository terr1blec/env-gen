{
  "labels": {
    "analysis": "The MCP Server focuses on interfacing with Datadog's API to provide monitoring, observability, and log management capabilities. Its primary functions include retrieving monitors, dashboards, metrics, events, and incidents, as well as searching and aggregating logs. This makes it a powerful tool for system monitoring, troubleshooting, and gaining insights into application performance.",
    "reasoning": "The primary functionality revolves around monitoring and observability, which aligns closely with the predefined category \"Monitoring & Observability\" (or closest pre-defined category). Additional relevant labels include \"Data Analysis & Processing\" due to log aggregation and metric querying, and \"Operating System\" since it interacts with system-level metrics and events.",
    "primary_label": "Others",
    "secondary_labels": [
      "Data Analysis & Processing",
      "Operating System"
    ],
    "custom_label": "Monitoring & Observability\n     Note: \"Monitoring & Observability\" is a custom label since it is not in the predefined list.\n    If only predefined labels are allowed, \"Operating System\" would be the closest primary fit, but \"Data Analysis & Processing\" would also be reasonable.",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 164,
    "server_name": "Datadog MCP Server",
    "rank_by_usage": 165,
    "usage_count": "308",
    "original_file": "../crawler/smithery/@GeLi2001_datadog-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@GeLi2001/datadog-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 164,
      "name": "Datadog MCP Server",
      "author": "@GeLi2001/datadog-mcp-server",
      "overview": "Interact with the Datadog API to monitor your systems effectively. Access monitor data, retrieve dashboards, query metrics, and manage incidents seamlessly. Enhance your observability with comprehensive error handling and advanced log searching capabilities.",
      "repository_url": "https://github.com/GeLi2001/datadog-mcp-server",
      "homepage": "https://smithery.ai/server/@GeLi2001/datadog-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "308",
      "success_rate": "99.70%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@GeLi2001_datadog-mcp-server.json",
      "tools_count": 10,
      "tools": [
        {
          "name": "get-monitors",
          "description": "Deploy Server Datadog MCP Server Claim Server @GeLi2001/datadog-mcp-server Try in Playground get-monitors",
          "parameters": []
        },
        {
          "name": "get-monitor",
          "description": "get-monitors Fetch monitors from Datadog with optional filtering. Use groupStates to filter by monitor status (e.g., 'alert', 'warn', 'no data'), tags or monitorTags to filter by tag criteria, and limit to control result size.",
          "parameters": []
        },
        {
          "name": "get-dashboards",
          "description": "Retrieve a list of all dashboards from Datadog. Useful for discovering available dashboards and their IDs for further exploration.",
          "parameters": [
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "filterConfigured",
              "required": false,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-dashboard",
          "description": "get-dashboards Retrieve a list of all dashboards from Datadog. Useful for discovering available dashboards and their IDs for further exploration.",
          "parameters": [
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "filterConfigured",
              "required": false,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-metrics",
          "description": "List available metrics from Datadog. Optionally use the q parameter to search for specific metrics matching a pattern. Helpful for discovering metrics to use in monitors or dashboards.",
          "parameters": []
        },
        {
          "name": "get-metric-metadata",
          "description": "Retrieve detailed metadata about a specific metric, including its type, description, unit, and other attributes. Use this to understand a metric's meaning and proper usage.",
          "parameters": []
        },
        {
          "name": "get-events",
          "description": "Search for events in Datadog within a specified time range. Events include deployments, alerts, comments, and other activities. Useful for correlating system behaviors with specific events.",
          "parameters": []
        },
        {
          "name": "get-incidents",
          "description": "List incidents from Datadog's incident management system. Can filter by active/archived status and use query strings to find specific incidents. Helpful for reviewing current or past incidents.",
          "parameters": []
        },
        {
          "name": "search-logs",
          "description": "Search logs in Datadog with advanced filtering options. Use filter.query for search terms (e.g., 'service:web-app status:error'), from/to for time ranges (e.g., 'now-15m', 'now'), and sort to order results. Essential for investigating application issues.",
          "parameters": []
        },
        {
          "name": "aggregate-logs",
          "description": "Perform analytical queries and aggregations on log data. Essential for calculating metrics (count, avg, sum, etc.), grouping data by fields, and creating statistical summaries from logs. Use this when you need to analyze patterns or extract metrics from log data.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@GeLi2001/datadog-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiKey",
          "required": true,
          "description": "Datadog API key"
        },
        {
          "name": "appKey",
          "required": true,
          "description": "Datadog Application key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@GeLi2001/datadog-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0165.@GeLi2001_datadog-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 162
  }
}