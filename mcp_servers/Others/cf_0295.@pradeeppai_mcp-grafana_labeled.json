{
  "labels": {
    "analysis": "The MCP Server for Grafana provides a comprehensive interface to interact with Grafana's monitoring and incident management capabilities through Model Context Protocol. It enables users to search, query, and manage dashboards, datasources, alerts, incidents, and on-call schedules. The tools primarily focus on monitoring, log analysis, metric queries, and incident response, making it a powerful tool for DevOps, SRE, and IT operations teams. The server integrates Grafana's functionalities into LLM workflows, enhancing observability and operational efficiency.",
    "reasoning": "The primary label **Monitoring & Observability** was chosen because the server's core functionality revolves around monitoring systems, querying logs, analyzing metrics, and managing alerts and incidentsâ€”the key components of observability. The secondary labels **Incident Management** and **Log Analysis** were selected because many tools specifically deal with incident creation, tracking, and resolution, as well as log searching and analysis. A custom label was not needed, as the predefined categories sufficiently cover the server's functionality.",
    "primary_label": "Others",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": "Monitoring & Observability",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 294,
    "server_name": "Grafana Server",
    "rank_by_usage": 295,
    "usage_count": "115",
    "original_file": "../crawler/smithery/@pradeeppai_mcp-grafana.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@pradeeppai/mcp-grafana/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 294,
      "name": "Grafana Server",
      "author": "@pradeeppai/mcp-grafana",
      "overview": "Provide seamless access to your Grafana instance and its ecosystem through a Model Context Protocol server. Search, query, and manage dashboards, datasources, incidents, alerts, and on-call schedules efficiently. Integrate Grafana capabilities into your LLM workflows to enhance monitoring and incident response.",
      "repository_url": "https://github.com/pradeeppai/mcp-grafana",
      "homepage": "https://smithery.ai/server/@pradeeppai/mcp-grafana",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "115",
      "success_rate": "57.10%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@pradeeppai_mcp-grafana.json",
      "tools_count": 35,
      "tools": [
        {
          "name": "add_activity_to_incident",
          "description": "Deploy Server Grafana Server @pradeeppai/mcp-grafana Try in Playground add_activity_to_incident",
          "parameters": [
            {
              "name": "add_activity_to_incident",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_incident",
          "description": "Create a new Grafana incident. Requires title, severity, and room prefix. Allows setting status and labels. This tool should be used judiciously and sparingly, and only after confirmation from the user, as it may notify or alarm lots of people.",
          "parameters": [
            {
              "name": "create_incident",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "find_error_pattern_logs",
          "description": "Searches Loki logs for elevated error patterns compared to the last day's average, waits for the analysis to complete, and returns the results including any patterns found.",
          "parameters": [
            {
              "name": "end",
              "required": false,
              "type": "string"
            },
            {
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "name": "start",
              "required": false,
              "type": "string"
            },
            {
              "name": "labels",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "find_slow_requests",
          "description": "Searches relevant Tempo datasources for slow requests, waits for the analysis to complete, and returns the results.",
          "parameters": [
            {
              "name": "find_slow_requests",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_alert_rule_by_uid",
          "description": "Retrieves the full configuration and detailed status of a specific Grafana alert rule identified by its unique ID (UID). The response includes fields like title, condition, query data, folder UID, rule group, state settings (no data, error), evaluation interval, annotations, and labels.",
          "parameters": [
            {
              "name": "get_alert_rule_by_uid",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_assertions",
          "description": "Get assertion summary for a given entity with its type, name, env, site, namespace, and a time range",
          "parameters": [
            {
              "name": "get_assertions",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_current_oncall_users",
          "description": "Get the list of users currently on-call for a specific Grafana OnCall schedule ID. Returns the schedule ID, name, and a list of detailed user objects for those currently on call.",
          "parameters": [
            {
              "name": "get_current_oncall_users",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_dashboard_by_uid",
          "description": "Retrieves the complete dashboard, including panels, variables, and settings, for a specific dashboard identified by its UID.",
          "parameters": [
            {
              "name": "get_dashboard_by_uid",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_dashboard_panel_queries",
          "description": "Get the title, query string, and datasource information for each panel in a dashboard. The datasource is an object with fields `uid` (which may be a concrete UID or a template variable like \"$datasource\") and `type`. If the datasource UID is a template variable, it won't be usable directly for queries. Returns an array of objects, each representing a panel, with fields: title, query, and datasource (an object with uid and type).",
          "parameters": [
            {
              "name": "get_dashboard_panel_queries",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_datasource_by_name",
          "description": "Retrieves detailed information about a specific datasource using its name. Returns the full datasource model, including UID, type, URL, access settings, JSON data, and secure JSON field status.",
          "parameters": [
            {
              "name": "get_datasource_by_name",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_datasource_by_uid",
          "description": "Retrieves detailed information about a specific datasource using its UID. Returns the full datasource model, including name, type, URL, access settings, JSON data, and secure JSON field status.",
          "parameters": [
            {
              "name": "get_datasource_by_uid",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_incident",
          "description": "Get a single incident by ID. Returns the full incident details including title, status, severity, labels, timestamps, and other metadata.",
          "parameters": [
            {
              "name": "get_incident",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_oncall_shift",
          "description": "Get detailed information for a specific Grafana OnCall shift using its ID. A shift represents a designated time period within a schedule when users are actively on-call. Returns the full shift details.",
          "parameters": [
            {
              "name": "get_oncall_shift",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_sift_analysis",
          "description": "Retrieves a specific analysis from an investigation by its UUID. The investigation ID and analysis ID should be provided as strings in UUID format.",
          "parameters": [
            {
              "name": "get_sift_analysis",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_sift_investigation",
          "description": "Retrieves an existing Sift investigation by its UUID. The ID should be provided as a string in UUID format (e.g. '02adab7c-bf5b-45f2-9459-d71a2c29e11b').",
          "parameters": [
            {
              "name": "get_sift_investigation",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_alert_rules",
          "description": "Lists Grafana alert rules, returning a summary including UID, title, current state (e.g., 'pending', 'firing', 'inactive'), and labels. Supports filtering by labels using selectors and pagination. Example label selector: `[{'name': 'severity', 'type': '=', 'value': 'critical'}]`. Inactive state means the alert state is normal, not firing",
          "parameters": [
            {
              "name": "list_alert_rules",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_contact_points",
          "description": "Lists Grafana notification contact points, returning a summary including UID, name, and type for each. Supports filtering by name - exact match - and limiting the number of results.",
          "parameters": [
            {
              "name": "list_contact_points",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_datasources",
          "description": "List available Grafana datasources. Optionally filter by datasource type (e.g., 'prometheus', 'loki'). Returns a summary list including ID, UID, name, type, and default status.",
          "parameters": [
            {
              "name": "list_datasources",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_incidents",
          "description": "List Grafana incidents. Allows filtering by status ('active', 'resolved') and optionally including drill incidents. Returns a preview list with basic details.",
          "parameters": [
            {
              "name": "list_incidents",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_loki_label_names",
          "description": "Lists all available label names (keys) found in logs within a specified Loki datasource and time range. Returns a list of unique label strings (e.g., `[\"app\", \"env\", \"pod\"]`). If the time range is not provided, it defaults to the last hour.",
          "parameters": [
            {
              "name": "list_loki_label_names",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_loki_label_values",
          "description": "Retrieves all unique values associated with a specific `labelName` within a Loki datasource and time range. Returns a list of string values (e.g., for `labelName=\"env\"`, might return `[\"prod\", \"staging\", \"dev\"]`). Useful for discovering filter options. Defaults to the last hour if the time range is omitted.",
          "parameters": [
            {
              "name": "list_loki_label_values",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_oncall_schedules",
          "description": "List Grafana OnCall schedules, optionally filtering by team ID. If a specific schedule ID is provided, retrieves details for only that schedule. Returns a list of schedule summaries including ID, name, team ID, timezone, and shift IDs. Supports pagination.",
          "parameters": [
            {
              "name": "list_oncall_schedules",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_oncall_teams",
          "description": "List teams configured in Grafana OnCall. Returns a list of team objects with their details. Supports pagination.",
          "parameters": [
            {
              "name": "list_oncall_teams",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_oncall_users",
          "description": "List users from Grafana OnCall. Can retrieve all users, a specific user by ID, or filter by username. Returns a list of user objects with their details. Supports pagination.",
          "parameters": [
            {
              "name": "list_oncall_users",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_prometheus_label_names",
          "description": "List label names in a Prometheus datasource. Allows filtering by series selectors and time range.",
          "parameters": [
            {
              "name": "list_prometheus_label_names",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_prometheus_label_values",
          "description": "Get the values for a specific label name in Prometheus. Allows filtering by series selectors and time range.",
          "parameters": [
            {
              "name": "list_prometheus_label_values",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_prometheus_metric_metadata",
          "description": "List Prometheus metric metadata. Returns metadata about metrics currently scraped from targets. Note: This endpoint is experimental.",
          "parameters": [
            {
              "name": "list_prometheus_metric_metadata",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_prometheus_metric_names",
          "description": "List metric names in a Prometheus datasource. Retrieves all metric names and then filters them locally using the provided regex. Supports pagination.",
          "parameters": [
            {
              "name": "list_prometheus_metric_names",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_sift_investigations",
          "description": "Retrieves a list of Sift investigations with an optional limit. If no limit is specified, defaults to 10 investigations.",
          "parameters": [
            {
              "name": "list_sift_investigations",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_teams",
          "description": "Search for Grafana teams by a query string. Returns a list of matching teams with details like name, ID, and URL.",
          "parameters": [
            {
              "name": "list_teams",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_loki_logs",
          "description": "Executes a LogQL query against a Loki datasource to retrieve log entries or metric values. Returns a list of results, each containing a timestamp, labels, and either a log line (`line`) or a numeric metric value (`value`). Defaults to the last hour, a limit of 10 entries, and 'backward' direction (newest first). Supports full LogQL syntax for log and metric queries (e.g., `{app=\"foo\"} |= \"error\"`, `rate({app=\"bar\"}[1m])`). Prefer using `query_loki_stats` first to check stream size and `list_loki_label_names` and `list_loki_label_values` to verify labels exist.",
          "parameters": [
            {
              "name": "query_loki_logs",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_loki_stats",
          "description": "Retrieves statistics about log streams matching a given LogQL *selector* within a Loki datasource and time range. Returns an object containing the count of streams, chunks, entries, and total bytes (e.g., `{\"streams\": 5, \"chunks\": 50, \"entries\": 10000, \"bytes\": 512000}`). The `logql` parameter **must** be a simple label selector (e.g., `{app=\"nginx\", env=\"prod\"}`) and does not support line filters, parsers, or aggregations. Defaults to the last hour if the time range is omitted.",
          "parameters": [
            {
              "name": "query_loki_stats",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_prometheus",
          "description": "Query Prometheus using a PromQL expression. Supports both instant queries (at a single point in time) and range queries (over a time range).",
          "parameters": [
            {
              "name": "query_prometheus",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_dashboards",
          "description": "Search for Grafana dashboards by a query string. Returns a list of matching dashboards with details like title, UID, folder, tags, and URL.",
          "parameters": [
            {
              "name": "search_dashboards",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_dashboard",
          "description": "Create or update a dashboard",
          "parameters": [
            {
              "name": "update_dashboard",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@pradeeppai/mcp-grafana/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "grafanaApiKey",
          "required": true,
          "description": ""
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@pradeeppai/mcp-grafana/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0295.@pradeeppai_mcp-grafana_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 291
  }
}