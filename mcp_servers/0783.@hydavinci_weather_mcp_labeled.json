{
  "labels": {
    "analysis": "The MCP Server is designed to provide accurate and up-to-date weather information for any global region through a simple interface. It eliminates the need for API keys, making it accessible for AI models and clients. The key functionality is centered around fetching weather data efficiently, with Docker support for easy deployment and integration. The primary problem it solves is simplifying weather data retrieval, making it accessible without traditional API requirements.",
    "reasoning": "The primary label \"Weather\" is chosen because the server's core functionality revolves around providing weather information. There are no secondary predefined categories that fit as closely, though \"Travel & Maps\" could be marginally relevant due to location-based services. No custom label is needed as the predefined \"Weather\" category adequately covers the server's unique functionality of providing weather data without API keys.",
    "primary_label": "Weather",
    "secondary_labels": [
      "Travel & Maps"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 782,
    "server_name": "Region Weather",
    "rank_by_usage": 783,
    "usage_count": "8",
    "original_file": "../crawler/smithery/@hydavinci_weather_mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@hydavinci/weather_mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_weather",
          "description": "\nMCP handler to get weather information for a specified region\n\nArgs:\n    region_name (str): Name of the region to get weather for\n    \nReturns:\n    dict: Weather information for the specified region\n",
          "input_schema": {
            "properties": {
              "region_name": {
                "title": "Region Name",
                "type": "string"
              }
            },
            "required": [
              "region_name"
            ],
            "title": "get_weatherArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_weather"
      ]
    },
    "server_info_crawled": {
      "id": 782,
      "name": "Region Weather",
      "author": "@hydavinci/weather_mcp",
      "overview": "Provide accurate and up-to-date weather information for any city or region worldwide through a simple and standardized interface. Enable AI models and clients to easily fetch weather data without requiring API keys. Deploy quickly with Docker support for seamless integration.",
      "repository_url": "https://github.com/hydavinci/weather_mcp.git",
      "homepage": "https://smithery.ai/server/@hydavinci/weather_mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "8",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@hydavinci_weather_mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_weather",
          "description": "\nMCP handler to get weather information for a specified region\n\nArgs:\n    region_name (str): Name of the region to get weather for\n    \nReturns:\n    dict: Weather information for the specified region\n",
          "input_schema": {
            "properties": {
              "region_name": {
                "title": "Region Name",
                "type": "string"
              }
            },
            "required": [
              "region_name"
            ],
            "title": "get_weatherArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@hydavinci/weather_mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@hydavinci/weather_mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0783.@hydavinci_weather_mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 765
  }
}