{
  "labels": {
    "analysis": "The Higress OPS Server is designed for the configuration and management of the Higress API gateway through Model Context Protocol (MCP). Its core functionality revolves around automating and streamlining the traffic management of Higress, including route configuration, service source management, and request blocking. The tools provided allow for detailed control over HTTP routing, service definitions, and access control, making it a specialized tool for API gateway operations.",
    "reasoning": "The primary label \"Operating System\" is chosen because the server focuses on system-level operations related to API gateway management, similar to system services managing network traffic. \"Web Search & Research\" is included as a secondary label due to tools that interact with web routes (e.g., request blocking). \"API Integration\" is another secondary label because the server deals directly with defining and managing API routes and services. There are no unique functionalities requiring a custom label.",
    "primary_label": "Operating System",
    "secondary_labels": [
      "Web Search & Research",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1466,
    "server_name": "Higress OPS Server",
    "rank_by_usage": 1467,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@higress-group_higress-ops-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@higress-group/higress-ops-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1466,
      "name": "Higress OPS Server",
      "author": "@higress-group/higress-ops-mcp-server",
      "overview": "Enable comprehensive configuration and management of Higress through a Model Context Protocol server. Facilitate seamless interaction with Higress via an MCP client built on LangGraph and LangChain MCP Adapters, providing a well-designed agent flow architecture. Extend and customize tools easily to automate and streamline Higress operations.",
      "repository_url": "https://github.com/higress-group/higress-ops-mcp-server",
      "homepage": "https://smithery.ai/server/@higress-group/higress-ops-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@higress-group_higress-ops-mcp-server.json",
      "tools_count": 10,
      "tools": [
        {
          "name": "get_plugin",
          "description": "Deploy Server Higress OPS Server Claim Server @higress-group/higress-ops-mcp-server Try in Playground",
          "parameters": []
        },
        {
          "name": "update_request_block_plugin",
          "description": "Update the configuration for the request-block plugin. Args: enabled: bool: Whether the plugin is enabled configurations: Dict[str, Any] containing the following keys: - block_bodies: List[str]: Strings to block in the request body - block_headers: List[str]: Strings to block in the request header - block_urls: List[str]: Strings to block in the request URL - blocked_code: int: HTTP status code to return when a block is matched - case_sensitive: bool: Whether the block matching is case sensitive scope: The scope at which the plugin is applied. Must be one of: \"global\", \"domain\", \"service\", or \"route\" resource_name: The name of the resource (required for domain, service, route scopes) Returns: Updated plugin data Raises: ValueError: If scope is not specified or resource_name is not provided for non-global scopes Example: \"block_bodies\": [ \"hello world\" \"block_headers\": [ \"example-key\", \"example-value\" \"block_urls\": [ \"seven.html\" \"blocked_code\": 404, \"case_sensitive\": false",
          "parameters": []
        },
        {
          "name": "list_routes",
          "description": "List all available routes. Returns: List of route data as dictionaries Raises: ValueError: If the request fails",
          "parameters": []
        },
        {
          "name": "get_route",
          "description": "Get detailed information about a specific route. Args: name: The name of the route Returns: Route data as a dictionary Raises: ValueError: If the route is not found or the request fails",
          "parameters": []
        },
        {
          "name": "add_route",
          "description": "Add a new route. The 3 required fields in the configurations are name, path, services. Args: configurations: Dict[str, Any] containing the following keys: - name (required): The name of the route - path (required): Dict[str, Any]: The path configuration with keys: - matchType: str: Match type (PRE, EQUAL, REGULAR) - matchValue: str: Value to match - caseSensitive: bool: Whether matching is case sensitive - services (required): List[Dict[str, Any]]: List of services for this route with keys: - name: str: Service name - port: int: Service port - weight: int: Service weight - domains: List[str]: List of domain names, but only one domain is allowed - methods: List[str]: List of HTTP methods (GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH, TRACE, CONNECT) - headers: List[Dict[str, Any]]: List of header match conditions with keys: - matchType: str: Match type (PRE, EQUAL, REGULAR) - matchValue: str: Value to match - caseSensitive: bool: Whether matching is case sensitive - key: str: Header key name - urlParams: List[Dict[str, Any]]: List of URL parameter match conditions with keys: - matchType: str: Match type (PRE, EQUAL, REGULAR) - matchValue: str: Value to match - caseSensitive: bool: Whether matching is case sensitive - key: str: Parameter key name - customConfigs: Dict[str, str]: Dictionary of custom configurations Returns: The updated route configuration Raises: ValueError: If the request fails or required fields are missing Example: \"name\": \"route-example\", \"domains\": [\"example.com\"], \"path\": { \"matchType\": \"PRE\", \"matchValue\": \"/test\", \"caseSensitive\": true \"methods\": [\"GET\", \"POST\"], \"headers\": [ \"matchType\": \"EQUAL\", \"matchValue\": \"test2\", \"caseSensitive\": null, \"key\": \"header2\" \"matchType\": \"PRE\", \"matchValue\": \"test1\", \"caseSensitive\": null, \"key\": \"header1\" \"matchType\": \"REGULAR\", \"matchValue\": \"test3.*\", \"caseSensitive\": null, \"key\": \"header3\" \"urlParams\": [ \"matchType\": \"PRE\", \"matchValue\": \"value1\", \"caseSensitive\": null, \"key\": \"query1\" \"services\": [ \"name\": \"seven-test.dns\", \"port\": 443, \"weight\": 100 \"customConfigs\": { \"annotation1\": \"value1\"",
          "parameters": []
        },
        {
          "name": "update_route",
          "description": "Update an existing route. Only provide the fields you want to update. Args: name: The name of the route (required) configurations: Dict[str, Any] containing the following keys: - path: Dict[str, Any]: The path configuration with keys: - matchType: str: Match type (PRE, EQUAL, REGULAR) - matchValue: str: Value to match - caseSensitive: bool: Whether matching is case sensitive - services: List[Dict[str, Any]]: List of services for this route with keys: - name: str: Service name - port: int: Service port - weight: int: Service weight - domains: List[str]: List of domain names, but only one domain is allowed - methods: List[str]: List of HTTP methods (GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH, TRACE, CONNECT) - headers: List[Dict[str, Any]]: List of header match conditions with keys: - matchType: str: Match type (PRE, EQUAL, REGULAR) - matchValue: str: Value to match - caseSensitive: bool: Whether matching is case sensitive - key: str: Header key name - urlParams: List[Dict[str, Any]]: List of URL parameter match conditions with keys: - matchType: str: Match type (PRE, EQUAL, REGULAR) - matchValue: str: Value to match - caseSensitive: bool: Whether matching is case sensitive - key: str: Parameter key name - customConfigs: Dict[str, str]: Dictionary of custom configurations Returns: The updated route configuration Raises: ValueError: If the request fails or required fields are missing Example: \"path\": { \"matchType\": \"PRE\", \"matchValue\": \"/test\", \"caseSensitive\": true \"methods\": [\"GET\", \"POST\"],",
          "parameters": []
        },
        {
          "name": "list_service_sources",
          "description": "List all available service sources. Returns: List of service sources data as dictionaries Raises: ValueError: If the request fails",
          "parameters": []
        },
        {
          "name": "add_service_source",
          "description": "Add a new service source. Args: configurations: Dict[str, Any] containing the following keys: - name (required): The name of the service source - type (required): The type of the service source, must be one of: * static: For static services with keys: - domain: The domain name (e.g. \"127.0.0.1:8001\") - port: The port number (e.g. 80) * dns: For DNS-based services with keys: - domain: The domain name (e.g. \"dashscope.aliyuncs.com\") - port: The port number (e.g. 443) - protocol: The protocol (e.g. \"https\") - sni (optional): Server Name Indication for TLS (e.g. \"dashscope.aliyuncs.com\") Returns: The created service source configuration Raises: ValueError: If the request fails or required fields are missing",
          "parameters": []
        },
        {
          "name": "get_service_source",
          "description": "Get detailed information about a specific service source. Args: name: The name of the service source Returns: Service source data as a dictionary Raises: ValueError: If the service source is not found or the request fails",
          "parameters": []
        },
        {
          "name": "update_service_source",
          "description": "Update a service source. Args: name: The name of the service source configurations: Dict[str, Any] containing the configuration to update Returns: The updated service source configuration Raises: ValueError: If the request fails or required fields are missing",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@higress-group/higress-ops-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@higress-group/higress-ops-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1467.@higress-group_higress-ops-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1356
  }
}