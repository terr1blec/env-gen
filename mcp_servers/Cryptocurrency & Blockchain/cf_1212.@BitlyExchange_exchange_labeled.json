{
  "labels": {
    "analysis": "The Bitly Exchange MCP Server is a platform designed specifically for interacting with the Bitly Exchange, an on-chain orderbook-based cryptocurrency exchange. Its core functionality revolves around enabling users to perform various trading operations, access market data, and manage their trading activities across multiple blockchain networks. The tools provided cover order placement (limit and market), order management (cancellation, claiming rewards), and data retrieval (balances, orderbooks, trading history, volumes, prices, etc.). The server supports multiple blockchain networks, making it versatile for traders operating on different chains. The primary purpose is to facilitate trading and provide real-time market insights, catering to both operational and analytical needs of crypto traders.",
    "reasoning": "The primary label \"Cryptocurrency & Blockchain\" is chosen because the server's functionality is entirely focused on enabling trading and access to market data on blockchain-based cryptocurrency exchanges. The secondary label \"Data Analysis & Processing\" is selected due to the availability of tools for retrieving trading volumes, historical prices, OHLCV (K-line) data, and other analytical insights. \"API Integration\" is also relevant because the server likely functions as an API layer for traders to interact with the exchange programmatically. No custom label is necessary as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "Data Analysis & Processing",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1211,
    "server_name": "Bitly Exchange MCP Server",
    "rank_by_usage": 1212,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@BitlyExchange_exchange.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@BitlyExchange/exchange/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1211,
      "name": "Bitly Exchange MCP Server",
      "author": "@BitlyExchange/exchange",
      "overview": "Provide MCP service for Bitly Exchange Traders. Bitly Exchange is an Fully-Onchain Orderbook-based Crypto Exchange providing safe and fast exchange service. You can use Bitly MCP server to make limit/market orders, look up orderbook, K-lines, trading history, balances and more in Bitly. For now, it supports the following blockchains:\n\nBase Sepolia (testnet):\nnetworkId: 84532\nRedstone:\nnetworkId: 690\nBase Mainnet:\nnetworkId: 8453\nPolygon:\nnetworkId: 137",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@BitlyExchange/exchange",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@BitlyExchange_exchange.json",
      "tools_count": 16,
      "tools": [
        {
          "name": "get_balance",
          "description": "Deploy Server Bitly Exchange MCP Server @BitlyExchange/exchange Try in Playground get_balance",
          "parameters": [
            {
              "name": "get_balance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_trade_pairs_info",
          "description": "Fetches trading pair information including market addresses, display names, and base/quote token details. Requires network ID and array of pair IDs. Returns an array of ExchangeMarketType objects containing marketAddress, displayName, tokenX, and tokenY information. Leave pairIds to empty array to get all pairs.",
          "parameters": [
            {
              "name": "get_trade_pairs_info",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_tokens_info",
          "description": "Retrieves metadata and on-chain information for specified ERC20 tokens. Requires network ID and array of token contract addresses. Returns an array of TokenInfoTypeWithAddress objects containing symbol, name, decimals, and address for each token. Leave tokensAddress to empty array to get all tokens.",
          "parameters": [
            {
              "name": "networkId",
              "required": true,
              "type": "string"
            },
            {
              "name": "tokensAddress",
              "required": true,
              "type": "string"
            },
            {
              "name": "Add",
              "required": false,
              "type": "string"
            },
            {
              "name": "Item",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_trade_volumes",
          "description": "Calculates trading volumes for specified pairs over a given time period. Requires network ID, array of pair IDs, and relative time window in seconds. Returns a MarketsVolumes object mapping market addresses to their real (human-readable) volume amounts.",
          "parameters": [
            {
              "name": "get_trade_volumes",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_orderbook",
          "description": "Retrieves the complete order book for a trading pair within specified price range. Requires network ID, pair ID, and price range (low/high). Returns an OrderbookType object with arrays of asks and bids, each containing direction, price and amount information.",
          "parameters": [
            {
              "name": "get_orderbook",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_my_open_orders",
          "description": "Lists all currently open limit orders for the authenticated wallet across specified trading pairs. Requires network ID and array of pair IDs. Returns an ExchangeOrderDetails object mapping market addresses to arrays of objects with the following properties: sold (number), earned (number), selling (number), price (number), and direction (OrderDirection).",
          "parameters": [
            {
              "name": "get_my_open_orders",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "place_limit_order",
          "description": "Submits a new limit order to the exchange. Requires network ID, pair ID, direction (BUY/SELL), price, and volume. Returns a stringified ContractTransaction object containing the transaction details.",
          "parameters": [
            {
              "name": "place_limit_order",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "place_market_order",
          "description": "Executes an immediate market order at current best available price. Requires network ID, pair ID, direction (BUY/SELL), volume, current price estimate, and maximum acceptable slippage percentage. Returns a stringified ContractTransaction object containing the transaction details.",
          "parameters": [
            {
              "name": "place_market_order",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "cancel_limit_order",
          "description": "Cancels a specific open limit order identified by its market, direction and price point. Requires network ID, pair ID, direction (BUY/SELL), and exact price point. Returns a stringified ContractTransaction object containing the transaction details.",
          "parameters": [
            {
              "name": "cancel_limit_order",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "cancel_all_limit_order",
          "description": "Cancels all open limit orders for the authenticated wallet in a specific market. Requires network ID and pair ID. Returns a stringified ContractTransaction object containing the transaction details.",
          "parameters": [
            {
              "name": "cancel_all_limit_order",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "claim_earning",
          "description": "Claims trading rewards for a specific filled limit order. Requires network ID, pair ID, direction (BUY/SELL), and exact price point. Returns a stringified ContractTransaction object containing the transaction details.",
          "parameters": [
            {
              "name": "claim_earning",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "claim_all_earnings",
          "description": "Claims all available trading rewards for the authenticated wallet in a specific market. Requires network ID and pair ID. Returns a stringified ContractTransaction object containing the transaction details.",
          "parameters": [
            {
              "name": "claim_all_earnings",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_finished_orders",
          "description": "Retrieves historical order data for filled/cancelled orders within a specified time range. Requires network ID, array of pair IDs, and from/to timestamps (in seconds relative to now). Returns an ExchangeOrdersType object mapping market addresses to arrays of order information including direction, volume, price, timestamp, and transaction hash.",
          "parameters": [
            {
              "name": "get_finished_orders",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_market_order_history",
          "description": "Fetches trade history for specified markets. Requires network ID, array of pair IDs, and from/to timestamps (in seconds relative to now). Returns an ExchangeOrdersType object mapping market addresses to arrays of order information including direction, volume, price, timestamp, and transaction hash.",
          "parameters": [
            {
              "name": "get_market_order_history",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_prices",
          "description": "Retrieves current or historical price data for specified trading pairs. Requires network ID, array of pair IDs, and timestamp (in seconds relative to now). Returns a PricesMap object mapping market addresses to their current price values.",
          "parameters": [
            {
              "name": "get_prices",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_klines",
          "description": "Fetches OHLCV (Open-High-Low-Close-Volume) candle data for technical analysis. Requires network ID, array of pair IDs, candle resolution (60s, 240s, 1D), and from/to timestamps. Returns arrays of CandleResult objects containing open, high, low, close, volume, symbol, and time information.",
          "parameters": [
            {
              "name": "get_klines",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@BitlyExchange/exchange/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "WALLET_PRIVATE_KEY",
          "required": true,
          "description": "Private key for wallet authentication"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@BitlyExchange/exchange/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1212.@BitlyExchange_exchange_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1169
  }
}