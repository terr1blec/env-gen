{
  "labels": {
    "analysis": "The MCP Server primarily acts as a Solana blockchain client, providing extensive tools for querying and interacting with the Solana network. Its core functionality includes retrieving account balances, transaction details, block information, and other blockchain data. The tools enable real-time interaction with Solana's ledger, including transaction confirmation, airdrop requests, and network status checks. The server also supports working with SPL tokens, validator operations, and performance monitoring of the network.",
    "reasoning": "The primary label \"Cryptocurrency & Blockchain\" was chosen because the server's primary purpose revolves around interacting with the Solana blockchain, a cryptocurrency platform. The secondary label \"API Integration\" was selected because the server provides programmatic access to blockchain data, effectively serving as an API endpoint. The \"Database Operations\" label was added because the server acts as an interface for querying blockchain data, similar to database operations. The custom label \"Solana Analytics\" captures the server's specialized focus on Solana blockchain analytics and monitoring.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "API Integration",
      "Database Operations"
    ],
    "custom_label": "Solana Analytics",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 778,
    "server_name": "Solana Client",
    "rank_by_usage": 779,
    "usage_count": "8",
    "original_file": "../crawler/smithery/@tywenk_mcp-solana.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@tywenk/mcp-solana/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_balance",
          "description": "Returns the balance of the account of provided Pubkey.\n\n    Args:\n        address (str): Pubkey of account to query\n\n    Returns:\n        str: Account balance response in the format \"Balance of {address}: {balance}\"\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "get_balanceArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_transaction",
          "description": "Returns transaction details for a confirmed transaction.\n\n    Args:\n        hash (str): Transaction signature as base-58 encoded string\n\n    Returns:\n        str: Transaction details in the format \"Transaction: {transaction}\"\n    ",
          "input_schema": {
            "properties": {
              "hash": {
                "title": "Hash",
                "type": "string"
              }
            },
            "required": [
              "hash"
            ],
            "title": "get_transactionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_block",
          "description": "Returns identity and transaction information about a confirmed block in the ledger.\n\n    Args:\n        slot (int): Slot number as u64 integer\n\n    Returns:\n        str: Block information in the format \"Block: {block}\"\n    ",
          "input_schema": {
            "properties": {
              "slot": {
                "title": "Slot",
                "type": "integer"
              }
            },
            "required": [
              "slot"
            ],
            "title": "get_blockArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_block_height",
          "description": "Returns the current block height of the node.\n\n    Returns:\n        str: Current block height in the format \"Block height: {height}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_block_heightArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_block_time",
          "description": "Fetch the estimated production time of a block.\n\n    Args:\n        slot (int): Block slot number\n\n    Returns:\n        str: Block time in the format \"Block time: {time}\"\n    ",
          "input_schema": {
            "properties": {
              "slot": {
                "title": "Slot",
                "type": "integer"
              }
            },
            "required": [
              "slot"
            ],
            "title": "get_block_timeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_blocks",
          "description": "Returns a list of confirmed blocks between two slots.\n\n    Args:\n        start_slot (int): Start slot as u64 integer\n        end_slot (Optional[int], optional): End slot as u64 integer. Defaults to None.\n\n    Returns:\n        str: List of blocks in the format \"Blocks: {blocks}\"\n    ",
          "input_schema": {
            "properties": {
              "start_slot": {
                "title": "Start Slot",
                "type": "integer"
              },
              "end_slot": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "End Slot"
              }
            },
            "required": [
              "start_slot"
            ],
            "title": "get_blocksArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_cluster_nodes",
          "description": "Returns information about all the nodes participating in the cluster.\n\n    Returns:\n        str: Cluster nodes information in the format \"Cluster nodes: {nodes}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_cluster_nodesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_epoch_info",
          "description": "Returns information about the current epoch.\n\n    Returns:\n        str: Epoch information in the format \"Epoch info: {info}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_epoch_infoArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_epoch_schedule",
          "description": "Returns epoch schedule information from this cluster's genesis config.\n\n    Returns:\n        str: Epoch schedule in the format \"Epoch schedule: {schedule}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_epoch_scheduleArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_genesis_hash",
          "description": "Returns the genesis hash.\n\n    Returns:\n        str: Genesis hash in the format \"Genesis hash: {hash}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_genesis_hashArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_identity",
          "description": "Returns the identity pubkey for the current node.\n\n    Returns:\n        str: Node identity in the format \"Node identity: {identity}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_identityArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_inflation_governor",
          "description": "Returns the current inflation governor.\n\n    Returns:\n        str: Inflation governor info in the format \"Inflation governor: {governor}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_inflation_governorArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_inflation_rate",
          "description": "Returns the specific inflation values for the current epoch.\n\n    Returns:\n        str: Inflation rate info in the format \"Inflation rate: {rate}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_inflation_rateArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_largest_accounts",
          "description": "Returns the 20 largest accounts, by lamport balance.\n\n    Returns:\n        str: Largest accounts info in the format \"Largest accounts: {accounts}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_largest_accountsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_latest_blockhash",
          "description": "Returns the latest block hash from the ledger.\n\n    Returns:\n        str: Latest blockhash in the format \"Latest blockhash: {blockhash}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_latest_blockhashArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_minimum_balance_for_rent_exemption",
          "description": "Returns minimum balance required to make account rent exempt.\n\n    Args:\n        size (int): Account data length\n\n    Returns:\n        str: Minimum balance in the format \"Minimum balance for rent exemption: {balance}\"\n    ",
          "input_schema": {
            "properties": {
              "size": {
                "title": "Size",
                "type": "integer"
              }
            },
            "required": [
              "size"
            ],
            "title": "get_minimum_balance_for_rent_exemptionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_program_accounts",
          "description": "Returns all accounts owned by the provided program Pubkey.\n\n    Args:\n        program_id (str): Pubkey of program to query\n\n    Returns:\n        str: Program accounts in the format \"Program accounts: {accounts}\"\n    ",
          "input_schema": {
            "properties": {
              "program_id": {
                "title": "Program Id",
                "type": "string"
              }
            },
            "required": [
              "program_id"
            ],
            "title": "get_program_accountsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_recent_performance_samples",
          "description": "Returns a list of recent performance samples, in reverse slot order.\n\n    Args:\n        limit (Optional[int], optional): Number of samples to return (maximum 720). Defaults to None.\n\n    Returns:\n        str: Performance samples in the format \"Performance samples: {samples}\"\n    ",
          "input_schema": {
            "properties": {
              "limit": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Limit"
              }
            },
            "title": "get_recent_performance_samplesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_signature_statuses",
          "description": "Returns the statuses of a list of signatures.\n\n    Args:\n        signatures (list[str]): List of transaction signatures to confirm\n\n    Returns:\n        str: Signature statuses in the format \"Signature statuses: {statuses}\"\n    ",
          "input_schema": {
            "properties": {
              "signatures": {
                "items": {
                  "type": "string"
                },
                "title": "Signatures",
                "type": "array"
              }
            },
            "required": [
              "signatures"
            ],
            "title": "get_signature_statusesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_slot",
          "description": "Returns the current slot the node is processing.\n\n    Returns:\n        str: Current slot in the format \"Current slot: {slot}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_slotArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_slot_leader",
          "description": "Returns the current slot leader.\n\n    Returns:\n        str: Slot leader in the format \"Slot leader: {leader}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_slot_leaderArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_supply",
          "description": "Returns information about the current supply.\n\n    Returns:\n        str: Supply information in the format \"Supply info: {supply}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_supplyArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_token_account_balance",
          "description": "Returns the token balance of an SPL Token account.\n\n    Args:\n        token_account (str): Pubkey of Token account to query\n\n    Returns:\n        str: Token account balance in the format \"Token account balance: {balance}\"\n    ",
          "input_schema": {
            "properties": {
              "token_account": {
                "title": "Token Account",
                "type": "string"
              }
            },
            "required": [
              "token_account"
            ],
            "title": "get_token_account_balanceArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_token_largest_accounts",
          "description": "Returns the 20 largest accounts of a particular SPL Token type.\n\n    Args:\n        mint (str): Pubkey of token mint to query\n\n    Returns:\n        str: Largest token accounts in the format \"Largest token accounts: {accounts}\"\n    ",
          "input_schema": {
            "properties": {
              "mint": {
                "title": "Mint",
                "type": "string"
              }
            },
            "required": [
              "mint"
            ],
            "title": "get_token_largest_accountsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_transaction_count",
          "description": "Returns the current Transaction count from the ledger.\n\n    Returns:\n        str: Transaction count in the format \"Transaction count: {count}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_transaction_countArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_version",
          "description": "Returns the current solana versions running on the node.\n\n    Returns:\n        str: Version information in the format \"Version info: {version}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_versionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_vote_accounts",
          "description": "Returns the account info and associated stake for all the voting accounts in the current bank.\n\n    Returns:\n        str: Vote accounts information in the format \"Vote accounts: {accounts}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_vote_accountsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "is_connected",
          "description": "Health check to verify if the client is connected.\n\n    Returns:\n        str: Connection status in the format \"Connected: {connected}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "is_connectedArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_block_commitment",
          "description": "Fetch the commitment for particular block.\n\n    Args:\n        slot (int): Block slot number to query\n\n    Returns:\n        str: Block commitment information\n    ",
          "input_schema": {
            "properties": {
              "slot": {
                "title": "Slot",
                "type": "integer"
              }
            },
            "required": [
              "slot"
            ],
            "title": "get_block_commitmentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "confirm_transaction",
          "description": "Confirm the transaction identified by the specified signature.\n\n    Args:\n        tx_sig (str): Transaction signature to confirm\n        commitment (Optional[str]): Bank state to query (\"finalized\", \"confirmed\" or \"processed\")\n\n    Returns:\n        str: Transaction confirmation status\n    ",
          "input_schema": {
            "properties": {
              "tx_sig": {
                "title": "Tx Sig",
                "type": "string"
              },
              "commitment": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Commitment"
              }
            },
            "required": [
              "tx_sig"
            ],
            "title": "confirm_transactionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_account_info",
          "description": "Returns all account info for the specified public key.\n\n    Args:\n        pubkey (str): Pubkey of account to query\n        encoding (str): Encoding for Account data (\"base58\", \"base64\", or \"jsonParsed\")\n\n    Returns:\n        str: Account information\n    ",
          "input_schema": {
            "properties": {
              "pubkey": {
                "title": "Pubkey",
                "type": "string"
              },
              "encoding": {
                "default": "base64",
                "title": "Encoding",
                "type": "string"
              }
            },
            "required": [
              "pubkey"
            ],
            "title": "get_account_infoArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_fee_for_message",
          "description": "Returns the fee for a message.\n\n    Args:\n        from_pubkey (str): Sender's public key\n        to_pubkey (str): Recipient's public key\n        lamports (int): Amount of lamports to transfer\n\n    Returns:\n        str: Fee information\n    ",
          "input_schema": {
            "properties": {
              "from_pubkey": {
                "title": "From Pubkey",
                "type": "string"
              },
              "to_pubkey": {
                "title": "To Pubkey",
                "type": "string"
              },
              "lamports": {
                "title": "Lamports",
                "type": "integer"
              }
            },
            "required": [
              "from_pubkey",
              "to_pubkey",
              "lamports"
            ],
            "title": "get_fee_for_messageArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_first_available_block",
          "description": "Returns the slot of the lowest confirmed block available.\n\n    Returns:\n        str: First available block information\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_first_available_blockArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_inflation_reward",
          "description": "Returns the inflation/staking reward for a list of addresses for an epoch.\n\n    Args:\n        pubkeys (list[str]): List of account addresses\n        epoch (Optional[int]): Epoch for which to calculate rewards\n\n    Returns:\n        str: Inflation reward information\n    ",
          "input_schema": {
            "properties": {
              "pubkeys": {
                "items": {
                  "type": "string"
                },
                "title": "Pubkeys",
                "type": "array"
              },
              "epoch": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Epoch"
              }
            },
            "required": [
              "pubkeys"
            ],
            "title": "get_inflation_rewardArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_leader_schedule",
          "description": "Returns the leader schedule for an epoch.\n\n    Args:\n        epoch (Optional[int]): Epoch to get schedule for\n\n    Returns:\n        str: Leader schedule information\n    ",
          "input_schema": {
            "properties": {
              "epoch": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Epoch"
              }
            },
            "title": "get_leader_scheduleArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_minimum_ledger_slot",
          "description": "Returns the lowest slot that the node has information about in its ledger.\n\n    Returns:\n        str: Minimum ledger slot information\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_minimum_ledger_slotArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_multiple_accounts",
          "description": "Returns the account information for a list of public keys.\n\n    Args:\n        pubkeys (list[str]): List of account public keys\n        encoding (str): Encoding for the account data\n\n    Returns:\n        str: Multiple accounts information\n    ",
          "input_schema": {
            "properties": {
              "pubkeys": {
                "items": {
                  "type": "string"
                },
                "title": "Pubkeys",
                "type": "array"
              },
              "encoding": {
                "default": "base64",
                "title": "Encoding",
                "type": "string"
              }
            },
            "required": [
              "pubkeys"
            ],
            "title": "get_multiple_accountsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_signatures_for_address",
          "description": "Returns confirmed signatures for transactions involving an address.\n\n    Args:\n        account (str): Account address to query\n        before (Optional[str]): Start searching backwards from this signature\n        until (Optional[str]): Search until this signature\n        limit (Optional[int]): Maximum number of signatures to return\n\n    Returns:\n        str: Signatures information\n    ",
          "input_schema": {
            "properties": {
              "account": {
                "title": "Account",
                "type": "string"
              },
              "before": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Before"
              },
              "until": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Until"
              },
              "limit": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Limit"
              }
            },
            "required": [
              "account"
            ],
            "title": "get_signatures_for_addressArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_token_accounts_by_delegate",
          "description": "Returns all SPL Token accounts by approved delegate.\n\n    Args:\n        delegate (str): Public key of delegate owner\n        mint (str): Token mint address\n\n    Returns:\n        str: Token accounts information\n    ",
          "input_schema": {
            "properties": {
              "delegate": {
                "title": "Delegate",
                "type": "string"
              },
              "mint": {
                "title": "Mint",
                "type": "string"
              }
            },
            "required": [
              "delegate",
              "mint"
            ],
            "title": "get_token_accounts_by_delegateArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_token_accounts_by_owner",
          "description": "Returns all SPL Token accounts by token owner.\n\n    Args:\n        owner (str): Public key of token owner\n        mint (str): Token mint address\n\n    Returns:\n        str: Token accounts information\n    ",
          "input_schema": {
            "properties": {
              "owner": {
                "title": "Owner",
                "type": "string"
              },
              "mint": {
                "title": "Mint",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "mint"
            ],
            "title": "get_token_accounts_by_ownerArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_token_supply",
          "description": "Returns the total supply of an SPL Token type.\n\n    Args:\n        mint (str): Public key of token mint\n\n    Returns:\n        str: Token supply information\n    ",
          "input_schema": {
            "properties": {
              "mint": {
                "title": "Mint",
                "type": "string"
              }
            },
            "required": [
              "mint"
            ],
            "title": "get_token_supplyArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "request_airdrop",
          "description": "Request an airdrop of lamports to a Pubkey.\n\n    Args:\n        address (str): Public key of recipient\n        lamports (int): Amount of lamports to request\n\n    Returns:\n        str: Airdrop request result\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "lamports": {
                "title": "Lamports",
                "type": "integer"
              }
            },
            "required": [
              "address",
              "lamports"
            ],
            "title": "request_airdropArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "send_transaction",
          "description": "Send a transaction that has already been signed and serialized into the wire format.\n\n    Args:\n        txn (bytes): Signed transaction as bytes\n\n    Returns:\n        str: Transaction send result\n    ",
          "input_schema": {
            "properties": {
              "txn": {
                "format": "binary",
                "title": "Txn",
                "type": "string"
              }
            },
            "required": [
              "txn"
            ],
            "title": "send_transactionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "validator_exit",
          "description": "Request to have the validator exit.\n\n    Returns:\n        str: Validator exit request result\n    ",
          "input_schema": {
            "properties": {},
            "title": "validator_exitArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 44,
      "tool_names": [
        "get_balance",
        "get_transaction",
        "get_block",
        "get_block_height",
        "get_block_time",
        "get_blocks",
        "get_cluster_nodes",
        "get_epoch_info",
        "get_epoch_schedule",
        "get_genesis_hash",
        "get_identity",
        "get_inflation_governor",
        "get_inflation_rate",
        "get_largest_accounts",
        "get_latest_blockhash",
        "get_minimum_balance_for_rent_exemption",
        "get_program_accounts",
        "get_recent_performance_samples",
        "get_signature_statuses",
        "get_slot",
        "get_slot_leader",
        "get_supply",
        "get_token_account_balance",
        "get_token_largest_accounts",
        "get_transaction_count",
        "get_version",
        "get_vote_accounts",
        "is_connected",
        "get_block_commitment",
        "confirm_transaction",
        "get_account_info",
        "get_fee_for_message",
        "get_first_available_block",
        "get_inflation_reward",
        "get_leader_schedule",
        "get_minimum_ledger_slot",
        "get_multiple_accounts",
        "get_signatures_for_address",
        "get_token_accounts_by_delegate",
        "get_token_accounts_by_owner",
        "get_token_supply",
        "request_airdrop",
        "send_transaction",
        "validator_exit"
      ]
    },
    "server_info_crawled": {
      "id": 778,
      "name": "Solana Client",
      "author": "@tywenk/mcp-solana",
      "overview": "Connect to the Solana blockchain and access its data seamlessly. Retrieve account balances, transaction details, and blockchain information with ease. Enhance your applications by integrating real-time Solana data and functionalities.",
      "repository_url": "https://github.com/tywenk/mcp-sol",
      "homepage": "https://smithery.ai/server/@tywenk/mcp-solana",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "8",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@tywenk_mcp-solana.json",
      "tools_count": 44,
      "tools": [
        {
          "name": "get_balance",
          "description": "Returns the balance of the account of provided Pubkey.\n\n    Args:\n        address (str): Pubkey of account to query\n\n    Returns:\n        str: Account balance response in the format \"Balance of {address}: {balance}\"\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "get_balanceArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_transaction",
          "description": "Returns transaction details for a confirmed transaction.\n\n    Args:\n        hash (str): Transaction signature as base-58 encoded string\n\n    Returns:\n        str: Transaction details in the format \"Transaction: {transaction}\"\n    ",
          "input_schema": {
            "properties": {
              "hash": {
                "title": "Hash",
                "type": "string"
              }
            },
            "required": [
              "hash"
            ],
            "title": "get_transactionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_block",
          "description": "Returns identity and transaction information about a confirmed block in the ledger.\n\n    Args:\n        slot (int): Slot number as u64 integer\n\n    Returns:\n        str: Block information in the format \"Block: {block}\"\n    ",
          "input_schema": {
            "properties": {
              "slot": {
                "title": "Slot",
                "type": "integer"
              }
            },
            "required": [
              "slot"
            ],
            "title": "get_blockArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_block_height",
          "description": "Returns the current block height of the node.\n\n    Returns:\n        str: Current block height in the format \"Block height: {height}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_block_heightArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_block_time",
          "description": "Fetch the estimated production time of a block.\n\n    Args:\n        slot (int): Block slot number\n\n    Returns:\n        str: Block time in the format \"Block time: {time}\"\n    ",
          "input_schema": {
            "properties": {
              "slot": {
                "title": "Slot",
                "type": "integer"
              }
            },
            "required": [
              "slot"
            ],
            "title": "get_block_timeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_blocks",
          "description": "Returns a list of confirmed blocks between two slots.\n\n    Args:\n        start_slot (int): Start slot as u64 integer\n        end_slot (Optional[int], optional): End slot as u64 integer. Defaults to None.\n\n    Returns:\n        str: List of blocks in the format \"Blocks: {blocks}\"\n    ",
          "input_schema": {
            "properties": {
              "start_slot": {
                "title": "Start Slot",
                "type": "integer"
              },
              "end_slot": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "End Slot"
              }
            },
            "required": [
              "start_slot"
            ],
            "title": "get_blocksArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_cluster_nodes",
          "description": "Returns information about all the nodes participating in the cluster.\n\n    Returns:\n        str: Cluster nodes information in the format \"Cluster nodes: {nodes}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_cluster_nodesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_epoch_info",
          "description": "Returns information about the current epoch.\n\n    Returns:\n        str: Epoch information in the format \"Epoch info: {info}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_epoch_infoArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_epoch_schedule",
          "description": "Returns epoch schedule information from this cluster's genesis config.\n\n    Returns:\n        str: Epoch schedule in the format \"Epoch schedule: {schedule}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_epoch_scheduleArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_genesis_hash",
          "description": "Returns the genesis hash.\n\n    Returns:\n        str: Genesis hash in the format \"Genesis hash: {hash}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_genesis_hashArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_identity",
          "description": "Returns the identity pubkey for the current node.\n\n    Returns:\n        str: Node identity in the format \"Node identity: {identity}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_identityArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_inflation_governor",
          "description": "Returns the current inflation governor.\n\n    Returns:\n        str: Inflation governor info in the format \"Inflation governor: {governor}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_inflation_governorArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_inflation_rate",
          "description": "Returns the specific inflation values for the current epoch.\n\n    Returns:\n        str: Inflation rate info in the format \"Inflation rate: {rate}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_inflation_rateArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_largest_accounts",
          "description": "Returns the 20 largest accounts, by lamport balance.\n\n    Returns:\n        str: Largest accounts info in the format \"Largest accounts: {accounts}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_largest_accountsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_latest_blockhash",
          "description": "Returns the latest block hash from the ledger.\n\n    Returns:\n        str: Latest blockhash in the format \"Latest blockhash: {blockhash}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_latest_blockhashArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_minimum_balance_for_rent_exemption",
          "description": "Returns minimum balance required to make account rent exempt.\n\n    Args:\n        size (int): Account data length\n\n    Returns:\n        str: Minimum balance in the format \"Minimum balance for rent exemption: {balance}\"\n    ",
          "input_schema": {
            "properties": {
              "size": {
                "title": "Size",
                "type": "integer"
              }
            },
            "required": [
              "size"
            ],
            "title": "get_minimum_balance_for_rent_exemptionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_program_accounts",
          "description": "Returns all accounts owned by the provided program Pubkey.\n\n    Args:\n        program_id (str): Pubkey of program to query\n\n    Returns:\n        str: Program accounts in the format \"Program accounts: {accounts}\"\n    ",
          "input_schema": {
            "properties": {
              "program_id": {
                "title": "Program Id",
                "type": "string"
              }
            },
            "required": [
              "program_id"
            ],
            "title": "get_program_accountsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_recent_performance_samples",
          "description": "Returns a list of recent performance samples, in reverse slot order.\n\n    Args:\n        limit (Optional[int], optional): Number of samples to return (maximum 720). Defaults to None.\n\n    Returns:\n        str: Performance samples in the format \"Performance samples: {samples}\"\n    ",
          "input_schema": {
            "properties": {
              "limit": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Limit"
              }
            },
            "title": "get_recent_performance_samplesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_signature_statuses",
          "description": "Returns the statuses of a list of signatures.\n\n    Args:\n        signatures (list[str]): List of transaction signatures to confirm\n\n    Returns:\n        str: Signature statuses in the format \"Signature statuses: {statuses}\"\n    ",
          "input_schema": {
            "properties": {
              "signatures": {
                "items": {
                  "type": "string"
                },
                "title": "Signatures",
                "type": "array"
              }
            },
            "required": [
              "signatures"
            ],
            "title": "get_signature_statusesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_slot",
          "description": "Returns the current slot the node is processing.\n\n    Returns:\n        str: Current slot in the format \"Current slot: {slot}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_slotArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_slot_leader",
          "description": "Returns the current slot leader.\n\n    Returns:\n        str: Slot leader in the format \"Slot leader: {leader}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_slot_leaderArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_supply",
          "description": "Returns information about the current supply.\n\n    Returns:\n        str: Supply information in the format \"Supply info: {supply}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_supplyArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_token_account_balance",
          "description": "Returns the token balance of an SPL Token account.\n\n    Args:\n        token_account (str): Pubkey of Token account to query\n\n    Returns:\n        str: Token account balance in the format \"Token account balance: {balance}\"\n    ",
          "input_schema": {
            "properties": {
              "token_account": {
                "title": "Token Account",
                "type": "string"
              }
            },
            "required": [
              "token_account"
            ],
            "title": "get_token_account_balanceArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_token_largest_accounts",
          "description": "Returns the 20 largest accounts of a particular SPL Token type.\n\n    Args:\n        mint (str): Pubkey of token mint to query\n\n    Returns:\n        str: Largest token accounts in the format \"Largest token accounts: {accounts}\"\n    ",
          "input_schema": {
            "properties": {
              "mint": {
                "title": "Mint",
                "type": "string"
              }
            },
            "required": [
              "mint"
            ],
            "title": "get_token_largest_accountsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_transaction_count",
          "description": "Returns the current Transaction count from the ledger.\n\n    Returns:\n        str: Transaction count in the format \"Transaction count: {count}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_transaction_countArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_version",
          "description": "Returns the current solana versions running on the node.\n\n    Returns:\n        str: Version information in the format \"Version info: {version}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_versionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_vote_accounts",
          "description": "Returns the account info and associated stake for all the voting accounts in the current bank.\n\n    Returns:\n        str: Vote accounts information in the format \"Vote accounts: {accounts}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_vote_accountsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "is_connected",
          "description": "Health check to verify if the client is connected.\n\n    Returns:\n        str: Connection status in the format \"Connected: {connected}\"\n    ",
          "input_schema": {
            "properties": {},
            "title": "is_connectedArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_block_commitment",
          "description": "Fetch the commitment for particular block.\n\n    Args:\n        slot (int): Block slot number to query\n\n    Returns:\n        str: Block commitment information\n    ",
          "input_schema": {
            "properties": {
              "slot": {
                "title": "Slot",
                "type": "integer"
              }
            },
            "required": [
              "slot"
            ],
            "title": "get_block_commitmentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "confirm_transaction",
          "description": "Confirm the transaction identified by the specified signature.\n\n    Args:\n        tx_sig (str): Transaction signature to confirm\n        commitment (Optional[str]): Bank state to query (\"finalized\", \"confirmed\" or \"processed\")\n\n    Returns:\n        str: Transaction confirmation status\n    ",
          "input_schema": {
            "properties": {
              "tx_sig": {
                "title": "Tx Sig",
                "type": "string"
              },
              "commitment": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Commitment"
              }
            },
            "required": [
              "tx_sig"
            ],
            "title": "confirm_transactionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_account_info",
          "description": "Returns all account info for the specified public key.\n\n    Args:\n        pubkey (str): Pubkey of account to query\n        encoding (str): Encoding for Account data (\"base58\", \"base64\", or \"jsonParsed\")\n\n    Returns:\n        str: Account information\n    ",
          "input_schema": {
            "properties": {
              "pubkey": {
                "title": "Pubkey",
                "type": "string"
              },
              "encoding": {
                "default": "base64",
                "title": "Encoding",
                "type": "string"
              }
            },
            "required": [
              "pubkey"
            ],
            "title": "get_account_infoArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_fee_for_message",
          "description": "Returns the fee for a message.\n\n    Args:\n        from_pubkey (str): Sender's public key\n        to_pubkey (str): Recipient's public key\n        lamports (int): Amount of lamports to transfer\n\n    Returns:\n        str: Fee information\n    ",
          "input_schema": {
            "properties": {
              "from_pubkey": {
                "title": "From Pubkey",
                "type": "string"
              },
              "to_pubkey": {
                "title": "To Pubkey",
                "type": "string"
              },
              "lamports": {
                "title": "Lamports",
                "type": "integer"
              }
            },
            "required": [
              "from_pubkey",
              "to_pubkey",
              "lamports"
            ],
            "title": "get_fee_for_messageArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_first_available_block",
          "description": "Returns the slot of the lowest confirmed block available.\n\n    Returns:\n        str: First available block information\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_first_available_blockArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_inflation_reward",
          "description": "Returns the inflation/staking reward for a list of addresses for an epoch.\n\n    Args:\n        pubkeys (list[str]): List of account addresses\n        epoch (Optional[int]): Epoch for which to calculate rewards\n\n    Returns:\n        str: Inflation reward information\n    ",
          "input_schema": {
            "properties": {
              "pubkeys": {
                "items": {
                  "type": "string"
                },
                "title": "Pubkeys",
                "type": "array"
              },
              "epoch": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Epoch"
              }
            },
            "required": [
              "pubkeys"
            ],
            "title": "get_inflation_rewardArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_leader_schedule",
          "description": "Returns the leader schedule for an epoch.\n\n    Args:\n        epoch (Optional[int]): Epoch to get schedule for\n\n    Returns:\n        str: Leader schedule information\n    ",
          "input_schema": {
            "properties": {
              "epoch": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Epoch"
              }
            },
            "title": "get_leader_scheduleArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_minimum_ledger_slot",
          "description": "Returns the lowest slot that the node has information about in its ledger.\n\n    Returns:\n        str: Minimum ledger slot information\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_minimum_ledger_slotArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_multiple_accounts",
          "description": "Returns the account information for a list of public keys.\n\n    Args:\n        pubkeys (list[str]): List of account public keys\n        encoding (str): Encoding for the account data\n\n    Returns:\n        str: Multiple accounts information\n    ",
          "input_schema": {
            "properties": {
              "pubkeys": {
                "items": {
                  "type": "string"
                },
                "title": "Pubkeys",
                "type": "array"
              },
              "encoding": {
                "default": "base64",
                "title": "Encoding",
                "type": "string"
              }
            },
            "required": [
              "pubkeys"
            ],
            "title": "get_multiple_accountsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_signatures_for_address",
          "description": "Returns confirmed signatures for transactions involving an address.\n\n    Args:\n        account (str): Account address to query\n        before (Optional[str]): Start searching backwards from this signature\n        until (Optional[str]): Search until this signature\n        limit (Optional[int]): Maximum number of signatures to return\n\n    Returns:\n        str: Signatures information\n    ",
          "input_schema": {
            "properties": {
              "account": {
                "title": "Account",
                "type": "string"
              },
              "before": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Before"
              },
              "until": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Until"
              },
              "limit": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Limit"
              }
            },
            "required": [
              "account"
            ],
            "title": "get_signatures_for_addressArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_token_accounts_by_delegate",
          "description": "Returns all SPL Token accounts by approved delegate.\n\n    Args:\n        delegate (str): Public key of delegate owner\n        mint (str): Token mint address\n\n    Returns:\n        str: Token accounts information\n    ",
          "input_schema": {
            "properties": {
              "delegate": {
                "title": "Delegate",
                "type": "string"
              },
              "mint": {
                "title": "Mint",
                "type": "string"
              }
            },
            "required": [
              "delegate",
              "mint"
            ],
            "title": "get_token_accounts_by_delegateArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_token_accounts_by_owner",
          "description": "Returns all SPL Token accounts by token owner.\n\n    Args:\n        owner (str): Public key of token owner\n        mint (str): Token mint address\n\n    Returns:\n        str: Token accounts information\n    ",
          "input_schema": {
            "properties": {
              "owner": {
                "title": "Owner",
                "type": "string"
              },
              "mint": {
                "title": "Mint",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "mint"
            ],
            "title": "get_token_accounts_by_ownerArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_token_supply",
          "description": "Returns the total supply of an SPL Token type.\n\n    Args:\n        mint (str): Public key of token mint\n\n    Returns:\n        str: Token supply information\n    ",
          "input_schema": {
            "properties": {
              "mint": {
                "title": "Mint",
                "type": "string"
              }
            },
            "required": [
              "mint"
            ],
            "title": "get_token_supplyArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "request_airdrop",
          "description": "Request an airdrop of lamports to a Pubkey.\n\n    Args:\n        address (str): Public key of recipient\n        lamports (int): Amount of lamports to request\n\n    Returns:\n        str: Airdrop request result\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "lamports": {
                "title": "Lamports",
                "type": "integer"
              }
            },
            "required": [
              "address",
              "lamports"
            ],
            "title": "request_airdropArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "send_transaction",
          "description": "Send a transaction that has already been signed and serialized into the wire format.\n\n    Args:\n        txn (bytes): Signed transaction as bytes\n\n    Returns:\n        str: Transaction send result\n    ",
          "input_schema": {
            "properties": {
              "txn": {
                "format": "binary",
                "title": "Txn",
                "type": "string"
              }
            },
            "required": [
              "txn"
            ],
            "title": "send_transactionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "validator_exit",
          "description": "Request to have the validator exit.\n\n    Returns:\n        str: Validator exit request result\n    ",
          "input_schema": {
            "properties": {},
            "title": "validator_exitArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@tywenk/mcp-solana/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@tywenk/mcp-solana/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0779.@tywenk_mcp-solana_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 761
  }
}