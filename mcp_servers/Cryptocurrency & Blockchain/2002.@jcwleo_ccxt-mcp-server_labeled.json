{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate interactions with cryptocurrency exchanges by providing a standardized interface for various trading and account management operations. It enables Large Language Models to execute tasks such as fetching account balances, placing orders, retrieving market data, and performing technical analysis. The server supports both public and private API calls, handling authentication externally, and offers tools for spot, futures, options, and other market types. The focus is on cryptocurrency trading and market data manipulation.",
    "reasoning": "The primary label \"Cryptocurrency & Blockchain\" is chosen because the server's core functionality revolves around cryptocurrency exchange interactions, including trading, market data, and account management. The secondary labels \"Data Analysis & Processing\" and \"API Integration\" are included because the server handles market data analysis (technical indicators) and integrates with third-party exchange APIs. No custom label is necessary as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "Data Analysis & Processing",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2001,
    "server_name": "CCXT Cryptocurrency Exchange Server",
    "rank_by_usage": 2002,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@jcwleo_ccxt-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@jcwleo/ccxt-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "fetch_account_balance",
          "description": "Fetches the current balance of an account from a specified cryptocurrency exchange. API authentication (api_key, secret_key) is handled externally. Use the `params` argument to specify account type (e.g., spot, margin, futures) if the exchange requires it, or to pass other exchange-specific parameters for fetching balances.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'coinbasepro', 'upbit'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange (e.g., for KuCoin, OKX). Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchBalance` call or for CCXT client instantiation. Use this to specify market types (e.g., `{'type': 'margin'}` or `{'options': {'defaultType': 'future'}}`), or pass other exchange-specific arguments. Example: `{'type': 'funding'}` or `{'options': {'defaultType': 'swap'}, 'symbol': 'BTC/USDT:USDT'}` for specific balance types.",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_deposit_address",
          "description": "Fetches the deposit address for a specific cryptocurrency on a given exchange. API authentication (api_key, secret_key) is handled externally. The `params` argument can be used to specify the network or chain if the currency supports multiple (e.g., ERC20, TRC20).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'kraken'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "code": {
                "description": "Currency code to fetch the deposit address for (e.g., 'BTC', 'ETH', 'USDT').",
                "title": "Code",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchDepositAddress` call or for client instantiation. Crucially, use this to specify the network/chain if the cryptocurrency exists on multiple networks. Example: `{'network': 'TRC20'}` for USDT on Tron network, or `{'chain': 'BEP20'}`. Can also include `{'options': ...}` for client-specific settings if needed.",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "code"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "withdraw_cryptocurrency",
          "description": "Initiates a cryptocurrency withdrawal to a specified address. API authentication (api_key, secret_key) and withdrawal permissions on the API key are handled externally. Use `params` to specify the network/chain if required by the exchange or currency, and for any other exchange-specific withdrawal parameters.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'ftx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "code": {
                "description": "Currency code for the withdrawal (e.g., 'BTC', 'ETH', 'USDT').",
                "title": "Code",
                "type": "string"
              },
              "amount": {
                "description": "The amount of currency to withdraw. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Amount",
                "type": "number"
              },
              "address": {
                "description": "The destination address for the withdrawal.",
                "title": "Address",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with withdrawal permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "tag": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Destination tag, memo, or payment ID for certain currencies (e.g., XRP, XLM, EOS). Check exchange/currency requirements.",
                "title": "Tag"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange for withdrawals. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `withdraw` call or for client instantiation. Use this to specify the network/chain (e.g., `{'network': 'BEP20'}`), especially if the currency supports multiple. May also be used for two-factor authentication codes if supported/required by the exchange via CCXT, or other specific withdrawal options. Example: `{'network': 'TRC20', 'feeToUser': False}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "code",
              "amount",
              "address"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_open_positions",
          "description": "Fetches currently open positions for futures, swaps, or other derivatives from an exchange. API authentication (api_key, secret_key) is handled externally. CRITICAL: The CCXT client MUST be initialized for the correct market type (e.g., futures, swap) using `params`. For example, pass `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'swap'}}` in `params` if not default for the exchange.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange that supports derivatives trading (e.g., 'binance', 'bybit', 'okx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchPositions` call AND for CCXT client instantiation. CRITICAL for client setup: Include `{'options': {'defaultType': 'future'}}` (or 'swap', 'linear', 'inverse') to specify market type if not the exchange default. For the API call: Can be used to filter positions by symbol(s) if supported by the exchange (e.g., `{'symbols': ['BTC/USDT:USDT', 'ETH/USDT:USDT']}`). Example for client init: `{'options': {'defaultType': 'future'}}`. Example for call: `{'symbol': 'BTC/USDT:USDT'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "set_trading_leverage",
          "description": "Sets the leverage for a specific trading symbol, typically in futures or margin markets. API authentication (api_key, secret_key) is handled externally. CRITICAL: Ensure the CCXT client is initialized for the correct market type (e.g., futures, margin) using `params` (e.g., `{'options': {'defaultType': 'future'}}`). The `symbol` parameter may or may not be required depending on the exchange and whether setting leverage for all symbols or a specific one.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'ftx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "leverage": {
                "description": "The desired leverage multiplier (e.g., 10 for 10x). Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Leverage",
                "type": "integer"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "symbol": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional/Required: The symbol (e.g., 'BTC/USDT:USDT' for futures, 'BTC/USDT' for margin) to set leverage for. Some exchanges require it, others set it account-wide or per market type. Check exchange documentation.",
                "title": "Symbol"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `setLeverage` call AND for CCXT client instantiation. CRITICAL for client setup: Include `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'margin'}}` if applicable. For the API call: May include parameters like `{'marginMode': 'isolated'}` or `{'marginMode': 'cross'}` if supported. Example for client init: `{'options': {'defaultType': 'future'}}`. Example for call: `{'marginMode': 'isolated'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "leverage"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_ohlcv",
          "description": "Fetches historical Open-High-Low-Close-Volume (OHLCV) candlestick data for a specific trading symbol and timeframe. Authentication (api_key, secret_key) is optional; some exchanges might provide more data or higher rate limits with authentication. Use `params` for exchange-specific options, like requesting 'mark' or 'index' price OHLCV for derivatives, or to set `defaultType` for client instantiation if fetching for non-spot markets.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'kraken'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The trading symbol to fetch OHLCV data for (e.g., 'BTC/USDT', 'ETH/BTC', 'BTC/USDT:USDT' for futures).",
                "title": "Symbol",
                "type": "string"
              },
              "timeframe": {
                "description": "The length of time each candle represents (e.g., '1m', '5m', '1h', '1d', '1w'). Check exchange for supported timeframes.",
                "title": "Timeframe",
                "type": "string"
              },
              "since": {
                "anyOf": [
                  {
                    "minimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: The earliest time in milliseconds (UTC epoch) to fetch OHLCV data from (e.g., 1502962800000 for 2017-08-17T10:00:00Z).",
                "title": "Since"
              },
              "limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: The maximum number of OHLCV candles to return. Check exchange for default and maximum limits.",
                "title": "Limit"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchOHLCV` call or for client instantiation. For client init (if fetching non-spot): `{'options': {'defaultType': 'future'}}`. For API call: To specify price type for derivatives (e.g., `{'price': 'mark'}` or `{'price': 'index'}`) or other exchange-specific query params. Example for mark price candles: `{'options': {'defaultType': 'future'}, 'price': 'mark'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "timeframe"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_funding_rate",
          "description": "Fetches the current or historical funding rate for a perpetual futures contract symbol. Authentication is optional. CRITICAL: For many exchanges, the CCXT client must be initialized for futures/swap markets using `params` (e.g., `{'options': {'defaultType': 'future'}}`). If `fetchFundingRate` is not supported, the exchange might support `fetchFundingRates` (plural) for multiple symbols or historical rates; check error messages or use a more specific tool if available.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'bybit'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The symbol to fetch the funding rate for (e.g., 'BTC/USDT:USDT', 'ETH-PERP'). Ensure correct perpetual contract symbol format for the exchange.",
                "title": "Symbol",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `fetchFundingRate` call or client instantiation. CRITICAL for client setup: Include `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'swap'}}` for correct market type. For API call: May be used for historical rates if supported (e.g., `{'since': timestamp, 'limit': N}`). Example for client init: `{'options': {'defaultType': 'future'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_long_short_ratio",
          "description": "Fetches the long/short ratio for a symbol, typically for futures markets, by calling exchange-specific (implicit) CCXT methods. Authentication is optional. Requires specifying the `method_name` and `method_params` within the `params` argument. Client may need to be initialized for futures/swap markets via `params` (e.g., `{'options': {'defaultType': 'future'}}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'bybit'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The symbol to fetch the long/short ratio for (e.g., 'BTC/USDT', 'BTC/USDT:USDT'). Format depends on the specific exchange method.",
                "title": "Symbol",
                "type": "string"
              },
              "timeframe": {
                "description": "Timeframe for the ratio data (e.g., '5m', '1h', '4h', '1d'). Format depends on the specific exchange method.",
                "title": "Timeframe",
                "type": "string"
              },
              "limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Number of data points to retrieve. Depends on the specific exchange method.",
                "title": "Limit"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "CRUCIAL: Must contain `method_name` (string: the exact CCXT implicit method name, e.g., 'publicGetFuturesDataOpenInterestHist') and `method_params` (dict: arguments for that method). Can also include `{'options': {'defaultType': 'future'}}` for client instantiation if needed. Example: `{'options': {'defaultType': 'future'}, 'method_name': 'fapiPublicGetGlobalLongShortAccountRatio', 'method_params': {'period': '5m'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "timeframe"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_option_contract_data",
          "description": "Fetches market data (typically ticker data) for a specific options contract. Authentication is optional. For many exchanges, the CCXT client may need to be initialized for options markets using `params` (e.g., `{'options': {'defaultType': 'option'}}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange that supports options trading (e.g., 'deribit', 'okx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The specific option contract symbol (e.g., 'BTC-28JUN24-70000-C' on Deribit). Format is exchange-specific.",
                "title": "Symbol",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `fetchTicker` (or other relevant fetch calls for options) AND for client instantiation. For client setup: Include `{'options': {'defaultType': 'option'}}` or similar for correct market type if needed. For API call: May include exchange-specific params if `fetchTicker` is used or for other option data methods. Example for client init: `{'options': {'defaultType': 'option'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_market_ticker",
          "description": "Fetches the latest ticker data for a specific trading symbol (e.g., price, volume, spread). Authentication is optional; some exchanges might provide more data or higher rate limits with authentication. If fetching for non-spot markets (futures, options, swaps), ensure the CCXT client is initialized correctly using `params` (e.g., `{'options': {'defaultType': 'future'}}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'coinbase'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The symbol to fetch the ticker for (e.g., 'BTC/USDT', 'ETH/USD', 'BTC/USDT:USDT' for futures, 'BTC-28JUN24-70000-C' for options). Format depends on the market type and exchange.",
                "title": "Symbol",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchTicker` call or for client instantiation. For client init (if non-spot): `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'option'}}`. For API call: May include exchange-specific params if the exchange offers variations on ticker data. Example for futures ticker: `{'options': {'defaultType': 'future'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_public_market_trades",
          "description": "Fetches recent public trades for a specific trading symbol. Does not require authentication, but providing API keys might increase rate limits or access. If fetching for non-spot markets (futures, options, swaps), ensure the CCXT client is initialized correctly using `params` (e.g., `{'options': {'defaultType': 'future'}}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'kraken'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The symbol to fetch public trades for (e.g., 'BTC/USDT', 'ETH/USD', 'BTC/USDT:USDT' for futures). Format depends on the market type and exchange.",
                "title": "Symbol",
                "type": "string"
              },
              "since": {
                "anyOf": [
                  {
                    "minimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Timestamp in milliseconds (UTC epoch) to fetch trades since (e.g., 1609459200000 for 2021-01-01T00:00:00Z).",
                "title": "Since"
              },
              "limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Maximum number of trades to fetch. Check exchange for default and maximum limits.",
                "title": "Limit"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchTrades` call or for client instantiation. For client init (if non-spot): `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'option'}}`. For API call: May include exchange-specific pagination or filtering parameters. Example for futures trades: `{'options': {'defaultType': 'future'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "create_spot_limit_order",
          "description": "Places a new limit order in the spot market. API authentication (api_key, secret_key) and trading permissions on the API key are handled externally. Use `params` for exchange-specific order parameters like `clientOrderId`, `postOnly`, or time-in-force policies (e.g., `{'timeInForce': 'FOK'}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'coinbasepro'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The spot market symbol to trade (e.g., 'BTC/USDT', 'ETH/BTC').",
                "title": "Symbol",
                "type": "string"
              },
              "side": {
                "description": "Order side: 'buy' to purchase the base asset, 'sell' to sell it.",
                "enum": [
                  "buy",
                  "sell"
                ],
                "title": "Side",
                "type": "string"
              },
              "amount": {
                "description": "The quantity of the base currency to trade. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Amount",
                "type": "number"
              },
              "price": {
                "description": "The price at which to place the limit order. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Price",
                "type": "number"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with trading permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange for trading. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `createOrder` call. Common uses include `{'clientOrderId': 'your_custom_id'}` for custom order identification, or specifying order properties like `{'postOnly': True}` (maker-only) or time-in-force policies (e.g., `{'timeInForce': 'GTC' / 'IOC' / 'FOK'}`). Example: `{'clientOrderId': 'my_spot_order_123', 'timeInForce': 'FOK'}`. No `options` for client instantiation are typically needed for spot orders unless the exchange has specific requirements.",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "side",
              "amount",
              "price"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "create_spot_market_order",
          "description": "Places a new market order in the spot market, to be filled at the best available current price. API authentication (api_key, secret_key) and trading permissions on the API key are handled externally. Use `params` for exchange-specific order parameters like `clientOrderId` or quote order quantity (if supported).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'kraken'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The spot market symbol to trade (e.g., 'BTC/USDT', 'ETH/EUR').",
                "title": "Symbol",
                "type": "string"
              },
              "side": {
                "description": "Order side: 'buy' to purchase the base asset, 'sell' to sell it.",
                "enum": [
                  "buy",
                  "sell"
                ],
                "title": "Side",
                "type": "string"
              },
              "amount": {
                "description": "The quantity of the base currency to trade (for a market buy, unless 'createMarketBuyOrderRequiresPrice' is False, then it's the quote currency amount for some exchanges like Upbit) or the quantity to sell (for a market sell). Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Amount",
                "type": "number"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with trading permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange for trading. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `createOrder` call. Common uses include `{'clientOrderId': 'your_custom_id'}`. For market buy orders, some exchanges allow `{'quoteOrderQty': quote_amount}` to specify the amount in quote currency (e.g., spend 100 USDT on BTC). For exchanges like Upbit market buy, you might need to pass `{'createMarketBuyOrderRequiresPrice': False}` if `amount` represents the total cost in quote currency. Example: `{'clientOrderId': 'my_market_buy_001', 'quoteOrderQty': 100}`. No `options` for client instantiation are typically needed for spot orders.",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "side",
              "amount"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "create_futures_limit_order",
          "description": "Places a new limit order in a futures/swap market. API authentication (api_key, secret_key) and trading permissions are handled externally. CRITICAL: The CCXT client MUST be initialized for the correct market type (e.g., 'future', 'swap') using `params` (e.g., `{'options': {'defaultType': 'future'}}`). Use `params` also for exchange-specific order parameters like `clientOrderId`, `postOnly`, `reduceOnly`, `timeInForce`.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange that supports futures/swap trading (e.g., 'binance', 'bybit', 'okx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The futures/swap contract symbol to trade (e.g., 'BTC/USDT:USDT', 'ETH-PERP'). Format is exchange-specific.",
                "title": "Symbol",
                "type": "string"
              },
              "side": {
                "description": "Order side: 'buy' for a long position, 'sell' for a short position.",
                "enum": [
                  "buy",
                  "sell"
                ],
                "title": "Side",
                "type": "string"
              },
              "amount": {
                "description": "The quantity of contracts or base currency to trade. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Amount",
                "type": "number"
              },
              "price": {
                "description": "The price at which to place the limit order. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Price",
                "type": "number"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with trading permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange for trading. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `createOrder` call AND for client instantiation. CRITICAL for client setup: Include `{'options': {'defaultType': 'future'}}` (or 'swap', 'linear', 'inverse' etc., depending on exchange and contract) to specify market type. For API call: Common uses include `{'clientOrderId': 'custom_id'}`, `{'postOnly': True}`, `{'reduceOnly': True}`, `{'timeInForce': 'GTC'}`. Example: `{'options': {'defaultType': 'future'}, 'reduceOnly': True, 'clientOrderId': 'my_fut_limit_001'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "side",
              "amount",
              "price"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "create_futures_market_order",
          "description": "Places a new market order in a futures/swap market, filled at the best available current price. API authentication (api_key, secret_key) and trading permissions are handled externally. CRITICAL: The CCXT client MUST be initialized for the correct market type (e.g., 'future', 'swap') using `params` (e.g., `{'options': {'defaultType': 'future'}}`). Use `params` also for exchange-specific parameters like `clientOrderId` or `reduceOnly`.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange that supports futures/swap trading (e.g., 'binance', 'bybit'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The futures/swap contract symbol to trade (e.g., 'BTC/USDT:USDT', 'ETH-PERP'). Format is exchange-specific.",
                "title": "Symbol",
                "type": "string"
              },
              "side": {
                "description": "Order side: 'buy' for a long position, 'sell' for a short position.",
                "enum": [
                  "buy",
                  "sell"
                ],
                "title": "Side",
                "type": "string"
              },
              "amount": {
                "description": "The quantity of contracts or base currency to trade. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Amount",
                "type": "number"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with trading permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange for trading. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `createOrder` call AND for client instantiation. CRITICAL for client setup: Include `{'options': {'defaultType': 'future'}}` (or 'swap', etc.) to specify market type. For API call: Common uses include `{'clientOrderId': 'custom_id'}`, `{'reduceOnly': True}`. Some exchanges might support `{'quoteOrderQty': quote_amount}` for market buys in quote currency, but this is less common for futures than spot. Check exchange docs. Example: `{'options': {'defaultType': 'future'}, 'reduceOnly': True, 'clientOrderId': 'my_fut_market_001'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "side",
              "amount"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "cancel_order",
          "description": "Cancels an existing open order on an exchange. API authentication (api_key, secret_key) is handled externally. The `symbol` parameter is required by some exchanges, optional for others. If canceling an order in a non-spot market (futures, options), ensure the CCXT client is initialized correctly using `params` (e.g., `{'options': {'defaultType': 'future'}}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'ftx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "id": {
                "description": "The order ID (string) of the order to be canceled.",
                "title": "Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with trading permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "symbol": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional/Required: The symbol of the order (e.g., 'BTC/USDT', 'BTC/USDT:USDT'). Required by some exchanges for `cancelOrder`, optional for others. Check exchange documentation.",
                "title": "Symbol"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `cancelOrder` call or for client instantiation. For client init (if non-spot): `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'option'}}`. For API call: Some exchanges might accept `clientOrderId` here if the main `id` is the exchange's ID, or other specific flags. Example for futures order cancel: `{'options': {'defaultType': 'future'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "id"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_order_history",
          "description": "Fetches a list of your orders (open, closed, canceled, etc.) for an account, optionally filtered by symbol, time, and limit. API authentication (api_key, secret_key) is handled externally. If fetching orders from a non-spot market (futures, options), ensure the CCXT client is initialized correctly using `params` (e.g., `{'options': {'defaultType': 'future'}}`). Some exchanges might use `fetchOrders` to get only open or closed orders by default; use `params` for finer control if supported (e.g. `{'status': 'open'}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'kucoin'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "symbol": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: The symbol (e.g., 'BTC/USDT', 'ETH/USDT:USDT') to fetch orders for. If omitted, orders for all symbols may be returned (exchange-dependent).",
                "title": "Symbol"
              },
              "since": {
                "anyOf": [
                  {
                    "minimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Timestamp in milliseconds (UTC epoch) to fetch orders created since this time.",
                "title": "Since"
              },
              "limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Maximum number of orders to retrieve. Check exchange for default and maximum limits.",
                "title": "Limit"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `fetchOrders` call or for client instantiation. For client init (if non-spot): `{'options': {'defaultType': 'future'}}`. For API call: Can be used to filter by order status (e.g., `{'status': 'open'/'closed'/'canceled'}` if supported), order type, or other exchange-specific filters. Example for open futures orders: `{'options': {'defaultType': 'future'}, 'status': 'open'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_my_trade_history",
          "description": "Fetches the history of your executed trades (fills) for an account, optionally filtered by symbol, time, and limit. API authentication (api_key, secret_key) is handled externally. If fetching trades from a non-spot market (futures, options), ensure the CCXT client is initialized correctly using `params` (e.g., `{'options': {'defaultType': 'future'}}`). Use `params` for any exchange-specific filtering not covered by standard arguments (e.g., filtering by orderId).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'ftx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "symbol": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: The symbol (e.g., 'BTC/USDT', 'BTC/USDT:USDT') to fetch your trades for. If omitted, trades for all symbols may be returned (exchange-dependent).",
                "title": "Symbol"
              },
              "since": {
                "anyOf": [
                  {
                    "minimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Timestamp in milliseconds (UTC epoch) to fetch trades executed since this time.",
                "title": "Since"
              },
              "limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Maximum number of trades to retrieve. Check exchange for default and maximum limits.",
                "title": "Limit"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `fetchMyTrades` call or for client instantiation. For client init (if non-spot): `{'options': {'defaultType': 'future'}}`. For API call: Can be used for exchange-specific filters like `{'orderId': 'some_order_id'}` to fetch trades for a specific order, or other types of filtering. Example for trades of a specific futures order: `{'options': {'defaultType': 'future'}, 'orderId': '12345'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "calculate_technical_indicator",
          "description": "Fetches OHLCV data for a given symbol and timeframe, then calculates a specified technical indicator (e.g., RSI, SMA, EMA, MACD, Bollinger Bands, Stochastic Oscillator, ATR). Returns a time series of calculated indicator values. The number of data points returned corresponds to the OHLCV data fetched (controlled by 'ohlcv_limit' in indicator_params).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'upbit'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The trading symbol to calculate the indicator for (e.g., 'BTC/USDT', 'ETH/KRW').",
                "title": "Symbol",
                "type": "string"
              },
              "timeframe": {
                "description": "The candle timeframe for OHLCV data. Common supported values are provided. Always check the specific exchange's documentation for their full list of supported timeframes as it can vary.",
                "enum": [
                  "1m",
                  "3m",
                  "5m",
                  "15m",
                  "30m",
                  "1h",
                  "2h",
                  "4h",
                  "6h",
                  "8h",
                  "12h",
                  "1d",
                  "3d",
                  "1w",
                  "1M"
                ],
                "title": "Timeframe",
                "type": "string"
              },
              "indicator_name": {
                "description": "The name of the technical indicator to calculate. Supported: RSI, SMA, EMA, MACD, BBANDS, STOCH, ATR.",
                "enum": [
                  "RSI",
                  "SMA",
                  "EMA",
                  "MACD",
                  "BBANDS",
                  "STOCH",
                  "ATR"
                ],
                "title": "Indicator Name",
                "type": "string"
              },
              "ohlcv_limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: The number of OHLCV data points to fetch. Default is 50. Check exchange for default and maximum limits.",
                "title": "Ohlcv Limit"
              },
              "indicator_params": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: A JSON string representing a dictionary of parameters for the chosen indicator. All parameters within the dictionary are optional and have defaults.\n        Example JSON string for RSI: {\"length\": 14, \"price_source\": \"close\"}.\n        Parameter details for the dictionary:\n        For RSI: {'length': 14, 'price_source': 'close'}.\n        For SMA/EMA: {'length': 20, 'price_source': 'close'}.\n        For MACD: {'fast': 12, 'slow': 26, 'signal': 9, 'price_source': 'close'}.\n        For BBANDS (Bollinger Bands): {'length': 20, 'std': 2.0, 'price_source': 'close'}.\n        For STOCH (Stochastic Oscillator): {'k_period': 14, 'd_period': 3, 'smooth_k': 3, 'price_source_high': 'high', 'price_source_low': 'low', 'price_source_close': 'close'}.\n        For ATR (Average True Range): {'period': 14, 'price_source_high': 'high', 'price_source_low': 'low', 'price_source_close': 'close'}.\n        Valid 'price_source' values for single-price indicators: 'open', 'high', 'low', 'close' (default), 'hlc3', 'ohlc4'.\n        Ensure the JSON string is correctly formatted.",
                "title": "Indicator Params"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT client instantiation when fetching OHLCV data, e.g., `{'options': {'defaultType': 'future'}}` if fetching for non-spot markets like futures.",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "timeframe",
              "indicator_name"
            ],
            "type": "object"
          },
          "annotations": {}
        }
      ],
      "tool_count": 19,
      "tool_names": [
        "fetch_account_balance",
        "fetch_deposit_address",
        "withdraw_cryptocurrency",
        "fetch_open_positions",
        "set_trading_leverage",
        "fetch_ohlcv",
        "fetch_funding_rate",
        "fetch_long_short_ratio",
        "fetch_option_contract_data",
        "fetch_market_ticker",
        "fetch_public_market_trades",
        "create_spot_limit_order",
        "create_spot_market_order",
        "create_futures_limit_order",
        "create_futures_market_order",
        "cancel_order",
        "fetch_order_history",
        "fetch_my_trade_history",
        "calculate_technical_indicator"
      ]
    },
    "server_info_crawled": {
      "id": 2001,
      "name": "CCXT Cryptocurrency Exchange Server",
      "author": "@jcwleo/ccxt-mcp-server",
      "overview": "Enable Large Language Models to interact with cryptocurrency exchanges by fetching balances, market data, creating orders, and more through a standardized asynchronous interface. Access both public market data and private account actions with support for API authentication. Simplify exchange operations with clear tool definitions and efficient non-blocking calls.",
      "repository_url": "https://github.com/jcwleo/ccxt-mcp-server",
      "homepage": "https://smithery.ai/server/@jcwleo/ccxt-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@jcwleo_ccxt-mcp-server.json",
      "tools_count": 19,
      "tools": [
        {
          "name": "fetch_account_balance",
          "description": "Fetches the current balance of an account from a specified cryptocurrency exchange. API authentication (api_key, secret_key) is handled externally. Use the `params` argument to specify account type (e.g., spot, margin, futures) if the exchange requires it, or to pass other exchange-specific parameters for fetching balances.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'coinbasepro', 'upbit'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange (e.g., for KuCoin, OKX). Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchBalance` call or for CCXT client instantiation. Use this to specify market types (e.g., `{'type': 'margin'}` or `{'options': {'defaultType': 'future'}}`), or pass other exchange-specific arguments. Example: `{'type': 'funding'}` or `{'options': {'defaultType': 'swap'}, 'symbol': 'BTC/USDT:USDT'}` for specific balance types.",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_deposit_address",
          "description": "Fetches the deposit address for a specific cryptocurrency on a given exchange. API authentication (api_key, secret_key) is handled externally. The `params` argument can be used to specify the network or chain if the currency supports multiple (e.g., ERC20, TRC20).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'kraken'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "code": {
                "description": "Currency code to fetch the deposit address for (e.g., 'BTC', 'ETH', 'USDT').",
                "title": "Code",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchDepositAddress` call or for client instantiation. Crucially, use this to specify the network/chain if the cryptocurrency exists on multiple networks. Example: `{'network': 'TRC20'}` for USDT on Tron network, or `{'chain': 'BEP20'}`. Can also include `{'options': ...}` for client-specific settings if needed.",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "code"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "withdraw_cryptocurrency",
          "description": "Initiates a cryptocurrency withdrawal to a specified address. API authentication (api_key, secret_key) and withdrawal permissions on the API key are handled externally. Use `params` to specify the network/chain if required by the exchange or currency, and for any other exchange-specific withdrawal parameters.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'ftx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "code": {
                "description": "Currency code for the withdrawal (e.g., 'BTC', 'ETH', 'USDT').",
                "title": "Code",
                "type": "string"
              },
              "amount": {
                "description": "The amount of currency to withdraw. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Amount",
                "type": "number"
              },
              "address": {
                "description": "The destination address for the withdrawal.",
                "title": "Address",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with withdrawal permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "tag": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Destination tag, memo, or payment ID for certain currencies (e.g., XRP, XLM, EOS). Check exchange/currency requirements.",
                "title": "Tag"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange for withdrawals. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `withdraw` call or for client instantiation. Use this to specify the network/chain (e.g., `{'network': 'BEP20'}`), especially if the currency supports multiple. May also be used for two-factor authentication codes if supported/required by the exchange via CCXT, or other specific withdrawal options. Example: `{'network': 'TRC20', 'feeToUser': False}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "code",
              "amount",
              "address"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_open_positions",
          "description": "Fetches currently open positions for futures, swaps, or other derivatives from an exchange. API authentication (api_key, secret_key) is handled externally. CRITICAL: The CCXT client MUST be initialized for the correct market type (e.g., futures, swap) using `params`. For example, pass `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'swap'}}` in `params` if not default for the exchange.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange that supports derivatives trading (e.g., 'binance', 'bybit', 'okx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchPositions` call AND for CCXT client instantiation. CRITICAL for client setup: Include `{'options': {'defaultType': 'future'}}` (or 'swap', 'linear', 'inverse') to specify market type if not the exchange default. For the API call: Can be used to filter positions by symbol(s) if supported by the exchange (e.g., `{'symbols': ['BTC/USDT:USDT', 'ETH/USDT:USDT']}`). Example for client init: `{'options': {'defaultType': 'future'}}`. Example for call: `{'symbol': 'BTC/USDT:USDT'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "set_trading_leverage",
          "description": "Sets the leverage for a specific trading symbol, typically in futures or margin markets. API authentication (api_key, secret_key) is handled externally. CRITICAL: Ensure the CCXT client is initialized for the correct market type (e.g., futures, margin) using `params` (e.g., `{'options': {'defaultType': 'future'}}`). The `symbol` parameter may or may not be required depending on the exchange and whether setting leverage for all symbols or a specific one.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'ftx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "leverage": {
                "description": "The desired leverage multiplier (e.g., 10 for 10x). Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Leverage",
                "type": "integer"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "symbol": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional/Required: The symbol (e.g., 'BTC/USDT:USDT' for futures, 'BTC/USDT' for margin) to set leverage for. Some exchanges require it, others set it account-wide or per market type. Check exchange documentation.",
                "title": "Symbol"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `setLeverage` call AND for CCXT client instantiation. CRITICAL for client setup: Include `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'margin'}}` if applicable. For the API call: May include parameters like `{'marginMode': 'isolated'}` or `{'marginMode': 'cross'}` if supported. Example for client init: `{'options': {'defaultType': 'future'}}`. Example for call: `{'marginMode': 'isolated'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "leverage"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_ohlcv",
          "description": "Fetches historical Open-High-Low-Close-Volume (OHLCV) candlestick data for a specific trading symbol and timeframe. Authentication (api_key, secret_key) is optional; some exchanges might provide more data or higher rate limits with authentication. Use `params` for exchange-specific options, like requesting 'mark' or 'index' price OHLCV for derivatives, or to set `defaultType` for client instantiation if fetching for non-spot markets.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'kraken'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The trading symbol to fetch OHLCV data for (e.g., 'BTC/USDT', 'ETH/BTC', 'BTC/USDT:USDT' for futures).",
                "title": "Symbol",
                "type": "string"
              },
              "timeframe": {
                "description": "The length of time each candle represents (e.g., '1m', '5m', '1h', '1d', '1w'). Check exchange for supported timeframes.",
                "title": "Timeframe",
                "type": "string"
              },
              "since": {
                "anyOf": [
                  {
                    "minimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: The earliest time in milliseconds (UTC epoch) to fetch OHLCV data from (e.g., 1502962800000 for 2017-08-17T10:00:00Z).",
                "title": "Since"
              },
              "limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: The maximum number of OHLCV candles to return. Check exchange for default and maximum limits.",
                "title": "Limit"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchOHLCV` call or for client instantiation. For client init (if fetching non-spot): `{'options': {'defaultType': 'future'}}`. For API call: To specify price type for derivatives (e.g., `{'price': 'mark'}` or `{'price': 'index'}`) or other exchange-specific query params. Example for mark price candles: `{'options': {'defaultType': 'future'}, 'price': 'mark'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "timeframe"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_funding_rate",
          "description": "Fetches the current or historical funding rate for a perpetual futures contract symbol. Authentication is optional. CRITICAL: For many exchanges, the CCXT client must be initialized for futures/swap markets using `params` (e.g., `{'options': {'defaultType': 'future'}}`). If `fetchFundingRate` is not supported, the exchange might support `fetchFundingRates` (plural) for multiple symbols or historical rates; check error messages or use a more specific tool if available.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'bybit'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The symbol to fetch the funding rate for (e.g., 'BTC/USDT:USDT', 'ETH-PERP'). Ensure correct perpetual contract symbol format for the exchange.",
                "title": "Symbol",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `fetchFundingRate` call or client instantiation. CRITICAL for client setup: Include `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'swap'}}` for correct market type. For API call: May be used for historical rates if supported (e.g., `{'since': timestamp, 'limit': N}`). Example for client init: `{'options': {'defaultType': 'future'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_long_short_ratio",
          "description": "Fetches the long/short ratio for a symbol, typically for futures markets, by calling exchange-specific (implicit) CCXT methods. Authentication is optional. Requires specifying the `method_name` and `method_params` within the `params` argument. Client may need to be initialized for futures/swap markets via `params` (e.g., `{'options': {'defaultType': 'future'}}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'bybit'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The symbol to fetch the long/short ratio for (e.g., 'BTC/USDT', 'BTC/USDT:USDT'). Format depends on the specific exchange method.",
                "title": "Symbol",
                "type": "string"
              },
              "timeframe": {
                "description": "Timeframe for the ratio data (e.g., '5m', '1h', '4h', '1d'). Format depends on the specific exchange method.",
                "title": "Timeframe",
                "type": "string"
              },
              "limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Number of data points to retrieve. Depends on the specific exchange method.",
                "title": "Limit"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "CRUCIAL: Must contain `method_name` (string: the exact CCXT implicit method name, e.g., 'publicGetFuturesDataOpenInterestHist') and `method_params` (dict: arguments for that method). Can also include `{'options': {'defaultType': 'future'}}` for client instantiation if needed. Example: `{'options': {'defaultType': 'future'}, 'method_name': 'fapiPublicGetGlobalLongShortAccountRatio', 'method_params': {'period': '5m'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "timeframe"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_option_contract_data",
          "description": "Fetches market data (typically ticker data) for a specific options contract. Authentication is optional. For many exchanges, the CCXT client may need to be initialized for options markets using `params` (e.g., `{'options': {'defaultType': 'option'}}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange that supports options trading (e.g., 'deribit', 'okx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The specific option contract symbol (e.g., 'BTC-28JUN24-70000-C' on Deribit). Format is exchange-specific.",
                "title": "Symbol",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `fetchTicker` (or other relevant fetch calls for options) AND for client instantiation. For client setup: Include `{'options': {'defaultType': 'option'}}` or similar for correct market type if needed. For API call: May include exchange-specific params if `fetchTicker` is used or for other option data methods. Example for client init: `{'options': {'defaultType': 'option'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_market_ticker",
          "description": "Fetches the latest ticker data for a specific trading symbol (e.g., price, volume, spread). Authentication is optional; some exchanges might provide more data or higher rate limits with authentication. If fetching for non-spot markets (futures, options, swaps), ensure the CCXT client is initialized correctly using `params` (e.g., `{'options': {'defaultType': 'future'}}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'coinbase'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The symbol to fetch the ticker for (e.g., 'BTC/USDT', 'ETH/USD', 'BTC/USDT:USDT' for futures, 'BTC-28JUN24-70000-C' for options). Format depends on the market type and exchange.",
                "title": "Symbol",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchTicker` call or for client instantiation. For client init (if non-spot): `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'option'}}`. For API call: May include exchange-specific params if the exchange offers variations on ticker data. Example for futures ticker: `{'options': {'defaultType': 'future'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_public_market_trades",
          "description": "Fetches recent public trades for a specific trading symbol. Does not require authentication, but providing API keys might increase rate limits or access. If fetching for non-spot markets (futures, options, swaps), ensure the CCXT client is initialized correctly using `params` (e.g., `{'options': {'defaultType': 'future'}}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'kraken'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The symbol to fetch public trades for (e.g., 'BTC/USDT', 'ETH/USD', 'BTC/USDT:USDT' for futures). Format depends on the market type and exchange.",
                "title": "Symbol",
                "type": "string"
              },
              "since": {
                "anyOf": [
                  {
                    "minimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Timestamp in milliseconds (UTC epoch) to fetch trades since (e.g., 1609459200000 for 2021-01-01T00:00:00Z).",
                "title": "Since"
              },
              "limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Maximum number of trades to fetch. Check exchange for default and maximum limits.",
                "title": "Limit"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `fetchTrades` call or for client instantiation. For client init (if non-spot): `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'option'}}`. For API call: May include exchange-specific pagination or filtering parameters. Example for futures trades: `{'options': {'defaultType': 'future'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "create_spot_limit_order",
          "description": "Places a new limit order in the spot market. API authentication (api_key, secret_key) and trading permissions on the API key are handled externally. Use `params` for exchange-specific order parameters like `clientOrderId`, `postOnly`, or time-in-force policies (e.g., `{'timeInForce': 'FOK'}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'coinbasepro'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The spot market symbol to trade (e.g., 'BTC/USDT', 'ETH/BTC').",
                "title": "Symbol",
                "type": "string"
              },
              "side": {
                "description": "Order side: 'buy' to purchase the base asset, 'sell' to sell it.",
                "enum": [
                  "buy",
                  "sell"
                ],
                "title": "Side",
                "type": "string"
              },
              "amount": {
                "description": "The quantity of the base currency to trade. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Amount",
                "type": "number"
              },
              "price": {
                "description": "The price at which to place the limit order. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Price",
                "type": "number"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with trading permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange for trading. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `createOrder` call. Common uses include `{'clientOrderId': 'your_custom_id'}` for custom order identification, or specifying order properties like `{'postOnly': True}` (maker-only) or time-in-force policies (e.g., `{'timeInForce': 'GTC' / 'IOC' / 'FOK'}`). Example: `{'clientOrderId': 'my_spot_order_123', 'timeInForce': 'FOK'}`. No `options` for client instantiation are typically needed for spot orders unless the exchange has specific requirements.",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "side",
              "amount",
              "price"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "create_spot_market_order",
          "description": "Places a new market order in the spot market, to be filled at the best available current price. API authentication (api_key, secret_key) and trading permissions on the API key are handled externally. Use `params` for exchange-specific order parameters like `clientOrderId` or quote order quantity (if supported).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'kraken'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The spot market symbol to trade (e.g., 'BTC/USDT', 'ETH/EUR').",
                "title": "Symbol",
                "type": "string"
              },
              "side": {
                "description": "Order side: 'buy' to purchase the base asset, 'sell' to sell it.",
                "enum": [
                  "buy",
                  "sell"
                ],
                "title": "Side",
                "type": "string"
              },
              "amount": {
                "description": "The quantity of the base currency to trade (for a market buy, unless 'createMarketBuyOrderRequiresPrice' is False, then it's the quote currency amount for some exchanges like Upbit) or the quantity to sell (for a market sell). Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Amount",
                "type": "number"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with trading permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange for trading. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for the CCXT `createOrder` call. Common uses include `{'clientOrderId': 'your_custom_id'}`. For market buy orders, some exchanges allow `{'quoteOrderQty': quote_amount}` to specify the amount in quote currency (e.g., spend 100 USDT on BTC). For exchanges like Upbit market buy, you might need to pass `{'createMarketBuyOrderRequiresPrice': False}` if `amount` represents the total cost in quote currency. Example: `{'clientOrderId': 'my_market_buy_001', 'quoteOrderQty': 100}`. No `options` for client instantiation are typically needed for spot orders.",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "side",
              "amount"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "create_futures_limit_order",
          "description": "Places a new limit order in a futures/swap market. API authentication (api_key, secret_key) and trading permissions are handled externally. CRITICAL: The CCXT client MUST be initialized for the correct market type (e.g., 'future', 'swap') using `params` (e.g., `{'options': {'defaultType': 'future'}}`). Use `params` also for exchange-specific order parameters like `clientOrderId`, `postOnly`, `reduceOnly`, `timeInForce`.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange that supports futures/swap trading (e.g., 'binance', 'bybit', 'okx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The futures/swap contract symbol to trade (e.g., 'BTC/USDT:USDT', 'ETH-PERP'). Format is exchange-specific.",
                "title": "Symbol",
                "type": "string"
              },
              "side": {
                "description": "Order side: 'buy' for a long position, 'sell' for a short position.",
                "enum": [
                  "buy",
                  "sell"
                ],
                "title": "Side",
                "type": "string"
              },
              "amount": {
                "description": "The quantity of contracts or base currency to trade. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Amount",
                "type": "number"
              },
              "price": {
                "description": "The price at which to place the limit order. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Price",
                "type": "number"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with trading permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange for trading. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `createOrder` call AND for client instantiation. CRITICAL for client setup: Include `{'options': {'defaultType': 'future'}}` (or 'swap', 'linear', 'inverse' etc., depending on exchange and contract) to specify market type. For API call: Common uses include `{'clientOrderId': 'custom_id'}`, `{'postOnly': True}`, `{'reduceOnly': True}`, `{'timeInForce': 'GTC'}`. Example: `{'options': {'defaultType': 'future'}, 'reduceOnly': True, 'clientOrderId': 'my_fut_limit_001'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "side",
              "amount",
              "price"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "create_futures_market_order",
          "description": "Places a new market order in a futures/swap market, filled at the best available current price. API authentication (api_key, secret_key) and trading permissions are handled externally. CRITICAL: The CCXT client MUST be initialized for the correct market type (e.g., 'future', 'swap') using `params` (e.g., `{'options': {'defaultType': 'future'}}`). Use `params` also for exchange-specific parameters like `clientOrderId` or `reduceOnly`.",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange that supports futures/swap trading (e.g., 'binance', 'bybit'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The futures/swap contract symbol to trade (e.g., 'BTC/USDT:USDT', 'ETH-PERP'). Format is exchange-specific.",
                "title": "Symbol",
                "type": "string"
              },
              "side": {
                "description": "Order side: 'buy' for a long position, 'sell' for a short position.",
                "enum": [
                  "buy",
                  "sell"
                ],
                "title": "Side",
                "type": "string"
              },
              "amount": {
                "description": "The quantity of contracts or base currency to trade. Must be greater than 0.",
                "exclusiveMinimum": 0,
                "title": "Amount",
                "type": "number"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with trading permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange for trading. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `createOrder` call AND for client instantiation. CRITICAL for client setup: Include `{'options': {'defaultType': 'future'}}` (or 'swap', etc.) to specify market type. For API call: Common uses include `{'clientOrderId': 'custom_id'}`, `{'reduceOnly': True}`. Some exchanges might support `{'quoteOrderQty': quote_amount}` for market buys in quote currency, but this is less common for futures than spot. Check exchange docs. Example: `{'options': {'defaultType': 'future'}, 'reduceOnly': True, 'clientOrderId': 'my_fut_market_001'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "side",
              "amount"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "cancel_order",
          "description": "Cancels an existing open order on an exchange. API authentication (api_key, secret_key) is handled externally. The `symbol` parameter is required by some exchanges, optional for others. If canceling an order in a non-spot market (futures, options), ensure the CCXT client is initialized correctly using `params` (e.g., `{'options': {'defaultType': 'future'}}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'ftx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "id": {
                "description": "The order ID (string) of the order to be canceled.",
                "title": "Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key with trading permissions. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the API. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "symbol": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional/Required: The symbol of the order (e.g., 'BTC/USDT', 'BTC/USDT:USDT'). Required by some exchanges for `cancelOrder`, optional for others. Check exchange documentation.",
                "title": "Symbol"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `cancelOrder` call or for client instantiation. For client init (if non-spot): `{'options': {'defaultType': 'future'}}` or `{'options': {'defaultType': 'option'}}`. For API call: Some exchanges might accept `clientOrderId` here if the main `id` is the exchange's ID, or other specific flags. Example for futures order cancel: `{'options': {'defaultType': 'future'}}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "id"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_order_history",
          "description": "Fetches a list of your orders (open, closed, canceled, etc.) for an account, optionally filtered by symbol, time, and limit. API authentication (api_key, secret_key) is handled externally. If fetching orders from a non-spot market (futures, options), ensure the CCXT client is initialized correctly using `params` (e.g., `{'options': {'defaultType': 'future'}}`). Some exchanges might use `fetchOrders` to get only open or closed orders by default; use `params` for finer control if supported (e.g. `{'status': 'open'}`).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'kucoin'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "symbol": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: The symbol (e.g., 'BTC/USDT', 'ETH/USDT:USDT') to fetch orders for. If omitted, orders for all symbols may be returned (exchange-dependent).",
                "title": "Symbol"
              },
              "since": {
                "anyOf": [
                  {
                    "minimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Timestamp in milliseconds (UTC epoch) to fetch orders created since this time.",
                "title": "Since"
              },
              "limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Maximum number of orders to retrieve. Check exchange for default and maximum limits.",
                "title": "Limit"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `fetchOrders` call or for client instantiation. For client init (if non-spot): `{'options': {'defaultType': 'future'}}`. For API call: Can be used to filter by order status (e.g., `{'status': 'open'/'closed'/'canceled'}` if supported), order type, or other exchange-specific filters. Example for open futures orders: `{'options': {'defaultType': 'future'}, 'status': 'open'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "fetch_my_trade_history",
          "description": "Fetches the history of your executed trades (fills) for an account, optionally filtered by symbol, time, and limit. API authentication (api_key, secret_key) is handled externally. If fetching trades from a non-spot market (futures, options), ensure the CCXT client is initialized correctly using `params` (e.g., `{'options': {'defaultType': 'future'}}`). Use `params` for any exchange-specific filtering not covered by standard arguments (e.g., filtering by orderId).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'ftx'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key. If not directly provided, the system may use pre-configured credentials. Authentication is required for this operation.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "symbol": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: The symbol (e.g., 'BTC/USDT', 'BTC/USDT:USDT') to fetch your trades for. If omitted, trades for all symbols may be returned (exchange-dependent).",
                "title": "Symbol"
              },
              "since": {
                "anyOf": [
                  {
                    "minimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Timestamp in milliseconds (UTC epoch) to fetch trades executed since this time.",
                "title": "Since"
              },
              "limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Maximum number of trades to retrieve. Check exchange for default and maximum limits.",
                "title": "Limit"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: API passphrase if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT `fetchMyTrades` call or for client instantiation. For client init (if non-spot): `{'options': {'defaultType': 'future'}}`. For API call: Can be used for exchange-specific filters like `{'orderId': 'some_order_id'}` to fetch trades for a specific order, or other types of filtering. Example for trades of a specific futures order: `{'options': {'defaultType': 'future'}, 'orderId': '12345'}`",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id"
            ],
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "calculate_technical_indicator",
          "description": "Fetches OHLCV data for a given symbol and timeframe, then calculates a specified technical indicator (e.g., RSI, SMA, EMA, MACD, Bollinger Bands, Stochastic Oscillator, ATR). Returns a time series of calculated indicator values. The number of data points returned corresponds to the OHLCV data fetched (controlled by 'ohlcv_limit' in indicator_params).",
          "input_schema": {
            "properties": {
              "exchange_id": {
                "description": "The ID of the exchange (e.g., 'binance', 'upbit'). Case-insensitive.",
                "title": "Exchange Id",
                "type": "string"
              },
              "symbol": {
                "description": "The trading symbol to calculate the indicator for (e.g., 'BTC/USDT', 'ETH/KRW').",
                "title": "Symbol",
                "type": "string"
              },
              "timeframe": {
                "description": "The candle timeframe for OHLCV data. Common supported values are provided. Always check the specific exchange's documentation for their full list of supported timeframes as it can vary.",
                "enum": [
                  "1m",
                  "3m",
                  "5m",
                  "15m",
                  "30m",
                  "1h",
                  "2h",
                  "4h",
                  "6h",
                  "8h",
                  "12h",
                  "1d",
                  "3d",
                  "1w",
                  "1M"
                ],
                "title": "Timeframe",
                "type": "string"
              },
              "indicator_name": {
                "description": "The name of the technical indicator to calculate. Supported: RSI, SMA, EMA, MACD, BBANDS, STOCH, ATR.",
                "enum": [
                  "RSI",
                  "SMA",
                  "EMA",
                  "MACD",
                  "BBANDS",
                  "STOCH",
                  "ATR"
                ],
                "title": "Indicator Name",
                "type": "string"
              },
              "ohlcv_limit": {
                "anyOf": [
                  {
                    "exclusiveMinimum": 0,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: The number of OHLCV data points to fetch. Default is 50. Check exchange for default and maximum limits.",
                "title": "Ohlcv Limit"
              },
              "indicator_params": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: A JSON string representing a dictionary of parameters for the chosen indicator. All parameters within the dictionary are optional and have defaults.\n        Example JSON string for RSI: {\"length\": 14, \"price_source\": \"close\"}.\n        Parameter details for the dictionary:\n        For RSI: {'length': 14, 'price_source': 'close'}.\n        For SMA/EMA: {'length': 20, 'price_source': 'close'}.\n        For MACD: {'fast': 12, 'slow': 26, 'signal': 9, 'price_source': 'close'}.\n        For BBANDS (Bollinger Bands): {'length': 20, 'std': 2.0, 'price_source': 'close'}.\n        For STOCH (Stochastic Oscillator): {'k_period': 14, 'd_period': 3, 'smooth_k': 3, 'price_source_high': 'high', 'price_source_low': 'low', 'price_source_close': 'close'}.\n        For ATR (Average True Range): {'period': 14, 'price_source_high': 'high', 'price_source_low': 'low', 'price_source_close': 'close'}.\n        Valid 'price_source' values for single-price indicators: 'open', 'high', 'low', 'close' (default), 'hlc3', 'ohlc4'.\n        Ensure the JSON string is correctly formatted.",
                "title": "Indicator Params"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API key for the exchange. If not provided, the system may use pre-configured credentials or proceed unauthenticated. If authentication is used (with directly provided or pre-configured keys), it may offer benefits like enhanced access or higher rate limits.",
                "title": "Api Key"
              },
              "secret_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your secret key for the exchange. Used with an API key if authentication is performed (whether keys are provided directly or pre-configured).",
                "title": "Secret Key"
              },
              "passphrase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Your API passphrase, if required by the exchange. Used with an API key if authentication is performed and the exchange requires it (whether keys are provided directly or pre-configured).",
                "title": "Passphrase"
              },
              "params": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional: Extra parameters for CCXT client instantiation when fetching OHLCV data, e.g., `{'options': {'defaultType': 'future'}}` if fetching for non-spot markets like futures.",
                "title": "Params"
              }
            },
            "required": [
              "exchange_id",
              "symbol",
              "timeframe",
              "indicator_name"
            ],
            "type": "object"
          },
          "annotations": {}
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@jcwleo/ccxt-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@jcwleo/ccxt-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "2002.@jcwleo_ccxt-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1746
  }
}