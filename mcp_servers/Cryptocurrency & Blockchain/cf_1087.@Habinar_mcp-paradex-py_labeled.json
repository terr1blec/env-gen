{
  "labels": {
    "analysis": "The Paradex Server is designed to bridge AI assistants with the Paradex perpetual futures trading platform. It provides a comprehensive set of tools for retrieving market data, managing trading accounts and vaults, executing trades, and monitoring positions and balances. Key functionalities include account management (positions, fills, funding payments), market analysis (orderbooks, klines, trades), order execution (placing, canceling, monitoring), and vault management (balances, positions, transfers). The server enables advanced trading analysis and strategy generation by providing structured access to Paradex's trading infrastructure.",
    "reasoning": "The primary label is \"Cryptocurrency & Blockchain\" as the server's core functionality revolves around managing and trading perpetual futures, which is a common feature in cryptocurrency markets. \"Financial Services\" is a secondary label as the server also provides account and risk management tools that are broader than just crypto trading. \"Data Analysis & Processing\" is another secondary label due to the server's ability to perform technical analysis and generate trading strategies. The custom label \"Trading Automation\" is added to highlight the server's specific use case in automating trading activities.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "Financial Services",
      "Data Analysis & Processing"
    ],
    "custom_label": "Trading Automation",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1086,
    "server_name": "Paradex Server",
    "rank_by_usage": 1087,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@Habinar_mcp-paradex-py.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Habinar/mcp-paradex-py/mcp?config=eyJwYXJhZGV4RW52aXJvbm1lbnQiOiAicHJvZCJ9&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1086,
      "name": "Paradex Server",
      "author": "@Habinar/mcp-paradex-py",
      "overview": "Bridge AI assistants with the Paradex perpetual futures trading platform to retrieve market data, manage trading accounts and vaults, place and manage orders, and monitor positions and balances. Enable seamless interaction with Paradex for trading and portfolio management through a standardized protocol. Facilitate advanced trading analysis and strategy generation with structured prompts.",
      "repository_url": "https://github.com/Habinar/mcp-paradex-py",
      "homepage": "https://smithery.ai/server/@Habinar/mcp-paradex-py",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Habinar_mcp-paradex-py.json",
      "tools_count": 26,
      "tools": [
        {
          "name": "paradex_account_summary",
          "description": "Deploy Server Paradex Server @Habinar/mcp-paradex-py Try in Playground paradex_account_summary",
          "parameters": []
        },
        {
          "name": "paradex_account_positions",
          "description": "Analyze your open positions to monitor exposure, profitability, and risk. Use this tool when you need to: - Check the status and P&L of all your open positions - Monitor your liquidation prices and margin requirements - Assess your exposure across different markets - Make decisions about position management (scaling, hedging, closing) Understanding your current positions is fundamental to proper risk management and is the starting point for many trading decisions. Example use cases: - Checking the unrealized P&L of your positions - Monitoring liquidation prices during market volatility - Assessing total exposure across related assets - Verifying entry prices and position sizes",
          "parameters": []
        },
        {
          "name": "paradex_account_fills",
          "description": "Analyze your executed trades to evaluate performance and execution quality. Use this tool when you need to: - Review your trading history across specific markets - Calculate your average entry price for multi-fill positions - Analyze execution quality compared to intended prices - Track realized PnL from completed trades - Verify order execution details for reconciliation Detailed fill information is essential for performance analysis and understanding how your orders were actually executed. Example use cases: - Calculating volume-weighted average price (VWAP) of your entries - Analyzing execution slippage from your intended prices - Reviewing trade history for tax or accounting purposes - Tracking commission costs across different markets - Identifying which of your strategies produced the best execution",
          "parameters": []
        },
        {
          "name": "paradex_account_funding_payments",
          "description": "Track your funding payment history to understand its impact on P&L. Use this tool when you need to: - Calculate total funding costs or gains for a position - Analyze how funding has affected your overall performance - Plan position timing around funding payment schedules - Compare funding costs across different markets - Account for funding in your trading strategy profitability Funding payments can significantly impact perpetual futures trading P&L, especially for longer-term positions or in markets with volatile funding rates. Example use cases: - Calculating the total funding component of your P&L - Comparing funding costs against trading profits - Planning position entries/exits around funding payment times - Identifying markets where funding has been consistently favorable - Reconciling funding payments for accounting purposes",
          "parameters": []
        },
        {
          "name": "paradex_account_transactions",
          "description": "Get account transaction history. Retrieves a filtered history of account transactions, including deposits, withdrawals, trades, funding payments, and other account activities. Use transaction_type and time filters to limit the results and avoid overwhelming the client. This tool is valuable for: - Reconciliation of account activity - Auditing trading history - Tracking deposits and withdrawals - Analyzing funding payments over time",
          "parameters": []
        },
        {
          "name": "paradex_filters_model",
          "description": "Get detailed schema information to build precise data filters. Use this tool when you need to: - Understand exactly what fields are available for filtering - Learn the data types and formats for specific fields - Build complex JMESPath queries with correct syntax - Create sophisticated filtering and sorting expressions Knowing the exact schema helps you construct precise filters that return exactly the data you need, avoiding trial and error. Example use cases: - Learning what fields exist in market data responses - Finding the correct property names for filtering - Understanding data types for numerical comparisons - Building complex multi-criteria filters for large datasets",
          "parameters": []
        },
        {
          "name": "paradex_markets",
          "description": "Find markets that match your trading criteria or get detailed market specifications. Use this tool when you need to: - Understand exact tick sizes and minimum order sizes before placing trades - Find all markets for a specific asset (e.g., all BTC-based markets) - Compare contract specifications across different markets - Identify markets with specific characteristics for your trading strategy Retrieves comprehensive details about specified markets, including base and quote assets, tick size, minimum order size, and other trading parameters. If \"ALL\" is specified or no market IDs are provided, returns details for all available markets. Example use cases: - Finding the minimum order size for a new trade - Identifying markets with the smallest tick size for precise entries - Checking which assets are available for trading `asset_kind` is the type of asset in the market. It can be `PERP` or `PERP_OPTION`. You can use JMESPath expressions (https://jmespath.org/specification.html) to filter, sort, or limit the results. Use the `paradex_filters_model` tool to get the filters for a tool. Examples: - Filter by base asset: \"[?base_asset=='BTC']\" - Sort by 24h volume: \"sort_by([*], &volume_24h)\" - Limit to top 5 by volume: \"[sort_by([*], &to_number(volume_24h))[-5:]]\"",
          "parameters": []
        },
        {
          "name": "paradex_market_summaries",
          "description": "Identify the most active or volatile markets and get current market conditions. Use this tool when you need to: - Find the most active markets by volume for liquidity analysis - Discover markets with significant price movements for momentum strategies - Compare current prices across multiple assets - Identify markets with unusual behavior for potential opportunities Retrieves current market summary information including price, volume, 24h change, and other key market metrics. If \"ALL\" is specified or no market IDs are provided, returns summaries for all available markets. Example use cases: - Finding high-volatility markets for short-term trading - Identifying top gainers and losers for the day - Comparing volume across different markets to find liquidity - Getting the current price and 24-hour range for price analysis You can use JMESPath expressions (https://jmespath.org/specification.html) to filter, sort, or limit the results. Use the `paradex_filters_model` tool to get the filters for a tool. Examples: - Filter by high price: \"[?high_price > `10000`]\" - Sort by volume: \"sort_by([*], &volume)\" - Get top 3 by price change: \"[sort_by([*], &to_number(price_change_percent))[-3:]]\"",
          "parameters": []
        },
        {
          "name": "paradex_funding_data",
          "description": "Analyze funding rates for potential funding arbitrage or to understand holding costs. Use this tool when you need to: - Calculate expected funding payments for a position - Find markets with extreme funding rates for potential arbitrage - Understand historical funding patterns for a market - Evaluate the cost of holding a position over time This data is critical for perpetual futures traders to assess the carrying cost of positions and identify potential funding arbitrage opportunities. Example use cases: - Finding markets with negative funding for \"paid to hold\" opportunities - Calculating the funding component of a trade's P&L - Comparing funding rates across different assets for relative value trades - Analyzing funding rate volatility to predict potential rate changes",
          "parameters": []
        },
        {
          "name": "paradex_orderbook",
          "description": "Analyze market depth and liquidity to optimize order entry and execution. Use this tool when you need to: - Assess true liquidity before placing large orders - Identify potential support/resistance levels from order clusters - Determine optimal limit order prices for higher fill probability - Detect order imbalances that might signal price direction Understanding the orderbook is essential for effective trade execution, especially for larger orders or in less liquid markets. Example use cases: - Finding the optimal limit price to ensure your order gets filled - Estimating potential slippage for market orders of different sizes - Identifying large resting orders that might act as support/resistance - Detecting order book imbalances that could predict short-term price moves",
          "parameters": []
        },
        {
          "name": "paradex_klines",
          "description": "Analyze historical price patterns for technical analysis and trading decisions. Use this tool when you need to: - Perform technical analysis on historical price data - Identify support and resistance levels from price history - Calculate indicators like moving averages, RSI, or MACD - Backtest trading strategies on historical data - Visualize price action over specific timeframes Candlestick data is fundamental for most technical analysis and trading decisions, providing structured price and volume information over time. Example use cases: - Identifying chart patterns for potential entries or exits - Calculating technical indicators for trading signals - Determining volatility by analyzing price ranges - Finding significant price levels from historical support/resistance - Measuring volume patterns to confirm price movements",
          "parameters": []
        },
        {
          "name": "paradex_trades",
          "description": "Analyze actual market transactions to understand market sentiment and liquidity. Use this tool when you need to: - Detect large trades that might signal institutional activity - Calculate average trade size during specific periods - Identify buy/sell pressure imbalances - Monitor execution prices vs. order book prices - Understand market momentum through trade flow Trade data provides insights into actual market activity versus just orders, helping you understand how other participants are behaving. Example use cases: - Detecting large \"whale\" transactions that might influence price - Analyzing trade sizes to gauge market participation - Identifying periods of aggressive buying or selling - Understanding trade frequency as an indicator of market interest - Comparing executed prices to orderbook mid-price for market impact analysis",
          "parameters": []
        },
        {
          "name": "paradex_bbo",
          "description": "Get the current best available prices for immediate execution decisions. Use this tool when you need to: - Make quick trading decisions without full orderbook depth - Calculate current spread costs before placing orders - Monitor real-time price changes efficiently - Get a snapshot of current market conditions - Determine fair mid-price for calculations The BBO provides the most essential price information with minimal data, perfect for quick decisions or when full orderbook depth isn't needed. Example use cases: - Calculating current trading spreads before placing orders - Monitoring real-time price movements efficiently - Determining execution prices for immediate market orders - Calculating mid-price for order placement strategies - Setting appropriate limit order prices to improve fill chances",
          "parameters": []
        },
        {
          "name": "paradex_open_orders",
          "description": "Monitor your active orders to track execution status and manage your trading strategy. Use this tool when you need to: - Check which of your orders are still pending execution - Verify limit order prices and remaining quantities - Determine which orders might need cancellation or modification - Get a complete picture of your current market exposure Keeping track of your open orders is essential for effective order management and avoiding duplicate or conflicting trades. Example use cases: - Checking if your limit orders have been partially filled - Verifying that a recently placed order was accepted by the exchange - Identifying stale orders that should be canceled or modified - Getting a consolidated view of all pending orders across markets",
          "parameters": []
        },
        {
          "name": "paradex_create_order",
          "description": "Execute trades on Paradex with precise control over all order parameters. Use this tool when you need to: - Enter a new position based on your trading strategy - Set limit orders at specific price levels - Create stop-loss or take-profit orders for risk management - Implement complex trading strategies with conditional orders This is the primary tool for executing your trading decisions on Paradex, with full control over order type, size, price, and execution parameters. Example use cases: - Setting limit orders at key support/resistance levels - Placing stop-limit orders to manage risk on existing positions - Executing market orders for immediate entry or exit - Creating reduce-only orders to ensure you don't flip position direction Succesful response indicates that orders were queued for execution. Check order status using order id.",
          "parameters": []
        },
        {
          "name": "paradex_cancel_orders",
          "description": "Cancel pending orders to manage exposure or adjust your trading strategy. Use this tool when you need to: - Remove stale limit orders that are no longer desirable - Quickly reduce market exposure during volatility - Update your order strategy by removing existing orders - Clear your order book before implementing a new strategy - React to changing market conditions by canceling pending orders Order cancellation is a critical risk management function and allows you to quickly adapt to changing market conditions. Example use cases: - Canceling limit orders when your outlook changes - Removing all orders during unexpected market volatility - Canceling a specific order identified by order ID - Clearing all orders for a specific market - Removing stale orders before placing new ones Calling without any parameters will cancel all orders. Succesful response indicates that orders were queued for cancellation. Check order status using order id.",
          "parameters": []
        },
        {
          "name": "paradex_order_status",
          "description": "Check the detailed status of a specific order for execution monitoring. Use this tool when you need to: - Confirm if a particular order was accepted and is active - Check if an order has been filled, partially filled, or canceled - Get execution details for a specific order - Diagnose issues with order placement - Track the status of important orders individually Order status tracking is essential for verifying execution status and troubleshooting any issues with specific orders. Example use cases: - Checking if a recently placed limit order is active in the book - Verifying fill details of a specific order - Determining why an order might have been rejected - Confirming cancellation status of an order you attempted to cancel - Getting execution timestamps for order lifecycle analysis",
          "parameters": []
        },
        {
          "name": "paradex_orders_history",
          "description": "Get historical orders. Retrieves the history of orders for the account, including filled, canceled, and expired orders. This is useful for analyzing past trading activity and performance.",
          "parameters": []
        },
        {
          "name": "paradex_system_config",
          "description": "Understand the exchange's global parameters that affect all trading activity. Use this tool when you need to: - Check fee schedules before placing trades - Verify trading limits and restrictions - Understand exchange-wide parameters that affect your trading - Keep up with changes to the exchange's configuration This information provides important context for making trading decisions and understanding how the exchange operates. Example use cases: - Checking current fee tiers for different markets - Verifying maximum leverage available for specific markets - Understanding global trading limits or restrictions - Checking if any exchange-wide changes might affect your trading strategy",
          "parameters": []
        },
        {
          "name": "paradex_system_state",
          "description": "Verify the exchange is fully operational before executing trades. Use this tool when you need to: - Check if Paradex is functioning normally before placing important orders - Verify system status if you encounter unexpected behavior - Confirm that maintenance periods are not in effect - Check exchange clock synchronization with your own systems This is especially important before executing critical trades or when experiencing unexpected behavior from other API calls. Example use cases: - Verifying the exchange is operational before executing a trading strategy - Checking if maintenance mode is active when experiencing delays - Confirming exchange status during periods of market volatility - Diagnosing API issues by checking system health",
          "parameters": []
        },
        {
          "name": "paradex_vaults",
          "description": "Get detailed information about a specific vault or all vaults if no address is provided. Retrieves comprehensive details about a specific vault identified by its address, including configuration, permissions, and other vault-specific parameters. Use jmespath_filter to reduce the number of results as much as possible as number of vaults can be large. You can use JMESPath expressions to filter, sort, or limit the results. Examples: - Filter by owner: \"[?owner_account=='0x123...']\" - Filter by status: \"[?status=='ACTIVE']\" - Find vaults with specific strategy: \"[?contains(strategies, 'strategy_id')]\" - Sort by creation date: \"sort_by([*], &created_at)\" - Limit to newest vaults: \"sort_by([*], &created_at)[-5:]\" - Select specific fields: \"[*].{address: address, name: name, kind: kind, status: status}\"",
          "parameters": []
        },
        {
          "name": "paradex_vault_balance",
          "description": "Get the current balance of a specific vault. Retrieves the current balance information for a specific vault, including available funds, locked funds, and total balance. This is essential for understanding the financial state of a vault before executing trades or withdrawals.",
          "parameters": []
        },
        {
          "name": "paradex_vault_summary",
          "description": "Get a comprehensive summary of a specific vault or all vaults if no address is provided. Retrieves a summary of all important information about a vault, including balance, positions, recent activity, and performance metrics. This provides a high-level overview of the vault's current state. Use jmespath_filter to reduce the number of results as much as possible as number of vaults can be large. You can use JMESPath expressions to filter, sort, or transform the results. Examples: - Filter by TVL: \"[?to_number(tvl) > `10000`]\" - Filter by performance: \"[?to_number(total_roi) > `5.0`]\" - Sort by TVL (descending): \"reverse(sort_by([*], &to_number(tvl)))\" - Get top performers: \"sort_by([*], &to_number(total_roi))[-3:]\" - Filter by recent returns: \"[?to_number(roi_24h) > `0.5`]\" - Extract specific metrics: \"[*].{address: address, tvl: tvl, total_roi: total_roi, volume_24h: volume_24h}\"",
          "parameters": []
        },
        {
          "name": "paradex_vault_transfers",
          "description": "Track deposit and withdrawal history for auditing and reconciliation. Use this tool when you need to: - Verify deposits have completed and are available for trading - Track withdrawal status and confirm transaction settlement - Audit the complete fund flow history for a vault - Reconcile on-chain transactions with platform records - Understand historical capital allocation patterns Complete transfer history is essential for proper accounting and provides a clear audit trail of all capital movements. Example use cases: - Confirming that a recent deposit was credited to your account - Tracking the status of pending withdrawals - Creating transaction reports for accounting or tax purposes - Verifying the total amount deposited over time - Analyzing deposit/withdrawal patterns for strategy insights",
          "parameters": []
        },
        {
          "name": "paradex_vault_positions",
          "description": "Monitor active trading positions to track performance and manage risk. Use this tool when you need to: - Get a complete view of all open positions for a vault - Monitor unrealized P&L across all positions - Check liquidation prices and margin requirements - Assess position sizing and leverage across markets - Track entry prices and position duration Position monitoring is fundamental to risk management and provides the necessary information for trade management decisions. Example use cases: - Checking the current status of all open trades - Monitoring unrealized profit/loss across positions - Assessing liquidation risk during market volatility - Comparing performance across different markets - Planning adjustments to position sizes or leverage",
          "parameters": []
        },
        {
          "name": "paradex_vault_account_summary",
          "description": "Get a comprehensive overview of a vault's trading account status. Use this tool when you need to: - Check account health and available margin - Monitor total exposure and leverage - Understand risk metrics and account status - Assess trading capacity before placing new orders - Get a consolidated view of account performance This provides essential information about account standing and trading capacity to inform risk management decisions. Example use cases: - Checking available margin before placing new orders - Monitoring account health during market volatility - Assessing total exposure across all markets - Understanding maintenance margin requirements - Planning position adjustments based on account metrics",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"paradexEnvironment\": \"prod\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@Habinar/mcp-paradex-py/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"paradexEnvironment\": \"prod\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@Habinar/mcp-paradex-py/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "cf_1087.@Habinar_mcp-paradex-py_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1064
  }
}