{
  "labels": {
    "analysis": "The MCP Server described is designed to enhance AI assistant capabilities by providing tools for document management and RAG (Retrieval-Augmented Generation) functionality. It allows users to upload documents, manage them in a repository, and engage in chat interactions using predefined templates. The core functionality revolves around integrating chat completions with document storage and retrieval, enabling enriched AI interactions.",
    "reasoning": "The primary functionality is centered around enhancing chat capabilities with document retrieval and management, which aligns with tools for processing and interacting with information. The available tools focus on chat interactions and document handling, fitting well into the \"Memory Management\" category as it involves storing and retrieving knowledge. The \"AI/ML Tools\" label is also relevant due to its integration with AI model interactions and RAG capabilities.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": "Retrieval-Augmented Generation",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2355,
    "server_name": "Prem AI MCP Server",
    "rank_by_usage": 2356,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@ucalyptus_prem-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ucalyptus/prem-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2355,
      "name": "Prem AI MCP Server",
      "author": "@ucalyptus/prem-mcp-server",
      "overview": "Integrate seamlessly with Prem AI's powerful features for chat completions and document management. Enhance your AI assistants with Retrieval-Augmented Generation capabilities and real-time streaming responses. Upload and manage documents effortlessly to enrich your interactions.",
      "repository_url": "https://github.com/ucalyptus/prem-mcp-server",
      "homepage": "https://smithery.ai/server/@ucalyptus/prem-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ucalyptus_prem-mcp-server.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "chat",
          "description": "Deploy Server Prem AI MCP Server @ucalyptus/prem-mcp-server Try in Playground",
          "parameters": [
            {
              "name": "chat",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "prem_upload_document",
          "description": "Upload a document to a Prem AI repository",
          "parameters": [
            {
              "name": "file_path",
              "required": true,
              "type": "string"
            },
            {
              "name": "repository_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "prem_chat_with_template",
          "description": "Chat using a predefined Prem AI prompt template",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@ucalyptus/prem-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "premApiKey",
          "required": true,
          "description": "API key for Prem AI authentication."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@ucalyptus/prem-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2356.@ucalyptus_prem-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2024
  }
}