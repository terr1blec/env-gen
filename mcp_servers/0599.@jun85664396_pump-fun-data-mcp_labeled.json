{
  "labels": {
    "analysis": "The MCP Server is primarily designed to fetch and integrate cryptocurrency-related data, focusing on coins and their information. It provides tools that enable users to retrieve lists of featured and general coins, as well as detailed information about specific coins. This aligns closely with financial data retrieval, particularly in the cryptocurrency domain.",
    "reasoning": "The primary functionality revolves around fetching and processing cryptocurrency data, which directly fits into the \"Cryptocurrency & Blockchain\" category. Given the tools' focus on financial data about coins, this is the most apt predefined category. No secondary labels are necessary as the core purpose is well-contained within the primary category. The functionality is not unique enough to warrant a custom label.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [],
    "custom_label": "No secondary labels needed",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 598,
    "server_name": "Pump.fun Data Fetch Tool",
    "rank_by_usage": 599,
    "usage_count": "18",
    "original_file": "../crawler/smithery/@jun85664396_pump-fun-data-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@jun85664396/pump-fun-data-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_featured_coins",
          "description": "Get a list of featured coins",
          "input_schema": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "number",
                "description": "The offset to start from (default: 0)",
                "default": 0
              },
              "limit": {
                "type": "number",
                "description": "The number of coins to return (default: 24)",
                "default": 24
              },
              "includeNsfw": {
                "type": "boolean",
                "description": "Include NSFW coins (default: true)",
                "default": true
              }
            }
          },
          "annotations": null
        },
        {
          "name": "get_coins",
          "description": "Get a list of coins",
          "input_schema": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "number",
                "description": "The offset to start from (default: 0)",
                "default": 0
              },
              "limit": {
                "type": "number",
                "description": "The number of coins to return (default: 24)",
                "default": 24
              },
              "sort": {
                "type": "string",
                "description": "The field to sort by (market_cap, last_trade_timestamp, created_timestamp, last_reply)",
                "default": "market_cap"
              },
              "includeNsfw": {
                "type": "boolean",
                "description": "Include NSFW coins (default: true)",
                "default": true
              },
              "order": {
                "type": "string",
                "description": "The order to sort by (ASC, DESC)",
                "default": "DESC"
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_coin_info",
          "description": "Get information about a coin",
          "input_schema": {
            "type": "object",
            "properties": {
              "mintId": {
                "type": "string",
                "description": "The mint id of the coin(coin address)"
              }
            },
            "required": [
              "mintId"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 3,
      "tool_names": [
        "get_featured_coins",
        "get_coins",
        "get_coin_info"
      ]
    },
    "server_info_crawled": {
      "id": 598,
      "name": "Pump.fun Data Fetch Tool",
      "author": "@jun85664396/pump-fun-data-mcp",
      "overview": "Fetch and integrate data seamlessly for your applications using the Model Context Protocol. Enhance your projects with real-time data access and manipulation capabilities. Simplify your data interactions and improve efficiency with this powerful tool.",
      "repository_url": "https://github.com/jun85664396/pump-fun-data-mcp",
      "homepage": "https://smithery.ai/server/@jun85664396/pump-fun-data-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "18",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@jun85664396_pump-fun-data-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "get_featured_coins",
          "description": "Get a list of featured coins",
          "input_schema": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "number",
                "description": "The offset to start from (default: 0)",
                "default": 0
              },
              "limit": {
                "type": "number",
                "description": "The number of coins to return (default: 24)",
                "default": 24
              },
              "includeNsfw": {
                "type": "boolean",
                "description": "Include NSFW coins (default: true)",
                "default": true
              }
            }
          },
          "annotations": null
        },
        {
          "name": "get_coins",
          "description": "Get a list of coins",
          "input_schema": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "number",
                "description": "The offset to start from (default: 0)",
                "default": 0
              },
              "limit": {
                "type": "number",
                "description": "The number of coins to return (default: 24)",
                "default": 24
              },
              "sort": {
                "type": "string",
                "description": "The field to sort by (market_cap, last_trade_timestamp, created_timestamp, last_reply)",
                "default": "market_cap"
              },
              "includeNsfw": {
                "type": "boolean",
                "description": "Include NSFW coins (default: true)",
                "default": true
              },
              "order": {
                "type": "string",
                "description": "The order to sort by (ASC, DESC)",
                "default": "DESC"
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_coin_info",
          "description": "Get information about a coin",
          "input_schema": {
            "type": "object",
            "properties": {
              "mintId": {
                "type": "string",
                "description": "The mint id of the coin(coin address)"
              }
            },
            "required": [
              "mintId"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@jun85664396/pump-fun-data-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@jun85664396/pump-fun-data-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0599.@jun85664396_pump-fun-data-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 585
  }
}