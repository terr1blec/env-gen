{
  "labels": {
    "analysis": "The MCP Flutter Inspector server is specifically designed to debug Flutter applications by providing tools that analyze widget trees, navigation, and layout issues. The available tools allow for deep inspection of the Flutter framework's internal structures, including render trees, semantics trees, focus trees, and more. These tools enable AI coding assistants to help developers identify and resolve UI and performance-related problems in Flutter apps during development. The server connects to the Flutter debug port (default 8181) and provides various RPC methods to dump, inspect, and manipulate widget properties and app state.",
    "reasoning": "The primary label \"Development Tools\" was chosen because the server's primary functionality revolves around debugging and analyzing code within Flutter applications, which is a core developer activity. The secondary labels \"Operating System\" and \"Database Operations\" were selected because the server interacts with the underlying OS (via debugging ports) and provides tools to query and manipulate app state. A custom label \"Flutter Debugging\" was created to specifically highlight the server's specialized focus on Flutter application debugging, as this unique functionality isn't captured by the predefined categories.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Operating System",
      "Database Operations"
    ],
    "custom_label": "Flutter Debugging",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1647,
    "server_name": "Flutter Inspector",
    "rank_by_usage": 1648,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Arenukvern_mcp_flutter.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Arenukvern/mcp_flutter/mcp?config=eyJzdGRpbyI6IHRydWUsICJsb2dMZXZlbCI6ICJjcml0aWNhbCIsICJkYXJ0Vk1Ib3N0IjogImxvY2FsaG9zdCIsICJkYXJ0Vk1Qb3J0IjogODE4MSwgIm1jcFNlcnZlckhvc3QiOiAibG9jYWxob3N0IiwgIm1jcFNlcnZlclBvcnQiOiAzNTM1LCAiZm9yd2FyZGluZ1NlcnZlckhvc3QiOiAibG9jYWxob3N0IiwgImZvcndhcmRpbmdTZXJ2ZXJQb3J0IjogODE0M30=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "Connection timeout (20 seconds)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1647,
      "name": "Flutter Inspector",
      "author": "@Arenukvern/mcp_flutter",
      "overview": "A MCP server with simple goal to debug Flutter apps by giving ability to AI coding assistants (Cline, Cursor, Claude etc..) tools to do analysis of widget trees, navigation, and layout issues. See https://github.com/Arenukvern/mcp_flutter/blob/main/ARCHITECTURE.md to understand how it works",
      "repository_url": "https://github.com/Arenukvern/mcp_flutter",
      "homepage": "https://smithery.ai/server/@Arenukvern/mcp_flutter",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Arenukvern_mcp_flutter.json",
      "tools_count": 62,
      "tools": [
        {
          "name": "get_active_ports",
          "description": "Deploy Server Flutter Inspector @Arenukvern/mcp_flutter Try in Playground get_active_ports",
          "parameters": [
            {
              "name": "get_active_ports",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_supported_protocols",
          "description": "Utility: Get supported protocols from a Flutter app. This is a VM service method, not a Flutter RPC. Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "get_supported_protocols",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_vm_info",
          "description": "Utility: Get VM information from a Flutter app. This is a VM service method, not a Flutter RPC. Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "get_vm_info",
              "required": false,
              "type": "string"
            },
            {
              "name": "port",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_extension_rpcs",
          "description": "Utility: List all available extension RPCs in the Flutter app. This is a helper tool for discovering available methods.",
          "parameters": [
            {
              "name": "get_extension_rpcs",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_dump_render_tree",
          "description": "RPC: Dump the render tree (ext.flutter.debugDumpRenderTree). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "debug_dump_render_tree",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_dump_layer_tree",
          "description": "RPC: Dump the layer tree (ext.flutter.debugDumpLayerTree). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "debug_dump_layer_tree",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_dump_semantics_tree",
          "description": "RPC: Dump the semantics tree (ext.flutter.debugDumpSemanticsTreeInTraversalOrder). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "debug_dump_semantics_tree",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_dump_semantics_tree_inverse",
          "description": "RPC: Dump the semantics tree in inverse hit test order (ext.flutter.debugDumpSemanticsTreeInInverseHitTestOrder)",
          "parameters": [
            {
              "name": "debug_dump_semantics_tree_inverse",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_paint_baselines_enabled",
          "description": "RPC: Toggle baseline paint debugging (ext.flutter.debugPaintBaselinesEnabled). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "debug_paint_baselines_enabled",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_dump_focus_tree",
          "description": "RPC: Dump the focus tree (ext.flutter.debugDumpFocusTree)",
          "parameters": [
            {
              "name": "debug_dump_focus_tree",
              "required": false,
              "type": "string"
            },
            {
              "name": "port",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_disable_physical_shape_layers",
          "description": "RPC: Toggle physical shape layers debugging (ext.flutter.debugDisablePhysicalShapeLayers)",
          "parameters": [
            {
              "name": "debug_disable_physical_shape_layers",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_disable_opacity_layers",
          "description": "RPC: Toggle opacity layers debugging (ext.flutter.debugDisableOpacityLayers). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "debug_disable_opacity_layers",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_screenshot",
          "description": "RPC: Take a screenshot of the Flutter app (ext.flutter.inspector.screenshot). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "inspector_screenshot",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_get_layout_explorer_node",
          "description": "RPC: Get layout explorer information for a widget (ext.flutter.inspector.getLayoutExplorerNode). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "inspector_get_layout_explorer_node",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_track_rebuild_dirty_widgets",
          "description": "RPC: Track widget rebuilds to identify performance issues (ext.flutter.inspector.trackRebuildDirtyWidgets). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "inspector_track_rebuild_dirty_widgets",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_set_selection_by_id",
          "description": "RPC: Set the selected widget by ID (ext.flutter.inspector.setSelectionById). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "inspector_set_selection_by_id",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_get_parent_chain",
          "description": "RPC: Get the parent chain for a widget (ext.flutter.inspector.getParentChain). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "inspector_get_parent_chain",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_get_children_summary_tree",
          "description": "RPC: Get the children summary tree for a widget (ext.flutter.inspector.getChildrenSummaryTree). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "inspector_get_children_summary_tree",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_get_children_details_subtree",
          "description": "RPC: Get the children details subtree for a widget (ext.flutter.inspector.getChildrenDetailsSubtree)",
          "parameters": [
            {
              "name": "inspector_get_children_details_subtree",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_get_root_widget_summary_tree",
          "description": "RPC: Get the root widget summary tree (ext.flutter.inspector.getRootWidgetSummaryTree)",
          "parameters": [
            {
              "name": "inspector_get_root_widget_summary_tree",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_get_root_widget_summary_tree_with_previews",
          "description": "RPC: Get the root widget summary tree with previews from the Flutter app. This provides a hierarchical view of the widget tree with preview information.",
          "parameters": [
            {
              "name": "inspector_get_root_widget_summary_tree_with_previews",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_get_details_subtree",
          "description": "RPC: Get the details subtree for a widget. This provides detailed information about the widget and its descendants. Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "inspector_get_details_subtree",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_get_selected_widget",
          "description": "RPC: Get information about the currently selected widget in the Flutter app. Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "inspector_get_selected_widget",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_get_selected_summary_widget",
          "description": "RPC: Get summary information about the currently selected widget in the Flutter app. Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "inspector_get_selected_summary_widget",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_is_widget_creation_tracked",
          "description": "RPC: Check if widget creation tracking is enabled in the Flutter app.",
          "parameters": [
            {
              "name": "inspector_is_widget_creation_tracked",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "dart_io_socket_profiling_enabled",
          "description": "RPC: Enable or disable socket profiling. Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "dart_io_socket_profiling_enabled",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "dart_io_http_enable_timeline_logging",
          "description": "RPC: Enable or disable HTTP timeline logging. Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "dart_io_http_enable_timeline_logging",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "dart_io_get_version",
          "description": "RPC: Get Flutter version information (ext.dart.io.getVersion)",
          "parameters": [
            {
              "name": "dart_io_get_version",
              "required": false,
              "type": "string"
            },
            {
              "name": "port",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "dart_io_get_open_files",
          "description": "RPC: Get list of currently open files in the Flutter app",
          "parameters": [
            {
              "name": "dart_io_get_open_files",
              "required": false,
              "type": "string"
            },
            {
              "name": "port",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "dart_io_get_open_file_by_id",
          "description": "RPC: Get details of a specific open file by its ID",
          "parameters": [
            {
              "name": "port",
              "required": false,
              "type": "string"
            },
            {
              "name": "fileId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "stream_listen",
          "description": "RPC: Subscribe to a Flutter event stream. This is a VM service method for event monitoring. Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "stream_listen",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "dart_io_get_http_profile_request",
          "description": "RPC: Get details of a specific HTTP request from the profile",
          "parameters": [
            {
              "name": "dart_io_get_http_profile_request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "flutter_core_invert_oversized_images",
          "description": "RPC: Toggle inverting of oversized images for debugging",
          "parameters": [
            {
              "name": "flutter_core_invert_oversized_images",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_allow_banner",
          "description": "RPC: Toggle the debug banner in the Flutter app",
          "parameters": [
            {
              "name": "port",
              "required": false,
              "type": "string"
            },
            {
              "name": "enabled",
              "required": true,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "flutter_core_did_send_first_frame_event",
          "description": "RPC: Check if the first frame event has been sent",
          "parameters": [
            {
              "name": "flutter_core_did_send_first_frame_event",
              "required": false,
              "type": "string"
            },
            {
              "name": "port",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "flutter_core_did_send_first_frame_rasterized_event",
          "description": "RPC: Check if the first frame has been rasterized",
          "parameters": [
            {
              "name": "flutter_core_did_send_first_frame_rasterized_event",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "flutter_core_platform_override",
          "description": "RPC: Override the platform for the Flutter app",
          "parameters": [
            {
              "name": "port",
              "required": false,
              "type": "string"
            },
            {
              "name": "platform",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "flutter_core_brightness_override",
          "description": "RPC: Override the brightness for the Flutter app",
          "parameters": [
            {
              "name": "flutter_core_brightness_override",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "flutter_core_time_dilation",
          "description": "RPC: Set the time dilation factor for animations in the Flutter app",
          "parameters": [
            {
              "name": "flutter_core_time_dilation",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "flutter_core_evict",
          "description": "RPC: Evict an asset from the Flutter app's cache",
          "parameters": [
            {
              "name": "port",
              "required": false,
              "type": "string"
            },
            {
              "name": "asset",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "flutter_core_profile_platform_channels",
          "description": "RPC: Enable or disable profiling of platform channels",
          "parameters": [
            {
              "name": "flutter_core_profile_platform_channels",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_disable_clip_layers",
          "description": "RPC: Toggle disabling of clip layers in the Flutter app",
          "parameters": [
            {
              "name": "debug_disable_clip_layers",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_disable_physical_shape_layers",
          "description": "RPC: Toggle physical shape layers debugging (ext.flutter.debugDisablePhysicalShapeLayers)",
          "parameters": [
            {
              "name": "debug_disable_physical_shape_layers",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug_disable_opacity_layers",
          "description": "RPC: Toggle opacity layers debugging (ext.flutter.debugDisableOpacityLayers). Connects to the default Flutter debug port (8181) unless specified otherwise.",
          "parameters": [
            {
              "name": "debug_disable_opacity_layers",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "repaint_rainbow",
          "description": "RPC: Toggle repaint rainbow debugging (ext.flutter.repaintRainbow)",
          "parameters": [
            {
              "name": "repaint_rainbow",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_structured_errors",
          "description": "RPC: Enable or disable structured error reporting in the Flutter app.",
          "parameters": [
            {
              "name": "inspector_structured_errors",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_show",
          "description": "RPC: Show specific widget details in the Flutter app inspector.",
          "parameters": [
            {
              "name": "port",
              "required": false,
              "type": "string"
            },
            {
              "name": "options",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_widget_location_id_map",
          "description": "RPC: Get a mapping of widget IDs to their source code locations (ext.flutter.inspector.widgetLocationIdMap)",
          "parameters": [
            {
              "name": "inspector_widget_location_id_map",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_track_repaint_widgets",
          "description": "RPC: Track widget repaints to identify rendering performance issues (ext.flutter.inspector.trackRepaintWidgets)",
          "parameters": [
            {
              "name": "inspector_track_repaint_widgets",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_dispose_all_groups",
          "description": "RPC: Dispose all inspector groups to free up memory (ext.flutter.inspector.disposeAllGroups)",
          "parameters": [
            {
              "name": "inspector_dispose_all_groups",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_dispose_group",
          "description": "RPC: Dispose a specific inspector group to free up memory (ext.flutter.inspector.disposeGroup)",
          "parameters": [
            {
              "name": "inspector_dispose_group",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_is_widget_tree_ready",
          "description": "RPC: Check if the widget tree is ready for inspection (ext.flutter.inspector.isWidgetTreeReady)",
          "parameters": [
            {
              "name": "inspector_is_widget_tree_ready",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_dispose_id",
          "description": "RPC: Dispose a specific widget ID to free up memory (ext.flutter.inspector.disposeId)",
          "parameters": [
            {
              "name": "inspector_dispose_id",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_set_pub_root_directories",
          "description": "RPC: Set the root directories for pub packages (ext.flutter.inspector.setPubRootDirectories)",
          "parameters": [
            {
              "name": "inspector_set_pub_root_directories",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_add_pub_root_directories",
          "description": "RPC: Add additional root directories for pub packages (ext.flutter.inspector.addPubRootDirectories)",
          "parameters": [
            {
              "name": "inspector_add_pub_root_directories",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_remove_pub_root_directories",
          "description": "RPC: Remove root directories from pub packages (ext.flutter.inspector.removePubRootDirectories)",
          "parameters": [
            {
              "name": "inspector_remove_pub_root_directories",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "inspector_get_pub_root_directories",
          "description": "RPC: Get the list of root directories for pub packages (ext.flutter.inspector.getPubRootDirectories)",
          "parameters": [
            {
              "name": "inspector_get_pub_root_directories",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "layout_set_flex_fit",
          "description": "RPC: Set the flex fit property of a flex child widget (ext.flutter.inspector.setFlexFit)",
          "parameters": [
            {
              "name": "layout_set_flex_fit",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "layout_set_flex_factor",
          "description": "RPC: Set the flex factor of a flex child widget (ext.flutter.inspector.setFlexFactor)",
          "parameters": [
            {
              "name": "layout_set_flex_factor",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "layout_set_flex_properties",
          "description": "RPC: Set multiple flex properties of a flex child widget (ext.flutter.inspector.setFlexProperties)",
          "parameters": [
            {
              "name": "layout_set_flex_properties",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "performance_profile_render_object_paints",
          "description": "RPC: Enable or disable profiling of render object paint operations (ext.flutter.profileRenderObjectPaints)",
          "parameters": [
            {
              "name": "performance_profile_render_object_paints",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "performance_profile_render_object_layouts",
          "description": "RPC: Enable or disable profiling of render object layout operations (ext.flutter.profileRenderObjectLayouts)",
          "parameters": [
            {
              "name": "performance_profile_render_object_layouts",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"stdio\": true,\n  \"logLevel\": \"critical\",\n  \"dartVMHost\": \"localhost\",\n  \"dartVMPort\": 8181,\n  \"mcpServerHost\": \"localhost\",\n  \"mcpServerPort\": 3535,\n  \"forwardingServerHost\": \"localhost\",\n  \"forwardingServerPort\": 8143\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@Arenukvern/mcp_flutter/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"stdio\": true,\n  \"logLevel\": \"critical\",\n  \"dartVMHost\": \"localhost\",\n  \"dartVMPort\": 8181,\n  \"mcpServerHost\": \"localhost\",\n  \"mcpServerPort\": 3535,\n  \"forwardingServerHost\": \"localhost\",\n  \"forwardingServerPort\": 8143\n}",
      "python_sdk_url": "https://server.smithery.ai/@Arenukvern/mcp_flutter/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "cf_1648.@Arenukvern_mcp_flutter_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1493
  }
}