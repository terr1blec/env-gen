{
  "labels": {
    "analysis": "The MCP Server for OnSecurity provides tools specifically tailored for security assessment and incident management. Its primary functionality revolves around querying and summarizing security-related data such as rounds, findings, notifications, and prerequisites. The tools allow for filtering and summarizing this data in a client-friendly format, suggesting a focus on security operations and audit processes. The server enables users to retrieve structured, high-level summaries of security findings, making it particularly useful for security professionals and auditors.",
    "reasoning": "The primary label \"Security & Operations\" is chosen because the server's tools are directly related to security assessments and management. The secondary label \"Data Analysis & Processing\" is included because the server processes and summarizes complex security data. The secondary label \"Database Operations\" is also appropriate as the tools query and retrieve structured data. The custom label \"Security Assessment Management\" is added to describe the specific niche functionality of managing and summarizing security assessment data.",
    "primary_label": "Security & Authentication",
    "secondary_labels": [
      "Data Analysis & Processing",
      "Database Operations"
    ],
    "custom_label": "Security Assessment Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 587,
    "server_name": "OnSecurity",
    "rank_by_usage": 588,
    "usage_count": "18",
    "original_file": "../crawler/smithery/@onsecurity_onsecurity-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@onsecurity/onsecurity-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 587,
      "name": "OnSecurity",
      "author": "@onsecurity/onsecurity-mcp-server",
      "overview": "An MCP server for the OnSecurity API that allows Claude to query rounds, findings, prerequisites and notifications.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@onsecurity/onsecurity-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "18",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@onsecurity_onsecurity-mcp-server.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "get-rounds",
          "description": "Deploy Server @onsecurity/onsecurity-mcp-server Try in Playground",
          "parameters": []
        },
        {
          "name": "get-findings",
          "description": "Get all findings data from OnSecurity from client in a high level summary, only include the summary, not the raw data and be sure to present the data in a way that is easy to understand for the client. You can optionally filter findings by round_id. Note that there is no way to find the most common findings using this endpoint. You must use the get-blocks endpoint to find the most common findings.",
          "parameters": []
        },
        {
          "name": "get-notifications",
          "description": "Get all notifications data from OnSecurity from client in a high level summary, only include the summary, not the raw data and be sure to present the data in a way that is easy to understand for the client.",
          "parameters": [
            {
              "name": "sort",
              "required": false,
              "type": "string"
            },
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "fields",
              "required": false,
              "type": "string"
            },
            {
              "name": "filters",
              "required": false,
              "type": "string"
            },
            {
              "name": "includes",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-prerequisites",
          "description": "Get all prerequisites data from OnSecurity for a specific round. Prerequisites are requirements that need to be fulfilled before a security assessment can begin.",
          "parameters": []
        },
        {
          "name": "get-blocks",
          "description": "get-findings Get all findings data from OnSecurity from client in a high level summary, only include the summary, not the raw data and be sure to present the data in a way that is easy to understand for the client. You can optionally filter findings by round_id. Note that there is no way to find the most common findings using this endpoint. You must use the get-blocks endpoint to find the most common findings.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@onsecurity/onsecurity-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiToken",
          "required": true,
          "description": "OnSecurity API token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@onsecurity/onsecurity-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0588.@onsecurity_onsecurity-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 574
  }
}