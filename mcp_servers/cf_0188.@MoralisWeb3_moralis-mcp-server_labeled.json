{
  "labels": {
    "analysis": "The MCP Server is designed to provide seamless access to the Moralis REST API, enabling clients to interact with blockchain data and services. The available tools focus heavily on NFT and token data retrieval, DeFi activities, wallet analysis, and market statistics. Key functionalities include fetching NFT metadata, tracking token holders, analyzing trading volumes, accessing DeFi positions, and retrieving blockchain statistics. The server simplifies complex blockchain operations for developers and users by offering easy-to-use endpoints for various blockchain-related queries.",
    "reasoning": "The primary label \"Cryptocurrency & Blockchain\" is chosen because the server's core functionality revolves around blockchain data retrieval and analysis, particularly for NFTs and tokens. Secondary labels include \"Data Analysis & Processing\" due to the analytical tools provided (e.g., trading volumes, token performance), and \"DeFi\" is a custom label to highlight the specific DeFi-related tools offered by the server. The custom label is included because these tools are specialized and not fully covered by the predefined categories.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": "DeFi",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 187,
    "server_name": "Moralis API Server",
    "rank_by_usage": 188,
    "usage_count": "256",
    "original_file": "../crawler/smithery/@MoralisWeb3_moralis-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@MoralisWeb3/moralis-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 187,
      "name": "Moralis API Server",
      "author": "@MoralisWeb3/moralis-mcp-server",
      "overview": "Provide seamless access to Moralis REST API through a standardized MCP server interface. Enable clients to interact with blockchain data and services effortlessly by integrating this server. Simplify blockchain data retrieval and operations with easy configuration and multiple transport options.",
      "repository_url": "https://github.com/MoralisWeb3/moralis-mcp-server",
      "homepage": "https://smithery.ai/server/@MoralisWeb3/moralis-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "256",
      "success_rate": "99.64%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@MoralisWeb3_moralis-mcp-server.json",
      "tools_count": 81,
      "tools": [
        {
          "name": "getwalletnfts",
          "description": "Deploy Server Moralis API Server Claim Server @MoralisWeb3/moralis-mcp-server Try in Playground getwalletnfts",
          "parameters": [
            {
              "name": "getwalletnfts",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getmultiplenfts",
          "description": "Get NFT metadata for one or many NFTs. Accepts an array of up to 25 `tokens`, each requiring `token_address` and `token_id`. Each NFT returned includes on-chain metadata as well as off-chain metadata, floor prices, rarity and more where available.",
          "parameters": [
            {
              "name": "getmultiplenfts",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getwalletnftcollections",
          "description": "Fetch all NFT Collections held by a specified wallet address. Each Collection returned includes on-chain metadata as well as off-chain metadata, floor prices and more where available.",
          "parameters": [
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            },
            {
              "name": "include_prices",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getcontractnfts",
          "description": "Fetch all NFTs for a given collection. Each NFT returned includes on-chain metadata as well as off-chain metadata, floor prices, rarity and more where available.",
          "parameters": [
            {
              "name": "getcontractnfts",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnftowners",
          "description": "Identify wallets owning NFTs from a specific contract.",
          "parameters": [
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            },
            {
              "name": "normalizeMetadata",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnftcontracttransfers",
          "description": "Get NFT transfers for a contract, with options to filter by date, token, or other parameters.",
          "parameters": [
            {
              "name": "getnftcontracttransfers",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnftbycontracttraits",
          "description": "Find NFTs in a contract matching specific traits, perfect for attribute-based searches.",
          "parameters": [
            {
              "name": "getnftbycontracttraits",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnfttraitsbycollection",
          "description": "Explore the distinct traits of NFTs in a contract, showcasing their unique attributes.",
          "parameters": [
            {
              "name": "getnfttraitsbycollection",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnfttrades",
          "description": "Get NFT trades for a given contract with the ability to filter by marketplace.",
          "parameters": [
            {
              "name": "getnfttrades",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnfttradesbytoken",
          "description": "Get NFT trades for a specific NFT by specifying a contract addres and token ID.",
          "parameters": [
            {
              "name": "getnfttradesbytoken",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnfttradesbywallet",
          "description": "Get NFT trades for a specific wallet address.",
          "parameters": [
            {
              "name": "getnfttradesbywallet",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnftbulkcontractmetadata",
          "description": "Retrieve metadata (name, symbol) for up to 25 NFT contracts in one call. Also returns off-chain metadata, floor prices and more where available.",
          "parameters": [
            {
              "name": "getnftbulkcontractmetadata",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnftmetadata",
          "description": "Fetch metadata for a specific NFT. Includes on-chain metadata as well as off-chain metadata, floor prices, rarity and more where available.",
          "parameters": [
            {
              "name": "getnftmetadata",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnfttransfers",
          "description": "Get transfers of a specific NFT given a contract address and token ID.",
          "parameters": [
            {
              "name": "getnfttransfers",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnfttokenidowners",
          "description": "List wallets owning a specific NFT, defined by its contract and token ID.",
          "parameters": [
            {
              "name": "getnfttokenidowners",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnftcontractsaleprices",
          "description": "Fetch sale prices for NFTs in a contract over a specified number of days. Returns the last sale, lowest sale, highest sale, average sale and total trades within the specified period.",
          "parameters": [
            {
              "name": "getnftcontractsaleprices",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnftsaleprices",
          "description": "Fetch sale prices for a specific NFT over a specified number of days. Returns the last sale, lowest sale, highest sale, average sale and total trades within the specified period.",
          "parameters": [
            {
              "name": "getnftsaleprices",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getswapsbytokenaddress",
          "description": "Get all swap transactions (buy/sell) for a specific ERC20 token.",
          "parameters": [
            {
              "name": "getswapsbytokenaddress",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettokenholders",
          "description": "Returns total holders for a given token, as well as aggregated stats holder supply, holder trends, holder distribution and holder acquisition metrics.",
          "parameters": [
            {
              "name": "gettokenholders",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gethistoricaltokenholders",
          "description": "Track changes in the holder base of an ERC20 token over time. Supports timeseries data for total holders as well as change metrics such as holder distribution and holder acquisition.",
          "parameters": [
            {
              "name": "gethistoricaltokenholders",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getmultipletokenprices",
          "description": "Retrieve the current or historical prices for multiple ERC20 tokens in the blockchain’s native currency and USD. Accepts an array of up to 100 `tokens`, each requiring `token_address` and optional fields such as `to_block` or `exchange`. Each token returned includes on-chain metadata, as well as off-chain metadata, logos, spam status and more. Additional options to exclude low-liquidity tokens and inactive tokens.",
          "parameters": [
            {
              "name": "getmultipletokenprices",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettokenowners",
          "description": "Identify the major holders of an ERC20 token and understand their ownership percentages. Includes known entities, exchanges and wallet labels.",
          "parameters": [
            {
              "name": "gettokenowners",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettokenmetadata",
          "description": "Retrieve metadata (name, symbol, decimals, logo) for an ERC20 token contract, as well as off-chain metadata, total supply, categories, logos, spam status and more.",
          "parameters": [
            {
              "name": "gettokenmetadata",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettokencategories",
          "description": "Get ERC20 token categories",
          "parameters": [
            {
              "name": "gettokencategories",
              "required": false,
              "type": "string"
            },
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "ERC20",
              "required": false,
              "type": "string"
            },
            {
              "name": "token",
              "required": false,
              "type": "string"
            },
            {
              "name": "categories",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettokentransfers",
          "description": "Get all ERC20 token transfers for a contract, ordered by block number (newest first).",
          "parameters": [
            {
              "name": "gettokentransfers",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnativebalancesforaddresses",
          "description": "Retrieve native token balances (e.g. ETH) for one or many wallet addresses in single request.",
          "parameters": [
            {
              "name": "getnativebalancesforaddresses",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getwalletapprovals",
          "description": "List active ERC20 token approvals for a wallet, showing which contracts have access.",
          "parameters": [
            {
              "name": "getwalletapprovals",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getwallethistory",
          "description": "Get the complete decoded transaction history for a given wallet. All transactions are parsed, decoded, categorized and summarized into human-readable records.",
          "parameters": [
            {
              "name": "getwallethistory",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getwallettokenbalancesprice",
          "description": "Fetch ERC20 and native token balances for a given wallet address, including their USD prices. Each token returned includes on-chain metadata, as well as off-chain metadata, logos, spam status and more. Additional options to exclude spam tokens, low-liquidity tokens and inactive tokens.",
          "parameters": [
            {
              "name": "getwallettokenbalancesprice",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getwalletnetworth",
          "description": "Calculate the total net worth of a wallet in USD, with options to exclude spam tokens for accuracy. Options to query cross-chain using the `chains` parameter, as well as additional options to exclude spam tokens, low-liquidity tokens and inactive tokens.",
          "parameters": [
            {
              "name": "getwalletnetworth",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettransactionverbose",
          "description": "Get the ABI-decoded contents of a transaction by the given transaction hash.",
          "parameters": [
            {
              "name": "gettransactionverbose",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getblock",
          "description": "Get the contents of a block given the block hash.",
          "parameters": [
            {
              "name": "chain",
              "required": false,
              "type": "string"
            },
            {
              "name": "include",
              "required": false,
              "type": "string"
            },
            {
              "name": "block_number_or_hash",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "getlatestblocknumber",
          "description": "Get the most recent block number for a specified blockchain.",
          "parameters": [
            {
              "name": "getlatestblocknumber",
              "required": false,
              "type": "string"
            },
            {
              "name": "chain",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "getdatetoblock",
          "description": "Find the closest block to a specific date on a blockchain.",
          "parameters": [
            {
              "name": "date",
              "required": true,
              "type": "string"
            },
            {
              "name": "chain",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "resolveaddress",
          "description": "Convert an Ethereum address to its associated ENS domain, if registered.",
          "parameters": [
            {
              "name": "resolveaddress",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "resolveensdomain",
          "description": "Resolve an ENS domain to its associated Ethereum address.",
          "parameters": [
            {
              "name": "resolveensdomain",
              "required": false,
              "type": "string"
            },
            {
              "name": "domain",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettoperc20tokensbymarketcap",
          "description": "List the top ERC20 tokens ranked by market cap. Currently only supports Ethereum. For more flexibility, we recommend to use getFilteredTokens.",
          "parameters": [
            {
              "name": "gettoperc20tokensbymarketcap",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettoperc20tokensbypricemovers",
          "description": "Get top ERC20 tokens by price movements (winners and losers). Currently only supports Ethereum. For more flexibility, we recommend to use getFilteredTokens or getTopGainersTokens and getTopLosersTokens.",
          "parameters": [
            {
              "name": "gettoperc20tokensbypricemovers",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettopnftcollectionsbymarketcap",
          "description": "Get top NFT collections by their current market cap. Currently only supports Ethereum.",
          "parameters": [
            {
              "name": "gettopnftcollectionsbymarketcap",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gethottestnftcollectionsbytradingvolume",
          "description": "Get NFT collections by their 24 hour trading volume. Currently only supports Ethereum.",
          "parameters": [
            {
              "name": "gethottestnftcollectionsbytradingvolume",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettopcryptocurrenciesbymarketcap",
          "description": "Get cryptocurrencies by their market cap.",
          "parameters": [
            {
              "name": "gettopcryptocurrenciesbymarketcap",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettopcryptocurrenciesbytradingvolume",
          "description": "Get cryptocurrencies with the highest 24 hour trading volume.",
          "parameters": [
            {
              "name": "gettopcryptocurrenciesbytradingvolume",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getdefisummary",
          "description": "Summarize a wallet’s DeFi activity, including total USD value, unclaimed rewards and active protocols.",
          "parameters": [
            {
              "name": "getdefisummary",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getdefipositionsbyprotocol",
          "description": "Fetch detailed DeFi positions for a given wallet and protocol.",
          "parameters": [
            {
              "name": "getdefipositionsbyprotocol",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getdefipositionssummary",
          "description": "Get a concise overview of a wallet’s DeFi positions across all protocols.",
          "parameters": [
            {
              "name": "getdefipositionssummary",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getwalletactivechains",
          "description": "List the blockchain networks a wallet is active on, including their first and last seen timestamps. Options to query cross-chain using the `chains` parameter.",
          "parameters": [
            {
              "name": "getwalletactivechains",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getwalletstats",
          "description": "Retrieve key statistics for a wallet, such as total transaction count and activity.",
          "parameters": [
            {
              "name": "getwalletstats",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnftcollectionstats",
          "description": "Get summary stats by NFT collection including total NFT transfers, total tokens and total owners.",
          "parameters": [
            {
              "name": "getnftcollectionstats",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnftfloorpricebycontract",
          "description": "Get floor price for a given collection. Refreshes every 30 minutes.",
          "parameters": [
            {
              "name": "getnftfloorpricebycontract",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getnfthistoricalfloorpricebycontract",
          "description": "Get timeseries historical floor prices for a given NFT collection. Refreshes every 30 minutes.",
          "parameters": [
            {
              "name": "getnfthistoricalfloorpricebycontract",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getfilteredtokens",
          "description": "Description not available",
          "parameters": [
            {
              "name": "getfilteredtokens",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getrisingliquiditytokens",
          "description": "Identify tokens experiencing increasing liquidity on their respective blockchains.",
          "parameters": [
            {
              "name": "getrisingliquiditytokens",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getbuyingpressuretokens",
          "description": "List tokens showing strong buying activity based on transaction data.",
          "parameters": [
            {
              "name": "getbuyingpressuretokens",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getsolidperformerstokens",
          "description": "Find tokens with consistent performance based on price and volume metrics.",
          "parameters": [
            {
              "name": "getsolidperformerstokens",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getexperiencedbuyerstokens",
          "description": "Identify tokens being purchased by experienced or high-volume traders.",
          "parameters": [
            {
              "name": "getexperiencedbuyerstokens",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getriskybetstokens",
          "description": "List tokens with high-risk trading activity based on volatility or other factors.",
          "parameters": [
            {
              "name": "getriskybetstokens",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getbluechiptokens",
          "description": "Fetch established, high-value tokens considered stable investments.",
          "parameters": [
            {
              "name": "getbluechiptokens",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettopgainerstokens",
          "description": "Identify tokens with the highest price increases over a period.",
          "parameters": [
            {
              "name": "gettopgainerstokens",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettoploserstokens",
          "description": "List tokens with the largest price decreases over a period.",
          "parameters": [
            {
              "name": "gettoploserstokens",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getdiscoverytoken",
          "description": "Retrieve comprehensive details for a specific token, including metadata and stats. For more detailed tokens stats we recommended to use `getTokenAnalytics` or `getMultipleTokenAnalytics`. For pair stats, we recommend to use `getPairStats`.",
          "parameters": [
            {
              "name": "getdiscoverytoken",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getwalletprofitabilitysummary",
          "description": "Get a profit and loss summary for a given wallet, over a specified timeframe (`days`).",
          "parameters": [
            {
              "name": "getwalletprofitabilitysummary",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getwalletprofitability",
          "description": "Get a detailed profit and loss breakdown by token for a given wallet, over a specified timeframe (`days`). Optionally filter by `token_addresses` for specific tokens.",
          "parameters": [
            {
              "name": "getwalletprofitabilitysummary",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettopprofitablewalletpertoken",
          "description": "List the most profitable wallets that have traded a specific ERC20 token.",
          "parameters": [
            {
              "name": "gettopprofitablewalletpertoken",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "searchtokens",
          "description": "Search for tokens using their contract address, pair address, name, or symbol. Cross-chain by default with support to filter by `chains`. Additional options to `sortBy` various metrics, such as market cap, liquidity or volume.",
          "parameters": [
            {
              "name": "searchtokens",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "searchentities",
          "description": "Find entities, organizations, addresses or wallets linked to blockchain addresses. Results are categorised into 3 arrays: entities, addresses, categories.",
          "parameters": [
            {
              "name": "searchentities",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getentity",
          "description": "Retrieve details for a specific entity using its unique ID. Returns name, logo, description, external links and related addresses.",
          "parameters": [
            {
              "name": "getentity",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getentitycategories",
          "description": "List available categories for blockchain entities.",
          "parameters": [
            {
              "name": "getentitycategories",
              "required": false,
              "type": "string"
            },
            {
              "name": "limit",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getentitiesbycategory",
          "description": "Fetch entities belonging to a specific category. Each entity returns name, logo, description, external links, total addresses and more.",
          "parameters": [
            {
              "name": "getentitiesbycategory",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getpaircandlesticks",
          "description": "Retrieve OHLCV (Open, High, Low, Close, Volume) candlestick data for a token pair.",
          "parameters": [
            {
              "name": "getpaircandlesticks",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getpairstats",
          "description": "Access key statistics for a token pair, such as price, buyers, sellers, liquidity, volume and more.",
          "parameters": [
            {
              "name": "getpairstats",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettokenpairs",
          "description": "List supported trading pairs for a specific ERC20 token. Each pair returned includes price, liquidity, volume and more.",
          "parameters": [
            {
              "name": "gettokenpairs",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getswapsbywalletaddress",
          "description": "List all swap transactions (buy/sell) for a specific wallet. Optionally filter by `tokenAddress` for specific token swaps.",
          "parameters": [
            {
              "name": "getswapsbywalletaddress",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getswapsbypairaddress",
          "description": "Fetch swap transactions (buy, sell, add/remove liquidity) for a specific token pair.",
          "parameters": [
            {
              "name": "getswapsbypairaddress",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getsnipersbypairaddress",
          "description": "Identify sniper wallets that bought a token within a specified timeframe (`blocksAfterCreation`). Each wallet returned includes detailed information about how much was bought, sold as well as PnL stats and more.",
          "parameters": [
            {
              "name": "getsnipersbypairaddress",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getvolumestatsbychain",
          "description": "Retrieve volume, active wallets and transaction stats for a blockchain over various time periods. Returns data for all chains in a single request.",
          "parameters": [
            {
              "name": "getvolumestatsbychain",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getvolumestatsbycategory",
          "description": "Access volume, buyers, sellers and transaction stats for a blockchain, grouped by category. Filter by `chain`.",
          "parameters": [
            {
              "name": "getvolumestatsbycategory",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettimeseriesvolume",
          "description": "Fetch timeseries volume, liquidity and FDV for a specific blockchain.",
          "parameters": [
            {
              "name": "gettimeseriesvolume",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettimeseriesvolumebycategory",
          "description": "Fetch timeseries buy volume, sell volume, liquidity and FDV for a specific category. Optionally filter by `chain`.",
          "parameters": [
            {
              "name": "gettimeseriesvolumebycategory",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettimeseriestokenanalytics",
          "description": "Fetch timeseries buy volume, sell volume, liquidity and FDV for multiple tokens. Accepts an array of up to 200 `tokens`, each requiring `chain` and `tokenAddress`.",
          "parameters": [
            {
              "name": "gettimeseriestokenanalytics",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "gettrendingtokensv2",
          "description": "List top tokens trending based on trading activity, volume, liquidity and more. By default this returns cross-chain results, including Solana. Optionally filter by `chain` for single chain results.",
          "parameters": [
            {
              "name": "gettrendingtokensv2",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getmultipletokenanalytics",
          "description": "Fetch analytics for multiple tokens, including buy volume, sell volume, buyers, sellers, transactions, liquidity and FDV trends over time. Accepts an array of up to 200 `tokens`, each requiring `chain` and `tokenAddress`.",
          "parameters": [
            {
              "name": "getmultipletokenanalytics",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@MoralisWeb3/moralis-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "moralisApiKey",
          "required": true,
          "description": "Moralis API key for authenticating with Moralis API"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@MoralisWeb3/moralis-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0188.@MoralisWeb3_moralis-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 184
  }
}