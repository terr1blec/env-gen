{
  "labels": {
    "analysis": "The MCP Server described is a drawing tool designed to enable AI assistants to create and manipulate simple drawings. It provides a canvas interface where filled shapes (like rectangles) can be created and manipulated, with functionality to export the canvas as an image (PNG) or retrieve pixel data in JSON format. This tool is primarily focused on visual creativity and enabling AI applications to generate or modify visual content easily.",
    "reasoning": "The primary label \"Content Creation\" is chosen because the tool enables the creation of visual content (drawings). The secondary label \"AI/ML Tools\" is selected because the tool is specifically designed for AI assistants to utilize. No custom label is needed as the predefined labels adequately cover the functionality.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": true
  },
  "metadata": {
    "server_id": 90,
    "server_name": "Drawing Tool for AI Assistants",
    "rank_by_usage": 91,
    "usage_count": "849",
    "original_file": "../crawler/smithery/@flrngel_mcp-painter.json",
    "mode": "smithery",
    "timestamp": 1751937975,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@flrngel/mcp-painter/mcp?config=eyJwb3J0IjogMzAwMH0=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "drawing_generateCanvas",
          "description": "Generate a new drawing canvas with specified width and height.",
          "input_schema": {
            "type": "object",
            "properties": {
              "width": {
                "type": "number",
                "description": "Width of the canvas in pixels"
              },
              "height": {
                "type": "number",
                "description": "Height of the canvas in pixels"
              }
            },
            "required": [
              "width",
              "height"
            ]
          },
          "annotations": null
        },
        {
          "name": "drawing_fillRectangle",
          "description": "Fill a rectangle on the drawing canvas with a specified color and coordinates.",
          "input_schema": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "X coordinate of the top-left corner of the rectangle"
              },
              "y": {
                "type": "number",
                "description": "Y coordinate of the top-left corner of the rectangle"
              },
              "width": {
                "type": "number",
                "description": "Width of the rectangle"
              },
              "height": {
                "type": "number",
                "description": "Height of the rectangle"
              },
              "color": {
                "type": "object",
                "description": "Color to fill the rectangle with (RGB)",
                "properties": {
                  "r": {
                    "type": "number",
                    "description": "Red component (0-255)"
                  },
                  "g": {
                    "type": "number",
                    "description": "Green component (0-255)"
                  },
                  "b": {
                    "type": "number",
                    "description": "Blue component (0-255)"
                  },
                  "a": {
                    "type": "number",
                    "description": "Alpha component (0-255, optional, default 255)"
                  }
                },
                "required": [
                  "r",
                  "g",
                  "b"
                ]
              }
            },
            "required": [
              "x",
              "y",
              "width",
              "height",
              "color"
            ]
          },
          "annotations": null
        },
        {
          "name": "drawing_getCanvasPng",
          "description": "Get the current drawing canvas as a PNG image (base64 encoded).",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "drawing_getCanvasData",
          "description": "Get the current pixel data of the drawing canvas as JSON.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "drawing_generateCanvas",
        "drawing_fillRectangle",
        "drawing_getCanvasPng",
        "drawing_getCanvasData"
      ]
    },
    "server_info_crawled": {
      "id": 90,
      "name": "Drawing Tool for AI Assistants",
      "author": "@flrngel/mcp-painter",
      "overview": "Create and manipulate drawings with a simple canvas interface. Enhance your AI assistants by enabling them to draw filled shapes and export images effortlessly. Utilize this tool to bring visual creativity to your applications.",
      "repository_url": "https://github.com/flrngel/mcp-painter",
      "homepage": "https://smithery.ai/server/@flrngel/mcp-painter",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "849",
      "success_rate": "99.92%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@flrngel_mcp-painter.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "drawing_generateCanvas",
          "description": "Generate a new drawing canvas with specified width and height.",
          "input_schema": {
            "type": "object",
            "properties": {
              "width": {
                "type": "number",
                "description": "Width of the canvas in pixels"
              },
              "height": {
                "type": "number",
                "description": "Height of the canvas in pixels"
              }
            },
            "required": [
              "width",
              "height"
            ]
          },
          "annotations": null
        },
        {
          "name": "drawing_fillRectangle",
          "description": "Fill a rectangle on the drawing canvas with a specified color and coordinates.",
          "input_schema": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "X coordinate of the top-left corner of the rectangle"
              },
              "y": {
                "type": "number",
                "description": "Y coordinate of the top-left corner of the rectangle"
              },
              "width": {
                "type": "number",
                "description": "Width of the rectangle"
              },
              "height": {
                "type": "number",
                "description": "Height of the rectangle"
              },
              "color": {
                "type": "object",
                "description": "Color to fill the rectangle with (RGB)",
                "properties": {
                  "r": {
                    "type": "number",
                    "description": "Red component (0-255)"
                  },
                  "g": {
                    "type": "number",
                    "description": "Green component (0-255)"
                  },
                  "b": {
                    "type": "number",
                    "description": "Blue component (0-255)"
                  },
                  "a": {
                    "type": "number",
                    "description": "Alpha component (0-255, optional, default 255)"
                  }
                },
                "required": [
                  "r",
                  "g",
                  "b"
                ]
              }
            },
            "required": [
              "x",
              "y",
              "width",
              "height",
              "color"
            ]
          },
          "annotations": null
        },
        {
          "name": "drawing_getCanvasPng",
          "description": "Get the current drawing canvas as a PNG image (base64 encoded).",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "drawing_getCanvasData",
          "description": "Get the current pixel data of the drawing canvas as JSON.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"port\": 3000\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@flrngel/mcp-painter/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"port\": 3000\n}",
      "python_sdk_url": "https://server.smithery.ai/@flrngel/mcp-painter/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0091.@flrngel_mcp-painter_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 89
  }
}