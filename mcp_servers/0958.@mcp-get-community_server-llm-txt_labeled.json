{
  "labels": {
    "analysis": "The MCP Server is designed to manage, retrieve, and search content from LLM.txt files, which are structured text files likely containing model-related information. Its core functionality includes directory listing, content retrieval, and multi-query search capabilities with local caching support. The tools provided focus on accessing, listing, and searching these specialized files efficiently.",
    "reasoning": "The primary label \"File Management\" was chosen because the server's core functionality revolves around listing, retrieving, and searching files (LLM.txt files). This closely aligns with file operations and document handling. The secondary label \"Data Analysis & Processing\" is included because the search functionality allows for querying and extracting meaningful snippets from the files, which can be used for analysis. The \"Custom Label\" is introduced to specifically highlight the specialized handling of LLM.txt files, which may not be covered by the predefined categories.",
    "primary_label": "File Management",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": "LLM.txt File Handling",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 957,
    "server_name": "LLM.txt MCP Server",
    "rank_by_usage": 958,
    "usage_count": "3",
    "original_file": "../crawler/smithery/@mcp-get-community_server-llm-txt.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mcp-get-community/server-llm-txt/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_llm_txt",
          "description": "Fetch an LLM.txt file from a given URL. Format your response in beautiful markdown.",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "The ID of the LLM.txt file to fetch. Must be obtained first using the list_llm_txt command."
              },
              "page": {
                "type": "number",
                "default": 1,
                "description": "Page number to fetch, starting from 1. Each page contains a fixed number of characters."
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "list_llm_txt",
          "description": "List available LLM.txt files from the directory. Use this first before fetching a specific LLM.txt file. Format your response in beautiful markdown.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "search_llm_txt",
          "description": "Search for multiple substrings in an LLM.txt file. Requires a valid ID obtained from list_llm_txt command. Returns snippets with page numbers for each match. Format your response in beautiful markdown, using code blocks for snippets.",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "The ID of the LLM.txt file to search in. Must be obtained first using the list_llm_txt command."
              },
              "queries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 1,
                "description": "Array of substrings to search for. Each query is searched case-insensitively. At least one query is required."
              },
              "context_lines": {
                "type": "number",
                "default": 2,
                "description": "Number of lines to show before and after each match for context. Defaults to 2 lines."
              }
            },
            "required": [
              "id",
              "queries"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 3,
      "tool_names": [
        "get_llm_txt",
        "list_llm_txt",
        "search_llm_txt"
      ]
    },
    "server_info_crawled": {
      "id": 957,
      "name": "LLM.txt MCP Server",
      "author": "@mcp-get-community/server-llm-txt",
      "overview": "A Model Context Protocol (MCP) server that processes llm.txt files, offering directory listing, content retrieval, and multi-query search capabilities. It supports local caching and various OS-specific cache locations.",
      "repository_url": "https://github.com/mcp-get/community-servers",
      "homepage": "https://smithery.ai/server/@mcp-get-community/server-llm-txt",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "3",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mcp-get-community_server-llm-txt.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "get_llm_txt",
          "description": "Fetch an LLM.txt file from a given URL. Format your response in beautiful markdown.",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "The ID of the LLM.txt file to fetch. Must be obtained first using the list_llm_txt command."
              },
              "page": {
                "type": "number",
                "default": 1,
                "description": "Page number to fetch, starting from 1. Each page contains a fixed number of characters."
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "list_llm_txt",
          "description": "List available LLM.txt files from the directory. Use this first before fetching a specific LLM.txt file. Format your response in beautiful markdown.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "search_llm_txt",
          "description": "Search for multiple substrings in an LLM.txt file. Requires a valid ID obtained from list_llm_txt command. Returns snippets with page numbers for each match. Format your response in beautiful markdown, using code blocks for snippets.",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "The ID of the LLM.txt file to search in. Must be obtained first using the list_llm_txt command."
              },
              "queries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 1,
                "description": "Array of substrings to search for. Each query is searched case-insensitively. At least one query is required."
              },
              "context_lines": {
                "type": "number",
                "default": 2,
                "description": "Number of lines to show before and after each match for context. Defaults to 2 lines."
              }
            },
            "required": [
              "id",
              "queries"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mcp-get-community/server-llm-txt/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mcp-get-community/server-llm-txt/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0958.@mcp-get-community_server-llm-txt_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 936
  }
}