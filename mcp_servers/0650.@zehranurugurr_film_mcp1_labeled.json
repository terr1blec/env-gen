{
  "labels": {
    "analysis": "The MCP Server provides a specialized film information service, offering detailed movie data and metadata for application integration. Its primary tool, \"get_films\", suggests querying capabilities for film-related information, enhancing applications with rich movie context. This server addresses the need for structured access to comprehensive film data to improve user experiences in media-related applications.",
    "reasoning": "The primary label \"Content Creation\" was chosen because the server's focus on providing detailed film data supports media-related content creation and application development. The secondary label \"Web Search & Research\" is relevant due to its querying capabilities for information gathering, and \"Database Operations\" aligns with its structured data provision. The custom label \"Film Metadata Management\" was added to precisely describe its specialized functionality in the film domain.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "Web Search & Research",
      "Database Operations"
    ],
    "custom_label": "Film Metadata Management",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": true
  },
  "metadata": {
    "server_id": 649,
    "server_name": "Film Information Server",
    "rank_by_usage": 650,
    "usage_count": "14",
    "original_file": "../crawler/smithery/@zehranurugurr_film_mcp1.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@zehranurugurr/film_mcp1/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_films",
          "description": "",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "get_filmsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_films"
      ]
    },
    "server_info_crawled": {
      "id": 649,
      "name": "Film Information Server",
      "author": "@zehranurugurr/film_mcp1",
      "overview": "Provide detailed film-related data and metadata to enhance your applications with rich movie context. Enable dynamic access to film resources and tools for querying movie information efficiently. Improve user experience by integrating comprehensive film data seamlessly.",
      "repository_url": "https://github.com/zehranurugurr/film_mcp",
      "homepage": "https://smithery.ai/server/@zehranurugurr/film_mcp1",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "14",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@zehranurugurr_film_mcp1.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_films",
          "description": "",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "get_filmsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@zehranurugurr/film_mcp1/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@zehranurugurr/film_mcp1/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0650.@zehranurugurr_film_mcp1_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 635
  }
}