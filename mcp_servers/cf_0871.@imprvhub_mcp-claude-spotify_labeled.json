{
  "labels": {
    "analysis": "The MCP Server provides comprehensive integration with Spotify, enabling users to authenticate, search, control playback, manage playlists, and get personalized recommendations directly from a Claude Desktop environment. It solves the problem of needing external controls for Spotify without leaving the LLM interface, offering seamless music management and personalized music discovery.",
    "reasoning": "The primary functionality revolves around media playback and management with Spotify, which aligns most closely with multimedia interaction. The tools for playlist creation, track recommendations, and personalized content suggest this is for enhancing a user's music experience. The secondary label for browser automation is included since some search and playlist management tasks could be compared to web-based tasks, though these capabilities are natively integrated with the Spotify service.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "Browser Automation"
    ],
    "custom_label": "Media Playback Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 870,
    "server_name": "Claude Spotify Integration",
    "rank_by_usage": 871,
    "usage_count": "5",
    "original_file": "../crawler/smithery/@imprvhub_mcp-claude-spotify.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@imprvhub/mcp-claude-spotify/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 870,
      "name": "Claude Spotify Integration",
      "author": "@imprvhub/mcp-claude-spotify",
      "overview": "Enable seamless interaction with Spotify through Claude Desktop by providing authentication, search, playback control, playlist management, and personalized recommendations. Enhance your music experience by controlling Spotify directly from your LLM environment. Easily access your top tracks and manage your Spotify library with intuitive commands.",
      "repository_url": "https://github.com/imprvhub/mcp-claude-spotify",
      "homepage": "https://smithery.ai/server/@imprvhub/mcp-claude-spotify",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "5",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@imprvhub_mcp-claude-spotify.json",
      "tools_count": 12,
      "tools": [
        {
          "name": "auth-spotify",
          "description": "Deploy Server Claude Spotify Integration @imprvhub/mcp-claude-spotify Try in Playground auth-spotify",
          "parameters": [
            {
              "name": "Authenticate",
              "required": false,
              "type": "string"
            },
            {
              "name": "with",
              "required": false,
              "type": "string"
            },
            {
              "name": "Spotify",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search-spotify",
          "description": "Search for tracks, albums, artists, or playlists on Spotify",
          "parameters": [
            {
              "name": "type",
              "required": false,
              "type": "string"
            },
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-current-playback",
          "description": "Get information about the user's current playback state",
          "parameters": []
        },
        {
          "name": "play-track",
          "description": "Play a specific track on an active device",
          "parameters": [
            {
              "name": "trackId",
              "required": true,
              "type": "string"
            },
            {
              "name": "deviceId",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "pause-playback",
          "description": "Pause the user's playback",
          "parameters": [
            {
              "name": "Pause",
              "required": false,
              "type": "string"
            },
            {
              "name": "the",
              "required": false,
              "type": "string"
            },
            {
              "name": "playback",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "next-track",
          "description": "Skip to the next track",
          "parameters": []
        },
        {
          "name": "previous-track",
          "description": "Skip to the previous track",
          "parameters": []
        },
        {
          "name": "get-user-playlists",
          "description": "Get a list of the user's playlists",
          "parameters": []
        },
        {
          "name": "create-playlist",
          "description": "Create a new playlist for the current user",
          "parameters": [
            {
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "name": "public",
              "required": false,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            },
            {
              "name": "description",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "add-tracks-to-playlist",
          "description": "Add tracks to a playlist",
          "parameters": [
            {
              "name": "trackIds",
              "required": true,
              "type": "string"
            },
            {
              "name": "Add",
              "required": false,
              "type": "string"
            },
            {
              "name": "Item",
              "required": false,
              "type": "string"
            },
            {
              "name": "playlistId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-recommendations",
          "description": "Get track recommendations based on seeds",
          "parameters": []
        },
        {
          "name": "get-top-tracks",
          "description": "Get the user's top played tracks over a specified time range",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@imprvhub/mcp-claude-spotify/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "spotifyClientSecret",
          "required": true,
          "description": "Spotify Client Secret"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@imprvhub/mcp-claude-spotify/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0871.@imprvhub_mcp-claude-spotify_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 852
  }
}