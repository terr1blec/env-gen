{
  "labels": {
    "analysis": "The MCP Server is focused on interacting with Vertica databases, providing tools to execute SQL queries, manage data streams, and extract schema information. It supports large-scale data operations, secure connections, and detailed database inspection capabilities. The core functionality revolves around database connectivity, data manipulation, and metadata retrieval.",
    "reasoning": "The primary label \"Database Operations\" is chosen because the server's primary functionality is centered around managing and querying Vertica databases, which fits perfectly within this category. Secondary labels \"Data Analysis & Processing\" is included because the server handles data operations at scale, and \"API Integration\" is considered because the server acts as a connector between the MCP client and Vertica databases. No custom label is needed as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Data Analysis & Processing",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2295,
    "server_name": "Vertica Database Connector",
    "rank_by_usage": 2296,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@nolleh_mcp-vertica.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@nolleh/mcp-vertica/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2295,
      "name": "Vertica Database Connector",
      "author": "@nolleh/mcp-vertica",
      "overview": "Enable seamless interaction with Vertica databases by executing SQL queries, managing schema details, and handling large data streams efficiently. Manage database connections securely with support for SSL/TLS and fine-grained operation permissions. Streamline database operations and schema inspections directly from your MCP client.",
      "repository_url": "https://github.com/nolleh/mcp-vertica",
      "homepage": "https://smithery.ai/server/@nolleh/mcp-vertica",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@nolleh_mcp-vertica.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "execute_query",
          "description": "Deploy Server Vertica Database Connector @nolleh/mcp-vertica Try in Playground execute_query",
          "parameters": []
        },
        {
          "name": "stream_query",
          "description": "Execute a SQL query and stream the results in batches. Args: ctx: FastMCP context for progress reporting and logging query: SQL query to execute batch_size: Number of rows to fetch at once Yields: Batches of query results as strings",
          "parameters": []
        },
        {
          "name": "copy_data",
          "description": "Copy data into a Vertica table using COPY command. Args: ctx: FastMCP context for progress reporting and logging schema: vertica schema to execute the copy against table: Target table name data: List of rows to insert Returns: Status message indicating success or failure",
          "parameters": []
        },
        {
          "name": "get_table_structure",
          "description": "Get the structure of a table including columns, data types, and constraints. Args: ctx: FastMCP context for progress reporting and logging table_name: Name of the table to inspect schema: Schema name (default: public) Returns: Table structure information as a string",
          "parameters": []
        },
        {
          "name": "list_indexes",
          "description": "List all indexes for a specific table. Args: ctx: FastMCP context for progress reporting and logging table_name: Name of the table to inspect schema: Schema name (default: public) Returns: Index information as a string",
          "parameters": []
        },
        {
          "name": "list_views",
          "description": "List all views in a schema. Args: ctx: FastMCP context for progress reporting and logging schema: Schema name (default: public) Returns: View information as a string",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@nolleh/mcp-vertica/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@nolleh/mcp-vertica/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2296.@nolleh_mcp-vertica_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1974
  }
}