{
  "labels": {
    "analysis": "The MCP Server described is designed to provide AI agents with detailed context around test results in continuous integration workflows. It integrates with development tools to help analyze, fix, or optimize failing tests, thereby enhancing test reliability and debugging efficiency. The available tools suggest functionalities such as retrieving test attempts, errors, and API configurations, which are critical for test management and development processes.",
    "reasoning": "The **primary label** is chosen because the server's core functionality revolves around **Development Tools**, specifically aiding in test analysis, debugging, and optimization within CI workflows. The **secondary label** is included because the server interacts with APIs and configurations, which is a key aspect of managing test environments. No custom label is needed as the functionality aligns well with predefined categories.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2379,
    "server_name": "Currents Test Results Context Server",
    "rank_by_usage": 2380,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@currents-dev_currents-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@currents-dev/currents-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2379,
      "name": "Currents Test Results Context Server",
      "author": "@currents-dev/currents-mcp",
      "overview": "Provide AI agents with detailed test results context by connecting them to Currents. Enable your AI to analyze, fix, or optimize failing tests in continuous integration workflows. Seamlessly integrate with development tools to enhance test reliability and debugging efficiency.",
      "repository_url": "https://github.com/currents-dev/currents-mcp",
      "homepage": "https://smithery.ai/server/@currents-dev/currents-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@currents-dev_currents-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "get-run",
          "description": "Deploy Server Currents Test Results Context Server Claim Server @currents-dev/currents-mcp Try in Playground",
          "parameters": [
            {
              "name": "runId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-spec-file-attempts-and-errors",
          "description": "Get spec file attempts and errors",
          "parameters": [
            {
              "name": "instanceId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-api-config",
          "description": "Get Currents API config currently used for Currents API requests",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@currents-dev/currents-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiKey",
          "required": true,
          "description": "Currents API key to authenticate requests to Currents API"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@currents-dev/currents-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2380.@currents-dev_currents-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2037
  }
}