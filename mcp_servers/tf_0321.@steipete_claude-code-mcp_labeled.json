{
  "labels": {
    "analysis": "The MCP Server described (Claude Code Execution Server) is primarily designed to facilitate code generation, editing, and complex workflows through a unified interface. Its key functionalities include file system operations, version control (Git), terminal command execution, and web searches. The server enables seamless integration of these capabilities with AI agents, allowing for automated and streamlined coding tasks. The available tools emphasize practical and efficient execution of coding-related tasks, making it a powerful resource for developers and AI-assisted coding workflows.",
    "reasoning": "The primary label \"Development Tools\" is chosen because the server's core functionality revolves around code operations, version control, and terminal commands, directly supporting software development workflows. The secondary label \"API Integration\" is added due to its GitHub integration and ability to interact with external services. The secondary label \"Operating System\" is included because it provides file system and terminal operations. The custom label \"AI-Assisted Coding\" is proposed to highlight its unique capability of combining AI with code execution and automation.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "API Integration",
      "Operating System"
    ],
    "custom_label": "AI-Assisted Coding",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 320,
    "server_name": "Claude Code Execution Server",
    "rank_by_usage": 321,
    "usage_count": "100",
    "original_file": "../crawler/smithery/@steipete_claude-code-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@steipete/claude-code-mcp/mcp?config=eyJkZWJ1ZyI6IGZhbHNlLCAiY2xhdWRlQ2xpUGF0aCI6ICIifQ==&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "claude_code",
          "description": "Claude Code Agent: Your versatile multi-modal assistant for code, file, Git, and terminal operations via Claude CLI. Use `workFolder` for contextual execution.\n\n• File ops: Create, read, (fuzzy) edit, move, copy, delete, list files, analyze/ocr images, file content analysis\n    └─ e.g., \"Create /tmp/log.txt with 'system boot'\", \"Edit main.py to replace 'debug_mode = True' with 'debug_mode = False'\", \"List files in /src\", \"Move a specific section somewhere else\"\n\n• Code: Generate / analyse / refactor / fix\n    └─ e.g. \"Generate Python to parse CSV→JSON\", \"Find bugs in my_script.py\"\n\n• Git: Stage ▸ commit ▸ push ▸ tag (any workflow)\n    └─ \"Commit '/workspace/src/main.java' with 'feat: user auth' to develop.\"\n\n• Terminal: Run any CLI cmd or open URLs\n    └─ \"npm run build\", \"Open https://developer.mozilla.org\"\n\n• Web search + summarise content on-the-fly\n\n• Multi-step workflows  (Version bumps, changelog updates, release tagging, etc.)\n\n• GitHub integration  Create PRs, check CI status\n\n• Confused or stuck on an issue? Ask Claude Code for a second opinion, it might surprise you!\n\n**Prompt tips**\n\n1. Be concise, explicit & step-by-step for complex tasks. No need for niceties, this is a tool to get things done.\n2. For multi-line text, write it to a temporary file in the project root, use that file, then delete it.\n3. If you get a timeout, split the task into smaller steps.\n4. **Seeking a second opinion/analysis**: If you're stuck or want advice, you can ask `claude_code` to analyze a problem and suggest solutions. Clearly state in your prompt that you are looking for analysis only and no actual file modifications should be made.\n5. If workFolder is set to the project path, there is no need to repeat that path in the prompt and you can use relative paths for files.\n6. Claude Code is really good at complex multi-step file operations and refactorings and faster than your native edit features.\n7. Combine file operations, README updates, and Git commands in a sequence.\n8. Claude can do much more, just ask it!\n\n        ",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "The detailed natural language prompt for Claude to execute."
              },
              "workFolder": {
                "type": "string",
                "description": "Mandatory when using file operations or referencing any file. The working directory for the Claude CLI execution. Must be an absolute path."
              }
            },
            "required": [
              "prompt"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "claude_code"
      ]
    },
    "server_info_crawled": {
      "id": 320,
      "name": "Claude Code Execution Server",
      "author": "@steipete/claude-code-mcp",
      "overview": "Enable your AI agents to run Claude Code prompts directly with all permissions bypassed, allowing seamless code generation, editing, and complex multi-step workflows. Empower your LLMs to perform file system operations, version control, terminal commands, and web searches through a unified tool interface. Simplify coding tasks by integrating this server with your MCP clients for powerful, direct interaction with Claude Code CLI.",
      "repository_url": "https://github.com/steipete/claude-code-mcp",
      "homepage": "https://smithery.ai/server/@steipete/claude-code-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "100",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@steipete_claude-code-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "claude_code",
          "description": "Claude Code Agent: Your versatile multi-modal assistant for code, file, Git, and terminal operations via Claude CLI. Use `workFolder` for contextual execution.\n\n• File ops: Create, read, (fuzzy) edit, move, copy, delete, list files, analyze/ocr images, file content analysis\n    └─ e.g., \"Create /tmp/log.txt with 'system boot'\", \"Edit main.py to replace 'debug_mode = True' with 'debug_mode = False'\", \"List files in /src\", \"Move a specific section somewhere else\"\n\n• Code: Generate / analyse / refactor / fix\n    └─ e.g. \"Generate Python to parse CSV→JSON\", \"Find bugs in my_script.py\"\n\n• Git: Stage ▸ commit ▸ push ▸ tag (any workflow)\n    └─ \"Commit '/workspace/src/main.java' with 'feat: user auth' to develop.\"\n\n• Terminal: Run any CLI cmd or open URLs\n    └─ \"npm run build\", \"Open https://developer.mozilla.org\"\n\n• Web search + summarise content on-the-fly\n\n• Multi-step workflows  (Version bumps, changelog updates, release tagging, etc.)\n\n• GitHub integration  Create PRs, check CI status\n\n• Confused or stuck on an issue? Ask Claude Code for a second opinion, it might surprise you!\n\n**Prompt tips**\n\n1. Be concise, explicit & step-by-step for complex tasks. No need for niceties, this is a tool to get things done.\n2. For multi-line text, write it to a temporary file in the project root, use that file, then delete it.\n3. If you get a timeout, split the task into smaller steps.\n4. **Seeking a second opinion/analysis**: If you're stuck or want advice, you can ask `claude_code` to analyze a problem and suggest solutions. Clearly state in your prompt that you are looking for analysis only and no actual file modifications should be made.\n5. If workFolder is set to the project path, there is no need to repeat that path in the prompt and you can use relative paths for files.\n6. Claude Code is really good at complex multi-step file operations and refactorings and faster than your native edit features.\n7. Combine file operations, README updates, and Git commands in a sequence.\n8. Claude can do much more, just ask it!\n\n        ",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "The detailed natural language prompt for Claude to execute."
              },
              "workFolder": {
                "type": "string",
                "description": "Mandatory when using file operations or referencing any file. The working directory for the Claude CLI execution. Must be an absolute path."
              }
            },
            "required": [
              "prompt"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"debug\": false,\n  \"claudeCliPath\": \"\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@steipete/claude-code-mcp/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"debug\": false,\n  \"claudeCliPath\": \"\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@steipete/claude-code-mcp/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0321.@steipete_claude-code-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 317
  }
}