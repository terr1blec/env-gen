{
  "labels": {
    "analysis": "The MCP Server is primarily designed to facilitate integration between language models (LLMs) and external tools, enriching context and enabling tool invocation for LLM applications. The available tools suggest capabilities for fetching metadata and content from specific blocks on authenticated URLs, indicating a focus on dynamic data retrieval and processing. The server simplifies building custom MCP servers using Python and the FastMCP framework, positioning it for developers aiming to enhance LLM functionality through tool interactions.",
    "reasoning": "The primary label is \"API Integration\" because the server's core functionality revolves around enabling LLMs to interact with external tools via API-like calls. The secondary label \"Development Tools\" is chosen due to its use by developers to build and extend MCP servers, which involves coding and framework utilization. The custom label \"LLM Integration\" is added to highlight its specialized role in enhancing language model capabilities.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Development Tools",
      "Database Operations"
    ],
    "custom_label": "LLM Integration",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2302,
    "server_name": "Flyon MCP Python Server",
    "rank_by_usage": 2303,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@DeepKumbhare85_flyon-mcp-python.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@DeepKumbhare85/flyon-mcp-python/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2302,
      "name": "Flyon MCP Python Server",
      "author": "@DeepKumbhare85/flyon-mcp-python",
      "overview": "Provide a Python-based MCP server implementation to enable integration of LLMs with external tools, resources, and prompts. Facilitate dynamic context enrichment and tool invocation for LLM applications. Simplify building custom MCP servers with Python and FastMCP framework.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@DeepKumbhare85/flyon-mcp-python",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@DeepKumbhare85_flyon-mcp-python.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "get_blocks_metadata",
          "description": "Deploy Server Flyon MCP Python Server @DeepKumbhare85/flyon-mcp-python Try in Playground get_blocks_metadata",
          "parameters": []
        },
        {
          "name": "get_block_content",
          "description": "Fetch the content of a block from a given URL. Use this tool to retrieve the code block content from the authenticated URL.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@DeepKumbhare85/flyon-mcp-python/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "securityKey",
          "required": true,
          "description": "Security key for authenticated URL generation"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@DeepKumbhare85/flyon-mcp-python/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2303.@DeepKumbhare85_flyon-mcp-python_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1980
  }
}