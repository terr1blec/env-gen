{
  "labels": {
    "analysis": "The MCP Server is primarily focused on providing weather-related data and services. Its core functionality revolves around retrieving current weather conditions, comparing weather across different locations, and supporting both metric and imperial units. The available tools suggest a focus on weather data retrieval and basic server health monitoring to ensure reliable access to weather information. This aligns closely with the \"Weather\" category from the predefined list, as it serves as a source of weather data and forecasting information.",
    "reasoning": "The primary label \"Weather\" is chosen because the server's main purpose is to provide weather data and comparisons, which is the most accurate representation of its functionality. The secondary label \"API Integration\" is included because the server allows for easy integration with applications, suggesting it acts as a data source for other platforms. There is no need for a custom label as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Weather",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 820,
    "server_name": "Weather Server",
    "rank_by_usage": 821,
    "usage_count": "6",
    "original_file": "../crawler/smithery/@glassBead-tc_weather-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@glassBead-tc/weather-mcp/mcp?config=eyJ1bml0cyI6ICJtZXRyaWMiLCAidGltZW91dCI6IDEwfQ==&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "ping",
          "description": "Simple ping tool to test server responsiveness and prevent timeouts.",
          "input_schema": {
            "properties": {},
            "title": "pingArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "health_check",
          "description": "Health check to verify server connectivity and status.",
          "input_schema": {
            "properties": {},
            "title": "health_checkArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather",
          "description": "Get current weather for a city.",
          "input_schema": {
            "properties": {
              "city": {
                "title": "City",
                "type": "string"
              },
              "units": {
                "default": "metric",
                "title": "Units",
                "type": "string"
              },
              "detailed": {
                "default": false,
                "title": "Detailed",
                "type": "boolean"
              }
            },
            "required": [
              "city"
            ],
            "title": "get_weatherArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "compare_weather",
          "description": "Compare weather between multiple cities.",
          "input_schema": {
            "properties": {
              "cities": {
                "items": {
                  "type": "string"
                },
                "title": "Cities",
                "type": "array"
              },
              "metric": {
                "default": "temperature",
                "title": "Metric",
                "type": "string"
              }
            },
            "required": [
              "cities"
            ],
            "title": "compare_weatherArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "ping",
        "health_check",
        "get_weather",
        "compare_weather"
      ]
    },
    "server_info_crawled": {
      "id": 820,
      "name": "Weather Server",
      "author": "@glassBead-tc/weather-mcp",
      "overview": "Provide current weather data and compare weather conditions across multiple cities. Support both metric and imperial units with optional detailed forecasts. Enable easy integration with your applications to access up-to-date weather information.",
      "repository_url": "https://github.com/glassBead-tc/weather-mcp",
      "homepage": "https://smithery.ai/server/@glassBead-tc/weather-mcp",
      "remote_or_local": "Remote",
      "license": "https://smithery.ai/new",
      "usage_count": "6",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@glassBead-tc_weather-mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "ping",
          "description": "Simple ping tool to test server responsiveness and prevent timeouts.",
          "input_schema": {
            "properties": {},
            "title": "pingArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "health_check",
          "description": "Health check to verify server connectivity and status.",
          "input_schema": {
            "properties": {},
            "title": "health_checkArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather",
          "description": "Get current weather for a city.",
          "input_schema": {
            "properties": {
              "city": {
                "title": "City",
                "type": "string"
              },
              "units": {
                "default": "metric",
                "title": "Units",
                "type": "string"
              },
              "detailed": {
                "default": false,
                "title": "Detailed",
                "type": "boolean"
              }
            },
            "required": [
              "city"
            ],
            "title": "get_weatherArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "compare_weather",
          "description": "Compare weather between multiple cities.",
          "input_schema": {
            "properties": {
              "cities": {
                "items": {
                  "type": "string"
                },
                "title": "Cities",
                "type": "array"
              },
              "metric": {
                "default": "temperature",
                "title": "Metric",
                "type": "string"
              }
            },
            "required": [
              "cities"
            ],
            "title": "compare_weatherArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"units\": \"metric\",\n  \"timeout\": 10\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@glassBead-tc/weather-mcp/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"units\": \"metric\",\n  \"timeout\": 10\n}",
      "python_sdk_url": "https://server.smithery.ai/@glassBead-tc/weather-mcp/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0821.@glassBead-tc_weather-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 802
  }
}