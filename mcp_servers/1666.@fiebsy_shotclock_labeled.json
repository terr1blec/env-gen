{
  "labels": {
    "analysis": "The MCP Server described as \"Shotclock\" primarily functions as a comprehensive toolkit for interacting with Figma, a popular design tool. The available tools enable detailed document and node manipulation within Figma, including reading, creating, modifying, and deleting nodes, as well as managing styles, components, and annotations. There's also functionality for prototyping reactions and creating connections between nodes. While the server's description mentions a basketball shot clock application, the actual tools provided are all focused around Figma design and development.",
    "reasoning": "The primary label \"Development Tools\" was chosen because the bulk of the tools are aimed at developers working with Figma to manipulate design elements programmatically. The secondary label \"Design Tools\" was added to emphasize the Figma-specific nature of these tools, while \"Prototyping\" was included due to the specialized tools for prototyping connections and reactions. No custom label is needed as the functionality is well-covered by the existing categories.",
    "primary_label": "Development Tools",
    "secondary_labels": [],
    "custom_label": "Design Tools",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1665,
    "server_name": "Shotclock",
    "rank_by_usage": 1666,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@fiebsy_shotclock.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@fiebsy/shotclock/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_document_info",
          "description": "Get detailed information about the current Figma document",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_selection",
          "description": "Get information about the current selection in Figma",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "read_my_design",
          "description": "Get detailed information about the current selection in Figma, including all node details",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_node_info",
          "description": "Get detailed information about a specific node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to get information about"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_nodes_info",
          "description": "Get detailed information about multiple nodes in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of node IDs to get information about"
              }
            },
            "required": [
              "nodeIds"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "create_rectangle",
          "description": "Create a new rectangle in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "X position"
              },
              "y": {
                "type": "number",
                "description": "Y position"
              },
              "width": {
                "type": "number",
                "description": "Width of the rectangle"
              },
              "height": {
                "type": "number",
                "description": "Height of the rectangle"
              },
              "name": {
                "type": "string",
                "description": "Optional name for the rectangle"
              },
              "parentId": {
                "type": "string",
                "description": "Optional parent node ID to append the rectangle to"
              }
            },
            "required": [
              "x",
              "y",
              "width",
              "height"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "create_frame",
          "description": "Create a new frame in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "X position"
              },
              "y": {
                "type": "number",
                "description": "Y position"
              },
              "width": {
                "type": "number",
                "description": "Width of the frame"
              },
              "height": {
                "type": "number",
                "description": "Height of the frame"
              },
              "name": {
                "type": "string",
                "description": "Optional name for the frame"
              },
              "parentId": {
                "type": "string",
                "description": "Optional parent node ID to append the frame to"
              },
              "fillColor": {
                "type": "object",
                "properties": {
                  "r": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Red component (0-1)"
                  },
                  "g": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Green component (0-1)"
                  },
                  "b": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Blue component (0-1)"
                  },
                  "a": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Alpha component (0-1)"
                  }
                },
                "required": [
                  "r",
                  "g",
                  "b"
                ],
                "additionalProperties": false,
                "description": "Fill color in RGBA format"
              },
              "strokeColor": {
                "type": "object",
                "properties": {
                  "r": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Red component (0-1)"
                  },
                  "g": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Green component (0-1)"
                  },
                  "b": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Blue component (0-1)"
                  },
                  "a": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Alpha component (0-1)"
                  }
                },
                "required": [
                  "r",
                  "g",
                  "b"
                ],
                "additionalProperties": false,
                "description": "Stroke color in RGBA format"
              },
              "strokeWeight": {
                "type": "number",
                "exclusiveMinimum": 0,
                "description": "Stroke weight"
              },
              "layoutMode": {
                "type": "string",
                "enum": [
                  "NONE",
                  "HORIZONTAL",
                  "VERTICAL"
                ],
                "description": "Auto-layout mode for the frame"
              },
              "layoutWrap": {
                "type": "string",
                "enum": [
                  "NO_WRAP",
                  "WRAP"
                ],
                "description": "Whether the auto-layout frame wraps its children"
              },
              "paddingTop": {
                "type": "number",
                "description": "Top padding for auto-layout frame"
              },
              "paddingRight": {
                "type": "number",
                "description": "Right padding for auto-layout frame"
              },
              "paddingBottom": {
                "type": "number",
                "description": "Bottom padding for auto-layout frame"
              },
              "paddingLeft": {
                "type": "number",
                "description": "Left padding for auto-layout frame"
              },
              "primaryAxisAlignItems": {
                "type": "string",
                "enum": [
                  "MIN",
                  "MAX",
                  "CENTER",
                  "SPACE_BETWEEN"
                ],
                "description": "Primary axis alignment for auto-layout frame. Note: When set to SPACE_BETWEEN, itemSpacing will be ignored as children will be evenly spaced."
              },
              "counterAxisAlignItems": {
                "type": "string",
                "enum": [
                  "MIN",
                  "MAX",
                  "CENTER",
                  "BASELINE"
                ],
                "description": "Counter axis alignment for auto-layout frame"
              },
              "layoutSizingHorizontal": {
                "type": "string",
                "enum": [
                  "FIXED",
                  "HUG",
                  "FILL"
                ],
                "description": "Horizontal sizing mode for auto-layout frame"
              },
              "layoutSizingVertical": {
                "type": "string",
                "enum": [
                  "FIXED",
                  "HUG",
                  "FILL"
                ],
                "description": "Vertical sizing mode for auto-layout frame"
              },
              "itemSpacing": {
                "type": "number",
                "description": "Distance between children in auto-layout frame. Note: This value will be ignored if primaryAxisAlignItems is set to SPACE_BETWEEN."
              }
            },
            "required": [
              "x",
              "y",
              "width",
              "height"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "create_text",
          "description": "Create a new text element in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "X position"
              },
              "y": {
                "type": "number",
                "description": "Y position"
              },
              "text": {
                "type": "string",
                "description": "Text content"
              },
              "fontSize": {
                "type": "number",
                "description": "Font size (default: 14)"
              },
              "fontWeight": {
                "type": "number",
                "description": "Font weight (e.g., 400 for Regular, 700 for Bold)"
              },
              "fontColor": {
                "type": "object",
                "properties": {
                  "r": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Red component (0-1)"
                  },
                  "g": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Green component (0-1)"
                  },
                  "b": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Blue component (0-1)"
                  },
                  "a": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Alpha component (0-1)"
                  }
                },
                "required": [
                  "r",
                  "g",
                  "b"
                ],
                "additionalProperties": false,
                "description": "Font color in RGBA format"
              },
              "name": {
                "type": "string",
                "description": "Semantic layer name for the text node"
              },
              "parentId": {
                "type": "string",
                "description": "Optional parent node ID to append the text to"
              }
            },
            "required": [
              "x",
              "y",
              "text"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_fill_color",
          "description": "Set the fill color of a node in Figma can be TextNode or FrameNode",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to modify"
              },
              "r": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Red component (0-1)"
              },
              "g": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Green component (0-1)"
              },
              "b": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Blue component (0-1)"
              },
              "a": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Alpha component (0-1)"
              }
            },
            "required": [
              "nodeId",
              "r",
              "g",
              "b"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_stroke_color",
          "description": "Set the stroke color of a node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to modify"
              },
              "r": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Red component (0-1)"
              },
              "g": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Green component (0-1)"
              },
              "b": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Blue component (0-1)"
              },
              "a": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Alpha component (0-1)"
              },
              "weight": {
                "type": "number",
                "exclusiveMinimum": 0,
                "description": "Stroke weight"
              }
            },
            "required": [
              "nodeId",
              "r",
              "g",
              "b"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "move_node",
          "description": "Move a node to a new position in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to move"
              },
              "x": {
                "type": "number",
                "description": "New X position"
              },
              "y": {
                "type": "number",
                "description": "New Y position"
              }
            },
            "required": [
              "nodeId",
              "x",
              "y"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "clone_node",
          "description": "Clone an existing node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to clone"
              },
              "x": {
                "type": "number",
                "description": "New X position for the clone"
              },
              "y": {
                "type": "number",
                "description": "New Y position for the clone"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "resize_node",
          "description": "Resize a node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to resize"
              },
              "width": {
                "type": "number",
                "exclusiveMinimum": 0,
                "description": "New width"
              },
              "height": {
                "type": "number",
                "exclusiveMinimum": 0,
                "description": "New height"
              }
            },
            "required": [
              "nodeId",
              "width",
              "height"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "delete_node",
          "description": "Delete a node from Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to delete"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "delete_multiple_nodes",
          "description": "Delete multiple nodes from Figma at once",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of node IDs to delete"
              }
            },
            "required": [
              "nodeIds"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "export_node_as_image",
          "description": "Export a node as an image from Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to export"
              },
              "format": {
                "type": "string",
                "enum": [
                  "PNG",
                  "JPG",
                  "SVG",
                  "PDF"
                ],
                "description": "Export format"
              },
              "scale": {
                "type": "number",
                "exclusiveMinimum": 0,
                "description": "Export scale"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_text_content",
          "description": "Set the text content of an existing text node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the text node to modify"
              },
              "text": {
                "type": "string",
                "description": "New text content"
              }
            },
            "required": [
              "nodeId",
              "text"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_styles",
          "description": "Get all styles from the current Figma document",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_local_components",
          "description": "Get all local components from the Figma document",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_annotations",
          "description": "Get all annotations in the current document or specific node",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "Optional node ID to get annotations for specific node"
              },
              "includeCategories": {
                "type": "boolean",
                "default": true,
                "description": "Whether to include category information"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_annotation",
          "description": "Create or update an annotation",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to annotate"
              },
              "annotationId": {
                "type": "string",
                "description": "The ID of the annotation to update (if updating existing annotation)"
              },
              "labelMarkdown": {
                "type": "string",
                "description": "The annotation text in markdown format"
              },
              "categoryId": {
                "type": "string",
                "description": "The ID of the annotation category"
              },
              "properties": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "additionalProperties": false
                },
                "description": "Additional properties for the annotation"
              }
            },
            "required": [
              "nodeId",
              "labelMarkdown"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_multiple_annotations",
          "description": "Set multiple annotations parallelly in a node",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node containing the elements to annotate"
              },
              "annotations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "nodeId": {
                      "type": "string",
                      "description": "The ID of the node to annotate"
                    },
                    "labelMarkdown": {
                      "type": "string",
                      "description": "The annotation text in markdown format"
                    },
                    "categoryId": {
                      "type": "string",
                      "description": "The ID of the annotation category"
                    },
                    "annotationId": {
                      "type": "string",
                      "description": "The ID of the annotation to update (if updating existing annotation)"
                    },
                    "properties": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "additionalProperties": false
                      },
                      "description": "Additional properties for the annotation"
                    }
                  },
                  "required": [
                    "nodeId",
                    "labelMarkdown"
                  ],
                  "additionalProperties": false
                },
                "description": "Array of annotations to apply"
              }
            },
            "required": [
              "nodeId",
              "annotations"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "create_component_instance",
          "description": "Create an instance of a component in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "componentKey": {
                "type": "string",
                "description": "Key of the component to instantiate"
              },
              "x": {
                "type": "number",
                "description": "X position"
              },
              "y": {
                "type": "number",
                "description": "Y position"
              }
            },
            "required": [
              "componentKey",
              "x",
              "y"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_instance_overrides",
          "description": "Get all override properties from a selected component instance. These overrides can be applied to other instances, which will swap them to match the source component.",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "Optional ID of the component instance to get overrides from. If not provided, currently selected instance will be used."
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_instance_overrides",
          "description": "Apply previously copied overrides to selected component instances. Target instances will be swapped to the source component and all copied override properties will be applied.",
          "input_schema": {
            "type": "object",
            "properties": {
              "sourceInstanceId": {
                "type": "string",
                "description": "ID of the source component instance"
              },
              "targetNodeIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of target instance IDs. Currently selected instances will be used."
              }
            },
            "required": [
              "sourceInstanceId",
              "targetNodeIds"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_corner_radius",
          "description": "Set the corner radius of a node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to modify"
              },
              "radius": {
                "type": "number",
                "minimum": 0,
                "description": "Corner radius value"
              },
              "corners": {
                "type": "array",
                "items": {
                  "type": "boolean"
                },
                "minItems": 4,
                "maxItems": 4,
                "description": "Optional array of 4 booleans to specify which corners to round [topLeft, topRight, bottomRight, bottomLeft]"
              }
            },
            "required": [
              "nodeId",
              "radius"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "scan_text_nodes",
          "description": "Scan all text nodes in the selected Figma node",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "ID of the node to scan"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "scan_nodes_by_types",
          "description": "Scan for child nodes with specific types in the selected Figma node",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "ID of the node to scan"
              },
              "types": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of node types to find in the child nodes (e.g. ['COMPONENT', 'FRAME'])"
              }
            },
            "required": [
              "nodeId",
              "types"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_multiple_text_contents",
          "description": "Set multiple text contents parallelly in a node",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node containing the text nodes to replace"
              },
              "text": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "nodeId": {
                      "type": "string",
                      "description": "The ID of the text node"
                    },
                    "text": {
                      "type": "string",
                      "description": "The replacement text"
                    }
                  },
                  "required": [
                    "nodeId",
                    "text"
                  ],
                  "additionalProperties": false
                },
                "description": "Array of text node IDs and their replacement texts"
              }
            },
            "required": [
              "nodeId",
              "text"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_layout_mode",
          "description": "Set the layout mode and wrap behavior of a frame in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the frame to modify"
              },
              "layoutMode": {
                "type": "string",
                "enum": [
                  "NONE",
                  "HORIZONTAL",
                  "VERTICAL"
                ],
                "description": "Layout mode for the frame"
              },
              "layoutWrap": {
                "type": "string",
                "enum": [
                  "NO_WRAP",
                  "WRAP"
                ],
                "description": "Whether the auto-layout frame wraps its children"
              }
            },
            "required": [
              "nodeId",
              "layoutMode"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_padding",
          "description": "Set padding values for an auto-layout frame in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the frame to modify"
              },
              "paddingTop": {
                "type": "number",
                "description": "Top padding value"
              },
              "paddingRight": {
                "type": "number",
                "description": "Right padding value"
              },
              "paddingBottom": {
                "type": "number",
                "description": "Bottom padding value"
              },
              "paddingLeft": {
                "type": "number",
                "description": "Left padding value"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_axis_align",
          "description": "Set primary and counter axis alignment for an auto-layout frame in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the frame to modify"
              },
              "primaryAxisAlignItems": {
                "type": "string",
                "enum": [
                  "MIN",
                  "MAX",
                  "CENTER",
                  "SPACE_BETWEEN"
                ],
                "description": "Primary axis alignment (MIN/MAX = left/right in horizontal, top/bottom in vertical). Note: When set to SPACE_BETWEEN, itemSpacing will be ignored as children will be evenly spaced."
              },
              "counterAxisAlignItems": {
                "type": "string",
                "enum": [
                  "MIN",
                  "MAX",
                  "CENTER",
                  "BASELINE"
                ],
                "description": "Counter axis alignment (MIN/MAX = top/bottom in horizontal, left/right in vertical)"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_layout_sizing",
          "description": "Set horizontal and vertical sizing modes for an auto-layout frame in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the frame to modify"
              },
              "layoutSizingHorizontal": {
                "type": "string",
                "enum": [
                  "FIXED",
                  "HUG",
                  "FILL"
                ],
                "description": "Horizontal sizing mode (HUG for frames/text only, FILL for auto-layout children only)"
              },
              "layoutSizingVertical": {
                "type": "string",
                "enum": [
                  "FIXED",
                  "HUG",
                  "FILL"
                ],
                "description": "Vertical sizing mode (HUG for frames/text only, FILL for auto-layout children only)"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_item_spacing",
          "description": "Set distance between children in an auto-layout frame",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the frame to modify"
              },
              "itemSpacing": {
                "type": "number",
                "description": "Distance between children. Note: This value will be ignored if primaryAxisAlignItems is set to SPACE_BETWEEN."
              }
            },
            "required": [
              "nodeId",
              "itemSpacing"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_reactions",
          "description": "Get Figma Prototyping Reactions from multiple nodes. CRITICAL: The output MUST be processed using the 'reaction_to_connector_strategy' prompt IMMEDIATELY to generate parameters for connector lines via the 'create_connections' tool.",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of node IDs to get reactions from"
              }
            },
            "required": [
              "nodeIds"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_default_connector",
          "description": "Set a copied connector node as the default connector",
          "input_schema": {
            "type": "object",
            "properties": {
              "connectorId": {
                "type": "string",
                "description": "The ID of the connector node to set as default"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "create_connections",
          "description": "Create connections between nodes using the default connector style",
          "input_schema": {
            "type": "object",
            "properties": {
              "connections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "startNodeId": {
                      "type": "string",
                      "description": "ID of the starting node"
                    },
                    "endNodeId": {
                      "type": "string",
                      "description": "ID of the ending node"
                    },
                    "text": {
                      "type": "string",
                      "description": "Optional text to display on the connector"
                    }
                  },
                  "required": [
                    "startNodeId",
                    "endNodeId"
                  ],
                  "additionalProperties": false
                },
                "description": "Array of node connections to create"
              }
            },
            "required": [
              "connections"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "join_channel",
          "description": "Join a specific channel to communicate with Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "channel": {
                "type": "string",
                "description": "The name of the channel to join",
                "default": ""
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 38,
      "tool_names": [
        "get_document_info",
        "get_selection",
        "read_my_design",
        "get_node_info",
        "get_nodes_info",
        "create_rectangle",
        "create_frame",
        "create_text",
        "set_fill_color",
        "set_stroke_color",
        "move_node",
        "clone_node",
        "resize_node",
        "delete_node",
        "delete_multiple_nodes",
        "export_node_as_image",
        "set_text_content",
        "get_styles",
        "get_local_components",
        "get_annotations",
        "set_annotation",
        "set_multiple_annotations",
        "create_component_instance",
        "get_instance_overrides",
        "set_instance_overrides",
        "set_corner_radius",
        "scan_text_nodes",
        "scan_nodes_by_types",
        "set_multiple_text_contents",
        "set_layout_mode",
        "set_padding",
        "set_axis_align",
        "set_layout_sizing",
        "set_item_spacing",
        "get_reactions",
        "set_default_connector",
        "create_connections",
        "join_channel"
      ]
    },
    "server_info_crawled": {
      "id": 1665,
      "name": "Shotclock",
      "author": "@fiebsy/shotclock",
      "overview": "Provide a modern web application for basketball shot clock management with a Next.js 14 front-end and Firebase Functions backend. Enable developers to quickly start and develop with a well-structured monorepo using pnpm and Turborepo. Facilitate easy deployment and local emulation of cloud functions for seamless development workflows.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@fiebsy/shotclock",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@fiebsy_shotclock.json",
      "tools_count": 38,
      "tools": [
        {
          "name": "get_document_info",
          "description": "Get detailed information about the current Figma document",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_selection",
          "description": "Get information about the current selection in Figma",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "read_my_design",
          "description": "Get detailed information about the current selection in Figma, including all node details",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_node_info",
          "description": "Get detailed information about a specific node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to get information about"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_nodes_info",
          "description": "Get detailed information about multiple nodes in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of node IDs to get information about"
              }
            },
            "required": [
              "nodeIds"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "create_rectangle",
          "description": "Create a new rectangle in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "X position"
              },
              "y": {
                "type": "number",
                "description": "Y position"
              },
              "width": {
                "type": "number",
                "description": "Width of the rectangle"
              },
              "height": {
                "type": "number",
                "description": "Height of the rectangle"
              },
              "name": {
                "type": "string",
                "description": "Optional name for the rectangle"
              },
              "parentId": {
                "type": "string",
                "description": "Optional parent node ID to append the rectangle to"
              }
            },
            "required": [
              "x",
              "y",
              "width",
              "height"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "create_frame",
          "description": "Create a new frame in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "X position"
              },
              "y": {
                "type": "number",
                "description": "Y position"
              },
              "width": {
                "type": "number",
                "description": "Width of the frame"
              },
              "height": {
                "type": "number",
                "description": "Height of the frame"
              },
              "name": {
                "type": "string",
                "description": "Optional name for the frame"
              },
              "parentId": {
                "type": "string",
                "description": "Optional parent node ID to append the frame to"
              },
              "fillColor": {
                "type": "object",
                "properties": {
                  "r": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Red component (0-1)"
                  },
                  "g": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Green component (0-1)"
                  },
                  "b": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Blue component (0-1)"
                  },
                  "a": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Alpha component (0-1)"
                  }
                },
                "required": [
                  "r",
                  "g",
                  "b"
                ],
                "additionalProperties": false,
                "description": "Fill color in RGBA format"
              },
              "strokeColor": {
                "type": "object",
                "properties": {
                  "r": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Red component (0-1)"
                  },
                  "g": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Green component (0-1)"
                  },
                  "b": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Blue component (0-1)"
                  },
                  "a": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Alpha component (0-1)"
                  }
                },
                "required": [
                  "r",
                  "g",
                  "b"
                ],
                "additionalProperties": false,
                "description": "Stroke color in RGBA format"
              },
              "strokeWeight": {
                "type": "number",
                "exclusiveMinimum": 0,
                "description": "Stroke weight"
              },
              "layoutMode": {
                "type": "string",
                "enum": [
                  "NONE",
                  "HORIZONTAL",
                  "VERTICAL"
                ],
                "description": "Auto-layout mode for the frame"
              },
              "layoutWrap": {
                "type": "string",
                "enum": [
                  "NO_WRAP",
                  "WRAP"
                ],
                "description": "Whether the auto-layout frame wraps its children"
              },
              "paddingTop": {
                "type": "number",
                "description": "Top padding for auto-layout frame"
              },
              "paddingRight": {
                "type": "number",
                "description": "Right padding for auto-layout frame"
              },
              "paddingBottom": {
                "type": "number",
                "description": "Bottom padding for auto-layout frame"
              },
              "paddingLeft": {
                "type": "number",
                "description": "Left padding for auto-layout frame"
              },
              "primaryAxisAlignItems": {
                "type": "string",
                "enum": [
                  "MIN",
                  "MAX",
                  "CENTER",
                  "SPACE_BETWEEN"
                ],
                "description": "Primary axis alignment for auto-layout frame. Note: When set to SPACE_BETWEEN, itemSpacing will be ignored as children will be evenly spaced."
              },
              "counterAxisAlignItems": {
                "type": "string",
                "enum": [
                  "MIN",
                  "MAX",
                  "CENTER",
                  "BASELINE"
                ],
                "description": "Counter axis alignment for auto-layout frame"
              },
              "layoutSizingHorizontal": {
                "type": "string",
                "enum": [
                  "FIXED",
                  "HUG",
                  "FILL"
                ],
                "description": "Horizontal sizing mode for auto-layout frame"
              },
              "layoutSizingVertical": {
                "type": "string",
                "enum": [
                  "FIXED",
                  "HUG",
                  "FILL"
                ],
                "description": "Vertical sizing mode for auto-layout frame"
              },
              "itemSpacing": {
                "type": "number",
                "description": "Distance between children in auto-layout frame. Note: This value will be ignored if primaryAxisAlignItems is set to SPACE_BETWEEN."
              }
            },
            "required": [
              "x",
              "y",
              "width",
              "height"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "create_text",
          "description": "Create a new text element in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "X position"
              },
              "y": {
                "type": "number",
                "description": "Y position"
              },
              "text": {
                "type": "string",
                "description": "Text content"
              },
              "fontSize": {
                "type": "number",
                "description": "Font size (default: 14)"
              },
              "fontWeight": {
                "type": "number",
                "description": "Font weight (e.g., 400 for Regular, 700 for Bold)"
              },
              "fontColor": {
                "type": "object",
                "properties": {
                  "r": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Red component (0-1)"
                  },
                  "g": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Green component (0-1)"
                  },
                  "b": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Blue component (0-1)"
                  },
                  "a": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Alpha component (0-1)"
                  }
                },
                "required": [
                  "r",
                  "g",
                  "b"
                ],
                "additionalProperties": false,
                "description": "Font color in RGBA format"
              },
              "name": {
                "type": "string",
                "description": "Semantic layer name for the text node"
              },
              "parentId": {
                "type": "string",
                "description": "Optional parent node ID to append the text to"
              }
            },
            "required": [
              "x",
              "y",
              "text"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_fill_color",
          "description": "Set the fill color of a node in Figma can be TextNode or FrameNode",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to modify"
              },
              "r": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Red component (0-1)"
              },
              "g": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Green component (0-1)"
              },
              "b": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Blue component (0-1)"
              },
              "a": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Alpha component (0-1)"
              }
            },
            "required": [
              "nodeId",
              "r",
              "g",
              "b"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_stroke_color",
          "description": "Set the stroke color of a node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to modify"
              },
              "r": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Red component (0-1)"
              },
              "g": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Green component (0-1)"
              },
              "b": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Blue component (0-1)"
              },
              "a": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Alpha component (0-1)"
              },
              "weight": {
                "type": "number",
                "exclusiveMinimum": 0,
                "description": "Stroke weight"
              }
            },
            "required": [
              "nodeId",
              "r",
              "g",
              "b"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "move_node",
          "description": "Move a node to a new position in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to move"
              },
              "x": {
                "type": "number",
                "description": "New X position"
              },
              "y": {
                "type": "number",
                "description": "New Y position"
              }
            },
            "required": [
              "nodeId",
              "x",
              "y"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "clone_node",
          "description": "Clone an existing node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to clone"
              },
              "x": {
                "type": "number",
                "description": "New X position for the clone"
              },
              "y": {
                "type": "number",
                "description": "New Y position for the clone"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "resize_node",
          "description": "Resize a node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to resize"
              },
              "width": {
                "type": "number",
                "exclusiveMinimum": 0,
                "description": "New width"
              },
              "height": {
                "type": "number",
                "exclusiveMinimum": 0,
                "description": "New height"
              }
            },
            "required": [
              "nodeId",
              "width",
              "height"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "delete_node",
          "description": "Delete a node from Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to delete"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "delete_multiple_nodes",
          "description": "Delete multiple nodes from Figma at once",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of node IDs to delete"
              }
            },
            "required": [
              "nodeIds"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "export_node_as_image",
          "description": "Export a node as an image from Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to export"
              },
              "format": {
                "type": "string",
                "enum": [
                  "PNG",
                  "JPG",
                  "SVG",
                  "PDF"
                ],
                "description": "Export format"
              },
              "scale": {
                "type": "number",
                "exclusiveMinimum": 0,
                "description": "Export scale"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_text_content",
          "description": "Set the text content of an existing text node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the text node to modify"
              },
              "text": {
                "type": "string",
                "description": "New text content"
              }
            },
            "required": [
              "nodeId",
              "text"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_styles",
          "description": "Get all styles from the current Figma document",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_local_components",
          "description": "Get all local components from the Figma document",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_annotations",
          "description": "Get all annotations in the current document or specific node",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "Optional node ID to get annotations for specific node"
              },
              "includeCategories": {
                "type": "boolean",
                "default": true,
                "description": "Whether to include category information"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_annotation",
          "description": "Create or update an annotation",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to annotate"
              },
              "annotationId": {
                "type": "string",
                "description": "The ID of the annotation to update (if updating existing annotation)"
              },
              "labelMarkdown": {
                "type": "string",
                "description": "The annotation text in markdown format"
              },
              "categoryId": {
                "type": "string",
                "description": "The ID of the annotation category"
              },
              "properties": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "additionalProperties": false
                },
                "description": "Additional properties for the annotation"
              }
            },
            "required": [
              "nodeId",
              "labelMarkdown"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_multiple_annotations",
          "description": "Set multiple annotations parallelly in a node",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node containing the elements to annotate"
              },
              "annotations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "nodeId": {
                      "type": "string",
                      "description": "The ID of the node to annotate"
                    },
                    "labelMarkdown": {
                      "type": "string",
                      "description": "The annotation text in markdown format"
                    },
                    "categoryId": {
                      "type": "string",
                      "description": "The ID of the annotation category"
                    },
                    "annotationId": {
                      "type": "string",
                      "description": "The ID of the annotation to update (if updating existing annotation)"
                    },
                    "properties": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "additionalProperties": false
                      },
                      "description": "Additional properties for the annotation"
                    }
                  },
                  "required": [
                    "nodeId",
                    "labelMarkdown"
                  ],
                  "additionalProperties": false
                },
                "description": "Array of annotations to apply"
              }
            },
            "required": [
              "nodeId",
              "annotations"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "create_component_instance",
          "description": "Create an instance of a component in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "componentKey": {
                "type": "string",
                "description": "Key of the component to instantiate"
              },
              "x": {
                "type": "number",
                "description": "X position"
              },
              "y": {
                "type": "number",
                "description": "Y position"
              }
            },
            "required": [
              "componentKey",
              "x",
              "y"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_instance_overrides",
          "description": "Get all override properties from a selected component instance. These overrides can be applied to other instances, which will swap them to match the source component.",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "Optional ID of the component instance to get overrides from. If not provided, currently selected instance will be used."
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_instance_overrides",
          "description": "Apply previously copied overrides to selected component instances. Target instances will be swapped to the source component and all copied override properties will be applied.",
          "input_schema": {
            "type": "object",
            "properties": {
              "sourceInstanceId": {
                "type": "string",
                "description": "ID of the source component instance"
              },
              "targetNodeIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of target instance IDs. Currently selected instances will be used."
              }
            },
            "required": [
              "sourceInstanceId",
              "targetNodeIds"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_corner_radius",
          "description": "Set the corner radius of a node in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node to modify"
              },
              "radius": {
                "type": "number",
                "minimum": 0,
                "description": "Corner radius value"
              },
              "corners": {
                "type": "array",
                "items": {
                  "type": "boolean"
                },
                "minItems": 4,
                "maxItems": 4,
                "description": "Optional array of 4 booleans to specify which corners to round [topLeft, topRight, bottomRight, bottomLeft]"
              }
            },
            "required": [
              "nodeId",
              "radius"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "scan_text_nodes",
          "description": "Scan all text nodes in the selected Figma node",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "ID of the node to scan"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "scan_nodes_by_types",
          "description": "Scan for child nodes with specific types in the selected Figma node",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "ID of the node to scan"
              },
              "types": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of node types to find in the child nodes (e.g. ['COMPONENT', 'FRAME'])"
              }
            },
            "required": [
              "nodeId",
              "types"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_multiple_text_contents",
          "description": "Set multiple text contents parallelly in a node",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the node containing the text nodes to replace"
              },
              "text": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "nodeId": {
                      "type": "string",
                      "description": "The ID of the text node"
                    },
                    "text": {
                      "type": "string",
                      "description": "The replacement text"
                    }
                  },
                  "required": [
                    "nodeId",
                    "text"
                  ],
                  "additionalProperties": false
                },
                "description": "Array of text node IDs and their replacement texts"
              }
            },
            "required": [
              "nodeId",
              "text"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_layout_mode",
          "description": "Set the layout mode and wrap behavior of a frame in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the frame to modify"
              },
              "layoutMode": {
                "type": "string",
                "enum": [
                  "NONE",
                  "HORIZONTAL",
                  "VERTICAL"
                ],
                "description": "Layout mode for the frame"
              },
              "layoutWrap": {
                "type": "string",
                "enum": [
                  "NO_WRAP",
                  "WRAP"
                ],
                "description": "Whether the auto-layout frame wraps its children"
              }
            },
            "required": [
              "nodeId",
              "layoutMode"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_padding",
          "description": "Set padding values for an auto-layout frame in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the frame to modify"
              },
              "paddingTop": {
                "type": "number",
                "description": "Top padding value"
              },
              "paddingRight": {
                "type": "number",
                "description": "Right padding value"
              },
              "paddingBottom": {
                "type": "number",
                "description": "Bottom padding value"
              },
              "paddingLeft": {
                "type": "number",
                "description": "Left padding value"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_axis_align",
          "description": "Set primary and counter axis alignment for an auto-layout frame in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the frame to modify"
              },
              "primaryAxisAlignItems": {
                "type": "string",
                "enum": [
                  "MIN",
                  "MAX",
                  "CENTER",
                  "SPACE_BETWEEN"
                ],
                "description": "Primary axis alignment (MIN/MAX = left/right in horizontal, top/bottom in vertical). Note: When set to SPACE_BETWEEN, itemSpacing will be ignored as children will be evenly spaced."
              },
              "counterAxisAlignItems": {
                "type": "string",
                "enum": [
                  "MIN",
                  "MAX",
                  "CENTER",
                  "BASELINE"
                ],
                "description": "Counter axis alignment (MIN/MAX = top/bottom in horizontal, left/right in vertical)"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_layout_sizing",
          "description": "Set horizontal and vertical sizing modes for an auto-layout frame in Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the frame to modify"
              },
              "layoutSizingHorizontal": {
                "type": "string",
                "enum": [
                  "FIXED",
                  "HUG",
                  "FILL"
                ],
                "description": "Horizontal sizing mode (HUG for frames/text only, FILL for auto-layout children only)"
              },
              "layoutSizingVertical": {
                "type": "string",
                "enum": [
                  "FIXED",
                  "HUG",
                  "FILL"
                ],
                "description": "Vertical sizing mode (HUG for frames/text only, FILL for auto-layout children only)"
              }
            },
            "required": [
              "nodeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_item_spacing",
          "description": "Set distance between children in an auto-layout frame",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string",
                "description": "The ID of the frame to modify"
              },
              "itemSpacing": {
                "type": "number",
                "description": "Distance between children. Note: This value will be ignored if primaryAxisAlignItems is set to SPACE_BETWEEN."
              }
            },
            "required": [
              "nodeId",
              "itemSpacing"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_reactions",
          "description": "Get Figma Prototyping Reactions from multiple nodes. CRITICAL: The output MUST be processed using the 'reaction_to_connector_strategy' prompt IMMEDIATELY to generate parameters for connector lines via the 'create_connections' tool.",
          "input_schema": {
            "type": "object",
            "properties": {
              "nodeIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of node IDs to get reactions from"
              }
            },
            "required": [
              "nodeIds"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "set_default_connector",
          "description": "Set a copied connector node as the default connector",
          "input_schema": {
            "type": "object",
            "properties": {
              "connectorId": {
                "type": "string",
                "description": "The ID of the connector node to set as default"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "create_connections",
          "description": "Create connections between nodes using the default connector style",
          "input_schema": {
            "type": "object",
            "properties": {
              "connections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "startNodeId": {
                      "type": "string",
                      "description": "ID of the starting node"
                    },
                    "endNodeId": {
                      "type": "string",
                      "description": "ID of the ending node"
                    },
                    "text": {
                      "type": "string",
                      "description": "Optional text to display on the connector"
                    }
                  },
                  "required": [
                    "startNodeId",
                    "endNodeId"
                  ],
                  "additionalProperties": false
                },
                "description": "Array of node connections to create"
              }
            },
            "required": [
              "connections"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "join_channel",
          "description": "Join a specific channel to communicate with Figma",
          "input_schema": {
            "type": "object",
            "properties": {
              "channel": {
                "type": "string",
                "description": "The name of the channel to join",
                "default": ""
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@fiebsy/shotclock/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@fiebsy/shotclock/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1666.@fiebsy_shotclock_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1508
  }
}