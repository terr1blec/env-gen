{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate efficient querying and searching within large JSON files, enabling users to extract relevant data segments using JSONPath expressions and similarity searches. The core tools focus on retrieving data based on keys or values when the exact path is unknown, making it valuable for handling massive JSON datasets. This functionality supports LLM workflows by simplifying access to structured data, enhancing data accessibility.",
    "reasoning": "The primary label \"Database Operations\" was chosen because the server enables querying and retrieving data from large JSON files, which is akin to database operations. The secondary label \"Data Analysis & Processing\" is relevant as the tools support searching for and extracting data, which can be used for further analysis. The custom label \"JSON Data Extraction\" highlights the server's specialized focus on JSON files.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": "JSON Data Extraction",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 736,
    "server_name": "JSON Query",
    "rank_by_usage": 737,
    "usage_count": "9",
    "original_file": "../crawler/smithery/@mgraczyk_json-query-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mgraczyk/json-query-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "json_query_jsonpath",
          "description": "Query a JSON file using JSONPath. Use to get values precisely from large JSON files.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Path to the JSON file"
              },
              "jsonpath": {
                "type": "string",
                "minLength": 1,
                "description": "JSONPath expression to evaluate"
              }
            },
            "required": [
              "file_path",
              "jsonpath"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "json_query_search_keys",
          "description": "Search for keys in a JSON file. Use when you do not know the path to a key in a large JSON file, but have some idea what the key is.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Path to the JSON file"
              },
              "query": {
                "type": "string",
                "minLength": 1,
                "description": "Search term for finding matching keys"
              },
              "limit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "default": 5,
                "description": "Maximum number of results to return (default: 5)"
              }
            },
            "required": [
              "file_path",
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "json_query_search_values",
          "description": "Search for values in a JSON file. Use when you do not know the path to a value in a large JSON file, but have some idea what the value is.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Path to the JSON file"
              },
              "query": {
                "type": "string",
                "minLength": 1,
                "description": "Search term for finding matching values"
              },
              "limit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "default": 5,
                "description": "Maximum number of results to return (default: 5)"
              }
            },
            "required": [
              "file_path",
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 3,
      "tool_names": [
        "json_query_jsonpath",
        "json_query_search_keys",
        "json_query_search_values"
      ]
    },
    "server_info_crawled": {
      "id": 736,
      "name": "JSON Query",
      "author": "@mgraczyk/json-query-mcp",
      "overview": "Enable efficient querying and searching within large JSON files using JSONPath expressions and similarity searches. Extract relevant data segments easily to support LLM workflows. Simplify handling of massive JSON datasets for enhanced data accessibility.",
      "repository_url": "https://github.com/mgraczyk/json-query-mcp",
      "homepage": "https://smithery.ai/server/@mgraczyk/json-query-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "9",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mgraczyk_json-query-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "json_query_jsonpath",
          "description": "Query a JSON file using JSONPath. Use to get values precisely from large JSON files.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Path to the JSON file"
              },
              "jsonpath": {
                "type": "string",
                "minLength": 1,
                "description": "JSONPath expression to evaluate"
              }
            },
            "required": [
              "file_path",
              "jsonpath"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "json_query_search_keys",
          "description": "Search for keys in a JSON file. Use when you do not know the path to a key in a large JSON file, but have some idea what the key is.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Path to the JSON file"
              },
              "query": {
                "type": "string",
                "minLength": 1,
                "description": "Search term for finding matching keys"
              },
              "limit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "default": 5,
                "description": "Maximum number of results to return (default: 5)"
              }
            },
            "required": [
              "file_path",
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "json_query_search_values",
          "description": "Search for values in a JSON file. Use when you do not know the path to a value in a large JSON file, but have some idea what the value is.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Path to the JSON file"
              },
              "query": {
                "type": "string",
                "minLength": 1,
                "description": "Search term for finding matching values"
              },
              "limit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "default": 5,
                "description": "Maximum number of results to return (default: 5)"
              }
            },
            "required": [
              "file_path",
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mgraczyk/json-query-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mgraczyk/json-query-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0737.@mgraczyk_json-query-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 720
  }
}