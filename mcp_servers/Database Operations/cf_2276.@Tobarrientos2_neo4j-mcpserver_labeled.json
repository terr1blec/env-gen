{
  "labels": {
    "analysis": "The MCP Server is a Neo4j Graph Database Server that specializes in managing and executing Cypher queries on a graph database. Its primary functionality revolves around database operations, particularly for graph-structured data. The server simplifies integration with LLM workflows, allowing users to Query and manipulate graph data seamlessly. The available tool, \"neo4j-query,\" indicates that this server is focused on executing Cypher queries, which is a domain-specific language for Neo4j graph databases.",
    "reasoning": "The primary label \"Database Operations\" was chosen because the server's core functionality is centered around database management and querying. The secondary label \"AI/ML Tools\" is included because the server mentions integration with LLM workflows, suggesting it could be used in AI or machine learning contexts where graph data processing is valuable. \"Data Analysis & Processing\" is another relevant label as the server facilitates data-driven insights through Cypher queries.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "AI/ML Tools",
      "Data Analysis & Processing"
    ],
    "custom_label": "Graph Data Processing",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2275,
    "server_name": "Neo4j Graph Database Server",
    "rank_by_usage": 2276,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Tobarrientos2_neo4j-mcpserver.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Tobarrientos2/neo4j-mcpserver/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2275,
      "name": "Neo4j Graph Database Server",
      "author": "@Tobarrientos2/neo4j-mcpserver",
      "overview": "Manage and execute Cypher queries on your Neo4j graph database through a standardized protocol. Seamlessly integrate graph database operations into your LLM workflows for enhanced data-driven insights. Simplify database interactions with an easy-to-run server compatible with popular LLM clients.",
      "repository_url": "https://github.com/Tobarrientos2/neo4j-mcpserver",
      "homepage": "https://smithery.ai/server/@Tobarrientos2/neo4j-mcpserver",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Tobarrientos2_neo4j-mcpserver.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "neo4j-query",
          "description": "Deploy Server Neo4j Graph Database Server Claim Server @Tobarrientos2/neo4j-mcpserver Try in Playground neo4j-query",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "parameters",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Tobarrientos2/neo4j-mcpserver/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Tobarrientos2/neo4j-mcpserver/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2276.@Tobarrientos2_neo4j-mcpserver_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1957
  }
}