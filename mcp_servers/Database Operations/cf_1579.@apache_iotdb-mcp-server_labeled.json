{
  "labels": {
    "analysis": "The IoTDB MCP Server enables secure and controlled interaction with IoTDB databases, primarily focusing on querying and exploring database schemas. It provides tools for running SQL queries, listing tables, and retrieving schema information, making it suitable for database exploration and analysis in a structured manner. The server's functionality is centered around database operations with a specific focus on IoT-related data storage and retrieval.",
    "reasoning": "The primary label \"Database Operations\" is chosen because the server's core functionality revolves around querying and analyzing database schemas. The secondary label \"Data Analysis & Processing\" is included because the tools support structured data exploration, which aligns with analytical use cases. The custom label \"IoT Database Management\" is added to highlight the server's specific focus on IoTDB, which is niche and relevant for clustering and organization.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": "IoT Database Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1578,
    "server_name": "IoTDB MCP Server",
    "rank_by_usage": 1579,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@apache_iotdb-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@apache/iotdb-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1578,
      "name": "IoTDB MCP Server",
      "author": "@apache/iotdb-mcp-server",
      "overview": "Enable secure interaction with IoTDB databases. Run SQL queries to read data and explore database schemas through a controlled interface, making database exploration and analysis safer and more structured.",
      "repository_url": "https://github.com/apache/iotdb-mcp-server",
      "homepage": "https://smithery.ai/server/@apache/iotdb-mcp-server",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@apache_iotdb-mcp-server.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "read_query",
          "description": "Deploy Server IoTDB MCP Server Claim Server @apache/iotdb-mcp-server Try in Playground",
          "parameters": []
        },
        {
          "name": "list_tables",
          "description": "List all tables in the IoTDB database.",
          "parameters": [
            {
              "name": "list_tables",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "describe_table",
          "description": "Get the schema information for a specific table Args: table_name: name of the table to describe",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@apache/iotdb-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@apache/iotdb-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1579.@apache_iotdb-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1443
  }
}