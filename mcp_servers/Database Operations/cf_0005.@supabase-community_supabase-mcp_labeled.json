{
  "labels": {
    "analysis": "The MCP Server is designed specifically for integrations with Supabase projects, providing tools to manage database tables, extensions, migrations, and edge functions. It also supports fetching project configurations, executing SQL queries, and deploying code. The server enhances development workflows by bridging AI tools with Supabase capabilities, enabling seamless data management and query operations directly from AI assistants.",
    "reasoning": "The primary function of this server revolves around database operations, migration management, and edge function deployment within Supabase projects. While these align closely with \"Database Operations,\" the integration with AI assistants implies broader utility as a \"Development Tools\" server. Therefore, both main categories are represented.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Development Tools",
      "API Integration"
    ],
    "custom_label": "Supabase Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 4,
    "server_name": "Supabase MCP Server",
    "rank_by_usage": 5,
    "usage_count": "26,641",
    "original_file": "../crawler/smithery/@supabase-community_supabase-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@supabase-community/supabase-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 4,
      "name": "Supabase MCP Server",
      "author": "@supabase-community/supabase-mcp",
      "overview": "Connect your Supabase projects to AI assistants like Cursor and Claude. Manage tables, fetch configurations, and query data seamlessly with your AI tools. Enhance your development workflow by integrating AI capabilities directly into your Supabase projects.",
      "repository_url": "https://github.com/supabase-community/supabase-mcp",
      "homepage": "https://smithery.ai/server/@supabase-community/supabase-mcp",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "26,641",
      "success_rate": "99.96%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@supabase-community_supabase-mcp.json",
      "tools_count": 17,
      "tools": [
        {
          "name": "list_tables",
          "description": "Deploy Server Supabase MCP Server Claim Server @supabase-community/supabase-mcp Try in Playground list_tables",
          "parameters": [
            {
              "name": "schemas",
              "required": false,
              "type": "string"
            },
            {
              "name": "Add",
              "required": false,
              "type": "string"
            },
            {
              "name": "Item",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_extensions",
          "description": "Lists all extensions in the database.",
          "parameters": [
            {
              "name": "list_extensions",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_migrations",
          "description": "Lists all migrations in the database.",
          "parameters": [
            {
              "name": "list_migrations",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "apply_migration",
          "description": "Applies a migration to the database. Use this when executing DDL operations. Do not hardcode references to generated IDs in data migrations.",
          "parameters": [
            {
              "name": "apply_migration",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "execute_sql",
          "description": "Executes raw SQL in the Postgres database. Use `apply_migration` instead for DDL operations.",
          "parameters": [
            {
              "name": "execute_sql",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_edge_functions",
          "description": "Lists all Edge Functions in a Supabase project.",
          "parameters": [
            {
              "name": "list_edge_functions",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "deploy_edge_function",
          "description": "Deploys an Edge Function to a Supabase project. If the function already exists, this will create a new version. Example: import \"jsr:@supabase/functions-js/edge-runtime.d.ts\"; Deno.serve(async (req: Request) => { const data = { message: \"Hello there!\" return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json', 'Connection': 'keep-alive'",
          "parameters": []
        },
        {
          "name": "get_logs",
          "description": "Gets logs for a Supabase project by service type. Use this to help debug problems with your app. This will only return logs within the last minute. If the logs you are looking for are older than 1 minute, re-run your test to reproduce them.",
          "parameters": [
            {
              "name": "get_logs",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_project_url",
          "description": "Gets the API URL for a project.",
          "parameters": [
            {
              "name": "get_project_url",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_anon_key",
          "description": "Gets the anonymous API key for a project.",
          "parameters": [
            {
              "name": "get_anon_key",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "generate_typescript_types",
          "description": "Generates TypeScript types for a project.",
          "parameters": [
            {
              "name": "generate_typescript_types",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_branch",
          "description": "Creates a development branch on a Supabase project. This will apply all migrations from the main project to a fresh branch database. Note that production data will not carry over. The branch will get its own project_id via the resulting project_ref. Use this ID to execute queries and migrations on the branch.",
          "parameters": [
            {
              "name": "create_branch",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_branches",
          "description": "Lists all development branches of a Supabase project. This will return branch details including status which you can use to check when operations like merge/rebase/reset complete.",
          "parameters": [
            {
              "name": "list_branches",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_branch",
          "description": "Deletes a development branch.",
          "parameters": [
            {
              "name": "delete_branch",
              "required": false,
              "type": "string"
            },
            {
              "name": "Deletes",
              "required": false,
              "type": "string"
            },
            {
              "name": "a",
              "required": false,
              "type": "string"
            },
            {
              "name": "development",
              "required": false,
              "type": "string"
            },
            {
              "name": "branch_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "merge_branch",
          "description": "Merges migrations and edge functions from a development branch to production.",
          "parameters": [
            {
              "name": "merge_branch",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "reset_branch",
          "description": "Resets migrations of a development branch. Any untracked data or schema changes will be lost.",
          "parameters": [
            {
              "name": "reset_branch",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "rebase_branch",
          "description": "Rebases a development branch on production. This will effectively run any newer migrations from production onto this branch to help handle migration drift.",
          "parameters": [
            {
              "name": "rebase_branch",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@supabase-community/supabase-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "accessToken",
          "required": true,
          "description": "Supabase personal access token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@supabase-community/supabase-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0005.@supabase-community_supabase-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 5
  }
}