{
  "labels": {
    "analysis": "The OceanBase MCP Server is designed to provide secure and structured interaction with OceanBase databases through a Model Context Protocol (MCP) server. Its core functionality enables AI assistants to perform database operations like listing tables, reading data, and executing SQL queries via a controlled interface. The server's tools focus on managing database connections and executing SQL, indicating its primary purpose is to facilitate safer and more organized database interactions.",
    "reasoning": "The primary label is \"Database Operations\" because the server is explicitly designed for database querying and SQL execution. \"Development Tools\" is a secondary label as it assists developers or AI agents in interacting with databases programmatically. The custom label \"OceanBase Integration\" is added to highlight the server's specific focus on the OceanBase database system, which may not be covered by the predefined categories.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Development Tools"
    ],
    "custom_label": "OceanBase Integration",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2221,
    "server_name": "OceanBase MCP Server",
    "rank_by_usage": 2222,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@StevenFengLi_mcp-oceanbase.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@StevenFengLi/mcp-oceanbase/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2221,
      "name": "OceanBase MCP Server",
      "author": "@StevenFengLi/mcp-oceanbase",
      "overview": "Enable secure interaction with OceanBase databases through a Model Context Protocol server. Allow AI assistants to list tables, read data, and execute SQL queries via a controlled interface. Facilitate safer and more structured database exploration and analysis.",
      "repository_url": "https://github.com/StevenFengLi/mcp-oceanbase",
      "homepage": "https://smithery.ai/server/@StevenFengLi/mcp-oceanbase",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@StevenFengLi_mcp-oceanbase.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "configure_db_connection",
          "description": "Deploy Server OceanBase MCP Server @StevenFengLi/mcp-oceanbase Try in Playground configure_db_connection",
          "parameters": []
        },
        {
          "name": "execute_sql",
          "description": "Execute an SQL query on the OceanBase server",
          "parameters": [
            {
              "name": "execute_sql",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@StevenFengLi/mcp-oceanbase/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@StevenFengLi/mcp-oceanbase/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2222.@StevenFengLi_mcp-oceanbase_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1916
  }
}