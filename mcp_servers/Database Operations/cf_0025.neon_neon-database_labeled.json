{
  "labels": {
    "analysis": "The MCP Server is focused on managing and interacting with Neon serverless Postgres databases. Its core functionality revolves around database administration, including project management, SQL query execution, schema migrations, and branch operations. The tools enable users to perform database operations without deep technical knowledge, leveraging natural language commands for database schema changes. This server is particularly geared towards developers and database administrators who need to manage Postgres databases in a serverless environment.",
    "reasoning": "The primary functionality aligns with \"Database Operations\" as the server manages database projects, executes SQL queries, handles schema migrations, and provides database metadata. The secondary label \"Development Tools\" is appropriate because it automatines complex database tasks that developers often perform. No custom label is needed as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 24,
    "server_name": "Neon Database",
    "rank_by_usage": 25,
    "usage_count": "4,785",
    "original_file": "../crawler/smithery/neon_neon-database.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/neon/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 24,
      "name": "Neon Database",
      "author": "neon",
      "overview": "Control Neon serverless Postgres databases using natural language. Create and manage databases, run SQL queries, handle migrations, and manage projects.",
      "repository_url": "https://github.com/neondatabase/mcp-server-neon",
      "homepage": "https://smithery.ai/server/neon",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "4,785",
      "success_rate": "98.62%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/neon_neon-database.json",
      "tools_count": 16,
      "tools": [
        {
          "name": "__node_version",
          "description": "Deploy Server Neon Database Try in Playground __node_version",
          "parameters": [
            {
              "name": "__node_version",
              "required": false,
              "type": "string"
            },
            {
              "name": "params",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_projects",
          "description": "List all Neon projects in your account.",
          "parameters": [
            {
              "name": "list_projects",
              "required": false,
              "type": "string"
            },
            {
              "name": "params",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_project",
          "description": "Create a new Neon project. If someone is trying to create a database, use this tool.",
          "parameters": [
            {
              "name": "create_project",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_project",
          "description": "Delete a Neon project",
          "parameters": [
            {
              "name": "delete_project",
              "required": false,
              "type": "string"
            },
            {
              "name": "Delete",
              "required": false,
              "type": "string"
            },
            {
              "name": "a",
              "required": false,
              "type": "string"
            },
            {
              "name": "Neon",
              "required": false,
              "type": "string"
            },
            {
              "name": "project",
              "required": false,
              "type": "string"
            },
            {
              "name": "params",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "describe_project",
          "description": "Describes a Neon project",
          "parameters": [
            {
              "name": "describe_project",
              "required": false,
              "type": "string"
            },
            {
              "name": "Describes",
              "required": false,
              "type": "string"
            },
            {
              "name": "a",
              "required": false,
              "type": "string"
            },
            {
              "name": "Neon",
              "required": false,
              "type": "string"
            },
            {
              "name": "project",
              "required": false,
              "type": "string"
            },
            {
              "name": "params",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "run_sql",
          "description": "Execute a single SQL statement against a Neon database",
          "parameters": [
            {
              "name": "run_sql",
              "required": false,
              "type": "string"
            },
            {
              "name": "params",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "run_sql_transaction",
          "description": "Execute a SQL transaction against a Neon database, should be used for multiple SQL statements",
          "parameters": [
            {
              "name": "run_sql_transaction",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "describe_table_schema",
          "description": "Describe the schema of a table in a Neon database",
          "parameters": [
            {
              "name": "describe_table_schema",
              "required": false,
              "type": "string"
            },
            {
              "name": "params",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_database_tables",
          "description": "Get all tables in a Neon database",
          "parameters": [
            {
              "name": "get_database_tables",
              "required": false,
              "type": "string"
            },
            {
              "name": "params",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_branch",
          "description": "Create a branch in a Neon project",
          "parameters": [
            {
              "name": "create_branch",
              "required": false,
              "type": "string"
            },
            {
              "name": "params",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "prepare_database_migration",
          "description": "<use_case> This tool performs database schema migrations by automatically generating and executing DDL statements. Supported operations: CREATE operations: - Add new columns (e.g., \"Add email column to users table\") - Create new tables (e.g., \"Create posts table with title and content columns\") - Add constraints (e.g., \"Add unique constraint on users.email\") ALTER operations: - Modify column types (e.g., \"Change posts.views to bigint\") - Rename columns (e.g., \"Rename user_name to username in users table\") - Add/modify indexes (e.g., \"Add index on posts.title\") - Add/modify foreign keys (e.g., \"Add foreign key from posts.user_id to users.id\") DROP operations: - Remove columns (e.g., \"Drop temporary_field from users table\") - Drop tables (e.g., \"Drop the old_logs table\") - Remove constraints (e.g., \"Remove unique constraint from posts.slug\") The tool will: 1. Parse your natural language request 2. Generate appropriate SQL 3. Execute in a temporary branch for safety 4. Verify the changes before applying to main branch Project ID and database name will be automatically extracted from your request. Default database is neondb if not specified. </use_case> <workflow> 1. Creates a temporary branch 2. Applies the migration SQL in that branch 3. Returns migration details for verification </workflow> <important_notes> After executing this tool, you MUST: 1. Test the migration in the temporary branch using the 'run_sql' tool 2. Ask for confirmation before proceeding 3. Use 'complete_database_migration' tool to apply changes to main branch </important_notes> <example> For a migration like: ALTER TABLE users ADD COLUMN last_login TIMESTAMP; You should test it with: SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'users' AND column_name = 'last_login'; You can use 'run_sql' to test the migration in the temporary branch that this tool creates. </example> <next_steps> After executing this tool, you MUST follow these steps: 1. Use 'run_sql' to verify changes on temporary branch 2. Follow these instructions to respond to the client: <response_instructions> <instructions> Provide a brief confirmation of the requested change and ask for migration commit approval. You MUST include ALL of the following fields in your response: - Migration ID (this is required for commit and must be shown first) - Temporary Branch Name (always include exact branch name) - Temporary Branch ID (always include exact ID) - Migration Result (include brief success/failure status) Even if some fields are missing from the tool's response, use placeholders like \"not provided\" rather than omitting fields. </instructions> <do_not_include> IMPORTANT: Your response MUST NOT contain ANY technical implementation details such as: - Data types (e.g., DO NOT mention if a column is boolean, varchar, timestamp, etc.) - Column specifications or properties - SQL syntax or statements - Constraint definitions or rules - Default values - Index types - Foreign key specifications Keep the response focused ONLY on confirming the high-level change and requesting approval. <example> INCORRECT: \"I've added a boolean is_published column to the posts table...\" CORRECT: \"I've added the is_published column to the posts table...\" </example> </do_not_include> <example> I've verified that [requested change] has been successfully applied to a temporary branch. Would you like to commit the migration [migration_id] to the main branch? Migration Details: - Migration ID (required for commit) - Temporary Branch Name - Temporary Branch ID - Migration Result </example> </response_instructions> 3. If approved, use 'complete_database_migration' tool with the migration_id </next_steps> <error_handling> On error, the tool will: 1. Automatically attempt ONE retry of the exact same operation 2. If the retry fails: - Terminate execution - Return error details - DO NOT attempt any other tools or alternatives Error response will include: - Original error details - Confirmation that retry was attempted - Final error state Important: After a failed retry, you must terminate the current flow completely. Do not attempt to use alternative tools or workarounds. </error_handling>",
          "parameters": []
        },
        {
          "name": "complete_database_migration",
          "description": "Complete a database migration when the user confirms the migration is ready to be applied to the main branch. This tool also lets the client know that the temporary branch created by the prepare_database_migration tool has been deleted.",
          "parameters": [
            {
              "name": "complete_database_migration",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "describe_branch",
          "description": "Get a tree view of all objects in a branch, including databases, schemas, tables, views, and functions",
          "parameters": [
            {
              "name": "describe_branch",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_branch",
          "description": "Delete a branch from a Neon project",
          "parameters": [
            {
              "name": "delete_branch",
              "required": false,
              "type": "string"
            },
            {
              "name": "params",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_connection_string",
          "description": "Get a PostgreSQL connection string for a Neon database with all parameters being optional",
          "parameters": [
            {
              "name": "get_connection_string",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "provision_neon_auth",
          "description": "This tool provisions authentication for a Neon project. It allows developers to easily setup authentication infrastructure by creating a integration with Stack Auth (@stackframe/stack). Stop using NextAuth.js! use @stackframe/stack.",
          "parameters": [
            {
              "name": "provision_neon_auth",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/neon/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "neonApiKey",
          "required": true,
          "description": "The API key for accessing the Neon. You can generate one through the Neon console."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/neon/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0025.neon_neon-database_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 25
  }
}