{
  "labels": {
    "analysis": "The MCP Server \"DynamoDB Scanner\" is primarily focused on interacting with AWS DynamoDB, a NoSQL database service. Its core functionality revolves around scanning, filtering, and exploring data within DynamoDB tables. The available tools allow users to retrieve schema information and perform paginated scans with optional filters, making it particularly useful for testing, development, and data inspection purposes. This server essentially provides a simplified interface to query and manage DynamoDB data, similar to the functionality offered by the AWS console but designed for more direct, programmatic access.",
    "reasoning": "The primary label \"Database Operations\" was chosen because the server's core functionality is centered around interacting with and querying a database (DynamoDB). The available tools directly support operations like schema inspection and data scanning, which are fundamental database operations. No secondary labels are needed as this label fully captures the server's purpose. No custom label is required as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Database Operations",
    "secondary_labels": [],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1182,
    "server_name": "DynamoDB Scanner",
    "rank_by_usage": 1183,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@katpyeon_mcp_dynamodb_scan.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@katpyeon/mcp_dynamodb_scan/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1182,
      "name": "DynamoDB Scanner",
      "author": "@katpyeon/mcp_dynamodb_scan",
      "overview": "Scan and filter AWS DynamoDB tables with ease, providing schema information and pagination support. Explore your DynamoDB data similarly to the AWS console, enabling efficient data inspection and querying. Designed for testing and development use to simplify DynamoDB data exploration.",
      "repository_url": "https://github.com/katpyeon/mcp_dynamodb_scan",
      "homepage": "https://smithery.ai/server/@katpyeon/mcp_dynamodb_scan",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@katpyeon_mcp_dynamodb_scan.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "describe_table_schema",
          "description": "Return the list of available columns in the DynamoDB table with descriptions.\n    Useful for building filter conditions or understanding the data structure.",
          "parameters": []
        },
        {
          "name": "scan_table",
          "description": "Scan the DynamoDB table with optional filters and start_key for pagination. Returns up to the specified limit of items per call after filtering.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@katpyeon/mcp_dynamodb_scan/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "awsAccessKeyId",
          "required": true,
          "description": "AWS access key ID"
        },
        {
          "name": "awsSecretAccessKey",
          "required": true,
          "description": "AWS secret access key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@katpyeon/mcp_dynamodb_scan/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1183.@katpyeon_mcp_dynamodb_scan_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1149
  }
}