{
  "labels": {
    "analysis": "The MCP Server acts as a PostgreSQL database interface specifically designed to enable AI agents to interact with PostgreSQL databases. It provides tools for schema navigation, table inspection, relationship mapping, and SQL query execution. This simplifies database exploration and querying for LLM applications and is deployable locally or via Docker.",
    "reasoning": "The primary functionality revolves around database operations, particularly with PostgreSQL. The tools focus on listing, describing, and analyzing database structures, making Database Operations the most fitting primary label. API Integration is also relevant as the server provides a standardized interface for AI agents to query databases, and a custom label for PostgreSQL-specific functionality adds precision.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": "PostgreSQL Interface",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1046,
    "server_name": "PostgreSQL Database Interface Server",
    "rank_by_usage": 1047,
    "usage_count": "2",
    "original_file": "../crawler/smithery/@Zaydme_mcp-postgres.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Zaydme/mcp-postgres/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1046,
      "name": "PostgreSQL Database Interface Server",
      "author": "@Zaydme/mcp-postgres",
      "overview": "Enable AI agents to interact seamlessly with PostgreSQL databases by listing schemas, tables, and relationships, describing table structures, and executing SQL queries through a standardized interface. Simplify database exploration and querying for LLM applications with this server. Easily deployable locally or via Docker with flexible connection options.",
      "repository_url": "https://github.com/Zaydme/mcp-postgres",
      "homepage": "https://smithery.ai/server/@Zaydme/mcp-postgres",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "2",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Zaydme_mcp-postgres.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "query",
          "description": "Deploy Server PostgreSQL Database Interface Server @Zaydme/mcp-postgres Try in Playground",
          "parameters": [
            {
              "name": "sql",
              "required": true,
              "type": "string"
            },
            {
              "name": "parameters",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_schemas",
          "description": "List all schemas in the database.",
          "parameters": [
            {
              "name": "list_schemas",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_tables",
          "description": "List all tables in a specific schema. Args: db_schema: The schema name to list tables from (defaults to 'public')",
          "parameters": []
        },
        {
          "name": "describe_table",
          "description": "Get detailed information about a table. Args: table_name: The name of the table to describe db_schema: The schema name (defaults to 'public')",
          "parameters": []
        },
        {
          "name": "get_foreign_keys",
          "description": "Get foreign key information for a table. Args: table_name: The name of the table to get foreign keys from db_schema: The schema name (defaults to 'public')",
          "parameters": []
        },
        {
          "name": "find_relationships",
          "description": "Find both explicit and implied relationships for a table. Args: table_name: The name of the table to analyze relationships for db_schema: The schema name (defaults to 'public')",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Zaydme/mcp-postgres/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Zaydme/mcp-postgres/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1047.@Zaydme_mcp-postgres_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1025
  }
}