{
  "labels": {
    "analysis": "The MCP Server described is focused on integrating and interacting with Typesense search servers. Its core functionality revolves around managing collections, documents, performing both keyword and vector searches, and maintaining Typesense server health. The available tools enable comprehensive data management, search operations, and server administration within the Typesense ecosystem.",
    "reasoning": "The primary label \"Database Operations\" is chosen because the server primarily deals with querying, managing, and manipulating data within a Typesense database-like structure. Secondary labels \"Search & Data Retrieval\" and \"Data Analysis & Processing\" are selected because the server heavily involves search functionalities and processing of search results. No custom label is needed as these predefined categories adequately describe the server's functionality.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Web Search & Research",
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1262,
    "server_name": "Typesense Server Integration",
    "rank_by_usage": 1263,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@avarant_typesense-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@avarant/typesense-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1262,
      "name": "Typesense Server Integration",
      "author": "@avarant/typesense-mcp-server",
      "overview": "Enable seamless interaction with Typesense search servers through a standardized protocol. Manage collections, documents, and perform advanced search operations including keyword and vector searches. Simplify Typesense server health checks and data management within your applications.",
      "repository_url": "https://github.com/avarant/typesense-mcp-server",
      "homepage": "https://smithery.ai/server/@avarant/typesense-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@avarant_typesense-mcp-server.json",
      "tools_count": 14,
      "tools": [
        {
          "name": "check_typesense_health",
          "description": "Deploy Server Typesense Server Integration Claim Server @avarant/typesense-mcp-server Try in Playground check_typesense_health",
          "parameters": []
        },
        {
          "name": "list_collections",
          "description": "Retrieves a list of all collections in the Typesense server. Args: ctx (Context): The MCP context. Returns: list | str: A list of collection schemas or an error message string.",
          "parameters": []
        },
        {
          "name": "describe_collection",
          "description": "Retrieves the schema and metadata for a specific collection. Args: ctx (Context): The MCP context. collection_name (str): The name of the collection to describe. Returns: dict | str: The collection schema dictionary or an error message string.",
          "parameters": []
        },
        {
          "name": "export_collection",
          "description": "Exports all documents from a specific collection. Warning: This can be memory-intensive for very large collections. Args: ctx (Context): The MCP context. collection_name (str): The name of the collection to export. Returns: list[dict] | str: A list of document dictionaries or an error message string.",
          "parameters": []
        },
        {
          "name": "search",
          "description": "Performs a keyword search on a specific collection. Args: ctx (Context): The MCP context. collection_name (str): The name of the collection to search within. query (str): The search query string. Use '*' for all documents. query_by (str): Comma-separated list of fields to search in. filter_by (str | None): Filter conditions (e.g., 'price:>100 && category:Electronics'). Defaults to None. sort_by (str | None): Sorting criteria (e.g., 'price:asc, rating:desc'). Defaults to None. group_by (str | None): Field to group results by. Defaults to None. facet_by (str | None): Fields to facet on. Defaults to None. per_page (int): Number of results per page. Defaults to 20. page (int): Page number to retrieve. Defaults to 1. Returns: dict | str: The search results dictionary from Typesense or an error message string.",
          "parameters": []
        },
        {
          "name": "vector_search",
          "description": "Performs a vector similarity search on a specific collection. Args: ctx (Context): The MCP context. collection_name (str): The name of the collection to search within. vector_query (str): The vector query string, formatted as 'vector_field:([v1,v2,...], k: num_neighbors)'. query_by (str | None): Optional: Comma-separated list of text fields for hybrid search query ('q' parameter). Defaults to None. filter_by (str | None): Filter conditions to apply before vector search. Defaults to None. sort_by (str | None): Optional sorting criteria (less common for pure vector search). Defaults to None. per_page (int): Number of results per page. Defaults to 10. page (int): Page number to retrieve. Defaults to 1. Returns: dict | str: The vector search results dictionary from Typesense or an error message string.",
          "parameters": []
        },
        {
          "name": "create_collection",
          "description": "Creates a new collection with the provided schema. Args: ctx (Context): The MCP context. schema (dict): The collection schema dictionary (must include 'name' and 'fields'). Returns: dict | str: The created collection schema dictionary or an error message string.",
          "parameters": []
        },
        {
          "name": "delete_collection",
          "description": "Deletes a specific collection. Args: ctx (Context): The MCP context. collection_name (str): The name of the collection to delete. Returns: dict | str: The deleted collection schema dictionary or an error message string.",
          "parameters": []
        },
        {
          "name": "truncate_collection",
          "description": "Truncates a collection by deleting all documents but keeping the schema. Achieved by retrieving schema, deleting collection, and recreating it. Args: ctx (Context): The MCP context. collection_name (str): The name of the collection to truncate. Returns: str: A success or error message string.",
          "parameters": []
        },
        {
          "name": "create_document",
          "description": "Creates a single new document in a specific collection. Args: ctx (Context): The MCP context. collection_name (str): The name of the collection. document (dict): The document data to create (must include an 'id' field unless auto-schema). Returns: dict | str: The created document dictionary or an error message string.",
          "parameters": []
        },
        {
          "name": "upsert_document",
          "description": "Upserts (creates or updates) a single document in a specific collection. Args: ctx (Context): The MCP context. collection_name (str): The name of the collection. document (dict): The document data to upsert (must include an 'id' field). Returns: dict | str: The upserted document dictionary or an error message string.",
          "parameters": []
        },
        {
          "name": "index_multiple_documents",
          "description": "Indexes (creates, upserts, or updates) multiple documents in a batch. Args: ctx (Context): The MCP context. collection_name (str): The name of the collection. documents (list[dict]): A list of document dictionaries to index. action (str): The import action ('create', 'upsert', 'update'). Defaults to 'upsert'. Returns: list[dict] | str: A list of result dictionaries (one per document) or an error message string. Each result dict typically looks like {'success': true/false, 'error': '...', 'document': {...}}.",
          "parameters": []
        },
        {
          "name": "delete_document",
          "description": "Deletes a single document by its ID from a specific collection. Args: ctx (Context): The MCP context. collection_name (str): The name of the collection. document_id (str): The ID of the document to delete. Returns: dict | str: The deleted document dictionary or an error message string.",
          "parameters": []
        },
        {
          "name": "import_documents_from_csv",
          "description": "Imports documents from CSV data (as a string) or a file path into a collection. Assumes CSV header row maps directly to Typesense field names. Does basic type inference for int/float, otherwise treats as string. Args: ctx (Context): The MCP context. collection_name (str): The name of the collection. csv_data_or_path (str): Either the raw CSV data as a string or the path to a CSV file. batch_size (int): Number of documents to import per batch. Defaults to 100. action (str): Import action ('create', 'upsert', 'update'). Defaults to 'upsert'. Returns: dict: A summary of the import process including total processed, successful, failed count, and any errors.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@avarant/typesense-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "typesenseApiKey",
          "required": true,
          "description": "Typesense API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@avarant/typesense-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1263.@avarant_typesense-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1207
  }
}