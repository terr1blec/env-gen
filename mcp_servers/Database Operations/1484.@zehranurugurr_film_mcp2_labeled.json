{
  "labels": {
    "analysis": "The MCP Server focuses on providing film-related data and metadata, specifically designed to enhance applications with rich movie context. The available tool \"get_films\" suggests functionality for retrieving detailed film information, which implies the server acts as a database or API for movie-related data. This aligns with use cases in content creation, media applications, and entertainment tools.",
    "reasoning": "The primary label \"Database Operations\" was chosen because the server primarily serves as a repository of film data that can be queried and accessed. Secondary labels \"Content Creation\" and \"Education\" were selected because the film data can be used to create content and for educational purposes. No custom label is needed as the predefined categories adequately cover the functionality.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Content Creation",
      "Education"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1483,
    "server_name": "Film Information Server",
    "rank_by_usage": 1484,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@zehranurugurr_film_mcp2.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@zehranurugurr/film_mcp2/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_films",
          "description": "",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "get_filmsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_films"
      ]
    },
    "server_info_crawled": {
      "id": 1483,
      "name": "Film Information Server",
      "author": "@zehranurugurr/film_mcp2",
      "overview": "Provide detailed film-related data and metadata to enhance your applications with rich movie context. Enable dynamic access to film resources and tools for querying movie information efficiently. Improve user experience by integrating comprehensive film data seamlessly.",
      "repository_url": "https://github.com/zehranurugurr/film_mcp",
      "homepage": "https://smithery.ai/server/@zehranurugurr/film_mcp2",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@zehranurugurr_film_mcp2.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_films",
          "description": "",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "get_filmsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@zehranurugurr/film_mcp2/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@zehranurugurr/film_mcp2/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1484.@zehranurugurr_film_mcp2_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1371
  }
}