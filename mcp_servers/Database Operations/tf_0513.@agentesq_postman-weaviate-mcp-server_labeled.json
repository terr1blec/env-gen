{
  "labels": {
    "analysis": "The MCP Server described is specifically designed for integrating and managing API-driven interactions with Weaviate, a vector database. The primary focus is on exposing automated API tools as MCP-compatible services, enabling easy integration with LLM clients like Claude Desktop or Postman Desktop Application. The available tools are all centered around Weaviate database operations, including schema management, object manipulation (create, read, update, delete), cluster management, and system health checks. This suggests a strong focus on database operations, API integration, and potentially some system monitoring.",
    "reasoning": "The primary label is \"Database Operations\" because the majority of the tools are directly related to managing and interacting with the Weaviate database (e.g., creating collections, managing objects, schema manipulation). The secondary label \"API Integration\" is appropriate because the server is specifically designed to expose these operations as API-based services. No custom label is needed as the predefined categories adequately cover the functionality.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 512,
    "server_name": "Postman MCP Server",
    "rank_by_usage": 513,
    "usage_count": "30",
    "original_file": "../crawler/smithery/@agentesq_postman-weaviate-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@agentesq/postman-weaviate-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_instance_metadata",
          "description": "Get instance metadata from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "check_weaviate_readiness",
          "description": "Check if the Weaviate application is ready to receive traffic.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "list_available_endpoints",
          "description": "List available endpoints in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_raft_cluster_statistics",
          "description": "Retrieve Raft cluster statistics from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_oidc_discovery_info",
          "description": "Retrieve OIDC discovery information from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_node_info",
          "description": "Retrieve node information for a specific class in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class for which to retrieve node information."
              }
            },
            "required": [
              "className"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_class_schema",
          "description": "Get the schema of a specific class in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class whose schema is to be retrieved."
              }
            },
            "required": [
              "className"
            ]
          },
          "annotations": null
        },
        {
          "name": "view_classification",
          "description": "Retrieve a previously created classification from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the classification to retrieve."
              }
            },
            "required": [
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_shard_status",
          "description": "Get the status of every shard in the cluster.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to get the shard status for."
              },
              "tenant": {
                "type": "string",
                "description": "The tenant identifier."
              }
            },
            "required": [
              "className",
              "tenant"
            ]
          },
          "annotations": null
        },
        {
          "name": "check_liveness",
          "description": "Check if the Weaviate application is alive.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "remove_collection",
          "description": "Remove a collection from the Weaviate schema.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to be removed from the schema."
              }
            },
            "required": [
              "className"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_tenants",
          "description": "Get the list of tenants from a specified class in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to get tenants from."
              }
            },
            "required": [
              "className"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_schema",
          "description": "Fetch the entire schema from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "delete_tenants",
          "description": "Delete tenants from a specified class in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class from which to delete tenants."
              },
              "tenantIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of tenant IDs to delete."
              }
            },
            "required": [
              "className",
              "tenantIds"
            ]
          },
          "annotations": null
        },
        {
          "name": "delete_object",
          "description": "Delete an object from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name of the object to delete."
              },
              "id": {
                "type": "string",
                "description": "The unique ID of the object to delete."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_backup_status",
          "description": "Get the status of a backup process in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "backend": {
                "type": "string",
                "description": "The backup backend name (e.g., filesystem, gcs, s3)."
              },
              "id": {
                "type": "string",
                "description": "The ID of the backup, must be URL-safe and lowercase."
              }
            },
            "required": [
              "backend",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "update_shard_status",
          "description": "Update the status of a shard in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class associated with the shard."
              },
              "shardName": {
                "type": "string",
                "description": "The name of the shard to update."
              },
              "status": {
                "type": "string",
                "description": "The new status for the shard (e.g., \"READY\", \"READONLY\")."
              }
            },
            "required": [
              "className",
              "shardName",
              "status"
            ]
          },
          "annotations": null
        },
        {
          "name": "update_object",
          "description": "Update an object in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name of the object to update."
              },
              "id": {
                "type": "string",
                "description": "The UUID of the object to update."
              },
              "objectData": {
                "type": "object",
                "description": "The data to update the object with."
              }
            },
            "required": [
              "className",
              "id",
              "objectData"
            ]
          },
          "annotations": null
        },
        {
          "name": "update_collection",
          "description": "Update an existing collection in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to update."
              },
              "config": {
                "type": "object",
                "description": "The new configuration for the class."
              }
            },
            "required": [
              "className",
              "config"
            ]
          },
          "annotations": null
        },
        {
          "name": "perform_batched_graphql_queries",
          "description": "Perform batched GraphQL queries on Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "queries": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "operationName": {
                      "type": "string",
                      "description": "The name of the operation."
                    },
                    "query": {
                      "type": "string",
                      "description": "The GraphQL query string."
                    },
                    "variables": {
                      "type": "object",
                      "description": "The variables for the GraphQL query."
                    }
                  },
                  "required": [
                    "operationName",
                    "query"
                  ]
                },
                "description": "An array of query objects to be executed."
              }
            },
            "required": [
              "queries"
            ]
          },
          "annotations": null
        },
        {
          "name": "check_tenant_exists",
          "description": "Check if a tenant exists for a specific class in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to check."
              },
              "tenantName": {
                "type": "string",
                "description": "The name of the tenant to check."
              }
            },
            "required": [
              "className",
              "tenantName"
            ]
          },
          "annotations": null
        },
        {
          "name": "update_object",
          "description": "Update an object in Weaviate using patch semantics.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name as defined in the schema."
              },
              "id": {
                "type": "string",
                "description": "The UUID of the data object to update."
              },
              "data": {
                "type": "object",
                "description": "The data to update the object with, following the patch semantics."
              }
            },
            "required": [
              "className",
              "id",
              "data"
            ]
          },
          "annotations": null
        },
        {
          "name": "create_tenant",
          "description": "Create a new tenant in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class for which the tenant is being created."
              },
              "tenants": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the tenant."
                    },
                    "activityStatus": {
                      "type": "string",
                      "description": "The activity status of the tenant."
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "description": "An array of tenant objects to be created."
              }
            },
            "required": [
              "className",
              "tenants"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_restore_process_status",
          "description": "Get the status of a backup restoration process in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "backend": {
                "type": "string",
                "description": "The backup backend name (e.g., `filesystem`, `gcs`, `s3`, `azure`)."
              },
              "id": {
                "type": "string",
                "description": "The ID of the backup. Must be URL-safe and work as a filesystem path."
              }
            },
            "required": [
              "backend",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "add_cross_reference",
          "description": "Add a cross-reference to an object in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name as defined in the schema."
              },
              "id": {
                "type": "string",
                "description": "Unique ID of the Object."
              },
              "propertyName": {
                "type": "string",
                "description": "Unique name of the property related to the Object."
              },
              "referenceData": {
                "type": "object",
                "description": "The reference data to be added."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id",
              "propertyName",
              "referenceData",
              "tenant"
            ]
          },
          "annotations": null
        },
        {
          "name": "check_object_exists",
          "description": "Check if an object exists in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name as defined in the schema."
              },
              "id": {
                "type": "string",
                "description": "The UUID of the data object."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "batch_create_objects",
          "description": "Batch create new objects in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "objects": {
                "type": "array",
                "description": "An array of objects to be created."
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The fields to include in the request."
              },
              "consistency_level": {
                "type": "string",
                "description": "The consistency level for the request."
              }
            },
            "required": [
              "objects"
            ]
          },
          "annotations": null
        },
        {
          "name": "batch_create_cross_references",
          "description": "Batch create cross-references between collections items in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "references": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "from": {
                      "type": "string",
                      "description": "The URI of the source object."
                    },
                    "to": {
                      "type": "string",
                      "description": "The URI of the target object."
                    },
                    "tenant": {
                      "type": "string",
                      "description": "The tenant identifier."
                    }
                  },
                  "required": [
                    "from",
                    "to",
                    "tenant"
                  ]
                },
                "description": "An array of reference objects to create."
              }
            },
            "required": [
              "references"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_object",
          "description": "Get a data object based on its class name and UUID.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name of the object to retrieve."
              },
              "id": {
                "type": "string",
                "description": "The UUID of the object to retrieve."
              },
              "include": {
                "type": "string",
                "description": "Include additional information, such as classification infos."
              },
              "node_name": {
                "type": "string",
                "description": "The target node which should fulfill the request."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "update_tenant",
          "description": "Update a tenant in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class for which the tenant is being updated."
              },
              "tenants": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the tenant."
                    },
                    "activityStatus": {
                      "type": "string",
                      "enum": [
                        "COLD",
                        "ACTIVE",
                        "INACTIVE"
                      ],
                      "description": "The activity status of the tenant."
                    }
                  },
                  "required": [
                    "name",
                    "activityStatus"
                  ]
                },
                "description": "An array of tenant objects to update."
              }
            },
            "required": [
              "className",
              "tenants"
            ]
          },
          "annotations": null
        },
        {
          "name": "replace_cross_references",
          "description": "Replace all references in cross-reference property of an object.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name as defined in the schema."
              },
              "id": {
                "type": "string",
                "description": "Unique ID of the Object."
              },
              "propertyName": {
                "type": "string",
                "description": "Unique name of the property related to the Object."
              },
              "references": {
                "type": "array",
                "description": "Array of references to replace."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id",
              "propertyName",
              "references"
            ]
          },
          "annotations": null
        },
        {
          "name": "start_backup_process",
          "description": "Start a backup process in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "backend": {
                "type": "string",
                "description": "The backup backend name (e.g., `filesystem`, `gcs`, `s3`, `azure`)."
              },
              "id": {
                "type": "string",
                "description": "The unique identifier for the backup."
              },
              "config": {
                "type": "object",
                "properties": {
                  "CPUPercentage": {
                    "type": "integer",
                    "description": "The percentage of CPU to allocate for the backup process."
                  },
                  "ChunkSize": {
                    "type": "integer",
                    "description": "The size of chunks for the backup."
                  },
                  "CompressionLevel": {
                    "type": "string",
                    "description": "The level of compression to use."
                  }
                },
                "required": [
                  "CPUPercentage",
                  "ChunkSize",
                  "CompressionLevel"
                ]
              },
              "include": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of strings specifying which collections to include in the backup."
              },
              "exclude": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of strings specifying which collections to exclude from the backup."
              }
            },
            "required": [
              "backend",
              "id",
              "config"
            ]
          },
          "annotations": null
        },
        {
          "name": "batch_delete_objects",
          "description": "Batch delete objects in Weaviate based on a specified filter.",
          "input_schema": {
            "type": "object",
            "properties": {
              "class": {
                "type": "string",
                "description": "The class of objects to delete."
              },
              "where": {
                "type": "object",
                "description": "The filter criteria for selecting objects to delete."
              },
              "consistency_level": {
                "type": "string",
                "description": "Determines how many replicas must acknowledge a request before it is considered successful."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "class",
              "where",
              "tenant"
            ]
          },
          "annotations": null
        },
        {
          "name": "delete_cross_reference",
          "description": "Delete a cross-reference from a Weaviate object.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name as defined in the schema."
              },
              "id": {
                "type": "string",
                "description": "Unique ID of the Object."
              },
              "propertyName": {
                "type": "string",
                "description": "Unique name of the property related to the Object."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id",
              "propertyName",
              "tenant"
            ]
          },
          "annotations": null
        },
        {
          "name": "start_restoration_process",
          "description": "Starts a restoration process for a backup in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "backend": {
                "type": "string",
                "description": "The backup backend name (e.g., `filesystem`, `gcs`, `s3`, `azure`)."
              },
              "id": {
                "type": "string",
                "description": "The ID of the backup to restore."
              },
              "CPUPercentage": {
                "type": "integer",
                "description": "The percentage of CPU to allocate for the restoration process."
              },
              "include": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of strings specifying which collections to include in the restoration."
              },
              "exclude": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of strings specifying which collections to exclude from the restoration."
              },
              "node_mapping": {
                "type": "object",
                "description": "A mapping of node names for the restoration process."
              }
            },
            "required": [
              "backend",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "validate_object",
          "description": "Validate an object's schema and meta-data without creating it.",
          "input_schema": {
            "type": "object",
            "properties": {
              "class": {
                "type": "string",
                "description": "The class of the object."
              },
              "vectorWeights": {
                "type": "object",
                "description": "The weights for the vectors."
              },
              "properties": {
                "type": "object",
                "description": "The properties of the object."
              },
              "id": {
                "type": "string",
                "description": "The unique identifier for the object."
              },
              "creationTimeUnix": {
                "type": "integer",
                "description": "The creation time in Unix timestamp."
              },
              "lastUpdateTimeUnix": {
                "type": "integer",
                "description": "The last update time in Unix timestamp."
              },
              "vector": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "The vector representation of the object."
              },
              "vectors": {
                "type": "object",
                "description": "Additional vectors for the object."
              },
              "tenant": {
                "type": "string",
                "description": "The tenant for the object."
              },
              "additional": {
                "type": "object",
                "description": "Additional metadata for the object."
              }
            },
            "required": [
              "class",
              "id",
              "creationTimeUnix",
              "lastUpdateTimeUnix",
              "vector"
            ]
          },
          "annotations": null
        },
        {
          "name": "add_property",
          "description": "Add a property to an existing collection in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to which the property will be added."
              },
              "propertyData": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the property."
                  },
                  "dataType": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The data types for the property."
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the property."
                  },
                  "moduleConfig": {
                    "type": "object",
                    "description": "Configuration for the module."
                  },
                  "indexInverted": {
                    "type": "boolean",
                    "description": "Whether the property should be indexed inverted."
                  },
                  "indexFilterable": {
                    "type": "boolean",
                    "description": "Whether the property should be filterable."
                  },
                  "indexSearchable": {
                    "type": "boolean",
                    "description": "Whether the property should be searchable."
                  },
                  "tokenization": {
                    "type": "string",
                    "description": "The tokenization method for the property."
                  },
                  "nestedProperties": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "description": "Nested properties for the property."
                  }
                },
                "required": [
                  "name",
                  "dataType",
                  "description"
                ]
              }
            },
            "required": [
              "className",
              "propertyData"
            ]
          },
          "annotations": null
        },
        {
          "name": "create_collection",
          "description": "Create a new data object collection in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "class": {
                "type": "string",
                "description": "The name of the class to be created."
              },
              "vectorConfig": {
                "type": "object",
                "description": "Configuration for the vector.",
                "properties": {
                  "vector_name": {
                    "type": "object",
                    "properties": {
                      "vectorizer": {
                        "type": "string",
                        "description": "The vectorizer to use."
                      },
                      "vectorIndexType": {
                        "type": "string",
                        "description": "The type of vector index."
                      },
                      "vectorIndexConfig": {
                        "type": "object",
                        "description": "Additional vector index configuration."
                      }
                    }
                  }
                }
              },
              "shardingConfig": {
                "type": "object",
                "description": "Configuration for sharding.",
                "properties": {
                  "desiredCount": {
                    "type": "integer",
                    "description": "Desired count for sharding."
                  },
                  "virtualPerPhysical": {
                    "type": "integer",
                    "description": "Virtual per physical count."
                  }
                }
              },
              "replicationConfig": {
                "type": "object",
                "description": "Configuration for replication.",
                "properties": {
                  "factor": {
                    "type": "integer",
                    "description": "Replication factor."
                  }
                }
              },
              "invertedIndexConfig": {
                "type": "object",
                "description": "Configuration for inverted index.",
                "properties": {
                  "cleanupIntervalSeconds": {
                    "type": "integer",
                    "description": "Cleanup interval in seconds."
                  },
                  "bm25": {
                    "type": "object",
                    "properties": {
                      "k1": {
                        "type": "number",
                        "description": "BM25 k1 parameter."
                      },
                      "b": {
                        "type": "number",
                        "description": "BM25 b parameter."
                      }
                    }
                  },
                  "stopwords": {
                    "type": "object",
                    "properties": {
                      "preset": {
                        "type": "string",
                        "description": "Preset for stopwords."
                      }
                    }
                  }
                }
              },
              "description": {
                "type": "string",
                "description": "Description of the class."
              },
              "properties": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the property."
                    },
                    "dataType": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Data types of the property."
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the property."
                    }
                  }
                }
              }
            },
            "required": [
              "class",
              "vectorConfig",
              "shardingConfig",
              "replicationConfig",
              "invertedIndexConfig",
              "description",
              "properties"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 38,
      "tool_names": [
        "get_instance_metadata",
        "check_weaviate_readiness",
        "list_available_endpoints",
        "get_raft_cluster_statistics",
        "get_oidc_discovery_info",
        "get_node_info",
        "get_class_schema",
        "view_classification",
        "get_shard_status",
        "check_liveness",
        "remove_collection",
        "get_tenants",
        "get_schema",
        "delete_tenants",
        "delete_object",
        "get_backup_status",
        "update_shard_status",
        "update_object",
        "update_collection",
        "perform_batched_graphql_queries",
        "check_tenant_exists",
        "update_object",
        "create_tenant",
        "get_restore_process_status",
        "add_cross_reference",
        "check_object_exists",
        "batch_create_objects",
        "batch_create_cross_references",
        "get_object",
        "update_tenant",
        "replace_cross_references",
        "start_backup_process",
        "batch_delete_objects",
        "delete_cross_reference",
        "start_restoration_process",
        "validate_object",
        "add_property",
        "create_collection"
      ]
    },
    "server_info_crawled": {
      "id": 512,
      "name": "Postman MCP Server",
      "author": "@agentesq/postman-weaviate-mcp-server",
      "overview": "Expose your automated API tools as MCP-compatible services to integrate with LLM clients. Easily test and connect your API workflows with tools like Claude Desktop or Postman Desktop Application. Simplify API key management and extend functionality by adding new tools generated from Postman collections.",
      "repository_url": "https://github.com/agentesq/postman-weaviate-mcp-server",
      "homepage": "https://smithery.ai/server/@agentesq/postman-weaviate-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "30",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@agentesq_postman-weaviate-mcp-server.json",
      "tools_count": 38,
      "tools": [
        {
          "name": "get_instance_metadata",
          "description": "Get instance metadata from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "check_weaviate_readiness",
          "description": "Check if the Weaviate application is ready to receive traffic.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "list_available_endpoints",
          "description": "List available endpoints in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_raft_cluster_statistics",
          "description": "Retrieve Raft cluster statistics from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_oidc_discovery_info",
          "description": "Retrieve OIDC discovery information from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_node_info",
          "description": "Retrieve node information for a specific class in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class for which to retrieve node information."
              }
            },
            "required": [
              "className"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_class_schema",
          "description": "Get the schema of a specific class in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class whose schema is to be retrieved."
              }
            },
            "required": [
              "className"
            ]
          },
          "annotations": null
        },
        {
          "name": "view_classification",
          "description": "Retrieve a previously created classification from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the classification to retrieve."
              }
            },
            "required": [
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_shard_status",
          "description": "Get the status of every shard in the cluster.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to get the shard status for."
              },
              "tenant": {
                "type": "string",
                "description": "The tenant identifier."
              }
            },
            "required": [
              "className",
              "tenant"
            ]
          },
          "annotations": null
        },
        {
          "name": "check_liveness",
          "description": "Check if the Weaviate application is alive.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "remove_collection",
          "description": "Remove a collection from the Weaviate schema.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to be removed from the schema."
              }
            },
            "required": [
              "className"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_tenants",
          "description": "Get the list of tenants from a specified class in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to get tenants from."
              }
            },
            "required": [
              "className"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_schema",
          "description": "Fetch the entire schema from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "delete_tenants",
          "description": "Delete tenants from a specified class in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class from which to delete tenants."
              },
              "tenantIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of tenant IDs to delete."
              }
            },
            "required": [
              "className",
              "tenantIds"
            ]
          },
          "annotations": null
        },
        {
          "name": "delete_object",
          "description": "Delete an object from Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name of the object to delete."
              },
              "id": {
                "type": "string",
                "description": "The unique ID of the object to delete."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_backup_status",
          "description": "Get the status of a backup process in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "backend": {
                "type": "string",
                "description": "The backup backend name (e.g., filesystem, gcs, s3)."
              },
              "id": {
                "type": "string",
                "description": "The ID of the backup, must be URL-safe and lowercase."
              }
            },
            "required": [
              "backend",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "update_shard_status",
          "description": "Update the status of a shard in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class associated with the shard."
              },
              "shardName": {
                "type": "string",
                "description": "The name of the shard to update."
              },
              "status": {
                "type": "string",
                "description": "The new status for the shard (e.g., \"READY\", \"READONLY\")."
              }
            },
            "required": [
              "className",
              "shardName",
              "status"
            ]
          },
          "annotations": null
        },
        {
          "name": "update_object",
          "description": "Update an object in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name of the object to update."
              },
              "id": {
                "type": "string",
                "description": "The UUID of the object to update."
              },
              "objectData": {
                "type": "object",
                "description": "The data to update the object with."
              }
            },
            "required": [
              "className",
              "id",
              "objectData"
            ]
          },
          "annotations": null
        },
        {
          "name": "update_collection",
          "description": "Update an existing collection in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to update."
              },
              "config": {
                "type": "object",
                "description": "The new configuration for the class."
              }
            },
            "required": [
              "className",
              "config"
            ]
          },
          "annotations": null
        },
        {
          "name": "perform_batched_graphql_queries",
          "description": "Perform batched GraphQL queries on Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "queries": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "operationName": {
                      "type": "string",
                      "description": "The name of the operation."
                    },
                    "query": {
                      "type": "string",
                      "description": "The GraphQL query string."
                    },
                    "variables": {
                      "type": "object",
                      "description": "The variables for the GraphQL query."
                    }
                  },
                  "required": [
                    "operationName",
                    "query"
                  ]
                },
                "description": "An array of query objects to be executed."
              }
            },
            "required": [
              "queries"
            ]
          },
          "annotations": null
        },
        {
          "name": "check_tenant_exists",
          "description": "Check if a tenant exists for a specific class in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to check."
              },
              "tenantName": {
                "type": "string",
                "description": "The name of the tenant to check."
              }
            },
            "required": [
              "className",
              "tenantName"
            ]
          },
          "annotations": null
        },
        {
          "name": "update_object",
          "description": "Update an object in Weaviate using patch semantics.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name as defined in the schema."
              },
              "id": {
                "type": "string",
                "description": "The UUID of the data object to update."
              },
              "data": {
                "type": "object",
                "description": "The data to update the object with, following the patch semantics."
              }
            },
            "required": [
              "className",
              "id",
              "data"
            ]
          },
          "annotations": null
        },
        {
          "name": "create_tenant",
          "description": "Create a new tenant in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class for which the tenant is being created."
              },
              "tenants": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the tenant."
                    },
                    "activityStatus": {
                      "type": "string",
                      "description": "The activity status of the tenant."
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "description": "An array of tenant objects to be created."
              }
            },
            "required": [
              "className",
              "tenants"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_restore_process_status",
          "description": "Get the status of a backup restoration process in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "backend": {
                "type": "string",
                "description": "The backup backend name (e.g., `filesystem`, `gcs`, `s3`, `azure`)."
              },
              "id": {
                "type": "string",
                "description": "The ID of the backup. Must be URL-safe and work as a filesystem path."
              }
            },
            "required": [
              "backend",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "add_cross_reference",
          "description": "Add a cross-reference to an object in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name as defined in the schema."
              },
              "id": {
                "type": "string",
                "description": "Unique ID of the Object."
              },
              "propertyName": {
                "type": "string",
                "description": "Unique name of the property related to the Object."
              },
              "referenceData": {
                "type": "object",
                "description": "The reference data to be added."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id",
              "propertyName",
              "referenceData",
              "tenant"
            ]
          },
          "annotations": null
        },
        {
          "name": "check_object_exists",
          "description": "Check if an object exists in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name as defined in the schema."
              },
              "id": {
                "type": "string",
                "description": "The UUID of the data object."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "batch_create_objects",
          "description": "Batch create new objects in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "objects": {
                "type": "array",
                "description": "An array of objects to be created."
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The fields to include in the request."
              },
              "consistency_level": {
                "type": "string",
                "description": "The consistency level for the request."
              }
            },
            "required": [
              "objects"
            ]
          },
          "annotations": null
        },
        {
          "name": "batch_create_cross_references",
          "description": "Batch create cross-references between collections items in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "references": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "from": {
                      "type": "string",
                      "description": "The URI of the source object."
                    },
                    "to": {
                      "type": "string",
                      "description": "The URI of the target object."
                    },
                    "tenant": {
                      "type": "string",
                      "description": "The tenant identifier."
                    }
                  },
                  "required": [
                    "from",
                    "to",
                    "tenant"
                  ]
                },
                "description": "An array of reference objects to create."
              }
            },
            "required": [
              "references"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_object",
          "description": "Get a data object based on its class name and UUID.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name of the object to retrieve."
              },
              "id": {
                "type": "string",
                "description": "The UUID of the object to retrieve."
              },
              "include": {
                "type": "string",
                "description": "Include additional information, such as classification infos."
              },
              "node_name": {
                "type": "string",
                "description": "The target node which should fulfill the request."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "update_tenant",
          "description": "Update a tenant in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class for which the tenant is being updated."
              },
              "tenants": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the tenant."
                    },
                    "activityStatus": {
                      "type": "string",
                      "enum": [
                        "COLD",
                        "ACTIVE",
                        "INACTIVE"
                      ],
                      "description": "The activity status of the tenant."
                    }
                  },
                  "required": [
                    "name",
                    "activityStatus"
                  ]
                },
                "description": "An array of tenant objects to update."
              }
            },
            "required": [
              "className",
              "tenants"
            ]
          },
          "annotations": null
        },
        {
          "name": "replace_cross_references",
          "description": "Replace all references in cross-reference property of an object.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name as defined in the schema."
              },
              "id": {
                "type": "string",
                "description": "Unique ID of the Object."
              },
              "propertyName": {
                "type": "string",
                "description": "Unique name of the property related to the Object."
              },
              "references": {
                "type": "array",
                "description": "Array of references to replace."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id",
              "propertyName",
              "references"
            ]
          },
          "annotations": null
        },
        {
          "name": "start_backup_process",
          "description": "Start a backup process in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "backend": {
                "type": "string",
                "description": "The backup backend name (e.g., `filesystem`, `gcs`, `s3`, `azure`)."
              },
              "id": {
                "type": "string",
                "description": "The unique identifier for the backup."
              },
              "config": {
                "type": "object",
                "properties": {
                  "CPUPercentage": {
                    "type": "integer",
                    "description": "The percentage of CPU to allocate for the backup process."
                  },
                  "ChunkSize": {
                    "type": "integer",
                    "description": "The size of chunks for the backup."
                  },
                  "CompressionLevel": {
                    "type": "string",
                    "description": "The level of compression to use."
                  }
                },
                "required": [
                  "CPUPercentage",
                  "ChunkSize",
                  "CompressionLevel"
                ]
              },
              "include": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of strings specifying which collections to include in the backup."
              },
              "exclude": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of strings specifying which collections to exclude from the backup."
              }
            },
            "required": [
              "backend",
              "id",
              "config"
            ]
          },
          "annotations": null
        },
        {
          "name": "batch_delete_objects",
          "description": "Batch delete objects in Weaviate based on a specified filter.",
          "input_schema": {
            "type": "object",
            "properties": {
              "class": {
                "type": "string",
                "description": "The class of objects to delete."
              },
              "where": {
                "type": "object",
                "description": "The filter criteria for selecting objects to delete."
              },
              "consistency_level": {
                "type": "string",
                "description": "Determines how many replicas must acknowledge a request before it is considered successful."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "class",
              "where",
              "tenant"
            ]
          },
          "annotations": null
        },
        {
          "name": "delete_cross_reference",
          "description": "Delete a cross-reference from a Weaviate object.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The class name as defined in the schema."
              },
              "id": {
                "type": "string",
                "description": "Unique ID of the Object."
              },
              "propertyName": {
                "type": "string",
                "description": "Unique name of the property related to the Object."
              },
              "tenant": {
                "type": "string",
                "description": "Specifies the tenant in a request targeting a multi-tenant collection."
              }
            },
            "required": [
              "className",
              "id",
              "propertyName",
              "tenant"
            ]
          },
          "annotations": null
        },
        {
          "name": "start_restoration_process",
          "description": "Starts a restoration process for a backup in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "backend": {
                "type": "string",
                "description": "The backup backend name (e.g., `filesystem`, `gcs`, `s3`, `azure`)."
              },
              "id": {
                "type": "string",
                "description": "The ID of the backup to restore."
              },
              "CPUPercentage": {
                "type": "integer",
                "description": "The percentage of CPU to allocate for the restoration process."
              },
              "include": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of strings specifying which collections to include in the restoration."
              },
              "exclude": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of strings specifying which collections to exclude from the restoration."
              },
              "node_mapping": {
                "type": "object",
                "description": "A mapping of node names for the restoration process."
              }
            },
            "required": [
              "backend",
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "validate_object",
          "description": "Validate an object's schema and meta-data without creating it.",
          "input_schema": {
            "type": "object",
            "properties": {
              "class": {
                "type": "string",
                "description": "The class of the object."
              },
              "vectorWeights": {
                "type": "object",
                "description": "The weights for the vectors."
              },
              "properties": {
                "type": "object",
                "description": "The properties of the object."
              },
              "id": {
                "type": "string",
                "description": "The unique identifier for the object."
              },
              "creationTimeUnix": {
                "type": "integer",
                "description": "The creation time in Unix timestamp."
              },
              "lastUpdateTimeUnix": {
                "type": "integer",
                "description": "The last update time in Unix timestamp."
              },
              "vector": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "The vector representation of the object."
              },
              "vectors": {
                "type": "object",
                "description": "Additional vectors for the object."
              },
              "tenant": {
                "type": "string",
                "description": "The tenant for the object."
              },
              "additional": {
                "type": "object",
                "description": "Additional metadata for the object."
              }
            },
            "required": [
              "class",
              "id",
              "creationTimeUnix",
              "lastUpdateTimeUnix",
              "vector"
            ]
          },
          "annotations": null
        },
        {
          "name": "add_property",
          "description": "Add a property to an existing collection in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "description": "The name of the class to which the property will be added."
              },
              "propertyData": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the property."
                  },
                  "dataType": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The data types for the property."
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the property."
                  },
                  "moduleConfig": {
                    "type": "object",
                    "description": "Configuration for the module."
                  },
                  "indexInverted": {
                    "type": "boolean",
                    "description": "Whether the property should be indexed inverted."
                  },
                  "indexFilterable": {
                    "type": "boolean",
                    "description": "Whether the property should be filterable."
                  },
                  "indexSearchable": {
                    "type": "boolean",
                    "description": "Whether the property should be searchable."
                  },
                  "tokenization": {
                    "type": "string",
                    "description": "The tokenization method for the property."
                  },
                  "nestedProperties": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "description": "Nested properties for the property."
                  }
                },
                "required": [
                  "name",
                  "dataType",
                  "description"
                ]
              }
            },
            "required": [
              "className",
              "propertyData"
            ]
          },
          "annotations": null
        },
        {
          "name": "create_collection",
          "description": "Create a new data object collection in Weaviate.",
          "input_schema": {
            "type": "object",
            "properties": {
              "class": {
                "type": "string",
                "description": "The name of the class to be created."
              },
              "vectorConfig": {
                "type": "object",
                "description": "Configuration for the vector.",
                "properties": {
                  "vector_name": {
                    "type": "object",
                    "properties": {
                      "vectorizer": {
                        "type": "string",
                        "description": "The vectorizer to use."
                      },
                      "vectorIndexType": {
                        "type": "string",
                        "description": "The type of vector index."
                      },
                      "vectorIndexConfig": {
                        "type": "object",
                        "description": "Additional vector index configuration."
                      }
                    }
                  }
                }
              },
              "shardingConfig": {
                "type": "object",
                "description": "Configuration for sharding.",
                "properties": {
                  "desiredCount": {
                    "type": "integer",
                    "description": "Desired count for sharding."
                  },
                  "virtualPerPhysical": {
                    "type": "integer",
                    "description": "Virtual per physical count."
                  }
                }
              },
              "replicationConfig": {
                "type": "object",
                "description": "Configuration for replication.",
                "properties": {
                  "factor": {
                    "type": "integer",
                    "description": "Replication factor."
                  }
                }
              },
              "invertedIndexConfig": {
                "type": "object",
                "description": "Configuration for inverted index.",
                "properties": {
                  "cleanupIntervalSeconds": {
                    "type": "integer",
                    "description": "Cleanup interval in seconds."
                  },
                  "bm25": {
                    "type": "object",
                    "properties": {
                      "k1": {
                        "type": "number",
                        "description": "BM25 k1 parameter."
                      },
                      "b": {
                        "type": "number",
                        "description": "BM25 b parameter."
                      }
                    }
                  },
                  "stopwords": {
                    "type": "object",
                    "properties": {
                      "preset": {
                        "type": "string",
                        "description": "Preset for stopwords."
                      }
                    }
                  }
                }
              },
              "description": {
                "type": "string",
                "description": "Description of the class."
              },
              "properties": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the property."
                    },
                    "dataType": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Data types of the property."
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the property."
                    }
                  }
                }
              }
            },
            "required": [
              "class",
              "vectorConfig",
              "shardingConfig",
              "replicationConfig",
              "invertedIndexConfig",
              "description",
              "properties"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@agentesq/postman-weaviate-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@agentesq/postman-weaviate-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0513.@agentesq_postman-weaviate-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 502
  }
}