{
  "labels": {
    "analysis": "The MCP Server focuses on providing tools for interacting with Hasura GraphQL APIs through natural language commands. Its core functionality includes executing GraphQL queries and mutations, listing and describing schema components, previewing data, performing aggregations, and checking API health. It bridges the gap between natural language requests and structured GraphQL operations, enhancing LLM capabilities to work with GraphQL-backed databases securely.",
    "reasoning": "The primary label \"Database Operations\" was chosen because the server's primary functionality revolves around managing and querying database schemas via GraphQL. Secondary labels include \"API Integration\" (since it interacts with Hasura API endpoints) and \"AI/ML Tools\" (as it enhances LLM capabilities through GraphQL operations). No custom label is needed as the predefined categories sufficiently cover its functionality.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "API Integration",
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1195,
    "server_name": "Advanced Hasura GraphQL Server",
    "rank_by_usage": 1196,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@husamabusafa_hasura_mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@husamabusafa/hasura_mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1195,
      "name": "Advanced Hasura GraphQL Server",
      "author": "@husamabusafa/hasura_mcp",
      "overview": "Enable AI agents to dynamically explore and interact with your Hasura GraphQL API. Execute read-only queries, mutations, preview data, perform aggregations, and check service health through natural language requests. Enhance LLM capabilities by leveraging your Hasura endpoint securely and efficiently.",
      "repository_url": "https://github.com/husamabusafa/hasura_mcp",
      "homepage": "https://smithery.ai/server/@husamabusafa/hasura_mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@husamabusafa_hasura_mcp.json",
      "tools_count": 9,
      "tools": [
        {
          "name": "run_graphql_query",
          "description": "Deploy Server Advanced Hasura GraphQL Server Claim Server @husamabusafa/hasura_mcp Try in Playground run_graphql_query",
          "parameters": [
            {
              "name": "run_graphql_query",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "run_graphql_mutation",
          "description": "Executes a GraphQL mutation to insert, update, or delete data...",
          "parameters": [
            {
              "name": "run_graphql_mutation",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_tables",
          "description": "Lists available data tables (or collections) managed by Hasura, organized by schema with descriptions",
          "parameters": [
            {
              "name": "list_tables",
              "required": false,
              "type": "string"
            },
            {
              "name": "schemaName",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_root_fields",
          "description": "Lists the available top-level query, mutation, or subscription fields...",
          "parameters": [
            {
              "name": "list_root_fields",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "describe_graphql_type",
          "description": "Provides details about a specific GraphQL type (Object, Input, Scalar, Enum, Interface, Union)...",
          "parameters": [
            {
              "name": "describe_graphql_type",
              "required": false,
              "type": "string"
            },
            {
              "name": "typeName",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "preview_table_data",
          "description": "Fetch esa limited sample of rows (default 5) from a specified table...",
          "parameters": [
            {
              "name": "preview_table_data",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "aggregate_data",
          "description": "Performs a simple aggregation (count, sum, avg, min, max)...",
          "parameters": [
            {
              "name": "aggregate_data",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "health_check",
          "description": "Checks if the configured Hasura GraphQL endpoint is reachable...",
          "parameters": [
            {
              "name": "health_check",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "describe_table",
          "description": "Shows the structure of a table including all columns with their types and descriptions",
          "parameters": [
            {
              "name": "describe_table",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@husamabusafa/hasura_mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@husamabusafa/hasura_mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1196.@husamabusafa_hasura_mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1156
  }
}