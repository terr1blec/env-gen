{
  "labels": {
    "analysis": "The MCP Server acts as an interface between MCP-aware LLMs and MongoDB databases, enabling natural language operations for database management and querying. Its core functionality includes CRUD operations, schema management, indexing, and administrative tasks like listing collections, databases, and stats, as well as more advanced operations like aggregation and log retrieval. The safety controls indicate this is designed for managed environments with oversight capabilities.",
    "reasoning": "The primary label is chosen because the server's main purpose is to enable interaction with MongoDB databases through a series of tools that perform database operations. Secondary labels are included for the administrative aspects and data processing capabilities. The 功能分类 (Functional Categorization) custom label is added to reflect the server's unique role as a bridge between LLMs and specific database operations.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Data Analysis & Processing",
      "Operating System"
    ],
    "custom_label": "功能分类 (Functional Categorization)",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 76,
    "server_name": "MongoDB MCP Server",
    "rank_by_usage": 77,
    "usage_count": "1,067",
    "original_file": "../crawler/smithery/@mongodb-js_mongodb-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mongodb-js/mongodb-mcp-server/mcp?config=eyJyZWFkT25seSI6IGZhbHNlfQ==&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "connect",
          "description": "Connect to a MongoDB instance",
          "input_schema": {
            "type": "object",
            "properties": {
              "connectionString": {
                "type": "string",
                "description": "MongoDB connection string (in the mongodb:// or mongodb+srv:// format)"
              }
            },
            "required": [
              "connectionString"
            ],
            "additionalProperties": false,
            "description": "Options for connecting to MongoDB.",
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "connect",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Connect to a MongoDB instance"
          }
        },
        {
          "name": "list-collections",
          "description": "List all collections for a given database",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              }
            },
            "required": [
              "database"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "list-collections",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "List all collections for a given database"
          }
        },
        {
          "name": "list-databases",
          "description": "List all databases for a MongoDB connection",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "list-databases",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "List all databases for a MongoDB connection"
          }
        },
        {
          "name": "collection-indexes",
          "description": "Describe the indexes for a collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "collection-indexes",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Describe the indexes for a collection"
          }
        },
        {
          "name": "create-index",
          "description": "Create an index for a collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "keys": {
                "type": "object",
                "additionalProperties": {},
                "description": "The index definition"
              },
              "name": {
                "type": "string",
                "description": "The name of the index"
              }
            },
            "required": [
              "database",
              "collection",
              "keys"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "create-index",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Create an index for a collection"
          }
        },
        {
          "name": "collection-schema",
          "description": "Describe the schema for a collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "collection-schema",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Describe the schema for a collection"
          }
        },
        {
          "name": "find",
          "description": "Run a find query against a MongoDB collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "filter": {
                "type": "object",
                "additionalProperties": {},
                "description": "The query filter, matching the syntax of the query argument of db.collection.find()"
              },
              "projection": {
                "type": "object",
                "additionalProperties": {},
                "description": "The projection, matching the syntax of the projection argument of db.collection.find()"
              },
              "limit": {
                "type": "number",
                "default": 10,
                "description": "The maximum number of documents to return"
              },
              "sort": {
                "type": "object",
                "additionalProperties": {},
                "description": "A document, describing the sort order, matching the syntax of the sort argument of cursor.sort()"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "find",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Run a find query against a MongoDB collection"
          }
        },
        {
          "name": "insert-many",
          "description": "Insert an array of documents into a MongoDB collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "documents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": {},
                  "description": "An individual MongoDB document"
                },
                "description": "The array of documents to insert, matching the syntax of the document argument of db.collection.insertMany()"
              }
            },
            "required": [
              "database",
              "collection",
              "documents"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "insert-many",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Insert an array of documents into a MongoDB collection"
          }
        },
        {
          "name": "delete-many",
          "description": "Removes all documents that match the filter from a MongoDB collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "filter": {
                "type": "object",
                "additionalProperties": {},
                "description": "The query filter, specifying the deletion criteria. Matches the syntax of the filter argument of db.collection.deleteMany()"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "delete-many",
            "readOnlyHint": false,
            "destructiveHint": true,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Removes all documents that match the filter from a MongoDB collection"
          }
        },
        {
          "name": "collection-storage-size",
          "description": "Gets the size of the collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "collection-storage-size",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Gets the size of the collection"
          }
        },
        {
          "name": "count",
          "description": "Gets the number of documents in a MongoDB collection using db.collection.count() and query as an optional filter parameter",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "query": {
                "type": "object",
                "additionalProperties": {},
                "description": "A filter/query parameter. Allows users to filter the documents to count. Matches the syntax of the filter argument of db.collection.count()."
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "count",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Gets the number of documents in a MongoDB collection using db.collection.count() and query as an optional filter parameter"
          }
        },
        {
          "name": "db-stats",
          "description": "Returns statistics that reflect the use state of a single database",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              }
            },
            "required": [
              "database"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "db-stats",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Returns statistics that reflect the use state of a single database"
          }
        },
        {
          "name": "aggregate",
          "description": "Run an aggregation against a MongoDB collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "pipeline": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": {}
                },
                "description": "An array of aggregation stages to execute"
              }
            },
            "required": [
              "database",
              "collection",
              "pipeline"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "aggregate",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Run an aggregation against a MongoDB collection"
          }
        },
        {
          "name": "update-many",
          "description": "Updates all documents that match the specified filter for a collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "filter": {
                "type": "object",
                "additionalProperties": {},
                "description": "The selection criteria for the update, matching the syntax of the filter argument of db.collection.updateOne()"
              },
              "update": {
                "type": "object",
                "additionalProperties": {},
                "description": "An update document describing the modifications to apply using update operator expressions"
              },
              "upsert": {
                "type": "boolean",
                "description": "Controls whether to insert a new document if no documents match the filter"
              }
            },
            "required": [
              "database",
              "collection",
              "update"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "update-many",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Updates all documents that match the specified filter for a collection"
          }
        },
        {
          "name": "rename-collection",
          "description": "Renames a collection in a MongoDB database",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "newName": {
                "type": "string",
                "description": "The new name for the collection"
              },
              "dropTarget": {
                "type": "boolean",
                "default": false,
                "description": "If true, drops the target collection if it exists"
              }
            },
            "required": [
              "database",
              "collection",
              "newName"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "rename-collection",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Renames a collection in a MongoDB database"
          }
        },
        {
          "name": "drop-database",
          "description": "Removes the specified database, deleting the associated data files",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              }
            },
            "required": [
              "database"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "drop-database",
            "readOnlyHint": false,
            "destructiveHint": true,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Removes the specified database, deleting the associated data files"
          }
        },
        {
          "name": "drop-collection",
          "description": "Removes a collection or view from the database. The method also removes any indexes associated with the dropped collection.",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "drop-collection",
            "readOnlyHint": false,
            "destructiveHint": true,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Removes a collection or view from the database. The method also removes any indexes associated with the dropped collection."
          }
        },
        {
          "name": "explain",
          "description": "Returns statistics describing the execution of the winning plan chosen by the query optimizer for the evaluated method",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "method": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "const": "aggregate"
                        },
                        "arguments": {
                          "type": "object",
                          "properties": {
                            "pipeline": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "additionalProperties": {}
                              },
                              "description": "An array of aggregation stages to execute"
                            }
                          },
                          "required": [
                            "pipeline"
                          ],
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name",
                        "arguments"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "const": "find"
                        },
                        "arguments": {
                          "type": "object",
                          "properties": {
                            "filter": {
                              "type": "object",
                              "additionalProperties": {},
                              "description": "The query filter, matching the syntax of the query argument of db.collection.find()"
                            },
                            "projection": {
                              "type": "object",
                              "additionalProperties": {},
                              "description": "The projection, matching the syntax of the projection argument of db.collection.find()"
                            },
                            "limit": {
                              "type": "number",
                              "default": 10,
                              "description": "The maximum number of documents to return"
                            },
                            "sort": {
                              "type": "object",
                              "additionalProperties": {},
                              "description": "A document, describing the sort order, matching the syntax of the sort argument of cursor.sort()"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name",
                        "arguments"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "const": "count"
                        },
                        "arguments": {
                          "type": "object",
                          "properties": {
                            "query": {
                              "type": "object",
                              "additionalProperties": {},
                              "description": "A filter/query parameter. Allows users to filter the documents to count. Matches the syntax of the filter argument of db.collection.count()."
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name",
                        "arguments"
                      ],
                      "additionalProperties": false
                    }
                  ]
                },
                "description": "The method and its arguments to run"
              }
            },
            "required": [
              "database",
              "collection",
              "method"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "explain",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Returns statistics describing the execution of the winning plan chosen by the query optimizer for the evaluated method"
          }
        },
        {
          "name": "create-collection",
          "description": "Creates a new collection in a database. If the database doesn't exist, it will be created automatically.",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "create-collection",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Creates a new collection in a database. If the database doesn't exist, it will be created automatically."
          }
        },
        {
          "name": "mongodb-logs",
          "description": "Returns the most recent logged mongod events",
          "input_schema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "global",
                  "startupWarnings"
                ],
                "default": "global",
                "description": "The type of logs to return. Global returns all recent log entries, while startupWarnings returns only warnings and errors from when the process started."
              },
              "limit": {
                "type": "integer",
                "maximum": 1024,
                "minimum": 1,
                "default": 50,
                "description": "The maximum number of log entries to return."
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "mongodb-logs",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Returns the most recent logged mongod events"
          }
        }
      ],
      "tool_count": 20,
      "tool_names": [
        "connect",
        "list-collections",
        "list-databases",
        "collection-indexes",
        "create-index",
        "collection-schema",
        "find",
        "insert-many",
        "delete-many",
        "collection-storage-size",
        "count",
        "db-stats",
        "aggregate",
        "update-many",
        "rename-collection",
        "drop-database",
        "drop-collection",
        "explain",
        "create-collection",
        "mongodb-logs"
      ]
    },
    "server_info_crawled": {
      "id": 76,
      "name": "MongoDB MCP Server",
      "author": "@mongodb-js/mongodb-mcp-server",
      "overview": "MongoDB MCP Server allows any MCP-aware LLM to connect to MongoDB Atlas for admin tasks and to MongoDB databases for data operations, all through natural language. It exposes over 30 tools spanning cluster management and database querying, with granular safety controls like read-only mode and tool disabling.",
      "repository_url": "https://github.com/mongodb-js/mongodb-mcp-server",
      "homepage": "https://smithery.ai/server/@mongodb-js/mongodb-mcp-server",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "1,067",
      "success_rate": "94.99%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mongodb-js_mongodb-mcp-server.json",
      "tools_count": 20,
      "tools": [
        {
          "name": "connect",
          "description": "Connect to a MongoDB instance",
          "input_schema": {
            "type": "object",
            "properties": {
              "connectionString": {
                "type": "string",
                "description": "MongoDB connection string (in the mongodb:// or mongodb+srv:// format)"
              }
            },
            "required": [
              "connectionString"
            ],
            "additionalProperties": false,
            "description": "Options for connecting to MongoDB.",
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "connect",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Connect to a MongoDB instance"
          }
        },
        {
          "name": "list-collections",
          "description": "List all collections for a given database",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              }
            },
            "required": [
              "database"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "list-collections",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "List all collections for a given database"
          }
        },
        {
          "name": "list-databases",
          "description": "List all databases for a MongoDB connection",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "list-databases",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "List all databases for a MongoDB connection"
          }
        },
        {
          "name": "collection-indexes",
          "description": "Describe the indexes for a collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "collection-indexes",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Describe the indexes for a collection"
          }
        },
        {
          "name": "create-index",
          "description": "Create an index for a collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "keys": {
                "type": "object",
                "additionalProperties": {},
                "description": "The index definition"
              },
              "name": {
                "type": "string",
                "description": "The name of the index"
              }
            },
            "required": [
              "database",
              "collection",
              "keys"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "create-index",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Create an index for a collection"
          }
        },
        {
          "name": "collection-schema",
          "description": "Describe the schema for a collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "collection-schema",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Describe the schema for a collection"
          }
        },
        {
          "name": "find",
          "description": "Run a find query against a MongoDB collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "filter": {
                "type": "object",
                "additionalProperties": {},
                "description": "The query filter, matching the syntax of the query argument of db.collection.find()"
              },
              "projection": {
                "type": "object",
                "additionalProperties": {},
                "description": "The projection, matching the syntax of the projection argument of db.collection.find()"
              },
              "limit": {
                "type": "number",
                "default": 10,
                "description": "The maximum number of documents to return"
              },
              "sort": {
                "type": "object",
                "additionalProperties": {},
                "description": "A document, describing the sort order, matching the syntax of the sort argument of cursor.sort()"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "find",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Run a find query against a MongoDB collection"
          }
        },
        {
          "name": "insert-many",
          "description": "Insert an array of documents into a MongoDB collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "documents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": {},
                  "description": "An individual MongoDB document"
                },
                "description": "The array of documents to insert, matching the syntax of the document argument of db.collection.insertMany()"
              }
            },
            "required": [
              "database",
              "collection",
              "documents"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "insert-many",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Insert an array of documents into a MongoDB collection"
          }
        },
        {
          "name": "delete-many",
          "description": "Removes all documents that match the filter from a MongoDB collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "filter": {
                "type": "object",
                "additionalProperties": {},
                "description": "The query filter, specifying the deletion criteria. Matches the syntax of the filter argument of db.collection.deleteMany()"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "delete-many",
            "readOnlyHint": false,
            "destructiveHint": true,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Removes all documents that match the filter from a MongoDB collection"
          }
        },
        {
          "name": "collection-storage-size",
          "description": "Gets the size of the collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "collection-storage-size",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Gets the size of the collection"
          }
        },
        {
          "name": "count",
          "description": "Gets the number of documents in a MongoDB collection using db.collection.count() and query as an optional filter parameter",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "query": {
                "type": "object",
                "additionalProperties": {},
                "description": "A filter/query parameter. Allows users to filter the documents to count. Matches the syntax of the filter argument of db.collection.count()."
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "count",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Gets the number of documents in a MongoDB collection using db.collection.count() and query as an optional filter parameter"
          }
        },
        {
          "name": "db-stats",
          "description": "Returns statistics that reflect the use state of a single database",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              }
            },
            "required": [
              "database"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "db-stats",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Returns statistics that reflect the use state of a single database"
          }
        },
        {
          "name": "aggregate",
          "description": "Run an aggregation against a MongoDB collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "pipeline": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": {}
                },
                "description": "An array of aggregation stages to execute"
              }
            },
            "required": [
              "database",
              "collection",
              "pipeline"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "aggregate",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Run an aggregation against a MongoDB collection"
          }
        },
        {
          "name": "update-many",
          "description": "Updates all documents that match the specified filter for a collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "filter": {
                "type": "object",
                "additionalProperties": {},
                "description": "The selection criteria for the update, matching the syntax of the filter argument of db.collection.updateOne()"
              },
              "update": {
                "type": "object",
                "additionalProperties": {},
                "description": "An update document describing the modifications to apply using update operator expressions"
              },
              "upsert": {
                "type": "boolean",
                "description": "Controls whether to insert a new document if no documents match the filter"
              }
            },
            "required": [
              "database",
              "collection",
              "update"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "update-many",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Updates all documents that match the specified filter for a collection"
          }
        },
        {
          "name": "rename-collection",
          "description": "Renames a collection in a MongoDB database",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "newName": {
                "type": "string",
                "description": "The new name for the collection"
              },
              "dropTarget": {
                "type": "boolean",
                "default": false,
                "description": "If true, drops the target collection if it exists"
              }
            },
            "required": [
              "database",
              "collection",
              "newName"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "rename-collection",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Renames a collection in a MongoDB database"
          }
        },
        {
          "name": "drop-database",
          "description": "Removes the specified database, deleting the associated data files",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              }
            },
            "required": [
              "database"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "drop-database",
            "readOnlyHint": false,
            "destructiveHint": true,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Removes the specified database, deleting the associated data files"
          }
        },
        {
          "name": "drop-collection",
          "description": "Removes a collection or view from the database. The method also removes any indexes associated with the dropped collection.",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "drop-collection",
            "readOnlyHint": false,
            "destructiveHint": true,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Removes a collection or view from the database. The method also removes any indexes associated with the dropped collection."
          }
        },
        {
          "name": "explain",
          "description": "Returns statistics describing the execution of the winning plan chosen by the query optimizer for the evaluated method",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              },
              "method": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "const": "aggregate"
                        },
                        "arguments": {
                          "type": "object",
                          "properties": {
                            "pipeline": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "additionalProperties": {}
                              },
                              "description": "An array of aggregation stages to execute"
                            }
                          },
                          "required": [
                            "pipeline"
                          ],
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name",
                        "arguments"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "const": "find"
                        },
                        "arguments": {
                          "type": "object",
                          "properties": {
                            "filter": {
                              "type": "object",
                              "additionalProperties": {},
                              "description": "The query filter, matching the syntax of the query argument of db.collection.find()"
                            },
                            "projection": {
                              "type": "object",
                              "additionalProperties": {},
                              "description": "The projection, matching the syntax of the projection argument of db.collection.find()"
                            },
                            "limit": {
                              "type": "number",
                              "default": 10,
                              "description": "The maximum number of documents to return"
                            },
                            "sort": {
                              "type": "object",
                              "additionalProperties": {},
                              "description": "A document, describing the sort order, matching the syntax of the sort argument of cursor.sort()"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name",
                        "arguments"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "const": "count"
                        },
                        "arguments": {
                          "type": "object",
                          "properties": {
                            "query": {
                              "type": "object",
                              "additionalProperties": {},
                              "description": "A filter/query parameter. Allows users to filter the documents to count. Matches the syntax of the filter argument of db.collection.count()."
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name",
                        "arguments"
                      ],
                      "additionalProperties": false
                    }
                  ]
                },
                "description": "The method and its arguments to run"
              }
            },
            "required": [
              "database",
              "collection",
              "method"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "explain",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Returns statistics describing the execution of the winning plan chosen by the query optimizer for the evaluated method"
          }
        },
        {
          "name": "create-collection",
          "description": "Creates a new collection in a database. If the database doesn't exist, it will be created automatically.",
          "input_schema": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "description": "Database name"
              },
              "collection": {
                "type": "string",
                "description": "Collection name"
              }
            },
            "required": [
              "database",
              "collection"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "create-collection",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Creates a new collection in a database. If the database doesn't exist, it will be created automatically."
          }
        },
        {
          "name": "mongodb-logs",
          "description": "Returns the most recent logged mongod events",
          "input_schema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "global",
                  "startupWarnings"
                ],
                "default": "global",
                "description": "The type of logs to return. Global returns all recent log entries, while startupWarnings returns only warnings and errors from when the process started."
              },
              "limit": {
                "type": "integer",
                "maximum": 1024,
                "minimum": 1,
                "default": 50,
                "description": "The maximum number of log entries to return."
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "mongodb-logs",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": null,
            "openWorldHint": null,
            "description": "Returns the most recent logged mongod events"
          }
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"readOnly\": false\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@mongodb-js/mongodb-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"readOnly\": false\n}",
      "python_sdk_url": "https://server.smithery.ai/@mongodb-js/mongodb-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0077.@mongodb-js_mongodb-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 76
  }
}