{
  "labels": {
    "analysis": "The PostgreSQL MCP Server is designed to facilitate seamless interaction with PostgreSQL databases through standardized SQL operations. Its core functionality includes executing SQL queries, listing database schemas and tables, describing table structures, and analyzing relationships between tables. The tools provided focus on database exploration, schema inspection, and relationship discovery, making it particularly useful for data-intensive applications or AI agents requiring relational data access.",
    "reasoning": "The primary label **Database Operations** was chosen because the server's main purpose is to interact with PostgreSQL databases through schema introspection and query execution. The secondary label **Data Analysis & Processing** is relevant due to the tools that help analyze table relationships and structures, which are foundational for data analysis tasks. No custom label is necessary as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 102,
    "server_name": "PostgreSQL MCP Server",
    "rank_by_usage": 103,
    "usage_count": "688",
    "original_file": "../crawler/smithery/@gldc_mcp-postgres.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@gldc/mcp-postgres/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 102,
      "name": "PostgreSQL MCP Server",
      "author": "@gldc/mcp-postgres",
      "overview": "Interact with PostgreSQL databases seamlessly through a standardized interface. Execute SQL queries, list schemas, and describe table structures to enhance your AI agents' capabilities. Simplify database interactions and leverage your data effectively with this powerful tool.\n\nIMPORTANT SECURITY INFORMATION This MCP server requires database credentials. It is strongly recommended that you run this locally to protect your sensitive information.",
      "repository_url": "https://github.com/gldc/mcp-postgres",
      "homepage": "https://smithery.ai/server/@gldc/mcp-postgres",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "688",
      "success_rate": "99.63%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@gldc_mcp-postgres.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "query",
          "description": "Deploy Server PostgreSQL MCP Server @gldc/mcp-postgres Try in Playground",
          "parameters": [
            {
              "name": "sql",
              "required": true,
              "type": "string"
            },
            {
              "name": "parameters",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_schemas",
          "description": "List all schemas in the database.",
          "parameters": [
            {
              "name": "list_schemas",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_tables",
          "description": "List all tables in a specific schema. Args: schema: The schema name to list tables from (defaults to 'public')",
          "parameters": []
        },
        {
          "name": "describe_table",
          "description": "Get detailed information about a table. Args: table_name: The name of the table to describe schema: The schema name (defaults to 'public')",
          "parameters": []
        },
        {
          "name": "get_foreign_keys",
          "description": "Get foreign key information for a table. Args: table_name: The name of the table to get foreign keys from schema: The schema name (defaults to 'public')",
          "parameters": []
        },
        {
          "name": "find_relationships",
          "description": "Find both explicit and implied relationships for a table. Args: table_name: The name of the table to analyze relationships for schema: The schema name (defaults to 'public')",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@gldc/mcp-postgres/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@gldc/mcp-postgres/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0103.@gldc_mcp-postgres_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 100
  }
}