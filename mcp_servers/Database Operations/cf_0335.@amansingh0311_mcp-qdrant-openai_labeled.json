{
  "labels": {
    "analysis": "The MCP Server described is focused on enabling semantic search capabilities over a Qdrant vector database using OpenAI embeddings. It provides tools for listing collections, retrieving detailed information about collections, and executing vector-based queries. This server is designed for data exploration and integration with LLM workflows, emphasizing powerful vector-based querying capabilities.",
    "reasoning": "The primary functionality of this server revolves around vector search and database operations, making \"Database Operations\" the most fitting primary label. Additionally, the server supports integration with AI/ML models (via LLM workflows), justifying a secondary label of \"AI/ML Tools.\" The focus on semantic search and vector-based queries could also be considered a unique aspect, but predefined categories already cover this well.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 334,
    "server_name": "Qdrant Vector Search Server",
    "rank_by_usage": 335,
    "usage_count": "94",
    "original_file": "../crawler/smithery/@amansingh0311_mcp-qdrant-openai.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@amansingh0311/mcp-qdrant-openai/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 334,
      "name": "Qdrant Vector Search Server",
      "author": "@amansingh0311/mcp-qdrant-openai",
      "overview": "Enable semantic search capabilities over your Qdrant vector database using OpenAI embeddings. Easily list collections and retrieve detailed collection information to enhance your data exploration. Integrate seamlessly with your LLM workflows for powerful vector-based querying.",
      "repository_url": "https://github.com/amansingh0311/mcp-qdrant-openai",
      "homepage": "https://smithery.ai/server/@amansingh0311/mcp-qdrant-openai",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "94",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@amansingh0311_mcp-qdrant-openai.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "query_collection",
          "description": "Deploy Server Qdrant Vector Search Server @amansingh0311/mcp-qdrant-openai Try in Playground query_collection",
          "parameters": []
        },
        {
          "name": "list_collections",
          "description": "List all available collections in the Qdrant database.\n\n    Returns:\n        JSON string containing the list of collections",
          "parameters": []
        },
        {
          "name": "collection_info",
          "description": "Get information about a specific collection.\n\n    Args:\n        collection_name: Name of the collection\n\n    Returns:\n        JSON string containing collection information",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@amansingh0311/mcp-qdrant-openai/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "openaiApiKey",
          "required": true,
          "description": "OpenAI API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@amansingh0311/mcp-qdrant-openai/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0335.@amansingh0311_mcp-qdrant-openai_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 331
  }
}