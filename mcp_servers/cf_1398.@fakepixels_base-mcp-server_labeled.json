{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate interaction with the Base blockchain through natural language commands. Its primary functionality includes wallet management, balance checks, and transaction execution, making blockchain operations accessible via intuitive commands. The available tools (create_wallet, check_balance, list_wallets) focus on secure handling of private keys and simplifying blockchain operations.",
    "reasoning": "The primary label \"Cryptocurrency & Blockchain\" was chosen because the server's core functionality revolves around blockchain interactions, wallet management, and transaction execution. \"Data Analysis & Processing\" was added as a secondary label because balance checks and wallet listings involve analyzing and processing data. No custom label was needed as the predefined categories sufficiently cover the server's functionality.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1397,
    "server_name": "Base Network MCP Server",
    "rank_by_usage": 1398,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@fakepixels_base-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@fakepixels/base-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1397,
      "name": "Base Network MCP Server",
      "author": "@fakepixels/base-mcp-server",
      "overview": "Enable LLMs to interact with the Base blockchain through natural language commands. Manage wallets, check balances, and execute transactions seamlessly. Simplify blockchain operations with intuitive commands and secure handling of private keys.",
      "repository_url": "https://github.com/fakepixels/base-mcp-server",
      "homepage": "https://smithery.ai/server/@fakepixels/base-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@fakepixels_base-mcp-server.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "process_command",
          "description": "Deploy Server Base Network MCP Server Claim Server @fakepixels/base-mcp-server Try in Playground process_command",
          "parameters": [
            {
              "name": "process_command",
              "required": false,
              "type": "string"
            },
            {
              "name": "command",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_wallet",
          "description": "Description not available",
          "parameters": [
            {
              "name": "create_wallet",
              "required": false,
              "type": "string"
            },
            {
              "name": "Create",
              "required": false,
              "type": "string"
            },
            {
              "name": "a",
              "required": false,
              "type": "string"
            },
            {
              "name": "new",
              "required": false,
              "type": "string"
            },
            {
              "name": "wallet",
              "required": false,
              "type": "string"
            },
            {
              "name": "name",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "check_balance",
          "description": "Description not available",
          "parameters": [
            {
              "name": "check_balance",
              "required": false,
              "type": "string"
            },
            {
              "name": "Check",
              "required": false,
              "type": "string"
            },
            {
              "name": "wallet",
              "required": false,
              "type": "string"
            },
            {
              "name": "balance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_wallets",
          "description": "List all available wallets",
          "parameters": [
            {
              "name": "list_wallets",
              "required": false,
              "type": "string"
            },
            {
              "name": "List",
              "required": false,
              "type": "string"
            },
            {
              "name": "all",
              "required": false,
              "type": "string"
            },
            {
              "name": "available",
              "required": false,
              "type": "string"
            },
            {
              "name": "wallets",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@fakepixels/base-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "walletPrivateKey",
          "required": true,
          "description": "Private key for signing transactions and authenticating blockchain operations."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@fakepixels/base-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1398.@fakepixels_base-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1308
  }
}