{
  "labels": {
    "analysis": "The Movie Recommender MCP Server is designed to provide personalized movie recommendations based on user preferences and viewing history. Its primary function is to enhance user experience by suggesting relevant movies tailored to individual tastes. The available tool, \"get_movies\", allows users to retrieve movie suggestions based on keywords, indicating that the server leverages some form of recommendation algorithm or database query to match user input with relevant movie data.",
    "reasoning": "The primary label is \"Content Creation\" as the server generates tailored movie recommendations, which aligns with content creation in terms of curating and presenting information. The secondary label \"Web Search & Research\" fits because retrieving movie suggestions based on keywords involves querying a database or external sources, similar to search functionalities.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "Web Search & Research"
    ],
    "custom_label": "Movie Recommendation System",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": true
  },
  "metadata": {
    "server_id": 417,
    "server_name": "Movie Recommender",
    "rank_by_usage": 418,
    "usage_count": "53",
    "original_file": "../crawler/smithery/@iremert_movie-recommender-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@iremert/movie-recommender-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_movies",
          "description": "\n    Get movie suggestions based on keyword.\n    ",
          "input_schema": {
            "properties": {
              "keyword": {
                "title": "Keyword",
                "type": "string"
              }
            },
            "required": [
              "keyword"
            ],
            "title": "get_moviesArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_movies"
      ]
    },
    "server_info_crawled": {
      "id": 417,
      "name": "Movie Recommender",
      "author": "@iremert/movie-recommender-mcp",
      "overview": "Provide personalized movie recommendations based on user preferences and viewing history. Enhance user experience by suggesting relevant movies tailored to individual tastes. Enable seamless integration of movie data and recommendation logic into applications.",
      "repository_url": "https://github.com/iremert/movie-recommender-mcp",
      "homepage": "https://smithery.ai/server/@iremert/movie-recommender-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "53",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@iremert_movie-recommender-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_movies",
          "description": "\n    Get movie suggestions based on keyword.\n    ",
          "input_schema": {
            "properties": {
              "keyword": {
                "title": "Keyword",
                "type": "string"
              }
            },
            "required": [
              "keyword"
            ],
            "title": "get_moviesArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@iremert/movie-recommender-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@iremert/movie-recommender-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0418.@iremert_movie-recommender-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 412
  }
}