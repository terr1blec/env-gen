{
  "labels": {
    "analysis": "The MCP Server is specialized for Plex Media Server integration, enabling users to search, manage, and interact with their media library through a command-line interface. Its core functionality revolves around media management, including searching for movies, retrieving detailed movie information, organizing playlists, and accessing recently added content. The tools provided focus on streamlining media-related tasks within the Plex ecosystem.",
    "reasoning": "The primary label \"Content Creation\" is chosen because the server facilitates the organization and management of media content, which is a key aspect of content creation workflows. Secondary labels \"File Management\" and \"Daily Productivity\" are included because the server helps in managing media files (akin to file management) and aids in streamlining media-related tasks, enhancing productivity. The custom label \"Media Management\" is added to highlight the server's specific functionality in managing media libraries within Plex.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "File Management",
      "Daily Productivity"
    ],
    "custom_label": "Media Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2463,
    "server_name": "Plex Media Server Integration",
    "rank_by_usage": 2464,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@djbriane_plex-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@djbriane/plex-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2463,
      "name": "Plex Media Server Integration",
      "author": "@djbriane/plex-mcp",
      "overview": "Search for movies and manage playlists seamlessly with your Plex Media Server. Enhance your media experience by easily accessing movie details, genres, and playlists through a simple interface. Streamline your media management with powerful commands tailored for Plex.",
      "repository_url": "https://github.com/djbriane/plex-mcp",
      "homepage": "https://smithery.ai/server/@djbriane/plex-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@djbriane_plex-mcp.json",
      "tools_count": 9,
      "tools": [
        {
          "name": "search_movies",
          "description": "Deploy Server Plex Media Server Integration Claim Server @djbriane/plex-mcp Try in Playground search_movies",
          "parameters": []
        },
        {
          "name": "get_movie_details",
          "description": "Get detailed information about a specific movie. Args: movie_key: The rating key of the movie (can be found in search results)",
          "parameters": []
        },
        {
          "name": "list_playlists",
          "description": "List all playlists in your Plex server.",
          "parameters": [
            {
              "name": "list_playlists",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_playlist_items",
          "description": "Get the items in a specific playlist. Args: playlist_key: The rating key of the playlist",
          "parameters": []
        },
        {
          "name": "create_playlist",
          "description": "Create a new playlist with specified movies. Args: name: Name for the new playlist movie_keys: Comma-separated list of movie rating keys to add",
          "parameters": []
        },
        {
          "name": "delete_playlist",
          "description": "Delete a playlist from your Plex server. Args: playlist_key: The rating key of the playlist to delete",
          "parameters": [
            {
              "name": "playlist_key",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "add_to_playlist",
          "description": "Add a movie to an existing playlist. Args: playlist_key: The rating key of the playlist movie_key: The rating key of the movie to add",
          "parameters": [
            {
              "name": "movie_key",
              "required": true,
              "type": "string"
            },
            {
              "name": "playlist_key",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "recent_movies",
          "description": "Get recently added movies from your Plex library. Args: count: Number of recent movies to show (default: 5)",
          "parameters": []
        },
        {
          "name": "get_movie_genres",
          "description": "Get genres for a specific movie. Args: movie_key: The rating key of the movie",
          "parameters": [
            {
              "name": "movie_key",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@djbriane/plex-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "plexToken",
          "required": true,
          "description": "Your Plex authentication token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@djbriane/plex-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2464.@djbriane_plex-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2102
  }
}