{
  "labels": {
    "analysis": "The MCP Server's primary functionality revolves around generating images from HTML content, which falls under content creation and data visualization. Additionally, it offers note storage and summarization capabilities, enhancing productivity and organization. The custom URI scheme for note access indicates a special integration feature, while tailored summaries suggest AI/ML involvement for summarization tasks.",
    "reasoning": "The primary label \"Content Creation\" is chosen because generating images from HTML directly relates to creating visual content. \"Daily Productivity\" is a secondary label due to the server's note storage and summarization features, which improve organization and task management. The custom label \"HTML-to-Image Conversion\" highlights the server's specialized functionality in this area.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "Daily Productivity"
    ],
    "custom_label": "HTML-to-Image Conversion",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2252,
    "server_name": "Generate Image from HTML",
    "rank_by_usage": 2253,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@sdaaron_generate_image_from_html.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@sdaaron/generate_image_from_html/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2252,
      "name": "Generate Image from HTML",
      "author": "@sdaaron/generate_image_from_html",
      "overview": "Create images from HTML content effortlessly. Store and summarize notes with a simple interface, enhancing your productivity and organization. Utilize a custom URI scheme for easy access to your notes and generate tailored summaries based on your preferences.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@sdaaron/generate_image_from_html",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@sdaaron_generate_image_from_html.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "generate_image_from_html",
          "description": "Deploy Server Generate Image from HTML @sdaaron/generate_image_from_html Try in Playground generate_image_from_html",
          "parameters": [
            {
              "name": "width",
              "required": true,
              "type": "string"
            },
            {
              "name": "height",
              "required": true,
              "type": "string"
            },
            {
              "name": "filename",
              "required": true,
              "type": "string"
            },
            {
              "name": "html_content",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@sdaaron/generate_image_from_html/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@sdaaron/generate_image_from_html/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2253.@sdaaron_generate_image_from_html_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1939
  }
}