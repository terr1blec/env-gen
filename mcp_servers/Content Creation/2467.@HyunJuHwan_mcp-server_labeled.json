{
  "labels": {
    "analysis": "The MCP Server described focuses on enabling dynamic integration of language models with external tools to extend agent capabilities. Its primary functionality revolves around generating and manipulating multimedia content, particularly images and videos, often for storytelling or comic-like outputs. The available tools indicate capabilities in character creation/modification, scene generation/modification, and combining visual elements into narratives (e.g., videos or webtoons). This suggests a strong emphasis on content creation, especially in a visual and story-driven context.",
    "reasoning": "The primary label \"Content Creation\" was chosen because the server's main functionality revolves around generating visual content (images, videos, scenes) and assembling them into storytelling formats (webtoons). The secondary label \"AI/ML Tools\" reflects the integration with language models and AI-powered content generation. The custom label \"Visual Storytelling Tools\" captures the server's specialized ability to create cohesive narrative content through image organization and assembly.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": "Visual Storytelling Tools",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2466,
    "server_name": "scenario-word",
    "rank_by_usage": 2467,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@HyunJuHwan_mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@HyunJuHwan/mcp-server/mcp?config=eyJtb2RlIjogImRldiJ9&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "buildVideo",
          "description": "Create an .mp4 video with 2 seconds per scene image using ffmpeg concat mode.",
          "input_schema": {
            "type": "object",
            "properties": {
              "frame_folder": {
                "type": "string",
                "description": "Folder containing PNG scene images (e.g. scene-*.png)"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "buildWebtoon",
          "description": "Combine scenes vertically with alternating 30%-width speech bubbles and wrapped text.",
          "input_schema": {
            "type": "object",
            "properties": {
              "scene_ids": {
                "type": "array",
                "description": "List of scene image IDs"
              },
              "speech_bubbles": {
                "type": "string",
                "description": "Speech bubbles as array or JSON string"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "confirmCharacter",
          "description": "Confirmcharacter tool description",
          "input_schema": {
            "type": "object",
            "properties": {
              "character_ids": {
                "type": "array",
                "description": "List of character IDs to confirm"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "createCharacter",
          "description": "Create a character image via ComfyUI WebSocket",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Prompt text"
              },
              "style": {
                "type": "string",
                "description": "Style of the character"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "createScene",
          "description": "Create a scene image using multiple character images and a prompt.",
          "input_schema": {
            "type": "object",
            "properties": {
              "character_ids": {
                "type": "array",
                "description": "List of character IDs (e.g., [\"char_001\", \"char_002\"])"
              },
              "scene_description": {
                "type": "string",
                "description": "Description of the scene to generate with these characters"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "updateCharacter",
          "description": "Update character image using existing one and new prompt",
          "input_schema": {
            "type": "object",
            "properties": {
              "old_character_id": {
                "type": "string",
                "description": "Previous character ID"
              },
              "prompt": {
                "type": "string",
                "description": "New prompt to apply"
              },
              "style": {
                "type": "string",
                "description": "Character style"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "updateScene",
          "description": "Updatescene tool description",
          "input_schema": {
            "type": "object",
            "properties": {
              "scene_id": {
                "type": "string",
                "description": "scene_id"
              },
              "modification": {
                "type": "string",
                "description": "udpate scene"
              }
            }
          },
          "annotations": null
        }
      ],
      "tool_count": 7,
      "tool_names": [
        "buildVideo",
        "buildWebtoon",
        "confirmCharacter",
        "createCharacter",
        "createScene",
        "updateCharacter",
        "updateScene"
      ]
    },
    "server_info_crawled": {
      "id": 2466,
      "name": "scenario-word",
      "author": "@HyunJuHwan/mcp-server",
      "overview": "Enable dynamic integration of language models with external tools and data by running a customizable MCP server. Extend your agents with new capabilities by adding and developing tools that process inputs and produce outputs. Seamlessly connect with Claude Desktop for enhanced AI workflows.",
      "repository_url": "https://github.com/HyunJuHwan/mcp-server",
      "homepage": "https://smithery.ai/server/@HyunJuHwan/mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@HyunJuHwan_mcp-server.json",
      "tools_count": 7,
      "tools": [
        {
          "name": "buildVideo",
          "description": "Create an .mp4 video with 2 seconds per scene image using ffmpeg concat mode.",
          "input_schema": {
            "type": "object",
            "properties": {
              "frame_folder": {
                "type": "string",
                "description": "Folder containing PNG scene images (e.g. scene-*.png)"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "buildWebtoon",
          "description": "Combine scenes vertically with alternating 30%-width speech bubbles and wrapped text.",
          "input_schema": {
            "type": "object",
            "properties": {
              "scene_ids": {
                "type": "array",
                "description": "List of scene image IDs"
              },
              "speech_bubbles": {
                "type": "string",
                "description": "Speech bubbles as array or JSON string"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "confirmCharacter",
          "description": "Confirmcharacter tool description",
          "input_schema": {
            "type": "object",
            "properties": {
              "character_ids": {
                "type": "array",
                "description": "List of character IDs to confirm"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "createCharacter",
          "description": "Create a character image via ComfyUI WebSocket",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Prompt text"
              },
              "style": {
                "type": "string",
                "description": "Style of the character"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "createScene",
          "description": "Create a scene image using multiple character images and a prompt.",
          "input_schema": {
            "type": "object",
            "properties": {
              "character_ids": {
                "type": "array",
                "description": "List of character IDs (e.g., [\"char_001\", \"char_002\"])"
              },
              "scene_description": {
                "type": "string",
                "description": "Description of the scene to generate with these characters"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "updateCharacter",
          "description": "Update character image using existing one and new prompt",
          "input_schema": {
            "type": "object",
            "properties": {
              "old_character_id": {
                "type": "string",
                "description": "Previous character ID"
              },
              "prompt": {
                "type": "string",
                "description": "New prompt to apply"
              },
              "style": {
                "type": "string",
                "description": "Character style"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "updateScene",
          "description": "Updatescene tool description",
          "input_schema": {
            "type": "object",
            "properties": {
              "scene_id": {
                "type": "string",
                "description": "scene_id"
              },
              "modification": {
                "type": "string",
                "description": "udpate scene"
              }
            }
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"mode\": \"dev\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@HyunJuHwan/mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"mode\": \"dev\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@HyunJuHwan/mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "2467.@HyunJuHwan_mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2105
  }
}