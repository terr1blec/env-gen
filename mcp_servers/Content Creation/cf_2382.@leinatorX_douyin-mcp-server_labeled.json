{
  "labels": {
    "analysis": "The MCP Server specializes in extracting text from Douyin (TikTok) videos by leveraging AI speech recognition. It allows users to download videos without watermarks, extract text from the audio, and support API customization for integration with other applications. The tools provided focus on processing Douyin content, making it primarily a content extraction and automation tool for social media platforms.",
    "reasoning": "The primary label \"Content Creation\" is chosen because the server's core functionality involves extracting and processing media content from Douyin videos, which is often a prerequisite for content creation. The secondary labels \"API Integration\" and \"Social Media\" are relevant due to the tool's focus on integrating with third-party APIs and interacting with a specific social media platform. No custom label is needed as the predefined categories sufficiently cover the server's functionality.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "API Integration",
      "Social Media"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2381,
    "server_name": "Douyin Video Text Extractor",
    "rank_by_usage": 2382,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@leinatorX_douyin-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@leinatorX/douyin-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2381,
      "name": "Douyin Video Text Extractor",
      "author": "@leinatorX/douyin-mcp-server",
      "overview": "Download Douyin videos without watermarks and extract their audio as text using AI speech recognition. Automatically clean up temporary files and support custom API configurations for flexible usage. Enable seamless integration with your applications to process Douyin video content efficiently.",
      "repository_url": "https://github.com/leinatorX/douyin-mcp-server",
      "homepage": "https://smithery.ai/server/@leinatorX/douyin-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@leinatorX_douyin-mcp-server.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "get_douyin_download_link",
          "description": "Deploy Server Douyin Video Text Extractor @leinatorX/douyin-mcp-server Try in Playground get_douyin_download_link",
          "parameters": []
        },
        {
          "name": "extract_douyin_text",
          "description": "从抖音分享链接提取视频中的文本内容\n    \n    参数:\n    - share_link: 抖音分享链接或包含链接的文本\n    - api_base_url: API基础URL（可选，默认使用SiliconFlow）\n    - model: 语音识别模型（可选，默认使用SenseVoiceSmall）\n    \n    返回:\n    - 提取的文本内容\n    \n    注意: 需要设置环境变量 DOUYIN_API_KEY",
          "parameters": []
        },
        {
          "name": "parse_douyin_video_info",
          "description": "解析抖音分享链接，获取视频基本信息\n    \n    参数:\n    - share_link: 抖音分享链接或包含链接的文本\n    \n    返回:\n    - 视频信息（JSON格式字符串）",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@leinatorX/douyin-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "douyinApiKey",
          "required": true,
          "description": "API key for SiliconFlow or other transcription service"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@leinatorX/douyin-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2382.@leinatorX_douyin-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2038
  }
}