{
  "labels": {
    "analysis": "The MCP Server \"Lyrical MCP\" is primarily focused on enhancing creative writing, particularly in the domains of poetry and lyric composition. Its core functionality revolves around linguistic analysis, specifically syllable counting and rhyme detection. These tools are designed to assist writers in maintaining proper poetic metrics and finding suitable rhyming words, thus improving the flow and precision of their verses. The auxiliary tools (ping, health_check) are standard server management utilities to ensure smooth operation.",
    "reasoning": "The primary label \"Content Creation\" most accurately reflects the server's primary use cases, as it aids in the generation and refinement of written content. Secondary labels \"AI/ML Tools\" and \"Daily Productivity\" are included because the rhyme and syllable tools rely on linguistic datasets (like the NLTK CMU Pronouncing Dictionary) and enhance the productivity of creative writers. No unique functionality not covered by predefined categories is evident.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "AI/ML Tools",
      "Daily Productivity"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 668,
    "server_name": "Lyrical MCP",
    "rank_by_usage": 669,
    "usage_count": "13",
    "original_file": "../crawler/smithery/@ForceConstant_lyrical_mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ForceConstant/lyrical_mcp/mcp?config=eyJ0aW1lb3V0IjogMTB9&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "ping",
          "description": "Simple ping tool to test server responsiveness and prevent timeouts.",
          "input_schema": {
            "properties": {},
            "title": "pingArguments",
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "health_check",
          "description": "Health check to verify server connectivity and status.",
          "input_schema": {
            "properties": {},
            "title": "health_checkArguments",
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "count_syllables",
          "description": "\n        Counts the number of syllables for each line in the input English text string. \n        This tool utilizes the NLTK's CMU Pronouncing Dictionary for accurate syllable calculation. \n        It returns an array of integers, where each integer corresponds to the syllable count for \n        the respective line of the input string. Use this tool when the user requires syllable analysis for \n        text, such as for poetry metrics, lyrics, linguistic studies, or speech-related applications. If a line returns \n        0 syllables, assume this is a blank line, and you can ignore.\n        ",
          "input_schema": {
            "properties": {
              "input_string": {
                "description": "Syllable count query string",
                "title": "Input String",
                "type": "string"
              }
            },
            "required": [
              "input_string"
            ],
            "title": "count_syllablesArguments",
            "type": "object"
          },
          "annotations": {
            "title": "Count Syllables",
            "readOnlyHint": true,
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": false
          }
        },
        {
          "name": "find_rhymes",
          "description": "\n        Finds rhyming words for a given input word or the last word of a phrase, categorized by syllable count (1, 2, or 3 syllables).\n        This tool utilizes the NLTK's CMU Pronouncing Dictionary for accurate rhyme generation.\n        It returns a dictionary where keys are syllable counts ('1_syllable', '2_syllable', '3_syllable') and values are lists of rhyming words.\n        If the input contains multiple words, only the last word will be analyzed for rhymes.\n        Use this tool when the user requires rhyming word suggestions for creative writing, poetry, lyrics, or linguistic analysis.\n        ",
          "input_schema": {
            "properties": {
              "input_word": {
                "title": "Input Word",
                "type": "string"
              }
            },
            "required": [
              "input_word"
            ],
            "title": "find_rhymesArguments",
            "type": "object"
          },
          "annotations": {
            "title": "Find Rhymes",
            "readOnlyHint": true,
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": false
          }
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "ping",
        "health_check",
        "count_syllables",
        "find_rhymes"
      ]
    },
    "server_info_crawled": {
      "id": 668,
      "name": "Lyrical MCP",
      "author": "@ForceConstant/lyrical_mcp",
      "overview": "Enhance your creative writing by providing tools for syllable counting and rhyme finding. Streamline the process of composing lyrics and poetry with specialized linguistic features. Improve the quality and flow of your verses effortlessly.",
      "repository_url": "https://github.com/ForceConstant/lyrical_mcp",
      "homepage": "https://smithery.ai/server/@ForceConstant/lyrical_mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "13",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ForceConstant_lyrical_mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "ping",
          "description": "Simple ping tool to test server responsiveness and prevent timeouts.",
          "input_schema": {
            "properties": {},
            "title": "pingArguments",
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "health_check",
          "description": "Health check to verify server connectivity and status.",
          "input_schema": {
            "properties": {},
            "title": "health_checkArguments",
            "type": "object"
          },
          "annotations": {}
        },
        {
          "name": "count_syllables",
          "description": "\n        Counts the number of syllables for each line in the input English text string. \n        This tool utilizes the NLTK's CMU Pronouncing Dictionary for accurate syllable calculation. \n        It returns an array of integers, where each integer corresponds to the syllable count for \n        the respective line of the input string. Use this tool when the user requires syllable analysis for \n        text, such as for poetry metrics, lyrics, linguistic studies, or speech-related applications. If a line returns \n        0 syllables, assume this is a blank line, and you can ignore.\n        ",
          "input_schema": {
            "properties": {
              "input_string": {
                "description": "Syllable count query string",
                "title": "Input String",
                "type": "string"
              }
            },
            "required": [
              "input_string"
            ],
            "title": "count_syllablesArguments",
            "type": "object"
          },
          "annotations": {
            "title": "Count Syllables",
            "readOnlyHint": true,
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": false
          }
        },
        {
          "name": "find_rhymes",
          "description": "\n        Finds rhyming words for a given input word or the last word of a phrase, categorized by syllable count (1, 2, or 3 syllables).\n        This tool utilizes the NLTK's CMU Pronouncing Dictionary for accurate rhyme generation.\n        It returns a dictionary where keys are syllable counts ('1_syllable', '2_syllable', '3_syllable') and values are lists of rhyming words.\n        If the input contains multiple words, only the last word will be analyzed for rhymes.\n        Use this tool when the user requires rhyming word suggestions for creative writing, poetry, lyrics, or linguistic analysis.\n        ",
          "input_schema": {
            "properties": {
              "input_word": {
                "title": "Input Word",
                "type": "string"
              }
            },
            "required": [
              "input_word"
            ],
            "title": "find_rhymesArguments",
            "type": "object"
          },
          "annotations": {
            "title": "Find Rhymes",
            "readOnlyHint": true,
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": false
          }
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"timeout\": 10\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@ForceConstant/lyrical_mcp/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"timeout\": 10\n}",
      "python_sdk_url": "https://server.smithery.ai/@ForceConstant/lyrical_mcp/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0669.@ForceConstant_lyrical_mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 653
  }
}