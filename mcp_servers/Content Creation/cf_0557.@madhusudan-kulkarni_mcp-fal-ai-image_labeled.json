{
  "labels": {
    "analysis": "The MCP fal.ai Image Generation Server is designed to generate images from text prompts using fal.ai's AI models. It integrates directly with development environments like Cursor and Windsurf, enabling seamless image generation for developers, designers, and content creators. The server supports various parameters like model selection, image size, and quality settings. Generated images are saved locally, making it suitable for workflows that require programmatic image creation.",
    "reasoning": "The primary label \"Content Creation\" was chosen because the server's core functionality revolves around generating visual content from text prompts, which is a fundamental aspect of content creation. The secondary label \"AI/ML Tools\" was selected because the server leverages AI models for image generation, making it inherently tied to machine learning capabilities. No custom label is needed as the predefined labels adequately cover the server's functionality.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 556,
    "server_name": "fal.ai Image Generation Server",
    "rank_by_usage": 557,
    "usage_count": "22",
    "original_file": "../crawler/smithery/@madhusudan-kulkarni_mcp-fal-ai-image.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@madhusudan-kulkarni/mcp-fal-ai-image/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 556,
      "name": "fal.ai Image Generation Server",
      "author": "@madhusudan-kulkarni/mcp-fal-ai-image",
      "overview": "MCP fal.ai Image Server\n\nEffortlessly generate images from text prompts using fal.ai and the Model Context Protocol (MCP). Integrates directly with AI IDEs like Cursor and Windsurf.\n\nWhen and Why to Use\n\nThis tool is designed for:\n\nDevelopers and designers who want to generate images from text prompts without leaving their IDE.\nRapid prototyping of UI concepts, marketing assets, or creative ideas.\nContent creators needing unique visuals for blogs, presentations, or social media.\nAI researchers and tinkerers experimenting with the latest fal.ai models.\nAutomating workflows that require programmatic image generation via MCP.\n\nKey features:\n\nSupports any valid fal.ai model and all major image parameters.\nWorks out of the box with Node.js and a fal.ai API key.\nSaves images locally with accessible file paths.\nSimple configuration and robust error handling.\nQuick Start\nRequirements: Node.js 18+, fal.ai API key\nConfigure MCP: { \"mcpServers\": { \"fal-ai-image\": { \"command\": \"npx\", \"args\": [\"-y\", \"mcp-fal-ai-image\"], \"env\": { \"FAL_KEY\": \"YOUR-FAL-AI-API-KEY\" } } } }\nRun: Use the generate-image tool from your IDE.\n\nüí° Typical Workflow: Describe the image you want (e.g., ‚Äúgenerate a landscape with flying cars using model fal-ai/kolors, 2 images, landscape_16_9‚Äù) and get instant results in your IDE.\n\nüó®Ô∏è Example Prompts\ngenerate an image of a red apple\ngenerate an image of a red apple using model fal-ai/kolors\ngenerate 3 images of a glowing red apple in a futuristic city using model fal-ai/recraft-v3, square_hd, 40 inference steps, guidance scale 4.0, safety checker on\n\nSupported parameters: prompt, model ID (any fal.ai model), number of images, image size, inference steps, guidance scale, safety checker.\n\nImages are saved locally; file paths are shown in the response. For model IDs, see fal.ai/models.\n\nTroubleshooting\nFAL_KEY environment variable is not set: Set your fal.ai API key as above.\nnpx not found: Install Node.js 18+ and npm.\n\nAdvanced: Example MCP Request/Response\n\nRequest: { \"tool\": \"generate-image\", \"args\": { \"prompt\": \"A futuristic cityscape at sunset\", \"model\": \"fal-ai/kolors\" } }\n\nExample response: { \"images\": [ { \"url\": \"file:///path/to/generated_image1.png\" }, { \"url\": \"file:///path/to/generated_image2.png\" } ] }\n\nüìÅ Image Output Directory\n\nGenerated images are saved to your local system:\n\nBy default: ~/Downloads/fal_ai (on Linux/macOS; uses XDG standard if available)\nCustom location: Set the environment variable FAL_IMAGES_OUTPUT_DIR to your desired folder. Images will be saved in /fal_ai.\n\nThe full file path for each image is included in the tool's response.\n\n‚ö†Ô∏è Error Handling & Troubleshooting\nIf you specify a model ID that is not supported by fal.ai, you will receive an error from the backend. Double-check for typos or visit fal.ai/models to confirm the model ID.\nFor the latest list of models and their capabilities, refer to the fal.ai model catalog or API docs.\nFor other errors, consult your MCP client logs or open an issue on GitHub.\nü§ù Contributing\n\nContributions and suggestions are welcome! Please open issues or pull requests on GitHub.\n\nüîí Security\nYour API key is only used locally to authenticate with fal.ai.\nNo user data is stored or transmitted except as required by fal.ai API.\nüõ° License\n\nMIT License ¬© 2025 Madhusudan Kulkarni",
      "repository_url": "https://github.com/madhusudan-kulkarni/mcp-fal-ai-image",
      "homepage": "https://smithery.ai/server/@madhusudan-kulkarni/mcp-fal-ai-image",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "22",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@madhusudan-kulkarni_mcp-fal-ai-image.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "generate-image",
          "description": "Deploy Server fal.ai Image Generation Server @madhusudan-kulkarni/mcp-fal-ai-image Try in Playground generate-image",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@madhusudan-kulkarni/mcp-fal-ai-image/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiKey",
          "required": true,
          "description": "Your fal.ai API key (FAL_KEY)"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@madhusudan-kulkarni/mcp-fal-ai-image/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0557.@madhusudan-kulkarni_mcp-fal-ai-image_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 545
  }
}