{
  "labels": {
    "analysis": "The MCP Server is designed to provide comprehensive film-related data and metadata, facilitating access to rich movie information for application integration. Its core functionality revolves around querying and retrieving film details, which can enhance user experiences in applications by offering dynamic and detailed movie context. The available tool, \"get_films,\" suggests a primary focus on retrieving film information, which is crucial for entertainment, media, and content creation applications.",
    "reasoning": "The primary label \"Content Creation\" is chosen because the server aids in enriching applications with film-related data, which is a key aspect of creating or enhancing media-related content. \"News & Media\" is selected as a secondary label due to the server's potential use in media aggregation and journalism tools. \"E-commerce\" could also be relevant if the server is used to provide product information for movie-related merchandise or streaming services. No custom label is necessary as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "News & Media",
      "E-commerce"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1035,
    "server_name": "Film Information Server",
    "rank_by_usage": 1036,
    "usage_count": "2",
    "original_file": "../crawler/smithery/@zehranurugurr_film_mcp_v2.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@zehranurugurr/film_mcp_v2/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_films",
          "description": "",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "get_filmsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_films"
      ]
    },
    "server_info_crawled": {
      "id": 1035,
      "name": "Film Information Server",
      "author": "@zehranurugurr/film_mcp_v2",
      "overview": "Provide detailed film-related data and metadata to enhance your applications with rich movie context. Enable dynamic access to film resources and tools for querying movie information efficiently. Improve user experience by integrating comprehensive film data seamlessly.",
      "repository_url": "https://github.com/zehranurugurr/film_mcp",
      "homepage": "https://smithery.ai/server/@zehranurugurr/film_mcp_v2",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "2",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@zehranurugurr_film_mcp_v2.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_films",
          "description": "",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "get_filmsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@zehranurugurr/film_mcp_v2/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@zehranurugurr/film_mcp_v2/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1036.@zehranurugurr_film_mcp_v2_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1014
  }
}