{
  "labels": {
    "analysis": "The Kroki Server's core functionality revolves around converting diagram code (such as Mermaid, PlantUML, or Graphviz) into various image or vector formats (SVG, PNG, PDF, or JPEG). Its primary purpose is to simplify the generation and distribution of diagrams through URL links or file downloads. This addresses the need for easy diagram creation and integration into documents or web pages without requiring users to manage the underlying diagram rendering engines directly.",
    "reasoning": "The primary label \"Content Creation\" is chosen because the server enables the creation and transformation of diagrams, which is a form of content. \"Web Search & Research\" is included as a secondary label since the generated URLs can be embedded in documents or web pages, aiding research or documentation. \"File Management\" is also relevant due to the download functionality. No custom label is needed, as the predefined labels adequately cover the server's capabilities.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "Web Search & Research",
      "File Management"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 355,
    "server_name": "Kroki Server",
    "rank_by_usage": 356,
    "usage_count": "83",
    "original_file": "../crawler/smithery/@tkoba1974_mcp-kroki.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@tkoba1974/mcp-kroki/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "generate_diagram_url",
          "description": "Generate a URL for a diagram using Kroki.io. This tool takes Mermaid diagram code or other supported diagram formats and returns a URL to the rendered diagram. The URL can be used to display the diagram in web browsers or embedded in documents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Diagram type (e.g., \"mermaid\" for Mermaid diagrams, \"plantuml\" for PlantUML, \"graphviz\" for GraphViz DOT, \"c4plantuml\" for C4 architecture diagrams, and many more). See Kroki.io documentation for all supported formats."
              },
              "content": {
                "type": "string",
                "description": "The diagram content in the specified format. For Mermaid diagrams, this would be the Mermaid syntax code (e.g., \"graph TD; A-->B; B-->C;\")."
              },
              "outputFormat": {
                "type": "string",
                "description": "The format of the output image. Options are: \"svg\" (vector graphics, default), \"png\" (raster image), \"pdf\" (document format), \"jpeg\" (compressed raster image), or \"base64\" (base64-encoded SVG for direct embedding in HTML)."
              }
            },
            "required": [
              "type",
              "content"
            ]
          },
          "annotations": null
        },
        {
          "name": "download_diagram",
          "description": "Download a diagram image to a local file. This tool converts diagram code (such as Mermaid) into an image file and saves it to the specified location. Useful for generating diagrams for presentations, documentation, or other offline use. Includes an option to scale SVG output.",
          "input_schema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Diagram type (e.g., \"mermaid\", \"plantuml\", \"graphviz\"). Supports the same diagram types as Kroki.io."
              },
              "content": {
                "type": "string",
                "description": "The diagram content in the specified format."
              },
              "outputPath": {
                "type": "string",
                "description": "The complete file path where the diagram image should be saved (e.g., \"/Users/username/Documents/diagram.svg\")."
              },
              "outputFormat": {
                "type": "string",
                "description": "Output image format. If unspecified, derived from outputPath extension. Options: \"svg\", \"png\", \"pdf\", \"jpeg\"."
              },
              "scale": {
                "type": "number",
                "description": "Optional scaling factor to apply to the diagram dimensions. Default is 1.0 (no scaling). This currently only affects SVG output format by attempting to modify width/height attributes.",
                "default": 1,
                "minimum": 0.1
              }
            },
            "required": [
              "type",
              "content",
              "outputPath"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "generate_diagram_url",
        "download_diagram"
      ]
    },
    "server_info_crawled": {
      "id": 355,
      "name": "Kroki Server",
      "author": "@tkoba1974/mcp-kroki",
      "overview": "Generate and download diagrams in various formats using Kroki.io. Convert your Mermaid, PlantUML, and Graphviz diagrams to SVG, PNG, PDF, or JPEG files effortlessly.",
      "repository_url": "https://github.com/tkoba1974/mcp-kroki",
      "homepage": "https://smithery.ai/server/@tkoba1974/mcp-kroki",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "83",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@tkoba1974_mcp-kroki.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "generate_diagram_url",
          "description": "Generate a URL for a diagram using Kroki.io. This tool takes Mermaid diagram code or other supported diagram formats and returns a URL to the rendered diagram. The URL can be used to display the diagram in web browsers or embedded in documents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Diagram type (e.g., \"mermaid\" for Mermaid diagrams, \"plantuml\" for PlantUML, \"graphviz\" for GraphViz DOT, \"c4plantuml\" for C4 architecture diagrams, and many more). See Kroki.io documentation for all supported formats."
              },
              "content": {
                "type": "string",
                "description": "The diagram content in the specified format. For Mermaid diagrams, this would be the Mermaid syntax code (e.g., \"graph TD; A-->B; B-->C;\")."
              },
              "outputFormat": {
                "type": "string",
                "description": "The format of the output image. Options are: \"svg\" (vector graphics, default), \"png\" (raster image), \"pdf\" (document format), \"jpeg\" (compressed raster image), or \"base64\" (base64-encoded SVG for direct embedding in HTML)."
              }
            },
            "required": [
              "type",
              "content"
            ]
          },
          "annotations": null
        },
        {
          "name": "download_diagram",
          "description": "Download a diagram image to a local file. This tool converts diagram code (such as Mermaid) into an image file and saves it to the specified location. Useful for generating diagrams for presentations, documentation, or other offline use. Includes an option to scale SVG output.",
          "input_schema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Diagram type (e.g., \"mermaid\", \"plantuml\", \"graphviz\"). Supports the same diagram types as Kroki.io."
              },
              "content": {
                "type": "string",
                "description": "The diagram content in the specified format."
              },
              "outputPath": {
                "type": "string",
                "description": "The complete file path where the diagram image should be saved (e.g., \"/Users/username/Documents/diagram.svg\")."
              },
              "outputFormat": {
                "type": "string",
                "description": "Output image format. If unspecified, derived from outputPath extension. Options: \"svg\", \"png\", \"pdf\", \"jpeg\"."
              },
              "scale": {
                "type": "number",
                "description": "Optional scaling factor to apply to the diagram dimensions. Default is 1.0 (no scaling). This currently only affects SVG output format by attempting to modify width/height attributes.",
                "default": 1,
                "minimum": 0.1
              }
            },
            "required": [
              "type",
              "content",
              "outputPath"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@tkoba1974/mcp-kroki/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@tkoba1974/mcp-kroki/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0356.@tkoba1974_mcp-kroki_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 352
  }
}