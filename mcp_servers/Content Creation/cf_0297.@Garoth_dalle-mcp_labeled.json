{
  "labels": {
    "analysis": "The MCP Server is primarily focused on generating and manipulating images using text-based prompts through OpenAI's DALL-E API. Its core functionality includes creating new images, editing existing ones, and generating variations, all of which fall under the realm of image generation and manipulation. The server also includes a tool to validate API keys, ensuring secure and authorized access. The primary use case is enhancing creative projects by producing high-quality visuals based on textual descriptions.",
    "reasoning": "The primary label \"Content Creation\" was chosen because the server's main functionality revolves around generating and manipulating image content, which directly supports creative and visual production. The secondary label \"AI/ML Tools\" is included because the server leverages advanced AI models (DALL-E) for its operations. No further custom labels are needed as the predefined labels sufficiently cover the server's functionality.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 296,
    "server_name": "DALL-E Image Generator",
    "rank_by_usage": 297,
    "usage_count": "114",
    "original_file": "../crawler/smithery/@Garoth_dalle-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Garoth/dalle-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 296,
      "name": "DALL-E Image Generator",
      "author": "@Garoth/dalle-mcp",
      "overview": "Generate stunning images from text prompts using OpenAI's DALL-E API. Edit existing images or create variations effortlessly, all while ensuring your API key is validated for secure access. Enhance your creative projects with high-quality visuals in just a few clicks.",
      "repository_url": "https://github.com/Garoth/dalle-mcp",
      "homepage": "https://smithery.ai/server/@Garoth/dalle-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "114",
      "success_rate": "99.49%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Garoth_dalle-mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "generate_image",
          "description": "Deploy Server DALL-E Image Generator Claim Server @Garoth/dalle-mcp Try in Playground generate_image",
          "parameters": [
            {
              "name": "generate_image",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "edit_image",
          "description": "Edit an existing image using DALL-E based on a text prompt",
          "parameters": []
        },
        {
          "name": "create_variation",
          "description": "Create variations of an existing image using DALL-E",
          "parameters": []
        },
        {
          "name": "validate_key",
          "description": "Validate the OpenAI API key",
          "parameters": [
            {
              "name": "validate_key",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Garoth/dalle-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "openaiApiKey",
          "required": true,
          "description": "Your OpenAI API key. (required)"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Garoth/dalle-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0297.@Garoth_dalle-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 293
  }
}