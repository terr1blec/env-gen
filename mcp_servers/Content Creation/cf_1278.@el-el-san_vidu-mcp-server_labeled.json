{
  "labels": {
    "analysis": "The MCP Server \"Vidu Video Generation Server\" is primarily focused on generating videos from static images using AI models. It allows users to upload images, customize video generation settings, and monitor the status of their tasks. The core functionality revolves around automating video creation, which involves advanced AI video generation capabilities.",
    "reasoning": "The primary label \"Content Creation\" is chosen because the server's main purpose is to create videos from images, which falls under media generation. \"AI/ML Tools\" is a secondary label due to the use of advanced AI models for video generation. No custom label is needed as the predefined categories sufficiently describe the server's functionality.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1277,
    "server_name": "Vidu Video Generation Server",
    "rank_by_usage": 1278,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@el-el-san_vidu-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@el-el-san/vidu-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1277,
      "name": "Vidu Video Generation Server",
      "author": "@el-el-san/vidu-mcp-server",
      "overview": "Generate videos from images using advanced AI models. Easily upload images and monitor the status of your video generation tasks with customizable settings. Transform your static images into dynamic videos effortlessly.",
      "repository_url": "https://github.com/el-el-san/vidu-mcp-server",
      "homepage": "https://smithery.ai/server/@el-el-san/vidu-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@el-el-san_vidu-mcp-server.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "image-to-video",
          "description": "Deploy Server Vidu Video Generation Server Claim Server @el-el-san/vidu-mcp-server Try in Playground image-to-video",
          "parameters": []
        },
        {
          "name": "check-generation-status",
          "description": "Check the status of a video generation task",
          "parameters": [
            {
              "name": "task_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "upload-image",
          "description": "Upload an image to use with the Vidu API",
          "parameters": [
            {
              "name": "image_path",
              "required": true,
              "type": "string"
            },
            {
              "name": "image_type",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@el-el-san/vidu-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "viduApiKey",
          "required": true,
          "description": "Vidu API Key for authenticating with the Vidu API"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@el-el-san/vidu-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1278.@el-el-san_vidu-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1218
  }
}