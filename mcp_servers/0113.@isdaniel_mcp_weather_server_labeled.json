{
  "labels": {
    "analysis": "The MCP Server is designed specifically for retrieving and processing weather-related data. It provides tools to fetch real-time weather information (temperature, weather conditions) for any city using a simple command or API call. It also supports historical weather data retrieval and provides the current date/time in different timezones. The server leverages the Open-Meteo API to deliver accurate weather updates without requiring API keys from users.",
    "reasoning": "The primary label \"Weather\" is chosen because the server's core functionality revolves around providing weather data and related services. The secondary labels \"API Integration\" and \"Time & Calendar\" are added because the server uses an external API (Open-Meteo) and includes a tool for retrieving current date/time in specific timezones. No custom label is needed as the predefined labels adequately cover the server's functionality.",
    "primary_label": "Weather",
    "secondary_labels": [
      "API Integration",
      "Time & Calendar"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 112,
    "server_name": "Weather MCP Server",
    "rank_by_usage": 113,
    "usage_count": "593",
    "original_file": "../crawler/smithery/@isdaniel_mcp_weather_server.json",
    "mode": "smithery",
    "timestamp": 1751937975,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@isdaniel/mcp_weather_server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_current_weather",
          "description": "Get current weather information for a specified city.\nIt extracts the current hour's temperature and weather code, maps\nthe weather code to a human-readable description, and returns a formatted summary.\n",
          "input_schema": {
            "properties": {
              "city": {
                "description": "The name of the city to fetch weather information for, PLEASE NOTE English name only, if the parameter city isn't English please translate to English before invoking this function.",
                "title": "City",
                "type": "string"
              }
            },
            "required": [
              "city"
            ],
            "title": "get_current_weatherArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather_by_datetime_range",
          "description": "\nGet weather information for a specified city between start and end dates.\n",
          "input_schema": {
            "properties": {
              "city": {
                "description": "The name of the city to fetch weather information for, PLEASE NOTE English name only, if the parameter city isn't English please translate to English before invoking this function.",
                "title": "City",
                "type": "string"
              },
              "start_date": {
                "description": "Start date in format YYYY-MM-DD, please follow ISO 8601 format",
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "description": "End date in format YYYY-MM-DD , please follow ISO 8601 format",
                "title": "End Date",
                "type": "string"
              }
            },
            "required": [
              "city",
              "start_date",
              "end_date"
            ],
            "title": "get_weather_by_datetime_rangeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_current_datetime",
          "description": "Get current time in specified timezone",
          "input_schema": {
            "properties": {
              "timezone_name": {
                "description": "IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use UTC timezone if no timezone provided by the user.",
                "title": "Timezone Name",
                "type": "string"
              }
            },
            "required": [
              "timezone_name"
            ],
            "title": "get_current_datetimeArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 3,
      "tool_names": [
        "get_current_weather",
        "get_weather_by_datetime_range",
        "get_current_datetime"
      ]
    },
    "server_info_crawled": {
      "id": 112,
      "name": "Weather MCP Server",
      "author": "@isdaniel/mcp_weather_server",
      "overview": "Retrieve real-time weather information effortlessly for any city. Get accurate weather updates using a simple command or API call without needing an API key. Enhance your applications with reliable weather data from the Open-Meteo API.",
      "repository_url": "https://github.com/isdaniel/mcp_weather_server",
      "homepage": "https://smithery.ai/server/@isdaniel/mcp_weather_server",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "593",
      "success_rate": "99.89%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@isdaniel_mcp_weather_server.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "get_current_weather",
          "description": "Get current weather information for a specified city.\nIt extracts the current hour's temperature and weather code, maps\nthe weather code to a human-readable description, and returns a formatted summary.\n",
          "input_schema": {
            "properties": {
              "city": {
                "description": "The name of the city to fetch weather information for, PLEASE NOTE English name only, if the parameter city isn't English please translate to English before invoking this function.",
                "title": "City",
                "type": "string"
              }
            },
            "required": [
              "city"
            ],
            "title": "get_current_weatherArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather_by_datetime_range",
          "description": "\nGet weather information for a specified city between start and end dates.\n",
          "input_schema": {
            "properties": {
              "city": {
                "description": "The name of the city to fetch weather information for, PLEASE NOTE English name only, if the parameter city isn't English please translate to English before invoking this function.",
                "title": "City",
                "type": "string"
              },
              "start_date": {
                "description": "Start date in format YYYY-MM-DD, please follow ISO 8601 format",
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "description": "End date in format YYYY-MM-DD , please follow ISO 8601 format",
                "title": "End Date",
                "type": "string"
              }
            },
            "required": [
              "city",
              "start_date",
              "end_date"
            ],
            "title": "get_weather_by_datetime_rangeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_current_datetime",
          "description": "Get current time in specified timezone",
          "input_schema": {
            "properties": {
              "timezone_name": {
                "description": "IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use UTC timezone if no timezone provided by the user.",
                "title": "Timezone Name",
                "type": "string"
              }
            },
            "required": [
              "timezone_name"
            ],
            "title": "get_current_datetimeArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@isdaniel/mcp_weather_server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@isdaniel/mcp_weather_server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0113.@isdaniel_mcp_weather_server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 110
  }
}