{
  "labels": {
    "analysis": "The MCP Server provides access to the Australian Pharmaceutical Benefits Scheme (PBS) API, which allows users to retrieve information about medicines, pricing, and availability. This indicates that the server's primary functionality is related to healthcare, specifically pharmaceutical data management and retrieval.",
    "reasoning": "The primary label is selected based on the server's core functionality of providing access to healthcare-related pharmaceutical data. The secondary label of \"Health & Fitness\" is chosen because it broadly covers health-related information, while \"Data Analysis & Processing\" is relevant due to the nature of querying and processing pharmaceutical data. No custom label is needed as the predefined labels sufficiently describe the server's functionality.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Health & Fitness",
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1622,
    "server_name": "Not found",
    "rank_by_usage": 1623,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@matthewdcage_pbs-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@matthewdcage/pbs-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "pbs_api",
          "description": "Access the Australian Pharmaceutical Benefits Scheme (PBS) API to retrieve information about medicines, pricing, and availability.",
          "input_schema": {
            "type": "object",
            "properties": {
              "endpoint": {
                "type": "string",
                "description": "The specific PBS API endpoint to access (e.g., \"prescribers\", \"item-overview\")"
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST"
                ],
                "default": "GET",
                "description": "HTTP method to use (GET is recommended for most PBS API operations)"
              },
              "params": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Query parameters to include in the request (e.g., {\"get_latest_schedule_only\": \"true\"})"
              },
              "subscriptionKey": {
                "type": "string",
                "description": "Custom subscription key (if not provided, the default public key will be used)"
              },
              "timeout": {
                "type": "number",
                "default": 30000,
                "description": "Request timeout in milliseconds"
              }
            },
            "required": [
              "endpoint"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "pbs_api"
      ]
    },
    "server_info_crawled": {
      "id": 1622,
      "name": "Not found",
      "author": "Not found",
      "overview": "Not found",
      "repository_url": "https://github.com/exa-labs/exa-mcp-server",
      "homepage": "https://smithery.ai/server/@matthewdcage/pbs-mcp-server",
      "remote_or_local": "Remote",
      "license": "Not specified",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@matthewdcage_pbs-mcp-server.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "pbs_api",
          "description": "Access the Australian Pharmaceutical Benefits Scheme (PBS) API to retrieve information about medicines, pricing, and availability.",
          "input_schema": {
            "type": "object",
            "properties": {
              "endpoint": {
                "type": "string",
                "description": "The specific PBS API endpoint to access (e.g., \"prescribers\", \"item-overview\")"
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST"
                ],
                "default": "GET",
                "description": "HTTP method to use (GET is recommended for most PBS API operations)"
              },
              "params": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Query parameters to include in the request (e.g., {\"get_latest_schedule_only\": \"true\"})"
              },
              "subscriptionKey": {
                "type": "string",
                "description": "Custom subscription key (if not provided, the default public key will be used)"
              },
              "timeout": {
                "type": "number",
                "default": 30000,
                "description": "Request timeout in milliseconds"
              }
            },
            "required": [
              "endpoint"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@matthewdcage/pbs-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@matthewdcage/pbs-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1623.@matthewdcage_pbs-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1474
  }
}