{
  "labels": {
    "analysis": "The MCP Server specializes in visual and spatial reasoning, enabling language models to create, manipulate, and iterate on various diagrammatic representations (e.g., graphs, flowcharts, concept maps). Its primary purpose is to enhance problem-solving capabilities by integrating visual thinking with verbal insights, supporting multi-modal outputs including ASCII art and SVG. The server excels in tasks requiring system design, algorithm visualization, pattern recognition, and iterative refinement of visual representations.",
    "reasoning": "The primary label \"AI/ML Tools\" was chosen because the server leverages machine-driven visual reasoning and pattern recognition to enhance problem-solving, which aligns with advanced AI capabilities. \"Development Tools\" is a secondary label due to its utility in system architecture design and algorithm visualization. No predefined category fully captures its unique visual reasoning focus, so a custom label was added to emphasize this specialty.",
    "primary_label": "AI/ML Tools",
    "secondary_labels": [
      "Development Tools"
    ],
    "custom_label": "Visual Reasoning & Diagrammatic Thinking",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 529,
    "server_name": "Visual Reasoning Server",
    "rank_by_usage": 530,
    "usage_count": "27",
    "original_file": "../crawler/smithery/@waldzellai_visual-reasoning.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@waldzellai/visual-reasoning/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "visualReasoning",
          "description": "A detailed tool for diagrammatic thinking and spatial representation.\nThis tool helps models create and manipulate visual representations of problems.\nIt can be used to develop system diagrams, flowcharts, concept maps, and other visual models.\n\nWhen to use this tool:\n- System architecture design\n- Algorithm visualization\n- Concept mapping and knowledge organization\n- Pattern recognition in complex data\n- Spatial problem solving\n\nKey features:\n- Create and manipulate abstract visual elements\n- Support for multiple visual representation types\n- Track iterations of visual thinking\n- Translate between verbal descriptions and visual representations\n- Generate visual insights from patterns\n\nParameters explained:\n- operation: The type of action to perform (create, update, delete, transform, observe)\n- elements: The visual elements to operate on\n- diagramId: Identifier for the diagram being created or modified\n- diagramType: The type of diagram (graph, flowchart, state diagram, etc.)\n- iteration: The current iteration of the visual reasoning process\n- observation/insight/hypothesis: Verbal reasoning about the visual representation\n- nextOperationNeeded: Whether another operation is needed in the visual reasoning process",
          "input_schema": {
            "type": "object",
            "properties": {
              "operation": {
                "type": "string",
                "enum": [
                  "create",
                  "update",
                  "delete",
                  "transform",
                  "observe"
                ],
                "description": "The type of operation to perform"
              },
              "elements": {
                "type": "array",
                "description": "The visual elements to operate on",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the element"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "node",
                        "edge",
                        "container",
                        "annotation"
                      ],
                      "description": "The type of visual element"
                    },
                    "label": {
                      "type": "string",
                      "description": "Text label for the element"
                    },
                    "properties": {
                      "type": "object",
                      "description": "Visual properties like position, size, color"
                    },
                    "source": {
                      "type": "string",
                      "description": "For edges: ID of the source element"
                    },
                    "target": {
                      "type": "string",
                      "description": "For edges: ID of the target element"
                    },
                    "contains": {
                      "type": "array",
                      "description": "For containers: IDs of contained elements",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              },
              "transformationType": {
                "type": "string",
                "enum": [
                  "rotate",
                  "move",
                  "resize",
                  "recolor",
                  "regroup"
                ],
                "description": "For transform operations: the type of transformation"
              },
              "diagramId": {
                "type": "string",
                "description": "Identifier for the diagram"
              },
              "diagramType": {
                "type": "string",
                "enum": [
                  "graph",
                  "flowchart",
                  "stateDiagram",
                  "conceptMap",
                  "treeDiagram",
                  "custom"
                ],
                "description": "The type of diagram being created or modified"
              },
              "iteration": {
                "type": "number",
                "description": "Current iteration of the visual reasoning process",
                "minimum": 0
              },
              "observation": {
                "type": "string",
                "description": "Observations about the current visual state"
              },
              "insight": {
                "type": "string",
                "description": "Insights derived from the visual representation"
              },
              "hypothesis": {
                "type": "string",
                "description": "Hypotheses based on the visual pattern"
              },
              "nextOperationNeeded": {
                "type": "boolean",
                "description": "Whether another operation is needed"
              }
            },
            "required": [
              "operation",
              "diagramId",
              "diagramType",
              "iteration",
              "nextOperationNeeded"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "visualReasoning"
      ]
    },
    "server_info_crawled": {
      "id": 529,
      "name": "Visual Reasoning Server",
      "author": "@waldzellai/visual-reasoning",
      "overview": "Enable language models to perform complex visual and spatial reasoning by creating, manipulating, and iterating on diagrammatic representations such as graphs, flowcharts, and concept maps. Enhance problem-solving capabilities by integrating visual thinking with verbal insights, supporting multi-modal outputs including ASCII art and SVG. Facilitate iterative refinement and pattern recognition through a flexible visual element manipulation system.",
      "repository_url": "https://github.com/waldzellai/model-enhancement-servers",
      "homepage": "https://smithery.ai/server/@waldzellai/visual-reasoning",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "27",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@waldzellai_visual-reasoning.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "visualReasoning",
          "description": "A detailed tool for diagrammatic thinking and spatial representation.\nThis tool helps models create and manipulate visual representations of problems.\nIt can be used to develop system diagrams, flowcharts, concept maps, and other visual models.\n\nWhen to use this tool:\n- System architecture design\n- Algorithm visualization\n- Concept mapping and knowledge organization\n- Pattern recognition in complex data\n- Spatial problem solving\n\nKey features:\n- Create and manipulate abstract visual elements\n- Support for multiple visual representation types\n- Track iterations of visual thinking\n- Translate between verbal descriptions and visual representations\n- Generate visual insights from patterns\n\nParameters explained:\n- operation: The type of action to perform (create, update, delete, transform, observe)\n- elements: The visual elements to operate on\n- diagramId: Identifier for the diagram being created or modified\n- diagramType: The type of diagram (graph, flowchart, state diagram, etc.)\n- iteration: The current iteration of the visual reasoning process\n- observation/insight/hypothesis: Verbal reasoning about the visual representation\n- nextOperationNeeded: Whether another operation is needed in the visual reasoning process",
          "input_schema": {
            "type": "object",
            "properties": {
              "operation": {
                "type": "string",
                "enum": [
                  "create",
                  "update",
                  "delete",
                  "transform",
                  "observe"
                ],
                "description": "The type of operation to perform"
              },
              "elements": {
                "type": "array",
                "description": "The visual elements to operate on",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the element"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "node",
                        "edge",
                        "container",
                        "annotation"
                      ],
                      "description": "The type of visual element"
                    },
                    "label": {
                      "type": "string",
                      "description": "Text label for the element"
                    },
                    "properties": {
                      "type": "object",
                      "description": "Visual properties like position, size, color"
                    },
                    "source": {
                      "type": "string",
                      "description": "For edges: ID of the source element"
                    },
                    "target": {
                      "type": "string",
                      "description": "For edges: ID of the target element"
                    },
                    "contains": {
                      "type": "array",
                      "description": "For containers: IDs of contained elements",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              },
              "transformationType": {
                "type": "string",
                "enum": [
                  "rotate",
                  "move",
                  "resize",
                  "recolor",
                  "regroup"
                ],
                "description": "For transform operations: the type of transformation"
              },
              "diagramId": {
                "type": "string",
                "description": "Identifier for the diagram"
              },
              "diagramType": {
                "type": "string",
                "enum": [
                  "graph",
                  "flowchart",
                  "stateDiagram",
                  "conceptMap",
                  "treeDiagram",
                  "custom"
                ],
                "description": "The type of diagram being created or modified"
              },
              "iteration": {
                "type": "number",
                "description": "Current iteration of the visual reasoning process",
                "minimum": 0
              },
              "observation": {
                "type": "string",
                "description": "Observations about the current visual state"
              },
              "insight": {
                "type": "string",
                "description": "Insights derived from the visual representation"
              },
              "hypothesis": {
                "type": "string",
                "description": "Hypotheses based on the visual pattern"
              },
              "nextOperationNeeded": {
                "type": "boolean",
                "description": "Whether another operation is needed"
              }
            },
            "required": [
              "operation",
              "diagramId",
              "diagramType",
              "iteration",
              "nextOperationNeeded"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@waldzellai/visual-reasoning/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@waldzellai/visual-reasoning/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0530.@waldzellai_visual-reasoning_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 518
  }
}