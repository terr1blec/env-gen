{
  "labels": {
    "analysis": "The MCP Server leverages Grok AI's capabilities to provide intelligent chat interactions, image analysis, and function-calling functionality. It is designed to enhance user interactions through AI-powered responses and visual understanding, with seamless integration into applications via Cline. The core tools include chat completion, image understanding, and function execution based on user input.",
    "reasoning": "The primary functionality revolves around AI-powered interactions and services, which aligns with the \"AI/ML Tools\" category. The server's tools enable direct integration with AI capabilities, making this the most fitting primary label. Secondary labels reflect the use cases of image analysis and function-calling, which are covered by \"AI/ML Tools\" but can also be associated with \"Image Analysis\" or \"API Integration\" for structure.",
    "primary_label": "AI/ML Tools",
    "secondary_labels": [
      "Browser Automation",
      "API Integration"
    ],
    "custom_label": "Grok Integration",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 981,
    "server_name": "Grok Plugin",
    "rank_by_usage": 982,
    "usage_count": "2",
    "original_file": "../crawler/smithery/@Bob-lance_grok-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Bob-lance/grok-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 981,
      "name": "Grok Plugin",
      "author": "@Bob-lance/grok-mcp",
      "overview": "Leverage Grok AI's capabilities for chat, image analysis, and function calling directly within your applications. Enhance user interactions with intelligent responses and visual understanding. Integrate seamlessly with Cline for a powerful AI experience.",
      "repository_url": "https://github.com/Bob-lance/grok-mcp",
      "homepage": "https://smithery.ai/server/@Bob-lance/grok-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "2",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Bob-lance_grok-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "chat_completion",
          "description": "Deploy Server Grok Plugin @Bob-lance/grok-mcp Try in Playground chat_completion",
          "parameters": [
            {
              "name": "chat_completion",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "image_understanding",
          "description": "Analyze images using Grok AI vision capabilities (Note: Grok 3 may support image creation)",
          "parameters": [
            {
              "name": "image_understanding",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "function_calling",
          "description": "Use Grok AI to call functions based on user input",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Bob-lance/grok-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "xaiApiKey",
          "required": true,
          "description": "Grok AI API key (XAI_API_KEY)"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Bob-lance/grok-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0982.@Bob-lance_grok-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 960
  }
}