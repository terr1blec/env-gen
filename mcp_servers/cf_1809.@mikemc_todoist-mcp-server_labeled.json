{
  "labels": {
    "analysis": "The MCP Server facilitates seamless integration and automation of Todoist task management. It provides a comprehensive set of tools for creating, updating, retrieving, and managing projects, sections, tasks, and comments within Todoist. Its core functionality revolves around enhancing productivity by streamlining task organization and retrieval through programmatic control.",
    "reasoning": "The primary label \"Daily Productivity\" is chosen because the server's main purpose is to improve task management and organization, which directly enhances personal productivity. The secondary label \"Task Management\" is selected because it specifically addresses the management of tasks within Todoist, which aligns closely with productivity tools. The predefined category \"Daily Productivity\" covers the broad use case, while \"Task Management\" provides a more specific descriptor of the functionality.",
    "primary_label": "Daily Productivity",
    "secondary_labels": [
      "Daily Productivity"
    ],
    "custom_label": "Todoist Task Automation",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1808,
    "server_name": "Todoist Server",
    "rank_by_usage": 1809,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@mikemc_todoist-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mikemc/todoist-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1808,
      "name": "Todoist Server",
      "author": "@mikemc/todoist-mcp-server",
      "overview": "Integrate your Todoist tasks seamlessly with your applications. Manage and interact with your Todoist data using a powerful MCP server built in Python. Enhance your productivity by automating task management and retrieval with ease.",
      "repository_url": "https://github.com/mikemc/todoist-mcp-server",
      "homepage": "https://smithery.ai/server/@mikemc/todoist-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mikemc_todoist-mcp-server.json",
      "tools_count": 24,
      "tools": [
        {
          "name": "todoist_get_projects",
          "description": "Deploy Server Todoist Server Claim Server @mikemc/todoist-mcp-server Try in Playground todoist_get_projects",
          "parameters": [
            {
              "name": "todoist_get_projects",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "todoist_get_project",
          "description": "Deploy Server Todoist Server Claim Server @mikemc/todoist-mcp-server Try in Playground todoist_get_projects",
          "parameters": [
            {
              "name": "todoist_get_projects",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "todoist_add_project",
          "description": "Create a new project in Todoist Args: name: Name of the project color: Color of the project (optional) parent_id: ID of the parent project for creating sub-projects (optional) is_favorite: Whether the project should be marked as favorite (optional) view_style: View style of the project, either 'list' or 'board' (optional)",
          "parameters": []
        },
        {
          "name": "todoist_update_project",
          "description": "Update an existing project in Todoist Args: project_id: ID of the project to update name: New name for the project (optional) color: New color for the project (optional) is_favorite: Whether the project should be marked as favorite (optional) view_style: View style of the project, either 'list', 'board', or 'calendar' (optional)",
          "parameters": []
        },
        {
          "name": "todoist_delete_project",
          "description": "Deletes a project from the user's Todoist account Args: project_id: ID of the project to delete",
          "parameters": []
        },
        {
          "name": "todoist_get_sections",
          "description": "Get all sections from the user's Todoist account Args: project_id: Filter sections by project ID (optional)",
          "parameters": [
            {
              "name": "project_id",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "todoist_get_section",
          "description": "Get a single section from Todoist\n\nArgs:\n    section_id: ID of the section to retrieve",
          "parameters": []
        },
        {
          "name": "todoist_add_section",
          "description": "Create a new section in Todoist Args: name: Section name project_id: Project ID this section should belong to order: Order among other sections in a project (optional)",
          "parameters": [
            {
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "name": "order",
              "required": false,
              "type": "string"
            },
            {
              "name": "project_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "todoist_update_section",
          "description": "Updates a section in Todoist Args: section_id: ID of the section to update name: New name for the section",
          "parameters": []
        },
        {
          "name": "todoist_delete_section",
          "description": "Deletes a section from Todoist Args: section_id: ID of the section to delete",
          "parameters": []
        },
        {
          "name": "todoist_get_task",
          "description": "Get an active task from Todoist Args: task_id: ID of the task to retrieve",
          "parameters": []
        },
        {
          "name": "todoist_get_tasks",
          "description": "Get a list of tasks from Todoist with basic filters This is a wrapper around the Todoist API's get_tasks method that handles pagination automatically. By default, it will fetch up to 100 matching tasks. Set nmax=None to fetch ALL matching tasks across multiple API calls. For natural language filtering (like 'today', 'overdue'), use todoist_filter_tasks instead. Examples: # Get up to 100 tasks (default) todoist_get_tasks(ctx) # Get all tasks in a project (up to 100 by default) todoist_get_tasks(ctx, project_id=\"12345\") # Get first 500 tasks total todoist_get_tasks(ctx, nmax=500) # Get ALL tasks (unlimited) todoist_get_tasks(ctx, nmax=None) # Get specific tasks by ID todoist_get_tasks(ctx, ids=[\"task1\", \"task2\", \"task3\"]) Args: project_id: Filter tasks by project ID (optional) section_id: Filter tasks by section ID (optional) parent_id: Filter tasks by parent task ID (optional) label: Filter tasks by label name (optional) ids: A list of the IDs of the tasks to retrieve (optional) nmax: Maximum total number of tasks to return. Set to None for ALL matching tasks (default: 100) limit: Number of tasks to fetch per API request (default: 200, max: 200)",
          "parameters": []
        },
        {
          "name": "todoist_filter_tasks",
          "description": "Get tasks using Todoist's natural language filter This uses the new filter_tasks method for queries like 'today', 'overdue', 'priority 1', etc. Args: filter: Natural language filter like 'today', 'tomorrow', 'next week', 'priority 1', 'overdue' lang: Language for task content (e.g., 'en') (optional) nmax: Maximum total number of tasks to return. Set to None for ALL matching tasks (default: 100) limit: Number of tasks to fetch per API request (default: 200, max: 200)",
          "parameters": []
        },
        {
          "name": "todoist_add_task",
          "description": "Create a new task in Todoist with optional description, due date, and priority Args: content: The content/title of the task description: Detailed description of the task (optional) project_id: Task project ID. If not set, task is put to user's Inbox (optional) section_id: ID of section to put task into (optional) parent_id: Parent task ID (optional) order: Non-zero integer value used to sort tasks under the same parent (optional) labels: The task's labels (a list of names that may represent either personal or shared labels) (optional) priority: Task priority from 1 (normal) to 4 (urgent) (optional) due_string: Natural language due date like 'tomorrow', 'next Monday', 'Jan 23' (optional) due_date: Specific date in YYYY-MM-DD format relative to user's timezone (optional) due_datetime: Specific date and time in RFC3339 format in UTC (optional) due_lang: 2-letter code specifying language in case due_string is not written in English (optional) assignee_id: The responsible user ID (only applies to shared tasks) (optional) duration: A positive integer for the amount of duration_unit the task will take (optional) duration_unit: The unit of time that the duration field represents (minute or day) (optional) deadline_date: Specific date in YYYY-MM-DD format relative to user's timezone (optional) deadline_lang: 2-letter code specifying language of deadline (optional)",
          "parameters": []
        },
        {
          "name": "todoist_update_task",
          "description": "Update an existing task in Todoist Args: task_id: ID of the task to update content: New content/title for the task (optional) description: New description for the task (optional) labels: New labels for the task (optional) priority: New priority level from 1 (normal) to 4 (urgent) (optional) due_string: New due date in natural language like 'tomorrow', 'next Monday' (optional) due_date: New specific date in YYYY-MM-DD format (optional) due_datetime: New specific date and time in RFC3339 format in UTC (optional) due_lang: 2-letter code specifying language in case due_string is not written in English (optional) assignee_id: The responsible user ID or null to unset (for shared tasks) (optional) duration: A positive integer for the amount of duration_unit the task will take (optional) duration_unit: The unit of time that the duration field represents (minute or day) (optional) deadline_date: Specific date in YYYY-MM-DD format relative to user's timezone (optional) deadline_lang: 2-letter code specifying language of deadline (optional)",
          "parameters": []
        },
        {
          "name": "todoist_complete_task",
          "description": "Close a task in Todoist (i.e., mark the task as complete) Args: task_id: ID of the task to close",
          "parameters": []
        },
        {
          "name": "todoist_uncomplete_task",
          "description": "Reopen a task in Todoist (i.e., mark the task as incomplete) Args: task_id: ID of the task to reopen",
          "parameters": []
        },
        {
          "name": "todoist_move_task",
          "description": "Move a task to a different location Args: task_id: ID of the task to move parent_id: ID of the destination parent task (optional) section_id: ID of the destination section (optional) project_id: ID of the destination project (optional) Note: Only one of parent_id, section_id or project_id must be set.",
          "parameters": []
        },
        {
          "name": "todoist_delete_task",
          "description": "Delete a task from Todoist Args: task_id: ID of the task to delete",
          "parameters": []
        },
        {
          "name": "todoist_get_comment",
          "description": "Get a single comment from Todoist Args: comment_id: ID of the comment to retrieve",
          "parameters": []
        },
        {
          "name": "todoist_get_comments",
          "description": "Get comments for a task or project from Todoist Args: project_id: ID of the project to retrieve comments for (optional) task_id: ID of the task to retrieve comments for (optional) nmax: Maximum total number of comments to return. Set to None for ALL matching comments (default: 100) limit: Maximum number of comments per page (default: 200, max: 200) Note: Either project_id or task_id must be provided.",
          "parameters": []
        },
        {
          "name": "todoist_add_comment",
          "description": "Create a new comment on a task or project in Todoist Args: content: The text content of the comment (supports Markdown) project_id: ID of the project to add the comment to (optional) task_id: ID of the task to add the comment to (optional) uids_to_notify: List of user IDs to notify (optional) Note: Either project_id or task_id must be provided.",
          "parameters": []
        },
        {
          "name": "todoist_update_comment",
          "description": "Update an existing comment in Todoist Args: comment_id: ID of the comment to update content: New text content for the comment",
          "parameters": []
        },
        {
          "name": "todoist_delete_comment",
          "description": "Delete a comment from Todoist Args: comment_id: ID of the comment to delete",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mikemc/todoist-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "todoistApiToken",
          "required": true,
          "description": "Todoist API token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mikemc/todoist-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1809.@mikemc_todoist-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1609
  }
}