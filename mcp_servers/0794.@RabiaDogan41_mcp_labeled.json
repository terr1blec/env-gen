{
  "labels": {
    "analysis": "The MCP Server is dedicated to accessing and exploring European cultural heritage collections, artworks, and recommendations. Its core functionality revolves around searching, retrieving detailed information about cultural items, and providing AI-powered personalized suggestions based on user interests. The tools focus on artwork research, institutional browsing, and curation assisted by AI.",
    "reasoning": "The primary label \"Web Search & Research\" was chosen because the server's primary function is to search, retrieve, and provide detailed information about cultural heritage itemsâ€”akin to specialized research tools. The secondary label \"AI/ML Tools\" was added due to the AI-powered recommendation system, while \"Education\" also applies given the server's role in facilitating cultural learning.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "AI/ML Tools",
      "Education"
    ],
    "custom_label": "Cultural Heritage Discovery",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 793,
    "server_name": "Cultural Heritage Server",
    "rank_by_usage": 794,
    "usage_count": "7",
    "original_file": "../crawler/smithery/@RabiaDogan41_mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@RabiaDogan41/mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "search_cultural_heritage",
          "description": "\n    Search for cultural heritage items (artworks, artifacts, etc.) from European institutions.\n    \n    Args:\n        query: Search term (artist name, artwork title, type, etc.)\n        limit: Maximum number of results to return (default: 5)\n    \n    Returns:\n        Formatted list of cultural heritage items with details\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "limit": {
                "default": 5,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "title": "search_cultural_heritageArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_artwork_details",
          "description": "\n    Get detailed information about a specific artwork or cultural item.\n    \n    Args:\n        artwork_id: Unique identifier of the artwork\n    \n    Returns:\n        Detailed information about the artwork including description, provenance, and technical details\n    ",
          "input_schema": {
            "properties": {
              "artwork_id": {
                "title": "Artwork Id",
                "type": "string"
              }
            },
            "required": [
              "artwork_id"
            ],
            "title": "get_artwork_detailsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_collections_by_institution",
          "description": "\n    Get artworks and cultural items from a specific museum or cultural institution.\n    \n    Args:\n        institution_name: Name of the cultural institution (e.g., \"Louvre\", \"British Museum\")\n    \n    Returns:\n        List of cultural items from the specified institution\n    ",
          "input_schema": {
            "properties": {
              "institution_name": {
                "title": "Institution Name",
                "type": "string"
              }
            },
            "required": [
              "institution_name"
            ],
            "title": "get_collections_by_institutionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_cultural_recommendations",
          "description": "\n    Get AI-powered recommendations for cultural heritage items based on user interests.\n    \n    Args:\n        user_interest: User's cultural interests (e.g., \"modern art\", \"renaissance\", \"impressionist\")\n    \n    Returns:\n        Personalized recommendations for cultural heritage exploration\n    ",
          "input_schema": {
            "properties": {
              "user_interest": {
                "title": "User Interest",
                "type": "string"
              }
            },
            "required": [
              "user_interest"
            ],
            "title": "get_cultural_recommendationsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "search_cultural_heritage",
        "get_artwork_details",
        "get_collections_by_institution",
        "get_cultural_recommendations"
      ]
    },
    "server_info_crawled": {
      "id": 793,
      "name": "Cultural Heritage Server",
      "author": "@RabiaDogan41/mcp",
      "overview": "Provide access to European cultural heritage collections and artworks. Search, browse, and get detailed information about famous artworks from major European museums. Receive AI-powered personalized cultural recommendations based on user interests.",
      "repository_url": "https://github.com/RabiaDogan41/mcp",
      "homepage": "https://smithery.ai/server/@RabiaDogan41/mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "7",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@RabiaDogan41_mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "search_cultural_heritage",
          "description": "\n    Search for cultural heritage items (artworks, artifacts, etc.) from European institutions.\n    \n    Args:\n        query: Search term (artist name, artwork title, type, etc.)\n        limit: Maximum number of results to return (default: 5)\n    \n    Returns:\n        Formatted list of cultural heritage items with details\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "limit": {
                "default": 5,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "title": "search_cultural_heritageArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_artwork_details",
          "description": "\n    Get detailed information about a specific artwork or cultural item.\n    \n    Args:\n        artwork_id: Unique identifier of the artwork\n    \n    Returns:\n        Detailed information about the artwork including description, provenance, and technical details\n    ",
          "input_schema": {
            "properties": {
              "artwork_id": {
                "title": "Artwork Id",
                "type": "string"
              }
            },
            "required": [
              "artwork_id"
            ],
            "title": "get_artwork_detailsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_collections_by_institution",
          "description": "\n    Get artworks and cultural items from a specific museum or cultural institution.\n    \n    Args:\n        institution_name: Name of the cultural institution (e.g., \"Louvre\", \"British Museum\")\n    \n    Returns:\n        List of cultural items from the specified institution\n    ",
          "input_schema": {
            "properties": {
              "institution_name": {
                "title": "Institution Name",
                "type": "string"
              }
            },
            "required": [
              "institution_name"
            ],
            "title": "get_collections_by_institutionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_cultural_recommendations",
          "description": "\n    Get AI-powered recommendations for cultural heritage items based on user interests.\n    \n    Args:\n        user_interest: User's cultural interests (e.g., \"modern art\", \"renaissance\", \"impressionist\")\n    \n    Returns:\n        Personalized recommendations for cultural heritage exploration\n    ",
          "input_schema": {
            "properties": {
              "user_interest": {
                "title": "User Interest",
                "type": "string"
              }
            },
            "required": [
              "user_interest"
            ],
            "title": "get_cultural_recommendationsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@RabiaDogan41/mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@RabiaDogan41/mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0794.@RabiaDogan41_mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 776
  }
}