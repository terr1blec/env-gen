{
  "labels": {
    "analysis": "The MCP Server is designed to provide weather information and forecasting capabilities. Its core functionality revolves around delivering real-time weather data through a standardized interface, allowing applications to efficiently query weather conditions. The available tools—ping, health_check, get_weather, and compare_weather—reflect this primary purpose, focusing on weather-related operations and server reliability.",
    "reasoning": "The primary label \"Weather\" is chosen because the server's primary functionality is centered around providing weather data and forecasts. The secondary labels \"API Integration\" and \"Daily Productivity\" are relevant because the server serves as a backend service that applications can integrate with, and weather data is commonly used in productivity and planning tools. No custom label is needed as the predefined categories adequately cover the functionality.",
    "primary_label": "Weather",
    "secondary_labels": [
      "API Integration",
      "Daily Productivity"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 970,
    "server_name": "Weather Information Server",
    "rank_by_usage": 971,
    "usage_count": "3",
    "original_file": "../crawler/smithery/@crakcode_test_mcp_2.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@crakcode/test_mcp_2/mcp?config=eyJ1bml0cyI6ICJtZXRyaWMiLCAidGltZW91dCI6IDEwfQ==&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "ping",
          "description": "Simple ping tool to test server responsiveness and prevent timeouts.",
          "input_schema": {
            "properties": {},
            "title": "pingArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "health_check",
          "description": "Health check to verify server connectivity and status.",
          "input_schema": {
            "properties": {},
            "title": "health_checkArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather",
          "description": "Get current weather for a city.",
          "input_schema": {
            "properties": {
              "city": {
                "title": "City",
                "type": "string"
              },
              "units": {
                "default": "metric",
                "title": "Units",
                "type": "string"
              },
              "detailed": {
                "default": false,
                "title": "Detailed",
                "type": "boolean"
              }
            },
            "required": [
              "city"
            ],
            "title": "get_weatherArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "compare_weather",
          "description": "Compare weather between multiple cities.",
          "input_schema": {
            "properties": {
              "cities": {
                "items": {
                  "type": "string"
                },
                "title": "Cities",
                "type": "array"
              },
              "metric": {
                "default": "temperature",
                "title": "Metric",
                "type": "string"
              }
            },
            "required": [
              "cities"
            ],
            "title": "compare_weatherArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "ping",
        "health_check",
        "get_weather",
        "compare_weather"
      ]
    },
    "server_info_crawled": {
      "id": 970,
      "name": "Weather Information Server",
      "author": "@crakcode/test_mcp_2",
      "overview": "Provide real-time weather data and forecasts through a standardized interface. Enable applications to query weather conditions efficiently and reliably. Enhance user experiences with accurate and up-to-date meteorological information.",
      "repository_url": "https://github.com/crakcode/test_mcp_2",
      "homepage": "https://smithery.ai/server/@crakcode/test_mcp_2",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "3",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@crakcode_test_mcp_2.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "ping",
          "description": "Simple ping tool to test server responsiveness and prevent timeouts.",
          "input_schema": {
            "properties": {},
            "title": "pingArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "health_check",
          "description": "Health check to verify server connectivity and status.",
          "input_schema": {
            "properties": {},
            "title": "health_checkArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather",
          "description": "Get current weather for a city.",
          "input_schema": {
            "properties": {
              "city": {
                "title": "City",
                "type": "string"
              },
              "units": {
                "default": "metric",
                "title": "Units",
                "type": "string"
              },
              "detailed": {
                "default": false,
                "title": "Detailed",
                "type": "boolean"
              }
            },
            "required": [
              "city"
            ],
            "title": "get_weatherArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "compare_weather",
          "description": "Compare weather between multiple cities.",
          "input_schema": {
            "properties": {
              "cities": {
                "items": {
                  "type": "string"
                },
                "title": "Cities",
                "type": "array"
              },
              "metric": {
                "default": "temperature",
                "title": "Metric",
                "type": "string"
              }
            },
            "required": [
              "cities"
            ],
            "title": "compare_weatherArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"units\": \"metric\",\n  \"timeout\": 10\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@crakcode/test_mcp_2/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"units\": \"metric\",\n  \"timeout\": 10\n}",
      "python_sdk_url": "https://server.smithery.ai/@crakcode/test_mcp_2/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0971.@crakcode_test_mcp_2_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 949
  }
}