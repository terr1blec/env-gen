{
  "labels": {
    "analysis": "The MCP Server is primarily focused on Grafana integration, providing tools for monitoring, alert management, incident response, and data querying. Key functionalities include managing Grafana dashboards, querying Prometheus and Loki data sources, handling incidents and on-call schedules, and accessing alert rules. The server enhances workflows related to monitoring, incident response, and operations management by integrating these Grafana features into an LLM environment.",
    "reasoning": "The primary label is \"Operating System\" because the server deals with managing monitoring tools and system-level activities related to alerts, incidents, and on-call schedules. Secondary labels \"Data Analysis & Processing\" and \"Development Tools\" are selected because the server allows querying data from Prometheus and Loki, which are used for analytics and monitoring, and integrates with Grafana, which is often used in development and operations contexts.",
    "primary_label": "Operating System",
    "secondary_labels": [
      "Data Analysis & Processing",
      "Development Tools"
    ],
    "custom_label": "Monitoring and Incident Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 828,
    "server_name": "Grafana Server Integration",
    "rank_by_usage": 829,
    "usage_count": "6",
    "original_file": "../crawler/smithery/@GetSherlog_mcp-grafana.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@GetSherlog/mcp-grafana/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 828,
      "name": "Grafana Server Integration",
      "author": "@GetSherlog/mcp-grafana",
      "overview": "Provide seamless access to your Grafana instance and its ecosystem through a set of configurable tools. Search dashboards, query datasources like Prometheus and Loki, manage incidents, alerts, and on-call schedules directly from your MCP client. Enhance your monitoring and incident response workflows by integrating Grafana data and operations into your LLM environment.",
      "repository_url": "https://github.com/GetSherlog/mcp-grafana",
      "homepage": "https://smithery.ai/server/@GetSherlog/mcp-grafana",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "6",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@GetSherlog_mcp-grafana.json",
      "tools_count": 26,
      "tools": [
        {
          "name": "add_activity_to_incident",
          "description": "Deploy Server Grafana Server Integration @GetSherlog/mcp-grafana Try in Playground add_activity_to_incident",
          "parameters": [
            {
              "name": "add_activity_to_incident",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_incident",
          "description": "Description not available",
          "parameters": [
            {
              "name": "create_incident",
              "required": false,
              "type": "string"
            },
            {
              "name": "Create",
              "required": false,
              "type": "string"
            },
            {
              "name": "an",
              "required": false,
              "type": "string"
            },
            {
              "name": "incident",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_alert_rule_by_uid",
          "description": "Retrieves detailed information about a specific alert rule by its UID.",
          "parameters": [
            {
              "name": "get_alert_rule_by_uid",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_current_oncall_users",
          "description": "Get users currently on-call for a specific schedule. A schedule is a calendar-based system defining when team members are on-call. This tool will return info about all users currently on-call for the schedule, regardless of team.",
          "parameters": [
            {
              "name": "get_current_oncall_users",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_dashboard_by_uid",
          "description": "Description not available",
          "parameters": [
            {
              "name": "get_dashboard_by_uid",
              "required": false,
              "type": "string"
            },
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "dashboard",
              "required": false,
              "type": "string"
            },
            {
              "name": "by",
              "required": false,
              "type": "string"
            },
            {
              "name": "uid",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_datasource_by_name",
          "description": "Get datasource by name",
          "parameters": [
            {
              "name": "get_datasource_by_name",
              "required": false,
              "type": "string"
            },
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "datasource",
              "required": false,
              "type": "string"
            },
            {
              "name": "by",
              "required": false,
              "type": "string"
            },
            {
              "name": "name",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_datasource_by_uid",
          "description": "Get datasource by uid",
          "parameters": [
            {
              "name": "get_datasource_by_uid",
              "required": false,
              "type": "string"
            },
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "datasource",
              "required": false,
              "type": "string"
            },
            {
              "name": "by",
              "required": false,
              "type": "string"
            },
            {
              "name": "uid",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_incident",
          "description": "Get a single incident by ID. Returns the full incident details including title, status, severity, and other metadata.",
          "parameters": [
            {
              "name": "get_incident",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_oncall_shift",
          "description": "Get details for a specific OnCall shift. A shift represents a designated time period within a rotation when a team or individual is actively on-call",
          "parameters": [
            {
              "name": "get_oncall_shift",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_alert_rules",
          "description": "Lists alert rules with their current states (pending, firing, error, recovering, inactive) and labels. Inactive state means the alert state is normal, not firing.",
          "parameters": [
            {
              "name": "list_alert_rules",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_contact_points",
          "description": "Lists notification contact points with their type, name, and configuration.",
          "parameters": [
            {
              "name": "list_contact_points",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_datasources",
          "description": "Description not available",
          "parameters": [
            {
              "name": "list_datasources",
              "required": false,
              "type": "string"
            },
            {
              "name": "List",
              "required": false,
              "type": "string"
            },
            {
              "name": "datasources",
              "required": false,
              "type": "string"
            },
            {
              "name": "type",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_incidents",
          "description": "Description not available",
          "parameters": [
            {
              "name": "drill",
              "required": false,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            },
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "status",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_loki_label_names",
          "description": "List all available label names in a Loki datasource for the given time range. Returns the set of unique label keys found in the logs.",
          "parameters": [
            {
              "name": "list_loki_label_names",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_loki_label_values",
          "description": "Retrieve all possible values for a specific label in Loki within the given time range. Useful for exploring available options for filtering logs.",
          "parameters": [
            {
              "name": "list_loki_label_values",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_oncall_schedules",
          "description": "List OnCall schedules. A schedule is a calendar-based system defining when team members are on-call. Optionally provide a scheduleId to get details for a specific schedule",
          "parameters": [
            {
              "name": "list_oncall_schedules",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_oncall_teams",
          "description": "List teams from Grafana OnCall",
          "parameters": [
            {
              "name": "list_oncall_teams",
              "required": false,
              "type": "string"
            },
            {
              "name": "page",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_oncall_users",
          "description": "List users from Grafana OnCall. If user ID is provided, returns details for that specific user. If username is provided, returns the user matching that username",
          "parameters": [
            {
              "name": "list_oncall_users",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_prometheus_label_names",
          "description": "List the label names in a Prometheus datasource",
          "parameters": [
            {
              "name": "list_prometheus_label_names",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_prometheus_label_values",
          "description": "Get the values of a label in Prometheus",
          "parameters": [
            {
              "name": "list_prometheus_label_values",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_prometheus_metric_metadata",
          "description": "List Prometheus metric metadata",
          "parameters": [
            {
              "name": "list_prometheus_metric_metadata",
              "required": false,
              "type": "string"
            },
            {
              "name": "List",
              "required": false,
              "type": "string"
            },
            {
              "name": "Prometheus",
              "required": false,
              "type": "string"
            },
            {
              "name": "metric",
              "required": false,
              "type": "string"
            },
            {
              "name": "metadata",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_prometheus_metric_names",
          "description": "List metric names in a Prometheus datasource that match the given regex",
          "parameters": [
            {
              "name": "list_prometheus_metric_names",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_loki_logs",
          "description": "Query and retrieve log entries or metric values from a Loki datasource using LogQL. Returns either log lines or numeric values with timestamps and labels. Use `query_loki_stats` first to check stream size, then `list_loki_label_names` and `list_loki_label_values` to verify labels exist. Supports full LogQL syntax including both log queries and metric queries (e.g., rate, count_over_time).",
          "parameters": [
            {
              "name": "query_loki_logs",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_loki_stats",
          "description": "Query statistics about log streams in a Loki datasource, using LogQL selectors to select streams",
          "parameters": []
        },
        {
          "name": "query_prometheus",
          "description": "Query Prometheus using a range or instant request",
          "parameters": [
            {
              "name": "query_prometheus",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_dashboards",
          "description": "Search for dashboards",
          "parameters": [
            {
              "name": "search_dashboards",
              "required": false,
              "type": "string"
            },
            {
              "name": "Search",
              "required": false,
              "type": "string"
            },
            {
              "name": "for",
              "required": false,
              "type": "string"
            },
            {
              "name": "dashboards",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@GetSherlog/mcp-grafana/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "grafanaApiKey",
          "required": true,
          "description": "API token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@GetSherlog/mcp-grafana/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0829.@GetSherlog_mcp-grafana_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 810
  }
}