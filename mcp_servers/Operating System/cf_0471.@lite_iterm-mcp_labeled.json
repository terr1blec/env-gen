{
  "labels": {
    "analysis": "The MCP Server \"iTerm MCP\" is designed to provide access and control over an iTerm terminal session. It enables users to write commands to the terminal, read its output, and send control characters (like interrupting processes). This indicates that the server primarily functions as a bridge between users (or other systems) and terminal operations, allowing indirect interaction with the operating system via terminal commands.",
    "reasoning": "The primary label \"Operating System\" is chosen because the server's core function revolves around terminal operations, which are fundamental to interacting with the operating system. The secondary label \"Browser Automation\" is included because the tools enable automated command execution and output retrieval, which can be useful for scripting and automation tasks. A custom label is not needed as the predefined categories cover the functionality well.",
    "primary_label": "Operating System",
    "secondary_labels": [
      "Browser Automation"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 470,
    "server_name": "iTerm MCP",
    "rank_by_usage": 471,
    "usage_count": "39",
    "original_file": "../crawler/smithery/@lite_iterm-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@lite/iterm-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 470,
      "name": "iTerm MCP",
      "author": "@lite/iterm-mcp",
      "overview": "Access your iTerm session and control terminal commands seamlessly.",
      "repository_url": "https://github.com/lite/iterm-mcp",
      "homepage": "https://smithery.ai/server/@lite/iterm-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "39",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@lite_iterm-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "write_to_terminal",
          "description": "Deploy Server @lite/iterm-mcp Try in Playground write_to_terminal",
          "parameters": [
            {
              "name": "write_to_terminal",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "read_terminal_output",
          "description": "Reads the output from the active iTerm terminal",
          "parameters": [
            {
              "name": "read_terminal_output",
              "required": false,
              "type": "string"
            },
            {
              "name": "linesOfOutput",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "send_control_character",
          "description": "Sends a control character to the active iTerm terminal (e.g., Control-C)",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@lite/iterm-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@lite/iterm-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0471.@lite_iterm-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 461
  }
}