{
  "labels": {
    "analysis": "The MetaMCP Server is designed to manage multiple MCP servers by enabling dynamic routing of requests and configurations across various MCPs. Its core functionality involves server management, routing, and configuration handling. The available tool (Optional Settings) suggests a focus on authentication and management across multiple instances. This implies it acts as a central hub or orchestrator for MCP servers, facilitating coordinated operations.",
    "reasoning": "The \"Server Management\" functionality is best captured by the \"Operating System\" category, as it involves managing multiple instances and routing which are system-level tasks. The dynamic routing aspect ties into \"API Integration,\" as it coordinates between different MCP servers. No custom label is needed as the predefined categories sufficiently describe the functionality.",
    "primary_label": "Operating System",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 975,
    "server_name": "MetaMCP Server",
    "rank_by_usage": 976,
    "usage_count": "3",
    "original_file": "../crawler/smithery/@metatool-ai_mcp-server-metamcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@metatool-ai/mcp-server-metamcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 975,
      "name": "MetaMCP Server",
      "author": "@metatool-ai/mcp-server-metamcp",
      "overview": "Manage multiple MCP servers seamlessly. Route requests and configurations dynamically across various MCPs.",
      "repository_url": "https://github.com/metatool-ai/mcp-server-metamcp",
      "homepage": "https://smithery.ai/server/@metatool-ai/mcp-server-metamcp",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "3",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@metatool-ai_mcp-server-metamcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "Optional Settings",
          "description": "Access and manage servers by signing in.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@metatool-ai/mcp-server-metamcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "metamcpApiKey",
          "required": true,
          "description": "The API key from metamcp.com/api-keys. Required."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@metatool-ai/mcp-server-metamcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0976.@metatool-ai_mcp-server-metamcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 954
  }
}