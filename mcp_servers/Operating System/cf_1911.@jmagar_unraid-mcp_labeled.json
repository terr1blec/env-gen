{
  "labels": {
    "analysis": "The Unraid MCP Server acts as a natural language interface for managing Unraid server systems, enabling users to interact with various server components (Docker, VMs, disk arrays, shares, etc.) through AI-powered conversations. It provides tools for monitoring, configuration, and administration tasks, abstracting complex CLI operations into simple commands. The server excels in system monitoring, virtual machine/container management, disk operations, and user/api management.",
    "reasoning": "The primary label is chosen because the server's core functionality revolves around server management, specifically for Unraid systems. Secondary labels are selected based on the specific toolset (Operating System for system-level management) and the conversational AI aspect of the interface (AI/ML Tools). A custom label is added to specifically identify the platform specialization.",
    "primary_label": "Operating System",
    "secondary_labels": [
      "Operating System",
      "AI/ML Tools"
    ],
    "custom_label": "Unraid Server Administration",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1910,
    "server_name": "Unraid MCP Server",
    "rank_by_usage": 1911,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@jmagar_unraid-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@jmagar/unraid-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1910,
      "name": "Unraid MCP Server",
      "author": "@jmagar/unraid-mcp",
      "overview": "The Unraid MCP Server is a Python-based bridge that enables AI assistants to interact with Unraid servers through natural language. Using the Model Context Protocol (MCP) with stdio transport, it provides comprehensive management capabilities including system monitoring, array operations, Docker container management, VM control, disk operations, user administration, API key management, remote access configuration, notification handling, and share management. This integration allows users to query system status, manage resources, and perform administrative tasks through conversational AI, eliminating the need for command-line expertise while maintaining robust error handling, timeout management, and detailed logging for reliable server management.",
      "repository_url": "https://github.com/jmagar/unraid-mcp",
      "homepage": "https://smithery.ai/server/@jmagar/unraid-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@jmagar_unraid-mcp.json",
      "tools_count": 17,
      "tools": [
        {
          "name": "get_docker_networks",
          "description": "Deploy Server Unraid MCP Server @jmagar/unraid-mcp Try in Playground get_docker_networks",
          "parameters": [
            {
              "name": "get_docker_networks",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_vm_details",
          "description": "Get detailed information about a specific virtual machine",
          "parameters": [
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            },
            {
              "name": "vm_name",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_system_info",
          "description": "Get system information in a human-readable format",
          "parameters": [
            {
              "name": "get_system_info",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_containers",
          "description": "List Docker containers in a human-readable way",
          "parameters": [
            {
              "name": "list_containers",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "format_array_status",
          "description": "Get formatted array status in a human-readable way",
          "parameters": [
            {
              "name": "format_array_status",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_vms",
          "description": "List virtual machines in a human-readable way",
          "parameters": [
            {
              "name": "list_vms",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_network_info",
          "description": "Get network information",
          "parameters": [
            {
              "name": "get_network_info",
              "required": false,
              "type": "string"
            },
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "network",
              "required": false,
              "type": "string"
            },
            {
              "name": "information",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_notifications",
          "description": "Description not available",
          "parameters": [
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            },
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "importance",
              "required": false,
              "type": "string"
            },
            {
              "name": "notification_type",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_notification",
          "description": "Create a notification",
          "parameters": [
            {
              "name": "link",
              "required": false,
              "type": "string"
            },
            {
              "name": "title",
              "required": true,
              "type": "string"
            },
            {
              "name": "subject",
              "required": true,
              "type": "string"
            },
            {
              "name": "importance",
              "required": false,
              "type": "string"
            },
            {
              "name": "description",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_shares",
          "description": "Get information about network shares",
          "parameters": [
            {
              "name": "get_shares",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_share_details",
          "description": "Get detailed information about a specific share",
          "parameters": [
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            },
            {
              "name": "share_name",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_disks",
          "description": "Get information about all disks",
          "parameters": [
            {
              "name": "get_disks",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_disk_details",
          "description": "Get information about a specific disk",
          "parameters": [
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            },
            {
              "name": "disk_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_users",
          "description": "Get information about all users",
          "parameters": [
            {
              "name": "get_users",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_api_keys",
          "description": "Get information about all API keys",
          "parameters": [
            {
              "name": "get_api_keys",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_unassigned_devices",
          "description": "Get information about unassigned devices",
          "parameters": [
            {
              "name": "get_unassigned_devices",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_parity_history",
          "description": "Get parity check history",
          "parameters": [
            {
              "name": "get_parity_history",
              "required": false,
              "type": "string"
            },
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "parity",
              "required": false,
              "type": "string"
            },
            {
              "name": "check",
              "required": false,
              "type": "string"
            },
            {
              "name": "history",
              "required": false,
              "type": "string"
            },
            {
              "name": "ctx",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@jmagar/unraid-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "unraidApiKey",
          "required": true,
          "description": "The API key used for authenticating with the Unraid API"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@jmagar/unraid-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1911.@jmagar_unraid-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1686
  }
}