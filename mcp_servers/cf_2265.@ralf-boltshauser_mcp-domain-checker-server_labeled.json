{
  "labels": {
    "analysis": "The DomainGenuis MCP Server is a specialized domain availability checking service that provides real-time domain registration status and pricing information. It integrates with Vercel's API to offer intelligent TLD handling and comprehensive responses, making it essential for AI-powered domain search tools. The core functionality revolves around domain name analysis and registration enablement.",
    "reasoning": "The primary label reflects the server's direct involvement in domain-related operations. Secondary labels are chosen due to its use of APIs and potential for financial/registration transactions. No custom label is needed as the predefined categories cover its functionality well.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "API Integration",
      "E-commerce"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2264,
    "server_name": "DomainGenuis MCP Server",
    "rank_by_usage": 2265,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@ralf-boltshauser_mcp-domain-checker-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ralf-boltshauser/mcp-domain-checker-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2264,
      "name": "DomainGenuis MCP Server",
      "author": "@ralf-boltshauser/mcp-domain-checker-server",
      "overview": "The DomainGenius MCP server is a powerful domain availability checking service that powers the domain search functionality of DomainGenius. This server provides real-time domain availability checks and pricing information through integration with Vercel's API. It features intelligent TLD handling (automatically defaulting to .com when no TLD is specified) and delivers comprehensive responses including domain availability status, registration pricing, and detailed error information. Built with TypeScript and following the ModelContextProtocol (MCP) specification, this server enables seamless integration with AI-powered domain search tools, making it an essential component of the DomainGenius platform's domain discovery capabilities.",
      "repository_url": "https://github.com/ralf-boltshauser/mcp-domain-checker-server",
      "homepage": "https://smithery.ai/server/@ralf-boltshauser/mcp-domain-checker-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ralf-boltshauser_mcp-domain-checker-server.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "check-domain",
          "description": "Deploy Server DomainGenuis MCP Server @ralf-boltshauser/mcp-domain-checker-server Try in Playground check-domain",
          "parameters": [
            {
              "name": "domain",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@ralf-boltshauser/mcp-domain-checker-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "vercelApiKey",
          "required": true,
          "description": "The API key for accessing the Vercel API."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@ralf-boltshauser/mcp-domain-checker-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2265.@ralf-boltshauser_mcp-domain-checker-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1948
  }
}