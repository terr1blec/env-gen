{
  "labels": {
    "analysis": "The MCP Server from JFrog focuses on managing repositories, tracking builds, and overseeing the release lifecycle within the JFrog platform. It provides tools for repository creation (local, remote, virtual), build management, runtime cluster monitoring, environment and project management, and advanced artifact querying using AQL. The server is heavily geared toward artifact management, package information retrieval, and vulnerability tracking, making it a central hub for DevOps and software development workflows.",
    "reasoning": "The primary functionality revolves around repository and artifact management, aligning it closely with database operations and data processing, particularly for build artifacts. Secondary functionality includes monitoring builds and runtime clusters, which fits under build and deployment tools. There is no specific predefined category for artifact management, but the closest match is \"Database Operations\" due to the querying and management of artifact repositories.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Development Tools"
    ],
    "custom_label": "Artifact Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1420,
    "server_name": "JFrog MCP Server",
    "rank_by_usage": 1421,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@jfrog_mcp-jfrog.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@jfrog/mcp-jfrog/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1420,
      "name": "JFrog MCP Server",
      "author": "@jfrog/mcp-jfrog",
      "overview": "Manage your repositories, track builds, and oversee the release lifecycle seamlessly. Leverage powerful AQL queries to search for artifacts and monitor runtime clusters effectively. Enhance your JFrog platform experience with this integrated MCP server.",
      "repository_url": "https://github.com/jfrog/mcp-jfrog",
      "homepage": "https://smithery.ai/server/@jfrog/mcp-jfrog",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@jfrog_mcp-jfrog.json",
      "tools_count": 21,
      "tools": [
        {
          "name": "jfrog_check_availability",
          "description": "Deploy Server JFrog MCP Server @jfrog/mcp-jfrog Try in Playground jfrog_check_availability",
          "parameters": [
            {
              "name": "jfrog_check_availability",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_create_local_repository",
          "description": "Create a new local repository in artifactroy",
          "parameters": [
            {
              "name": "jfrog_create_local_repository",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_create_remote_repository",
          "description": "Create a new remote repository in Artifactory to proxy external package registries",
          "parameters": [
            {
              "name": "suppressPomConsistencyChecks",
              "required": false,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            },
            {
              "name": "missedRetrievalCachePeriodSecs",
              "required": false,
              "type": "string"
            },
            {
              "name": "unusedArtifactsCleanupPeriodHours",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_create_virtual_repository",
          "description": "Create a new virtual repository in Artifactory that aggregates multiple repositories",
          "parameters": [
            {
              "name": "jfrog_create_virtual_repository",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_set_folder_property",
          "description": "Set properties on a folder in Artifactory, with optional recursive application",
          "parameters": [
            {
              "name": "jfrog_set_folder_property",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_list_repositories",
          "description": "List all repositories in Artifactory with optional filtering by type, package type, and project",
          "parameters": [
            {
              "name": "jfrog_list_repositories",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_list_builds",
          "description": "return a list of all my build in the jfrog platform",
          "parameters": [
            {
              "name": "jfrog_list_builds",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_get_specific_build",
          "description": "Get details for a specific build by name, optionally scoped to a project",
          "parameters": [
            {
              "name": "jfrog_get_specific_build",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_list_runtime_clusters",
          "description": "return a list of all my runtime clusters in the jfrog platform",
          "parameters": [
            {
              "name": "jfrog_list_runtime_clusters",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_get_runtime_specific_cluster",
          "description": "return a runtime cluster by id",
          "parameters": [
            {
              "name": "jfrog_get_runtime_specific_cluster",
              "required": false,
              "type": "string"
            },
            {
              "name": "clusterId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_list_running_images",
          "description": "List all running container images across runtime clusters with their security and operational status",
          "parameters": [
            {
              "name": "jfrog_list_running_images",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_list_environments",
          "description": "Get a list of all environments types (e.g. dev, prod, etc.) in the JFrog platform with their details",
          "parameters": [
            {
              "name": "jfrog_list_environments",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_list_projects",
          "description": "Get a list of all projects in the JFrog platform with their details",
          "parameters": [
            {
              "name": "jfrog_list_projects",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_create_project",
          "description": "Create a new project in the JFrog platform",
          "parameters": [
            {
              "name": "jfrog_create_project",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_get_specific_project",
          "description": "Get detailed information about a specific project in the JFrog platform",
          "parameters": [
            {
              "name": "jfrog_get_specific_project",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_execute_aql_query",
          "description": "Execute an Artifactory Query Language (AQL) query to search for artifacts, builds, or other entities in JFrog Artifactory. AQL is a powerful query language for searching and filtering artifacts in Artifactory repositories. It supports complex criteria, sorting, pagination, and more.",
          "parameters": [
            {
              "name": "jfrog_execute_aql_query",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_get_package_info",
          "description": "Useful for when you need to get publicly available information about a software package. it will provide you with the following information on it, if available in public sources: a short description of the package, its latest published version, the software license this software is distributed under, along with urls of its version control system, its homepage and whether it is known to be a malicious package (in any version).",
          "parameters": [
            {
              "name": "jfrog_get_package_info",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_get_package_versions",
          "description": "Useful for when you need to get a list of versions of a publicly available package. it can tell you each version's publication date. Can also filter based on version vulnerability status.",
          "parameters": [
            {
              "name": "jfrog_get_package_versions",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_get_package_version_vulnerabilities",
          "description": "Useful for when you need the list of known vulnerabilities affecting a specific version of an open source package.",
          "parameters": [
            {
              "name": "jfrog_get_package_version_vulnerabilities",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_get_vulnerability_info",
          "description": "Useful for when you need to get a specific vulnerability information, including its affected packages and versions.",
          "parameters": [
            {
              "name": "jfrog_get_vulnerability_info",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "jfrog_get_package_curation_status",
          "description": "Useful for checking the curation status of a specific package version. Returns one of the following statuses: approved, blocked, inconclusive.",
          "parameters": [
            {
              "name": "jfrog_get_package_curation_status",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@jfrog/mcp-jfrog/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "jfrogAccessToken",
          "required": true,
          "description": "Your JFrog access token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@jfrog/mcp-jfrog/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1421.@jfrog_mcp-jfrog_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1324
  }
}