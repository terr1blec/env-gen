{
  "labels": {
    "analysis": "The MCP Server \"ntfy-me-mcp\" is primarily focused on sending and managing real-time notifications via the ntfy service. It enables AI assistants to deliver notifications for task completion, errors, or milestones without requiring constant user monitoring. The server supports both public and self-hosted ntfy servers, with features like URL detection for clickable actions and markdown formatting for rich notifications. Additionally, it includes a tool to fetch cached messages, allowing users to retrieve and search through their notification history. The main benefit is streamlined communication between AI systems and users.",
    "reasoning": "The primary label \"Communication Tools\" is chosen because the server's core functionality revolves around sending and managing notifications, which is a key aspect of communication. The secondary label \"AI/ML Tools\" is chosen because the server is designed to work with AI assistants to enhance user notifications. The custom label \"Notification Management\" describes the unique notification-handling capabilities not fully covered by predefined categories.",
    "primary_label": "Communication Tools",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": "Notification Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 392,
    "server_name": "ntfy-me-mcp",
    "rank_by_usage": 393,
    "usage_count": "62",
    "original_file": "../crawler/smithery/@gitmotion_ntfy-me-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@gitmotion/ntfy-me-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 392,
      "name": "ntfy-me-mcp",
      "author": "@gitmotion/ntfy-me-mcp",
      "overview": "Send real-time notifications to your devices via the ntfy service, enabling AI assistants to notify you upon task completion, errors, or milestones without constant monitoring.\n\nBenefit from intelligent features like automatic URL detection for clickable actions and smart markdown formatting for rich notifications. Securely support both public and self-hosted ntfy servers with token authentication and easy setup via npm, Docker, or VS Code integration.",
      "repository_url": "https://github.com/gitmotion/ntfy-me-mcp",
      "homepage": "https://smithery.ai/server/@gitmotion/ntfy-me-mcp",
      "remote_or_local": "Remote",
      "license": "GPL-3.0",
      "usage_count": "62",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@gitmotion_ntfy-me-mcp.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "ntfy_me",
          "description": "Deploy Server ntfy-me-mcp @gitmotion/ntfy-me-mcp Try in Playground",
          "parameters": []
        },
        {
          "name": "ntfy_me_fetch",
          "description": "Fetch cached messages from an ntfy server topic. Use this tool when the user asks to 'show notifications', 'get my messages', 'show my alerts', 'find notifications', 'search notifications', or any similar request. Great for finding recent notifications, checking message history, or searching for specific notifications by content, title, tags, or priority.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@gitmotion/ntfy-me-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@gitmotion/ntfy-me-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0393.@gitmotion_ntfy-me-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 387
  }
}