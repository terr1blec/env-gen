{
  "labels": {
    "analysis": "The MCP Server specializes in integrating with Freshservice, a popular IT service management platform. It provides a wide range of tools for managing IT service tickets, handling requesters and agents, managing products and service items, and interacting with knowledge bases (solution articles). The server's tools are focused on automating and streamlining IT operations, ticket management, and support workflows by enabling direct API interactions with Freshservice's data structures. This server enables AI assistants to perform IT support functions, such as creating, updating, and filtering tickets, managing requesters and agents, and handling knowledge base articles.",
    "reasoning": "The primary label \"IT Service Management\" was chosen because the server's core functionality revolves around managing IT service tickets, requesters, agents, and knowledge bases within the Freshservice platform. The secondary labels \"API Integration\" and \"Database Operations\" were selected because the server heavily relies on API interactions with Freshservice's data structures and provides tools for querying, creating, and updating various types of data within the platform. No custom label was deemed necessary as the predefined categories adequately cover the server's functionality.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "API Integration",
      "Database Operations"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 272,
    "server_name": "Freshservice Integration Server",
    "rank_by_usage": 273,
    "usage_count": "138",
    "original_file": "../crawler/smithery/@effytech_freshservice_mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@effytech/freshservice_mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 272,
      "name": "Freshservice Integration Server",
      "author": "@effytech/freshservice_mcp",
      "overview": "Enable AI assistants to manage IT service tickets and operations by integrating directly with Freshservice. Automate ticket creation, updates, and asset management to streamline your IT support workflows. Accelerate routine IT service tasks with seamless AI-driven interactions.",
      "repository_url": "https://github.com/effytech/freshservice_mcp",
      "homepage": "https://smithery.ai/server/@effytech/freshservice_mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "138",
      "success_rate": "99.42%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@effytech_freshservice_mcp.json",
      "tools_count": 59,
      "tools": [
        {
          "name": "get_ticket_fields",
          "description": "Deploy Server Freshservice Integration Server @effytech/freshservice_mcp Try in Playground get_ticket_fields",
          "parameters": [
            {
              "name": "get_ticket_fields",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_tickets",
          "description": "Get tickets from Freshservice with pagination support.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "type": "string"
            },
            {
              "name": "per_page",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_ticket",
          "description": "Create a ticket in Freshservice.",
          "parameters": [
            {
              "name": "create_ticket",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_ticket",
          "description": "Update a ticket in Freshservice.",
          "parameters": [
            {
              "name": "ticket_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "ticket_fields",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "filter_tickets",
          "description": "Filter the tickets in Freshservice.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "workspace_id",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_ticket",
          "description": "Delete a ticket in Freshservice.",
          "parameters": [
            {
              "name": "delete_ticket",
              "required": false,
              "type": "string"
            },
            {
              "name": "ticket_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_ticket_by_id",
          "description": "Get a ticket in Freshservice.",
          "parameters": [
            {
              "name": "get_ticket_by_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "ticket_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_service_items",
          "description": "Get list of service items from Freshservice.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "type": "string"
            },
            {
              "name": "per_page",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_requested_items",
          "description": "Fetch requested items for a specific ticket if the ticket is a service request.",
          "parameters": [
            {
              "name": "get_requested_items",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_service_request",
          "description": "Create a service request in Freshservice.",
          "parameters": [
            {
              "name": "create_service_request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "send_ticket_reply",
          "description": "Send reply to a ticket in Freshservice.",
          "parameters": [
            {
              "name": "send_ticket_reply",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_ticket_note",
          "description": "Create a note for a ticket in Freshservice.",
          "parameters": [
            {
              "name": "body",
              "required": true,
              "type": "string"
            },
            {
              "name": "ticket_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_ticket_conversation",
          "description": "Update a conversation for a ticket in Freshservice.",
          "parameters": [
            {
              "name": "update_ticket_conversation",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_all_ticket_conversation",
          "description": "List all conversation of a ticket in freshservice.",
          "parameters": [
            {
              "name": "list_all_ticket_conversation",
              "required": false,
              "type": "string"
            },
            {
              "name": "ticket_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_all_products",
          "description": "List all the products from Freshservice.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "type": "string"
            },
            {
              "name": "per_page",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_products_by_id",
          "description": "Get product by product ID in Freshservice.",
          "parameters": [
            {
              "name": "get_products_by_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "product_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_product",
          "description": "Create a product in Freshservice.",
          "parameters": [
            {
              "name": "create_product",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_product",
          "description": "Update a product in Freshservice.",
          "parameters": [
            {
              "name": "update_product",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_requester",
          "description": "Creates a requester in Freshservice.",
          "parameters": [
            {
              "name": "create_requester",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_all_requesters",
          "description": "Fetch all requesters from Freshservice.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "type": "string"
            },
            {
              "name": "per_page",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_requester_id",
          "description": "Get requester by ID in Freshservice.",
          "parameters": [
            {
              "name": "get_requester_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "requester_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_all_requester_fields",
          "description": "List all requester fields in Freshservice.",
          "parameters": [
            {
              "name": "list_all_requester_fields",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_requester",
          "description": "Update a requester in Freshservice.",
          "parameters": [
            {
              "name": "update_requester",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "filter_requesters",
          "description": "Filter requesters in Freshservice.",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "include_agents",
              "required": false,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_agent",
          "description": "Create a new agent in Freshservice.",
          "parameters": [
            {
              "name": "create_agent",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_agent",
          "description": "Get agent by id in Freshservice.",
          "parameters": [
            {
              "name": "get_agent",
              "required": false,
              "type": "string"
            },
            {
              "name": "agent_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_all_agents",
          "description": "Fetch agents from Freshservice.",
          "parameters": [
            {
              "name": "Fetch",
              "required": false,
              "type": "string"
            },
            {
              "name": "agents",
              "required": false,
              "type": "string"
            },
            {
              "name": "from",
              "required": false,
              "type": "string"
            },
            {
              "name": "page",
              "required": false,
              "type": "string"
            },
            {
              "name": "per_page",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "filter_agents",
          "description": "Filter Freshservice agents based on a query.",
          "parameters": [
            {
              "name": "filter_agents",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_agent",
          "description": "Update the agent details in the Freshservice.",
          "parameters": [
            {
              "name": "update_agent",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_agent_fields",
          "description": "Get all agent fields in Freshservice.",
          "parameters": [
            {
              "name": "get_agent_fields",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_all_agent_groups",
          "description": "Get all agent groups in Freshservice.",
          "parameters": [
            {
              "name": "get_all_agent_groups",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getAgentGroupById",
          "description": "Get agent groups by its group id in Freshservice.",
          "parameters": [
            {
              "name": "getAgentGroupById",
              "required": false,
              "type": "string"
            },
            {
              "name": "group_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "add_requester_to_group",
          "description": "Add a requester to a manual requester group in Freshservice.",
          "parameters": [
            {
              "name": "add_requester_to_group",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_group",
          "description": "Create a group in Freshservice.",
          "parameters": [
            {
              "name": "create_group",
              "required": false,
              "type": "string"
            },
            {
              "name": "group_data",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_group",
          "description": "Update a group in Freshservice.",
          "parameters": [
            {
              "name": "group_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "group_fields",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_all_requester_groups",
          "description": "Get all requester groups in Freshservice.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "type": "string"
            },
            {
              "name": "per_page",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_requester_groups_by_id",
          "description": "Get requester groups in Freshservice.",
          "parameters": [
            {
              "name": "get_requester_groups_by_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "requester_group_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_requester_group",
          "description": "Create a requester group in Freshservice.",
          "parameters": [
            {
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "name": "description",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_requester_group",
          "description": "Update an requester group in Freshservice.",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "type": "string"
            },
            {
              "name": "name",
              "required": false,
              "type": "string"
            },
            {
              "name": "description",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_requester_group_members",
          "description": "List all members of a requester group in Freshservice.",
          "parameters": [
            {
              "name": "list_requester_group_members",
              "required": false,
              "type": "string"
            },
            {
              "name": "group_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_all_canned_response",
          "description": "List all canned response in Freshservice.",
          "parameters": [
            {
              "name": "get_all_canned_response",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_canned_response",
          "description": "Get a canned response in Freshservice.",
          "parameters": [
            {
              "name": "get_canned_response",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_all_canned_response_folder",
          "description": "List all canned response of a folder in Freshservice.",
          "parameters": [
            {
              "name": "list_all_canned_response_folder",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_canned_response_folder",
          "description": "List canned response folder in Freshservice.",
          "parameters": [
            {
              "name": "list_canned_response_folder",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_all_workspaces",
          "description": "List all workspaces in Freshservice.",
          "parameters": [
            {
              "name": "list_all_workspaces",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_workspace",
          "description": "Get a workspace by its ID in Freshservice.",
          "parameters": [
            {
              "name": "get_workspace",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_all_solution_category",
          "description": "Get all solution category in Freshservice.",
          "parameters": [
            {
              "name": "get_all_solution_category",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_solution_category",
          "description": "Get solution category by its ID in Freshservice.",
          "parameters": [
            {
              "name": "get_solution_category",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_solution_category",
          "description": "Create a new solution category in Freshservice.",
          "parameters": [
            {
              "name": "create_solution_category",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_solution_category",
          "description": "Update a solution category in Freshservice.",
          "parameters": [
            {
              "name": "update_solution_category",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_list_of_solution_folder",
          "description": "Get list of solution folder by its ID in Freshservice.",
          "parameters": [
            {
              "name": "get_list_of_solution_folder",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_solution_folder",
          "description": "Get solution folder by its ID in Freshservice.",
          "parameters": [
            {
              "name": "get_solution_folder",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_list_of_solution_article",
          "description": "Get list of solution article in Freshservice.",
          "parameters": [
            {
              "name": "get_list_of_solution_article",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_solution_article",
          "description": "Get solution article by id in Freshservice.",
          "parameters": [
            {
              "name": "get_solution_article",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_solution_article",
          "description": "Create a new solution article in Freshservice.",
          "parameters": [
            {
              "name": "create_solution_article",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_solution_article",
          "description": "Update a solution article in Freshservice.",
          "parameters": [
            {
              "name": "update_solution_article",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_solution_folder",
          "description": "Create a new folder under a solution category in Freshservice.",
          "parameters": [
            {
              "name": "create_solution_folder",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_solution_folder",
          "description": "Update an existing solution folder's details in Freshservice.",
          "parameters": [
            {
              "name": "update_solution_folder",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "publish_solution_article",
          "description": "Publish a solution article in Freshservice.",
          "parameters": [
            {
              "name": "publish_solution_article",
              "required": false,
              "type": "string"
            },
            {
              "name": "article_id",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@effytech/freshservice_mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "freshserviceApiKey",
          "required": true,
          "description": "Freshservice API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@effytech/freshservice_mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0273.@effytech_freshservice_mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 269
  }
}