{
  "labels": {
    "analysis": "The MCP Server is designed to automate interactions with LinkedIn, a professional networking platform. It provides tools to log in securely, browse feeds, search profiles, extract profile data, and interact with posts (like, comment). The core functionality revolves around browser automation to manage LinkedIn activities programmatically while adhering to platform terms of service. The server helps users streamline professional networking tasks, gather information, and automate engagement.",
    "reasoning": "The primary label \"Browser Automation\" is chosen because the server's main functionality involves automated browsing and interaction on LinkedIn. \"Web Search & Research\" is a secondary label due to the profile search and data extraction capabilities, which assist in information gathering. No custom label is needed as the predefined labels adequately cover the server's functionality.",
    "primary_label": "Browser Automation",
    "secondary_labels": [
      "Web Search & Research"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1902,
    "server_name": "LinkedIn Browser",
    "rank_by_usage": 1903,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@alinaqi_mcp-linkedin-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@alinaqi/mcp-linkedin-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1902,
      "name": "LinkedIn Browser",
      "author": "@alinaqi/mcp-linkedin-server",
      "overview": "Automate LinkedIn interactions and extract data securely. Leverage browser automation to manage profiles, posts, and feed while adhering to LinkedIn's terms of service.",
      "repository_url": "https://github.com/alinaqi/mcp-linkedin-server",
      "homepage": "https://smithery.ai/server/@alinaqi/mcp-linkedin-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@alinaqi_mcp-linkedin-server.json",
      "tools_count": 7,
      "tools": [
        {
          "name": "login_linkedin",
          "description": "Deploy Server LinkedIn Browser Claim Server @alinaqi/mcp-linkedin-server Try in Playground login_linkedin",
          "parameters": [
            {
              "name": "login_linkedin",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "login_linkedin_secure",
          "description": "Open LinkedIn login page in browser for manual login using environment credentials as default values. Optional environment variables: - LINKEDIN_USERNAME: Your LinkedIn email/username (will be pre-filled if provided) - LINKEDIN_PASSWORD: Your LinkedIn password (will be pre-filled if provided) Returns: dict: Login status and message",
          "parameters": []
        },
        {
          "name": "get_linkedin_profile",
          "description": "Get LinkedIn profile information",
          "parameters": [
            {
              "name": "get_linkedin_profile",
              "required": false,
              "type": "string"
            },
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "LinkedIn",
              "required": false,
              "type": "string"
            },
            {
              "name": "profile",
              "required": false,
              "type": "string"
            },
            {
              "name": "information",
              "required": false,
              "type": "string"
            },
            {
              "name": "username",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "browse_linkedin_feed",
          "description": "Browse LinkedIn feed and return recent posts Args: ctx: MCP context for logging and progress reporting count: Number of posts to retrieve (default: 5) Returns: dict: Contains status, posts array, and any errors",
          "parameters": []
        },
        {
          "name": "search_linkedin_profiles",
          "description": "Search for LinkedIn profiles matching a query",
          "parameters": [
            {
              "name": "count",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "view_linkedin_profile",
          "description": "Visit and extract data from a specific LinkedIn profile",
          "parameters": [
            {
              "name": "view_linkedin_profile",
              "required": false,
              "type": "string"
            },
            {
              "name": "profile_url",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "interact_with_linkedin_post",
          "description": "Interact with a LinkedIn post (like, comment)",
          "parameters": [
            {
              "name": "interact_with_linkedin_post",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@alinaqi/mcp-linkedin-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@alinaqi/mcp-linkedin-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1903.@alinaqi_mcp-linkedin-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1680
  }
}