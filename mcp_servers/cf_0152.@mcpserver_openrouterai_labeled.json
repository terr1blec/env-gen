{
  "labels": {
    "analysis": "The MCP Server provides integration with OpenRouter.ai, allowing unified access to various AI models. Its core tools enable users to search, filter, and retrieve detailed information about available models, as well as validate model IDs. This functionality supports developers and researchers in discovering and interacting with AI models efficiently.",
    "reasoning": "The primary functionality revolves around managing and accessing AI models, which aligns best with the AI/ML Tools category. Since the server also provides search and model information tools, it tangentially supports research and development, making Data Analysis & Processing a secondary label. No custom label is needed as the predefined categories adequately cover its functionality.",
    "primary_label": "AI/ML Tools",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 151,
    "server_name": "OpenRouter MCP Server",
    "rank_by_usage": 152,
    "usage_count": "377",
    "original_file": "../crawler/smithery/@mcpserver_openrouterai.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mcpserver/openrouterai/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 151,
      "name": "OpenRouter MCP Server",
      "author": "@mcpserver/openrouterai",
      "overview": "A Model Context Protocol (MCP) server for integration with OpenRouter.ai, allowing access to various AI models through a unified interface.",
      "repository_url": "https://github.com/heltonteixeira/openrouterai",
      "homepage": "https://smithery.ai/server/@mcpserver/openrouterai",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "377",
      "success_rate": "98.95%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mcpserver_openrouterai.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "chat_completion",
          "description": "Deploy Server OpenRouter MCP Server Claim Server @mcpserver/openrouterai Try in Playground chat_completion",
          "parameters": [
            {
              "name": "chat_completion",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_models",
          "description": "Search and filter OpenRouter.ai models based on various criteria",
          "parameters": []
        },
        {
          "name": "get_model_info",
          "description": "Get detailed information about a specific model",
          "parameters": [
            {
              "name": "get_model_info",
              "required": false,
              "type": "string"
            },
            {
              "name": "model",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "validate_model",
          "description": "Check if a model ID is valid",
          "parameters": [
            {
              "name": "validate_model",
              "required": false,
              "type": "string"
            },
            {
              "name": "model",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mcpserver/openrouterai/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "openrouterApiKey",
          "required": true,
          "description": "API key for OpenRouter.ai"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mcpserver/openrouterai/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0152.@mcpserver_openrouterai_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 149
  }
}