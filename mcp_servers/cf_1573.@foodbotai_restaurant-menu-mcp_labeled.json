{
  "labels": {
    "analysis": "The MCP Server is designed specifically for restaurant menu management and online/ordering systems. It provides tools that enable users to interact with restaurant menus, modify orders, manage carts, and process payments. The core functionality revolves around handling the entire order process from browsing menus to completing transactions, which is typical in e-commerce scenarios focused on dining services.",
    "reasoning": "The primary functionality aligns closely with e-commerce for restaurants, hence \"E-commerce\" is the best fit as the primary label. The secondary labels reflect additional relevant functionalities like handling online payments and interacting with customer data. No custom label is needed as predefined categories aptly capture the server's purpose.",
    "primary_label": "E-commerce",
    "secondary_labels": [
      "Financial Services",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1572,
    "server_name": "Restaurant Menu Management and Ordering MCP Server",
    "rank_by_usage": 1573,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@foodbotai_restaurant-menu-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@foodbotai/restaurant-menu-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1572,
      "name": "Restaurant Menu Management and Ordering MCP Server",
      "author": "@foodbotai/restaurant-menu-mcp",
      "overview": "Provide a customizable MCP server that acts as a transparent layer over essential resources, tools, and protocols to enable dynamic interaction with data and actions. Easily extend and modify available tools to suit your needs. Facilitate resource registration and management to serve as a single source of truth for clients interacting with data.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@foodbotai/restaurant-menu-mcp",
      "remote_or_local": "Remote",
      "license": "https://smithery.ai/server/@foodbotai/foodbot-mcp",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@foodbotai_restaurant-menu-mcp.json",
      "tools_count": 11,
      "tools": [
        {
          "name": "get_restaurant_menu",
          "description": "Deploy Server Restaurant Menu Management and Ordering MCP Server @foodbotai/restaurant-menu-mcp Try in Playground get_restaurant_menu",
          "parameters": []
        },
        {
          "name": "get_category_items",
          "description": "Fetch items for a specific category using configuration values. Args: category_name: The name of the category to fetch items for category_id: Optional - The ID of the category if known Returns: List of items in the category",
          "parameters": []
        },
        {
          "name": "get_item_details",
          "description": "Fetch detailed information about a specific menu item using configuration values. Args: item_name: The name of the item to fetch details for item_id: Optional - The ID of the item if known selected_modifiers: Optional - Dictionary of selected modifiers for validation Returns: Detailed information about the item",
          "parameters": []
        },
        {
          "name": "view_cart",
          "description": "View the current cart with all items and price calculations.",
          "parameters": [
            {
              "name": "view_cart",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_cart_item",
          "description": "Update cart item quantity or remove item. action: 'increment', 'decrement', or 'remove' quantity: Optional specific quantity to set",
          "parameters": []
        },
        {
          "name": "edit_cart_item",
          "description": "Edit an item in the cart, including modifiers and special instructions.",
          "parameters": []
        },
        {
          "name": "clear_cart",
          "description": "Clear all items from the cart.",
          "parameters": []
        },
        {
          "name": "add_item_to_cart",
          "description": "Add an item to the cart with modifiers and special instructions.",
          "parameters": []
        },
        {
          "name": "save_order",
          "description": "Save the order with dining option, payment details and user details",
          "parameters": []
        },
        {
          "name": "select_dining_option",
          "description": "Validate and select dining option for order Args: dining_option: Selected dining option (dinein or takeout) Returns: Dictionary with success status and selected option or error message",
          "parameters": [
            {
              "name": "dining_option",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "handle_payment_flow",
          "description": "Handle the payment flow for orders. Args: data: Dictionary containing data for the payment flow - dining_option: The selected dining option (dinein/takeout) - order_tag_number: The order tag number for dine-in orders - name: Customer name - mobile: Customer mobile number - country_code: Country code for mobile number Returns: Dictionary with success status and order details or error message",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@foodbotai/restaurant-menu-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@foodbotai/restaurant-menu-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1573.@foodbotai_restaurant-menu-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1438
  }
}