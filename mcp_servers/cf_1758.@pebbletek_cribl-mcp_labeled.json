{
  "labels": {
    "analysis": "The MCP Server is designed specifically for interacting with Cribl deployments via APIs, enabling AI clients to manage and query Cribl configurations, pipelines, sources, and system metrics using natural language prompts. The available tools focus on managing worker groups, retrieving and modifying pipeline configurations, restarting workers, and fetching system metrics. This suggests its primary use case is managing and monitoring Cribl environments efficiently through standardized MCP tooling.",
    "reasoning": "The primary functionality revolves around managing and querying a data processing platform (Cribl), which fits well under Database Operations given the central role of configurations, pipelines, and sources. Additionally, the server's focus on system monitoring and metrics retrieval aligns with Data Analysis & Processing. There is no unique functionality that warrants a custom label, as the predefined categories sufficiently cover the server's purposes.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1757,
    "server_name": "Cribl API Interaction Server",
    "rank_by_usage": 1758,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@pebbletek_cribl-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@pebbletek/cribl-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1757,
      "name": "Cribl API Interaction Server",
      "author": "@pebbletek/cribl-mcp",
      "overview": "Enable AI clients to interact seamlessly with your Cribl deployment by discovering and invoking data operations through standardized MCP tooling. Manage and query Cribl configurations, pipelines, sources, and system metrics using natural language prompts. Simplify Cribl environment management and monitoring with AI-driven tool integration.",
      "repository_url": "https://github.com/pebbletek/cribl-mcp",
      "homepage": "https://smithery.ai/server/@pebbletek/cribl-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@pebbletek_cribl-mcp.json",
      "tools_count": 7,
      "tools": [
        {
          "name": "cribl_listWorkerGroups",
          "description": "Deploy Server Cribl API Interaction Server @pebbletek/cribl-mcp Try in Playground cribl_listWorkerGroups",
          "parameters": [
            {
              "name": "cribl_listWorkerGroups",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "cribl_getPipelines",
          "description": "Fetches pipeline definitions in a specified worker group.",
          "parameters": [
            {
              "name": "cribl_getPipelines",
              "required": false,
              "type": "string"
            },
            {
              "name": "groupName",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "cribl_getSources",
          "description": "Fetches source configurations in a specified worker group.",
          "parameters": [
            {
              "name": "cribl_getSources",
              "required": false,
              "type": "string"
            },
            {
              "name": "groupName",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "cribl_getPipelineConfig",
          "description": "Retrieves full configuration JSON for a specified pipeline in a worker group.",
          "parameters": [
            {
              "name": "cribl_getPipelineConfig",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "cribl_setPipelineConfig",
          "description": "Applies a new configuration payload to a specified pipeline in a worker group.",
          "parameters": [
            {
              "name": "cribl_setPipelineConfig",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "cribl_restartWorkerGroup",
          "description": "Restarts all workers within the default or specified worker group.",
          "parameters": [
            {
              "name": "cribl_restartWorkerGroup",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "cribl_getSystemMetrics",
          "description": "Retrieves system metrics from the Cribl deployment. IMPORTANT: To avoid excessively large responses, please use the optional parameters (filterExpr, metricNameFilter, earliest, latest, numBuckets, wp) to narrow down your query whenever possible. If no parameters are provided, the server will default to fetching only the most recent data bucket (numBuckets=1) to prevent performance issues.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@pebbletek/cribl-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@pebbletek/cribl-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1758.@pebbletek_cribl-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1575
  }
}