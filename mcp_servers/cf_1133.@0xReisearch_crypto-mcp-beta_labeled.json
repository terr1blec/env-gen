{
  "labels": {
    "analysis": "The MCP Server provides a comprehensive suite of tools for accessing and analyzing cryptocurrency data through various APIs. It enables users to query real-time data about transactions, addresses, entities, tokens, loans, and more across multiple blockchain networks. The server abstracts the need for individual API keys, making it easier to integrate crypto intelligence into applications or LLM clients. Its primary functionality revolves around blockchain data retrieval, analysis, and intelligence gathering.",
    "reasoning": "The primary functionality aligns closely with cryptocurrency data analysis and intelligence gathering, making \"Cryptocurrency & Blockchain\" the most appropriate primary label. Secondary labels \"Data Analysis & Processing\" and \"API Integration\" are relevant due to the tools' focus on data retrieval and API-based interaction. No custom label is needed as the predefined categories sufficiently cover the server's functionality.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "Data Analysis & Processing",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1132,
    "server_name": "REI Crypto MCP Server",
    "rank_by_usage": 1133,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@0xReisearch_crypto-mcp-beta.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@0xReisearch/crypto-mcp-beta/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1132,
      "name": "REI Crypto MCP Server",
      "author": "@0xReisearch/crypto-mcp-beta",
      "overview": "Provide access to multiple cryptocurrency-related APIs including DefiLlama, CoinGecko, Arkham Intelligence, Elfa AI, and Codex through MCP servers. Enable seamless integration with MCP clients like Claude Desktop for querying crypto data without requiring API keys from the user side. Easily deploy and run individual servers to extend your LLM's capabilities with real-time crypto data and intelligence.",
      "repository_url": "https://github.com/0xReisearch/crypto-mcp-beta",
      "homepage": "https://smithery.ai/server/@0xReisearch/crypto-mcp-beta",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@0xReisearch_crypto-mcp-beta.json",
      "tools_count": 34,
      "tools": [
        {
          "name": "get_swaps",
          "description": "Deploy Server REI Crypto MCP Server Claim Server @0xReisearch/crypto-mcp-beta Try in Playground",
          "parameters": []
        },
        {
          "name": "get_transfers_histogram",
          "description": "GET /transfers/histogram",
          "parameters": [
            {
              "name": "get_transfers_histogram",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_intelligence_address",
          "description": "GET /intelligence/address/{address}?chain={chain} address: As a path parameter. chains: Optional, if empty it will default to all chains.",
          "parameters": []
        },
        {
          "name": "get_intelligence_address_all",
          "description": "GET /intelligence/address/{address}/all address: This is passed as a path parameter.",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_intelligence_address_with_extra_enrichment",
          "description": "GET /intelligence/address_with_extra_enrichment/{address} address: Passed as a path parameter. tags: Optional, defaults to false. chains: Optional, if empty it will default to all chains.",
          "parameters": []
        },
        {
          "name": "get_intelligence_entity",
          "description": "GET /intelligence/entity/{entity} entity: This is passed as a path parameter.",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_intelligence_contract",
          "description": "GET /intelligence/contract/{chain}/{address}",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            },
            {
              "name": "chain",
              "required": true,
              "type": "string"
            },
            {
              "name": "address",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_intelligence_token_by_pricing_id",
          "description": "GET /intelligence/token/{coinGeckoPricingId}",
          "parameters": [
            {
              "name": "get_intelligence_token_by_pricing_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_intelligence_token_by_chain_address",
          "description": "GET /intelligence/token/{chain}/{address}",
          "parameters": [
            {
              "name": "get_intelligence_token_by_chain_address",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_history_entity",
          "description": "GET /history/entity/{entity} chains: Optional, if empty it will default to all chains.",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_history_address",
          "description": "GET /history/address/{address} chains: Optional, if empty it will default to all chains.",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_portfolio_entity",
          "description": "GET /portfolio/entity/{entity} chains: Optional, if empty it will default to all chains.",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_portfolio_address",
          "description": "GET /portfolio/address/{address} chains: Optional, if empty it will default to all chains.",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_transfers_by_tx_hash",
          "description": "GET /transfers/tx/{hash} hash: The hash of a transaction as a path parameter. chain: The chain which the transaction occurred on (e.g. ethereum). transferType: The type of transfer. Can be either `token`, `internal`, or `external`.",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_tx",
          "description": "GET /tx/{hash}\n\n    hash: Represents the transaction hash as a path parameter.",
          "parameters": [
            {
              "name": "hash",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_balances_address",
          "description": "GET /balances/address/{address}",
          "parameters": [
            {
              "name": "get_balances_address",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            },
            {
              "name": "address",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_balances_entity",
          "description": "GET /balances/entity/{entity} chains: Optional, if empty it will default to all chains",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_loans_address",
          "description": "GET /loans/address/{address}",
          "parameters": [
            {
              "name": "get_loans_address",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            },
            {
              "name": "address",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_loans_entity",
          "description": "GET /loans/entity/{entity} entity: The entity you want to see transactions from or to. chains: Optional, if empty it will default to all chains.",
          "parameters": []
        },
        {
          "name": "get_counterparties_address",
          "description": "GET /counterparties/address/{address} flow: Used to filter the counterparties by their flow of transactions. tokens: Used to filter the counterparties by the tokens they have transacted with. chains: Used to filter the counterparties by the chains they have transacted on.",
          "parameters": []
        },
        {
          "name": "get_counterparties_entity",
          "description": "GET /counterparties/entity/{entity} flow: Used to filter the counterparties by their flow of transactions. tokens: Used to filter the counterparties by the tokens they have transacted with. chains: Used to filter the counterparties by the chains they have transacted on.",
          "parameters": []
        },
        {
          "name": "get_portfolio_time_series_entity",
          "description": "GET /portfolio/timeSeries/entity/{entity} entity: An alternative to `address` pricingId: Note: This does not support unpriced tokens via `chain` + `address` combination.",
          "parameters": []
        },
        {
          "name": "get_portfolio_time_series_address",
          "description": "GET /portfolio/timeSeries/address/{address} address: This is either a single address or a list of addresses pricingId: Note: This does not support unpriced tokens via `chain` + `address` combination.",
          "parameters": []
        },
        {
          "name": "get_token_holders_by_pricing_id",
          "description": "GET /token/holders/{pricing_id} pricing_id: As path parameter. It's a CoinGecko pricing ID.",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_token_holders_by_chain_address",
          "description": "GET /token/holders/{chain}/{address}",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            },
            {
              "name": "chain",
              "required": true,
              "type": "string"
            },
            {
              "name": "address",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_token_top_flow_by_id",
          "description": "GET /token/top_flow/{id} id: Either `id` or `chain` and `address` as path parameters. The `id` is a CoinGecko pricing ID. timeLast: Required",
          "parameters": [
            {
              "name": "Required",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_token_top_flow_by_chain_address",
          "description": "GET /token/top_flow/{chain}/{address} timeLast: Required",
          "parameters": [
            {
              "name": "GET",
              "required": false,
              "type": "string"
            },
            {
              "name": "Required",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_networks_status",
          "description": "Description not available",
          "parameters": [
            {
              "name": "get_networks_status",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_networks_history",
          "description": "GET /networks/history/{chain}",
          "parameters": [
            {
              "name": "get_networks_history",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            },
            {
              "name": "chain",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_api_important_entities",
          "description": "GET /api/importantEntities",
          "parameters": [
            {
              "name": "get_api_important_entities",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_tag",
          "description": "Description not available",
          "parameters": [
            {
              "name": "get_tag",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_tag_params",
          "description": "Description not available",
          "parameters": [
            {
              "name": "get_tag_params",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_tag_top",
          "description": "Description not available",
          "parameters": [
            {
              "name": "get_tag_top",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_tag_all",
          "description": "Description not available",
          "parameters": [
            {
              "name": "get_tag_all",
              "required": false,
              "type": "string"
            },
            {
              "name": "GET",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@0xReisearch/crypto-mcp-beta/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@0xReisearch/crypto-mcp-beta/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1133.@0xReisearch_crypto-mcp-beta_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1110
  }
}