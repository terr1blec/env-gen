{
  "labels": {
    "analysis": "The MCP Server acts as a bridge between Keboola's data management platform and AI agents, enabling seamless integration and automation of data workflows. Its core functionality revolves around exposing Keboola's features—such as storage access, SQL transformations, component management, and job execution—as callable tools for AI assistants. The available tools facilitate data querying, transformation, workflow orchestration, and metadata management through natural language interfaces, eliminating the need for manual coding or complex integrations.",
    "reasoning": "The primary label \"Database Operations\" is chosen because the server primarily provides tools for querying, updating, and managing data within Keboola's storage infrastructure. Secondary labels \"Data Analysis & Processing\" and \"API Integration\" are included because the server enables SQL-based data transformations and acts as an intermediary API for AI agents to interact with Keboola's ecosystem. The functionality does not align closely enough with predefined categories for a custom label to be necessary.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Data Analysis & Processing",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1498,
    "server_name": "Keboola",
    "rank_by_usage": 1499,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/keboola-mcp-server_keboola.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/keboola-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1498,
      "name": "Keboola",
      "author": "keboola-mcp-server",
      "overview": "Connect your AI agents, MCP clients (Cursor, Claude, Windsurf, VS Code ...) and other AI assistants to Keboola. Expose data, transformations, SQL queries, and job triggers—no glue code required. Deliver the right data to agents when and where they need it.\n\nKeboola MCP Server is an open-source bridge between your Keboola project and modern AI tools. It turns Keboola features—like storage access, SQL transformations, and job triggers—into callable tools for Claude, Cursor, CrewAI, LangChain, Amazon Q, and more.\n\nFeatures:\n\nStorage: Query tables directly and manage table or bucket descriptions\nComponents: Create, List and inspect extractors, writers, data apps, and transformation configurations\nSQL: Create SQL transformations with natural language\nJobs: Run components and transformations, and retrieve job execution details\nMetadata: Search, read, and update project documentation and object metadata using natural language",
      "repository_url": "https://github.com/keboola/mcp-server",
      "homepage": "https://smithery.ai/server/keboola-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/keboola-mcp-server_keboola.json",
      "tools_count": 31,
      "tools": [
        {
          "name": "get_component",
          "description": "Deploy Server keboola-mcp-server Try in Playground get_component",
          "parameters": [
            {
              "name": "returns",
              "required": false,
              "type": "string"
            },
            {
              "name": "the",
              "required": false,
              "type": "string"
            },
            {
              "name": "component",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_config",
          "description": "Gets information about a specific component/transformation configuration. USAGE: - Use when you want to see the configuration of a specific component/transformation. EXAMPLES: - user_input: `give me details about this configuration` - set component_id and configuration_id to the specific component/transformation ID and configuration ID if you know it - returns the component/transformation configuration pair",
          "parameters": [
            {
              "name": "if",
              "required": false,
              "type": "string"
            },
            {
              "name": "you",
              "required": false,
              "type": "string"
            },
            {
              "name": "know",
              "required": false,
              "type": "string"
            },
            {
              "name": "it",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_configs",
          "description": "Retrieves configurations of components present in the project, optionally filtered by component types or specific component IDs. If component_ids are supplied, only those components identified by the IDs are retrieved, disregarding component_types. USAGE: - Use when you want to see components configurations in the project for given component_types. - Use when you want to see components configurations in the project for given component_ids. EXAMPLES: - user_input: `give me all components (in the project)` - returns all components configurations in the project - user_input: `list me all extractor components (in the project)` - set types to [\"extractor\"] - returns all extractor components configurations in the project - user_input: `give me configurations for following component/s` | `give me configurations for this component` - set component_ids to list of identifiers accordingly if you know them - returns all configurations for the given components in the project - user_input: `give me configurations for 'specified-id'` - set component_ids to ['specified-id'] - returns the configurations of the component with ID 'specified-id'",
          "parameters": []
        },
        {
          "name": "create_config",
          "description": "Creates a root component configuration using the specified name, component ID, configuration JSON, and description. CONSIDERATIONS: - The configuration JSON object must follow the root_configuration_schema of the specified component. - Make sure the configuration parameters always adhere to the root_configuration_schema, which is available via the component_detail tool. - The configuration JSON object should adhere to the component's configuration examples if found. USAGE: - Use when you want to create a new root configuration for a specific component. EXAMPLES: - user_input: `Create a new configuration for component X with these settings` - set the component_id and configuration parameters accordingly - returns the created component configuration if successful.",
          "parameters": []
        },
        {
          "name": "add_config_row",
          "description": "Creates a component configuration row in the specified configuration_id, using the specified name, component ID, configuration JSON, and description. CONSIDERATIONS: - The configuration JSON object must follow the row_configuration_schema of the specified component. - Make sure the configuration parameters always adhere to the row_configuration_schema, which is available via the component_detail tool. - The configuration JSON object should adhere to the component's configuration examples if found. USAGE: - Use when you want to create a new row configuration for a specific component configuration. EXAMPLES: - user_input: `Create a new configuration row for component X with these settings` - set the component_id, configuration_id and configuration parameters accordingly - returns the created component configuration if successful.",
          "parameters": []
        },
        {
          "name": "update_config",
          "description": "Updates a specific root component configuration using given by component ID, and configuration ID. CONSIDERATIONS: - The configuration JSON object must follow the root_configuration_schema of the specified component. - Make sure the configuration parameters always adhere to the root_configuration_schema, which is available via the component_detail tool. - The configuration JSON object should adhere to the component's configuration examples if found USAGE: - Use when you want to update a root configuration of a specific component. EXAMPLES: - user_input: `Update a configuration for component X and configuration ID 1234 with these settings` - set the component_id, configuration_id and configuration parameters accordingly. - set the change_description to the description of the change made to the component configuration. - returns the updated component configuration if successful.",
          "parameters": []
        },
        {
          "name": "update_config_row",
          "description": "Updates a specific component configuration row in the specified configuration_id, using the specified name, component ID, configuration JSON, and description. CONSIDERATIONS: - The configuration JSON object must follow the row_configuration_schema of the specified component. - Make sure the configuration parameters always adhere to the row_configuration_schema, which is available via the component_detail tool. USAGE: - Use when you want to update a row configuration for a specific component and configuration. EXAMPLES: - user_input: `Update a configuration row of configuration ID 123 for component X with these settings` - set the component_id, configuration_id, configuration_row_id and configuration parameters accordingly - returns the updated component configuration if successful.",
          "parameters": []
        },
        {
          "name": "get_config_examples",
          "description": "Retrieves sample configuration examples for a specific component. USAGE: - Use when you want to see example configurations for a specific component. EXAMPLES: - user_input: `Show me example configurations for component X` - set the component_id parameter accordingly - returns a markdown formatted string with configuration examples",
          "parameters": []
        },
        {
          "name": "find_component_id",
          "description": "- user_input: `Create a generic extractor configuration for x` - Set the component_id if you know it or find the component_id by find_component_id or docs use tool and set it - returns the component",
          "parameters": [
            {
              "name": "find_component_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "returns",
              "required": false,
              "type": "string"
            },
            {
              "name": "the",
              "required": false,
              "type": "string"
            },
            {
              "name": "component",
              "required": false,
              "type": "string"
            },
            {
              "name": "component_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_sql_transformation",
          "description": "Creates an SQL transformation using the specified name, SQL query following the current SQL dialect, a detailed description, and a list of created table names. CONSIDERATIONS: - By default, SQL transformation must create at least one table to produce a result; omit only if the user explicitly indicates that no table creation is needed. - Each SQL code block must include descriptive name that reflects its purpose and group one or more executable semantically related SQL statements. - Each SQL query statement within a code block must be executable and follow the current SQL dialect, which can be retrieved using appropriate tool. - When referring to the input tables within the SQL query, use fully qualified table names, which can be retrieved using appropriate tools. - When creating a new table within the SQL query (e.g. CREATE TABLE ...), use only the quoted table name without fully qualified table name, and add the plain table name without quotes to the `created_table_names` list. - Unless otherwise specified by user, transformation name and description are generated based on the SQL query and user intent. USAGE: - Use when you want to create a new SQL transformation. EXAMPLES: - user_input: `Can you create a new transformation out of this sql query?` - set the sql_code_blocks to the query, and set other parameters accordingly. - returns the created SQL transformation configuration if successful. - user_input: `Generate me an SQL transformation which [USER INTENT]` - set the sql_code_blocks to the query based on the [USER INTENT], and set other parameters accordingly. - returns the created SQL transformation configuration if successful.",
          "parameters": [
            {
              "name": "semantically",
              "required": false,
              "type": "string"
            },
            {
              "name": "related",
              "required": false,
              "type": "string"
            },
            {
              "name": "SQL",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_sql_transformation",
          "description": "Updates an existing SQL transformation configuration, optionally updating the description and disabling the configuration. CONSIDERATIONS: - The parameters configuration must include blocks with codes of SQL statements. Using one block with many codes of SQL statements is preferred and commonly used unless specified otherwise by the user. - Each code contains SQL statements that are semantically related and have a descriptive name. - Each SQL statement must be executable and follow the current SQL dialect, which can be retrieved using appropriate tool. - The storage configuration must not be empty, and it should include input or output tables with correct mappings for the transformation. - When the behavior of the transformation is not changed, the updated_description can be empty string. EXAMPLES: - user_input: `Can you edit this transformation configuration that [USER INTENT]?` - set the transformation configuration_id accordingly and update parameters and storage tool arguments based on the [USER INTENT] - returns the updated transformation configuration if successful.",
          "parameters": []
        },
        {
          "name": "list_transformations",
          "description": "Retrieves transformation configurations in the project, optionally filtered by specific transformation IDs. USAGE: - Use when you want to see transformation configurations in the project for given transformation_ids. - Use when you want to retrieve all transformation configurations, then set transformation_ids to an empty list. EXAMPLES: - user_input: `give me all transformations` - returns all transformation configurations in the project - user_input: `give me configurations for following transformation/s` | `give me configurations for this transformation` - set transformation_ids to list of identifiers accordingly if you know the IDs - returns all transformation configurations for the given transformations IDs - user_input: `list me transformations for this transformation component 'specified-id'` - set transformation_ids to ['specified-id'] - returns the transformation configurations with ID 'specified-id'",
          "parameters": []
        },
        {
          "name": "docs_query",
          "description": "Answers a question using the Keboola documentation as a source.",
          "parameters": [
            {
              "name": "docs_query",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_flow",
          "description": "Creates a new flow configuration in Keboola. A flow is a special type of Keboola component that orchestrates the execution of other components. It defines how tasks are grouped and ordered — enabling control over parallelization** and sequential execution. Each flow is composed of: - Tasks: individual component configurations (e.g., extractors, writers, transformations). - Phases: groups of tasks that run in parallel. Phases themselves run in order, based on dependencies. CONSIDERATIONS: - The `phases` and `tasks` parameters must conform to the Keboola Flow JSON schema. - Each task and phase must include at least: `id` and `name`. - Each task must reference an existing component configuration in the project. - Items in the `dependsOn` phase field reference ids of other phases. - Links contained in the response should ALWAYS be presented to the user USAGE: Use this tool to automate multi-step data workflows. This is ideal for: - Creating ETL/ELT orchestration. - Coordinating dependencies between components. - Structuring parallel and sequential task execution. EXAMPLES: - user_input: Orchestrate all my JIRA extractors. - fill `tasks` parameter with the tasks for the JIRA extractors - determine dependencies between the JIRA extractors - fill `phases` parameter by grouping tasks into phases",
          "parameters": []
        },
        {
          "name": "list_flows",
          "description": "Retrieves flow configurations from the project.",
          "parameters": [
            {
              "name": "flow_ids",
              "required": false,
              "type": "string"
            },
            {
              "name": "Add",
              "required": false,
              "type": "string"
            },
            {
              "name": "Item",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_flow",
          "description": "Updates an existing flow configuration in Keboola. A flow is a special type of Keboola component that orchestrates the execution of other components. It defines how tasks are grouped and ordered — enabling control over parallelization** and sequential execution. Each flow is composed of: - Tasks: individual component configurations (e.g., extractors, writers, transformations). - Phases: groups of tasks that run in parallel. Phases themselves run in order, based on dependencies. CONSIDERATIONS: - The `phases` and `tasks` parameters must conform to the Keboola Flow JSON schema. - Each task and phase must include at least: `id` and `name`. - Each task must reference an existing component configuration in the project. - Items in the `dependsOn` phase field reference ids of other phases. - The flow specified by `configuration_id` must already exist in the project. - Links contained in the response should ALWAYS be presented to the user USAGE: Use this tool to update an existing flow.",
          "parameters": []
        },
        {
          "name": "get_flow",
          "description": "Gets detailed information about a specific flow configuration.",
          "parameters": [
            {
              "name": "get_flow",
              "required": false,
              "type": "string"
            },
            {
              "name": "configuration_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_flow_schema",
          "description": "Returns the JSON schema that defines the structure of Flow configurations.",
          "parameters": [
            {
              "name": "get_flow_schema",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_job",
          "description": "Retrieves detailed information about a specific job, identified by the job_id, including its status, parameters, results, and any relevant metadata. EXAMPLES: - If job_id = \"123\", then the details of the job with id \"123\" will be retrieved.",
          "parameters": []
        },
        {
          "name": "list_jobs",
          "description": "Retrieves all jobs in the project, or filter jobs by a specific component_id or config_id, with optional status filtering. Additional parameters support pagination (limit, offset) and sorting (sort_by, sort_order). USAGE: - Use when you want to list jobs for a given component_id and optionally for given config_id. - Use when you want to list all jobs in the project or filter them by status. EXAMPLES: - If status = \"error\", only jobs with status \"error\" will be listed. - If status = None, then all jobs with arbitrary status will be listed. - If component_id = \"123\" and config_id = \"456\", then the jobs for the component with id \"123\" and configuration with id \"456\" will be listed. - If limit = 100 and offset = 0, the first 100 jobs will be listed. - If limit = 100 and offset = 100, the second 100 jobs will be listed. - If sort_by = \"endTime\" and sort_order = \"asc\", the jobs will be sorted by the end time in ascending order.",
          "parameters": []
        },
        {
          "name": "run_job",
          "description": "Starts a new job for a given component or transformation.",
          "parameters": [
            {
              "name": "run_job",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_project_info",
          "description": "Return structured project information pulled from multiple endpoints.",
          "parameters": [
            {
              "name": "get_project_info",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_data",
          "description": "Executes an SQL SELECT query to get the data from the underlying database. * When constructing the SQL SELECT query make sure to check the SQL dialect used by the Keboola project's underlying database. * When referring to tables always use fully qualified table names that include the database name, schema name and the table name. * The fully qualified table name can be found in the table information, use a tool to get the information about tables. The fully qualified table name can be found in the response from that tool. * Always use quoted column names when referring to table columns. The quoted column names can also be found in the response from the table information tool.",
          "parameters": []
        },
        {
          "name": "get_sql_dialect",
          "description": "Gets the name of the SQL dialect used by Keboola project's underlying database.",
          "parameters": [
            {
              "name": "get_sql_dialect",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_bucket",
          "description": "Gets detailed information about a specific bucket.",
          "parameters": [
            {
              "name": "get_bucket",
              "required": false,
              "type": "string"
            },
            {
              "name": "bucket_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_buckets",
          "description": "Retrieves information about all buckets in the project.",
          "parameters": [
            {
              "name": "list_buckets",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_table",
          "description": "Gets detailed information about a specific table including its DB identifier and column information.",
          "parameters": [
            {
              "name": "get_table",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_tables",
          "description": "Retrieves all tables in a specific bucket with their basic information.",
          "parameters": [
            {
              "name": "list_tables",
              "required": false,
              "type": "string"
            },
            {
              "name": "bucket_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_bucket_description",
          "description": "Updates the description for a given Keboola bucket.",
          "parameters": [
            {
              "name": "update_bucket_description",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_table_description",
          "description": "Updates the description for a given Keboola table.",
          "parameters": [
            {
              "name": "update_table_description",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_column_description",
          "description": "Updates the description for a given column in a Keboola table.",
          "parameters": [
            {
              "name": "update_column_description",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/keboola-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "kbcStorageToken",
          "required": true,
          "description": "The Keboola Storage API token."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/keboola-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1499.keboola-mcp-server_keboola_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1384
  }
}