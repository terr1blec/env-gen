{
  "labels": {
    "analysis": "The MCP Server provides tools for accessing extensive financial market data, including real-time and historical information on stocks, forex, cryptocurrencies, commodities, and economic indicators. It offers a wide array of tools for retrieving time series data across different intervals (intraday, daily, weekly, monthly) and provides technical indicators (moving averages, oscillators, momentum indicators, etc.), fundamental data (income statements, balance sheets, cash flows), and market sentiment analysis. It also supports data related to commodities, foreign exchange rates, and macroeconomic statistics.",
    "reasoning": "The primary label is \"Financial Services\" because the server provides tools primarily focused on financial data and market analysis. The secondary labels include \"Data Analysis & Processing\" due to the technical analysis tools and \"Cryptocurrency & Blockchain\" because of the digital currency-related tools. The custom label \"Market Technical Analysis\" captures the server's specialized functionality in providing technical indicators and trading signals.",
    "primary_label": "Financial Services",
    "secondary_labels": [
      "Data Analysis & Processing",
      "Cryptocurrency & Blockchain"
    ],
    "custom_label": "Market Technical Analysis",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2309,
    "server_name": "AlphaVantage MCP Server",
    "rank_by_usage": 2310,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@lifejwang11_alphavantage-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@lifejwang11/alphavantage-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2309,
      "name": "AlphaVantage MCP Server",
      "author": "@lifejwang11/alphavantage-mcp",
      "overview": "Integrate real-time and historical financial market data into your applications effortlessly. Access stock, forex, and cryptocurrency data along with technical and fundamental indicators through a standardized MCP service. Simplify your financial data integration with this powerful server.",
      "repository_url": "https://github.com/lifejwang11/alphavantage-mcp",
      "homepage": "https://smithery.ai/server/@lifejwang11/alphavantage-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@lifejwang11_alphavantage-mcp.json",
      "tools_count": 111,
      "tools": [
        {
          "name": "get_intraday",
          "description": "Deploy Server AlphaVantage MCP Server Claim Server @lifejwang11/alphavantage-mcp Try in Playground get_intraday",
          "parameters": []
        },
        {
          "name": "get_daily",
          "description": "Return daily time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data outputsize: The size of the call, supported values are 'compact' and 'full; the first returns the last 100 points in the data series, and 'full' returns the full-length daily times series, commonly above 1MB (default 'compact')",
          "parameters": []
        },
        {
          "name": "get_daily_adjusted",
          "description": "Return daily adjusted (date, daily open, daily high, daily low, daily close, daily split/dividend-adjusted close, daily volume) time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data outputsize: The size of the call, supported values are 'compact' and 'full; the first returns the last 100 points in the data series, and 'full' returns the full-length daily times series, commonly above 1MB (default 'compact') entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_weekly",
          "description": "Return weekly time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_weekly_adjusted",
          "description": "weekly adjusted time series (last trading day of each week, weekly open, weekly high, weekly low, weekly close, weekly adjusted close, weekly volume, weekly dividend) of the equity specified, covering up to 20 years of historical data. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_monthly",
          "description": "Return monthly time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_monthly_adjusted",
          "description": "Return monthly time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "symbol",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_quote_endpoint",
          "description": "Return the latest price and volume information for a security of your choice Keyword Arguments: symbol: the symbol for the equity we want to get its data entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_symbol_search",
          "description": "Return best matching symbols and market information based on keywords. It raises ValueError when problems arise Keyword Arguments: keywords: the keywords to query on",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_market_status",
          "description": "Return current market status (open vs. closed) of major trading venues. It raises ValueError when problems arise",
          "parameters": []
        },
        {
          "name": "get_company_overview",
          "description": "Returns the company information, financial ratios, and other key metrics for the equity specified. Data is generally refreshed on the same day a company reports its latest earnings and financials. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_dividends",
          "description": "Returns historical and future (declared) dividend distributions. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_splits",
          "description": "Returns historical split events. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_income_statement_annual",
          "description": "Returns the annual and quarterly income statements for the company of interest. Data is generally refreshed on the same day a company reports its latest earnings and financials. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_income_statement_quarterly",
          "description": "Returns the annual and quarterly income statements for the company of interest. Data is generally refreshed on the same day a company reports its latest earnings and financials. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_balance_sheet_annual",
          "description": "Returns the annual and quarterly balance sheets for the company of interest. Data is generally refreshed on the same day a company reports its latest earnings and financials. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_balance_sheet_quarterly",
          "description": "Returns the annual and quarterly balance sheets for the company of interest. Data is generally refreshed on the same day a company reports its latest earnings and financials. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_cash_flow_annual",
          "description": "Returns the annual and quarterly cash flows for the company of interest. Data is generally refreshed on the same day a company reports its latest earnings and financials. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_cash_flow_quarterly",
          "description": "Returns the annual and quarterly cash flows for the company of interest. Data is generally refreshed on the same day a company reports its latest earnings and financials. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_earnings_annual",
          "description": "Returns the annual and quarterly earnings (EPS) for the company of interest. Quarterly data also includes analyst estimates and surprise metrics. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_earnings_quarterly",
          "description": "Returns the annual and quarterly earnings (EPS) for the company of interest. Quarterly data also includes analyst estimates and surprise metrics. Keyword Arguments: symbol: the symbol for the equity we want to get its data",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_sma",
          "description": "Return simple moving average time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_ema",
          "description": "Return exponential moving average time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_wma",
          "description": "Return weighted moving average time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_dema",
          "description": "Return double exponential moving average time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_tema",
          "description": "Return triple exponential moving average time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_trima",
          "description": "Return triangular moving average time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_kama",
          "description": "Return Kaufman adaptative moving average time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_mama",
          "description": "Return MESA adaptative moving average time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') fastlimit: Positive floats for the fast limit are accepted (default=None) slowlimit: Positive floats for the slow limit are accepted (default=None) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_vwap",
          "description": "Returns the volume weighted average price (VWAP) for intraday time series. Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min' (default 5min) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_t3",
          "description": "Return triple exponential moving average time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_macd",
          "description": "Return the moving average convergence/divergence time series in two json objects as data and meta_data. It raises ValueError when problems",
          "parameters": []
        },
        {
          "name": "get_macdext",
          "description": "Return the moving average convergence/divergence time series in two json objects as data and meta_data. It raises ValueError when problems",
          "parameters": []
        },
        {
          "name": "get_stoch",
          "description": "Return the stochatic oscillator values in two json objects as data and meta_data. It raises ValueError when problems",
          "parameters": [
            {
              "name": "integers",
              "required": false,
              "type": "string"
            },
            {
              "name": "are",
              "required": false,
              "type": "string"
            },
            {
              "name": "accepted",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_stochf",
          "description": "Return the stochatic oscillator values in two json objects as data and meta_data. It raises ValueError when problems",
          "parameters": [
            {
              "name": "integers",
              "required": false,
              "type": "string"
            },
            {
              "name": "are",
              "required": false,
              "type": "string"
            },
            {
              "name": "accepted",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_rsi",
          "description": "Return the relative strength index time series in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_stochrsi",
          "description": "Return the stochatic relative strength index in two json objects as data and meta_data. It raises ValueError when problems",
          "parameters": []
        },
        {
          "name": "get_willr",
          "description": "Return the Williams' %R (WILLR) values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_adx",
          "description": "Return the average directional movement index values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_adxr",
          "description": "Return the average directional movement index rating in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_apo",
          "description": "Return the absolute price oscillator values in two json objects as data and meta_data. It raises ValueError when problems",
          "parameters": []
        },
        {
          "name": "get_ppo",
          "description": "Return the percentage price oscillator values in two json objects as data and meta_data. It raises ValueError when problems",
          "parameters": []
        },
        {
          "name": "get_mom",
          "description": "Return the momentum values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_bop",
          "description": "Return the balance of power values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_cci",
          "description": "Return the commodity channel index values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_cmo",
          "description": "Return the Chande momentum oscillator in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_roc",
          "description": "Return the rate of change values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_rocr",
          "description": "Return the rate of change ratio values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_aroon",
          "description": "Return the aroon values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_aroonosc",
          "description": "Return the aroon oscillator values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_mfi",
          "description": "Return the money flow index values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_trix",
          "description": "Return the1-day rate of change of a triple smooth exponential moving average in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_ultosc",
          "description": "Return the ultimate oscillaror values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') timeperiod1: The first time period indicator. Positive integers are accepted. By default, timeperiod1=7 timeperiod2: The first time period indicator. Positive integers are accepted. By default, timeperiod2=14 timeperiod3: The first time period indicator. Positive integers are accepted. By default, timeperiod3=28 month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_dx",
          "description": "Return the directional movement index values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_minus_di",
          "description": "Return the minus directional indicator values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_plus_di",
          "description": "Return the plus directional indicator values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_minus_dm",
          "description": "Return the minus directional movement values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_plus_dm",
          "description": "Return the plus directional movement values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_bbands",
          "description": "Return the bollinger bands values in two json objects as data and meta_data. It raises ValueError when problems",
          "parameters": []
        },
        {
          "name": "get_midpoint",
          "description": "Return the midpoint values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_midprice",
          "description": "Return the midprice values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_sar",
          "description": "Return the midprice values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') acceleration: The acceleration factor. Positive floats are accepted ( default 0.01) maximum: The acceleration factor maximum value. Positive floats are accepted (default 0.20 ) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": [
            {
              "name": "default",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_trange",
          "description": "Return the true range values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_atr",
          "description": "Return the average true range values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_natr",
          "description": "Return the normalized average true range values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') time_period: How many data points to average (default 20) month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_ad",
          "description": "Return the Chaikin A/D line values in two json\n    objects as data and meta_data. It raises ValueError when problems arise\n\n    Keyword Arguments:\n        symbol:  the symbol for the equity we want to get its data\n        interval:  time interval between two conscutive values,\n            supported values are '1min', '5min', '15min', '30min', '60min', 'daily',\n            'weekly', 'monthly' (default 'daily')\n        month:  ONLY applicable to intraday intervals.\n            By default, not set and the technical indicator values will be calculated\n            based on the most recent 30 days of intraday data.\n        entitlement:  Supported values are 'realtime' for realtime US stock market data\n            or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_adosc",
          "description": "Return the Chaikin A/D oscillator values in two json objects as data and meta_data. It raises ValueError when problems",
          "parameters": []
        },
        {
          "name": "get_obv",
          "description": "Return the on balance volume values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_ht_trendline",
          "description": "Return the Hilbert transform, instantaneous trendline values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_ht_sine",
          "description": "Return the Hilbert transform, sine wave values in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_ht_trendmode",
          "description": "Return the Hilbert transform, trend vs cycle mode in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_ht_dcperiod",
          "description": "Return the Hilbert transform, dominant cycle period in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_ht_dcphase",
          "description": "Return the Hilbert transform, dominant cycle phase in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_ht_phasor",
          "description": "Return the Hilbert transform, phasor components in two json objects as data and meta_data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly' (default 'daily') series_type: The desired price type in the time series. Four types are supported: 'close', 'open', 'high', 'low' (default 'close') month: ONLY applicable to intraday intervals. By default, not set and the technical indicator values will be calculated based on the most recent 30 days of intraday data. entitlement: Supported values are 'realtime' for realtime US stock market data or 'delayed' for 15-minute delayed US stock market data",
          "parameters": []
        },
        {
          "name": "get_wti",
          "description": "Returns the West Texas Intermediate (WTI) crude oil prices. Keyword Arguments: interval: supported values are 'daily', 'weekly', 'monthly' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_brent",
          "description": "Returns the Brent (Europe) crude oil prices. Keyword Arguments: interval: supported values are 'daily', 'weekly', 'monthly' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_natural_gas",
          "description": "Returns the Henry Hub natural gas spot prices. Keyword Arguments: interval: supported values are 'daily', 'weekly', 'monthly' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_copper",
          "description": "Returns the global price of copper. Keyword Arguments: interval: supported values are 'monthly', 'quarterly', 'annual' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_aluminum",
          "description": "Returns the global price of aluminum. Keyword Arguments: interval: supported values are 'monthly', 'quarterly', 'annual' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_wheat",
          "description": "Returns the global price of wheat. Keyword Arguments: interval: supported values are 'monthly', 'quarterly', 'annual' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_corn",
          "description": "Returns the global price of corn. Keyword Arguments: interval: supported values are 'monthly', 'quarterly', 'annual' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_cotton",
          "description": "Returns the global price of cotton. Keyword Arguments: interval: supported values are 'monthly', 'quarterly', 'annual' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_sugar",
          "description": "Returns the global price of sugar. Keyword Arguments: interval: supported values are 'monthly', 'quarterly', 'annual' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_coffee",
          "description": "Returns the global price of coffee. Keyword Arguments: interval: supported values are 'monthly', 'quarterly', 'annual' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_price_index",
          "description": "Returns the global price index of all commodities. Keyword Arguments: interval: supported values are 'monthly', 'quarterly', 'annual' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_currency_exchange_rate",
          "description": "Returns the realtime exchange rate for any pair of physical currency (e.g., EUR) or physical currency (e.g., USD). Keyword Arguments: from_currency: The currency you would like to get the exchange rate for. It can either be a physical currency or digital/crypto currency. For example: from_currency=USD or from_currency=BTC. to_currency: The destination currency for the exchange rate. It can either be a physical currency or digital/crypto currency. For example: to_currency=USD or to_currency=BTC.",
          "parameters": [
            {
              "name": "get_currency_exchange_rate",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_currency_exchange_intraday",
          "description": "Returns the intraday exchange rate for any pair of physical currency (e.g., EUR) or physical currency (e.g., USD). Keyword Arguments: from_symbol: The currency you would like to get the exchange rate For example: from_currency=EUR or from_currency=USD. to_symbol: The destination currency for the exchange rate. For example: to_currency=USD or to_currency=JPY. interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min' (default '15min') outputsize: The size of the call, supported values are 'compact' and 'full; the first returns the last 100 points in the data series, and 'full' returns the full-length intraday times series, commonly above 1MB (default 'compact')",
          "parameters": [
            {
              "name": "get_currency_exchange_intraday",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_currency_exchange_daily",
          "description": "Returns the daily exchange rate for any pair of physical currency (e.g., EUR) or physical currency (e.g., USD). Keyword Arguments: from_symbol: The currency you would like to get the exchange rate For example: from_symbol=EUR or from_symbol=USD. to_symbol: The destination currency for the exchange rate. For example: to_symbol=USD or to_symbol=JPY. outputsize: The size of the call, supported values are 'compact' and 'full; the first returns the last 100 points in the data series, and 'full' returns the full-length daily times series, commonly above 1MB (default 'compact')",
          "parameters": [
            {
              "name": "get_currency_exchange_daily",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_currency_exchange_weekly",
          "description": "Returns the weekly exchange rate for any pair of physical currency (e.g., EUR) or physical currency (e.g., USD). Keyword Arguments: from_symbol: The currency you would like to get the exchange rate For example: from_symbol=EUR or from_symbol=USD. to_symbol: The destination currency for the exchange rate. For example: to_symbol=USD or to_symbol=JPY. outputsize: The size of the call, supported values are 'compact' and 'full; the first returns the last 100 points in the data series, and 'full' returns the full-length weekly times series, commonly above 1MB (default 'compact')",
          "parameters": [
            {
              "name": "get_currency_exchange_weekly",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_currency_exchange_monthly",
          "description": "Returns the monthly exchange rate for any pair of physical currency (e.g., EUR) or physical currency (e.g., USD). Keyword Arguments: from_symbol: The currency you would like to get the exchange rate For example: from_symbol=EUR or from_symbol=USD. to_symbol: The destination currency for the exchange rate. For example: to_symbol=USD or to_symbol=JPY. interval: time interval between two conscutive values, supported values are '1min', '5min', '15min', '30min', '60min' (default '15min') outputsize: The size of the call, supported values are 'compact' and 'full; the first returns the last 100 points in the data series, and 'full' returns the full-length monthly times series, commonly above 1MB (default 'compact')",
          "parameters": [
            {
              "name": "get_currency_exchange_monthly",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_real_gdp",
          "description": "Returns the annual and quarterly Real GDP of the United States Keyword Arguments: interval: supported values are 'quarterly', 'annual' (default 'annual')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_real_gdp_per_capita",
          "description": "Returns the quarterly Real GDP per Capita data of the United States",
          "parameters": [
            {
              "name": "get_real_gdp_per_capita",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_treasury_yield",
          "description": "Returns the US treasury yield of a given maturity timeline Keyword Arguments: interval: supported values are 'daily', 'weekly', 'monthly' (default 'monthly') maturity: supported values are '3month', '2year', '5year', '7year', '10year', '30year' (default '10year')",
          "parameters": []
        },
        {
          "name": "get_ffr",
          "description": "Returns the federal funds rate (interest rate) of the United States Keyword Arguments: interval: supported values are 'daily', 'weekly', 'monthly' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_cpi",
          "description": "Returns the consumer price index of the United States Keyword Arguments: interval: supported values are 'semiannual', 'monthly' (default 'monthly')",
          "parameters": [
            {
              "name": "Keyword",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_inflation",
          "description": "Returns the annual inflation rates (consumer prices) of the United States",
          "parameters": [
            {
              "name": "get_inflation",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_retail_sales",
          "description": "Returns the monthly Advance Retail Sales: Retail Trade data of the United States",
          "parameters": [
            {
              "name": "get_retail_sales",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_durables",
          "description": "Returns the monthly manufacturers' new orders of durable goods in the United States",
          "parameters": [
            {
              "name": "get_durables",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_unemployment",
          "description": "Returns the monthly unemployment data of the United States",
          "parameters": [
            {
              "name": "get_unemployment",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_nonfarm",
          "description": "Returns the monthly US All Employees: Total Nonfarm",
          "parameters": [
            {
              "name": "get_nonfarm",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_news_sentiment",
          "description": "Return live and historical market news & sentiment data from news outlets around the world. It raises ValueError when problems arise Keyword Arguments: tickers: the stock/crypto/forex symbols of your choice topics: news topics of your choice time_from and time_to: time range of the news articles you are targeting, in YYYYMMDDTHHMM format. If time_from is specified but time_to is missing, returns articles published between the time_from value and the current time sort: sort articles returned by API supported values are 'LATEST', 'EARLIEST', 'RELEVANCE' (default 'LATEST') limit: number of output results supported values are 50, 1000 (default 50)",
          "parameters": []
        },
        {
          "name": "get_top_gainers",
          "description": "Returns the top 20 gainers in the US market. It raises ValueError when problems arise.",
          "parameters": []
        },
        {
          "name": "get_top_losers",
          "description": "Returns the top 20 losers in the US market. It raises ValueError when problems arise.",
          "parameters": []
        },
        {
          "name": "get_most_active",
          "description": "Returns the top 20 most actively traded tickers in the US market. It raises ValueError when problems arise.",
          "parameters": []
        },
        {
          "name": "get_realtime_options",
          "description": "Return realtime US options data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data contract: US options contract ID. By default, not set and entire option chain is returned",
          "parameters": []
        },
        {
          "name": "get_historical_options",
          "description": "Return historical US options data. It raises ValueError when problems arise Keyword Arguments: symbol: the symbol for the equity we want to get its data date: By default, not set and data for the previous trading session is returned. Any date later than 2008-01-01 is accepted.",
          "parameters": []
        },
        {
          "name": "get_digital_currency_daily",
          "description": "Returns the daily historical time series for a digital currency (e.g., BTC) traded on a specific market (e.g., CNY/Chinese Yuan), refreshed daily at midnight (UTC). Prices and volumes are quoted in both the market-specific currency and USD.. Keyword Arguments: symbol: The digital/crypto currency of your choice. It can be any of the currencies in the digital currency list. For example: symbol=BTC. market: The exchange market of your choice. It can be any of the market in the market list. For example: market=CNY.",
          "parameters": [
            {
              "name": "get_digital_currency_daily",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_digital_currency_weekly",
          "description": "Returns the weekly historical time series for a digital currency (e.g., BTC) traded on a specific market (e.g., CNY/Chinese Yuan), refreshed daily at midnight (UTC). Prices and volumes are quoted in both the market-specific currency and USD.. Keyword Arguments: symbol: The digital/crypto currency of your choice. It can be any of the currencies in the digital currency list. For example: symbol=BTC. market: The exchange market of your choice. It can be any of the market in the market list. For example: market=CNY.",
          "parameters": [
            {
              "name": "get_digital_currency_weekly",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_digital_currency_monthly",
          "description": "Returns the monthly historical time series for a digital currency (e.g., BTC) traded on a specific market (e.g., CNY/Chinese Yuan), refreshed daily at midnight (UTC). Prices and volumes are quoted in both the market-specific currency and USD.. Keyword Arguments: symbol: The digital/crypto currency of your choice. It can be any of the currencies in the digital currency list. For example: symbol=BTC. market: The exchange market of your choice. It can be any of the market in the market list. For example: market=CNY.",
          "parameters": [
            {
              "name": "get_digital_currency_monthly",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_digital_currency_exchange_rate",
          "description": "Returns the realtime exchange rate for any pair of digital currency (e.g., BTC) or physical currency (e.g., USD). Keyword Arguments: from_currency: The currency you would like to get the exchange rate for. It can either be a physical currency or digital/crypto currency. For example: from_currency=USD or from_currency=BTC. to_currency: The destination currency for the exchange rate. It can either be a physical currency or digital/crypto currency. For example: to_currency=USD or to_currency=BTC.",
          "parameters": [
            {
              "name": "get_digital_currency_exchange_rate",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_crypto_intraday",
          "description": "Returns the intraday time series of the cryptocurrency specified, updated realtime. Keyword Arguments: symbol: digital/crypto currency of your choice market: exchange market of your choice interval: time interval between two consecutive values, supported values are '1min', '5min', '15min', '30min', '60min' outputsize: The size of the call, supported values are 'compact' and 'full; the first returns the last 100 points in the data series, and 'full' returns the full-length intraday times series (default 'compact')",
          "parameters": [
            {
              "name": "series",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@lifejwang11/alphavantage-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "alphavantageApiKey",
          "required": true,
          "description": "AlphaVantage API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@lifejwang11/alphavantage-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2310.@lifejwang11_alphavantage-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1986
  }
}