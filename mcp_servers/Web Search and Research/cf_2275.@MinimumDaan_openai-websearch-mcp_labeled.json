{
  "labels": {
    "analysis": "The MCP Server is designed to enhance AI models by enabling real-time web searches to fetch current information before generating responses. It allows customization of search results based on user location and controls the amount of context to balance quality, cost, and latency. The server automatically includes citations and annotations for sources used in responses, ensuring transparency and accuracy. The available tools, such as \"web_search_chat_completion\" and \"web_search_responses,\" indicate a focus on integrating web search capabilities with AI responses.",
    "reasoning": "The primary label is \"Web Search & Research\" because the core functionality revolves around performing web searches to retrieve up-to-date information. The secondary label \"AI/ML Tools\" is chosen because the server enhances AI models by providing real-time data, which is a key aspect of AI/ML workflows. The server does not fit custom labels as its functionality is well-covered by the predefined categories.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2274,
    "server_name": "OpenAI Web Search",
    "rank_by_usage": 2275,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@MinimumDaan_openai-websearch-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@MinimumDaan/openai-websearch-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2274,
      "name": "OpenAI Web Search",
      "author": "@MinimumDaan/openai-websearch-mcp",
      "overview": "Enable AI models to perform real-time web searches to retrieve current information before generating responses. Customize search results based on user location and control the amount of context for balancing quality, cost, and latency. Automatically include inline citations and annotations for sources used in responses.",
      "repository_url": "https://github.com/MinimumDaan/openai-websearch-mcp",
      "homepage": "https://smithery.ai/server/@MinimumDaan/openai-websearch-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@MinimumDaan_openai-websearch-mcp.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "web_search_chat_completion",
          "description": "Deploy Server OpenAI Web Search @MinimumDaan/openai-websearch-mcp Try in Playground web_search_chat_completion",
          "parameters": []
        },
        {
          "name": "web_search_responses",
          "description": "Perform a web search using OpenAI's Responses API with web_search_preview tool",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@MinimumDaan/openai-websearch-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "openaiApiKey",
          "required": true,
          "description": "OpenAI API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@MinimumDaan/openai-websearch-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2275.@MinimumDaan_openai-websearch-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1956
  }
}