{
  "labels": {
    "analysis": "The MCP Server is designed to provide access to transcripts from YouTube playlists, allowing users to retrieve and query video transcripts. It supports preloading specific playlists or customizing by providing different playlist URLs, making it useful for applications that require searchable transcript data from YouTube videos. The available tool demonstrates the server's ability to fetch transcripts from a specific playlist (\"kubecon - cloudnativecon europe 2025 - london\"), indicating its primary use case is related to video content analysis and retrieval.",
    "reasoning": "The primary label, \"Web Search & Research,\" is chosen because the server facilitates access to and querying of YouTube video transcripts, which is a form of content research. The secondary label, \"Content Creation,\" is selected because the transcripts can be used to create or enhance written content, such as summaries or educational materials. The server's functionality is uniquely focused on video transcript retrieval, which is not fully covered by existing predefined categories, hence the custom label \"Video Transcript Management.\"",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Content Creation"
    ],
    "custom_label": "Video Transcript Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1284,
    "server_name": "Playlist Transcript Server",
    "rank_by_usage": 1285,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@luebken_playlist-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@luebken/playlist-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1284,
      "name": "Playlist Transcript Server",
      "author": "@luebken/playlist-mcp",
      "overview": "Provide access to transcripts of YouTube playlists, enabling easy retrieval and querying of video transcripts. Preload with specific playlists or customize by specifying a different playlist URL. Enhance your applications with rich, searchable video transcript data from YouTube playlists.",
      "repository_url": "https://github.com/luebken/playlist-mcp",
      "homepage": "https://smithery.ai/server/@luebken/playlist-mcp",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@luebken_playlist-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "fetch_transcripts_kubecon_-_cloudnativecon_europe_2025_-_london",
          "description": "Deploy Server Playlist Transcript Server Claim Server @luebken/playlist-mcp Try in Playground fetch_transcripts_kubecon_-_cloudnativecon_europe_2025_-_london",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@luebken/playlist-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@luebken/playlist-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1285.@luebken_playlist-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1223
  }
}