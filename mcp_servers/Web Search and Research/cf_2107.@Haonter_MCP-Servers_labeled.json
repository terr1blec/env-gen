{
  "labels": {
    "analysis": "The MCP Server \"OnePiece & Geolocalizar\" provides two distinct functionalities: detailed information about One Piece characters and geolocation of public IPv4 addresses. The One Piece tool caters to anime/manga enthusiasts by offering character data, while the Geolocalizar tool serves a technical purpose for locating IP addresses geographically. Both tools are designed for easy integration into applications via CLI or standard I/O streams.",
    "reasoning": "The primary label \"Web Search & Research\" was chosen because the server provides detailed character data (One Piece) and IP geolocation, both of which are research-oriented tools. The secondary labels \"Data Analysis & Processing\" and \"Web Search & Research\" reflect the processing aspect of geolocation and the research utility of character data. A custom label \"Anime Reference Database\" was added to highlight the unique One Piece character data functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Data Analysis & Processing",
      "Web Search & Research"
    ],
    "custom_label": "Anime Reference Database",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2106,
    "server_name": "OnePiece & Geolocalizar MCP Servers",
    "rank_by_usage": 2107,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Haonter_MCP-Servers.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Haonter/MCP-Servers/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2106,
      "name": "OnePiece & Geolocalizar MCP Servers",
      "author": "@Haonter/MCP-Servers",
      "overview": "Provide quick access to detailed information about One Piece characters and geolocate public IPv4 addresses. Integrate these useful tools seamlessly with any MCP-compatible AI client to enrich your applications with anime character data and IP geolocation capabilities. Run easily from the command line or integrate via standard input/output streams.",
      "repository_url": "https://github.com/Haonter/MCP-Servers",
      "homepage": "https://smithery.ai/server/@Haonter/MCP-Servers",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Haonter_MCP-Servers.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "one_piece",
          "description": "Deploy Server OnePiece & Geolocalizar MCP Servers Claim Server @Haonter/MCP-Servers Try in Playground",
          "parameters": [
            {
              "name": "one_piece",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Haonter/MCP-Servers/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Haonter/MCP-Servers/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2107.@Haonter_MCP-Servers_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1831
  }
}