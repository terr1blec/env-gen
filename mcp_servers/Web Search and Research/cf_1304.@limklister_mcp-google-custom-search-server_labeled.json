{
  "labels": {
    "analysis": "The MCP Server acts as an interface to Google's Custom Search API, enabling language models to perform web searches through a simple standardized interface. It processes search queries and returns structured results including titles, URLs, and descriptions. The primary function is to provide real-time web search capabilities without requiring direct API integration from the client side, enhancing the LLM's ability to access and retrieve up-to-date information from the web.",
    "reasoning": "The primary label \"Web Search & Research\" was chosen because the server's core functionality is centered around enabling web searches and information retrieval. The \"API Integration\" secondary label is included because the server acts as an intermediary layer, simplifying the integration with Google's Custom Search API. No custom label is needed as the predefined labels sufficiently describe the server's functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1303,
    "server_name": "Google Custom Search Server",
    "rank_by_usage": 1304,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@limklister_mcp-google-custom-search-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@limklister/mcp-google-custom-search-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1303,
      "name": "Google Custom Search Server",
      "author": "@limklister/mcp-google-custom-search-server",
      "overview": "Enable your language models to perform web searches effortlessly using Google's Custom Search API. Integrate search capabilities into your applications with a standardized interface, providing formatted results including titles, URLs, and descriptions. Enhance your LLM's functionality and access real-time information from the web seamlessly.",
      "repository_url": "https://github.com/limklister/mcp-google-custom-search-server",
      "homepage": "https://smithery.ai/server/@limklister/mcp-google-custom-search-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@limklister_mcp-google-custom-search-server.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "search",
          "description": "Deploy Server Google Custom Search Server Claim Server @limklister/mcp-google-custom-search-server Try in Playground",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "numResults",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@limklister/mcp-google-custom-search-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "googleApiKey",
          "required": true,
          "description": "Google Custom Search API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@limklister/mcp-google-custom-search-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1304.@limklister_mcp-google-custom-search-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1238
  }
}