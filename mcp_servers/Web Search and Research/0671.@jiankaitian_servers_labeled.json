{
  "labels": {
    "analysis": "The MCP Server \"Fetch Server\" is primarily designed to retrieve web content and convert it into markdown format for easier processing by language models. It enables LLMs to access and utilize up-to-date web information by fetching pages in chunks. The server also allows customization of user-agent, proxy settings, and respects robots.txt, making it versatile for various web content extraction needs. This functionality addresses the limitation of LLMs needing direct internet access and provides a structured way to process web data.",
    "reasoning": "The primary label \"Web Search & Research\" is chosen because the server's core functionality revolves around fetching and processing web content, which aligns with information gathering and research tasks. The secondary label \"Browser Automation\" is included because the tool can extract and convert web pages, resembling automated web interaction. No custom label is needed as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Browser Automation"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 670,
    "server_name": "Fetch Server",
    "rank_by_usage": 671,
    "usage_count": "13",
    "original_file": "../crawler/smithery/@jiankaitian_servers.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@jiankaitian/servers/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "fetch",
          "description": "Fetches a URL from the internet and optionally extracts its contents as markdown.\n\nAlthough originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.",
          "input_schema": {
            "description": "Parameters for fetching a URL.",
            "properties": {
              "url": {
                "description": "URL to fetch",
                "format": "uri",
                "minLength": 1,
                "title": "Url",
                "type": "string"
              },
              "max_length": {
                "default": 5000,
                "description": "Maximum number of characters to return.",
                "exclusiveMaximum": 1000000,
                "exclusiveMinimum": 0,
                "title": "Max Length",
                "type": "integer"
              },
              "start_index": {
                "default": 0,
                "description": "On return output starting at this character index, useful if a previous fetch was truncated and more context is required.",
                "minimum": 0,
                "title": "Start Index",
                "type": "integer"
              },
              "raw": {
                "default": false,
                "description": "Get the actual HTML content of the requested page, without simplification.",
                "title": "Raw",
                "type": "boolean"
              }
            },
            "required": [
              "url"
            ],
            "title": "Fetch",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "fetch"
      ]
    },
    "server_info_crawled": {
      "id": 670,
      "name": "Fetch Server",
      "author": "@jiankaitian/servers",
      "overview": "Fetch web content and convert it to markdown for easier consumption by language models. Enable LLMs to retrieve and process web pages in chunks, supporting efficient content extraction. Customize user-agent, proxy, and robots.txt behavior to suit your needs.",
      "repository_url": "https://github.com/jiankaitian/servers",
      "homepage": "https://smithery.ai/server/@jiankaitian/servers",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "13",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@jiankaitian_servers.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "fetch",
          "description": "Fetches a URL from the internet and optionally extracts its contents as markdown.\n\nAlthough originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.",
          "input_schema": {
            "description": "Parameters for fetching a URL.",
            "properties": {
              "url": {
                "description": "URL to fetch",
                "format": "uri",
                "minLength": 1,
                "title": "Url",
                "type": "string"
              },
              "max_length": {
                "default": 5000,
                "description": "Maximum number of characters to return.",
                "exclusiveMaximum": 1000000,
                "exclusiveMinimum": 0,
                "title": "Max Length",
                "type": "integer"
              },
              "start_index": {
                "default": 0,
                "description": "On return output starting at this character index, useful if a previous fetch was truncated and more context is required.",
                "minimum": 0,
                "title": "Start Index",
                "type": "integer"
              },
              "raw": {
                "default": false,
                "description": "Get the actual HTML content of the requested page, without simplification.",
                "title": "Raw",
                "type": "boolean"
              }
            },
            "required": [
              "url"
            ],
            "title": "Fetch",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@jiankaitian/servers/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@jiankaitian/servers/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0671.@jiankaitian_servers_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 655
  }
}