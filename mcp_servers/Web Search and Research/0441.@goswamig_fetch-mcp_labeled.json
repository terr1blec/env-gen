{
  "labels": {
    "analysis": "The MCP Server \"Fetch Server\" is primarily designed to retrieve and transform web content in various formats including HTML, JSON, plain text, and Markdown. It provides a set of tools to fetch data from URLs, allowing users to specify the desired output format, which can be useful for web scraping, data extraction, and API interactions. The ability to customize headers makes it versatile for different use cases, such as automated data collection or application integration.",
    "reasoning": "The primary label \"Web Search & Research\" is chosen because the server's core functionality revolves around fetching and transforming web content, which is a common operation in research and information gathering. The secondary label \"Browser Automation\" is selected due to its potential use in scraping and automated interactions with web content. A custom label \"Content Extraction\" is also included to highlight its specific role in retrieving formatted data from the web.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Browser Automation"
    ],
    "custom_label": "Content Extraction",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 440,
    "server_name": "Fetch Server",
    "rank_by_usage": 441,
    "usage_count": "46",
    "original_file": "../crawler/smithery/@goswamig_fetch-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@goswamig/fetch-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "fetch_html",
          "description": "Fetch a website and return the content as HTML",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the website to fetch"
              },
              "headers": {
                "type": "object",
                "description": "Optional headers to include in the request"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "fetch_markdown",
          "description": "Fetch a website and return the content as Markdown",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the website to fetch"
              },
              "headers": {
                "type": "object",
                "description": "Optional headers to include in the request"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "fetch_txt",
          "description": "Fetch a website, return the content as plain text (no HTML)",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the website to fetch"
              },
              "headers": {
                "type": "object",
                "description": "Optional headers to include in the request"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "fetch_json",
          "description": "Fetch a JSON file from a URL",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the JSON to fetch"
              },
              "headers": {
                "type": "object",
                "description": "Optional headers to include in the request"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "fetch_html",
        "fetch_markdown",
        "fetch_txt",
        "fetch_json"
      ]
    },
    "server_info_crawled": {
      "id": 440,
      "name": "Fetch Server",
      "author": "@goswamig/fetch-mcp",
      "overview": "Fetch web content in various formats like HTML, JSON, plain text, and Markdown. Easily retrieve and transform online data with custom headers for your applications. Streamline your content fetching process with a simple and efficient server setup.",
      "repository_url": "https://github.com/goswamig/fetch-mcp",
      "homepage": "https://smithery.ai/server/@goswamig/fetch-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "46",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@goswamig_fetch-mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "fetch_html",
          "description": "Fetch a website and return the content as HTML",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the website to fetch"
              },
              "headers": {
                "type": "object",
                "description": "Optional headers to include in the request"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "fetch_markdown",
          "description": "Fetch a website and return the content as Markdown",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the website to fetch"
              },
              "headers": {
                "type": "object",
                "description": "Optional headers to include in the request"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "fetch_txt",
          "description": "Fetch a website, return the content as plain text (no HTML)",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the website to fetch"
              },
              "headers": {
                "type": "object",
                "description": "Optional headers to include in the request"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "fetch_json",
          "description": "Fetch a JSON file from a URL",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the JSON to fetch"
              },
              "headers": {
                "type": "object",
                "description": "Optional headers to include in the request"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@goswamig/fetch-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@goswamig/fetch-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0441.@goswamig_fetch-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 434
  }
}