{
  "labels": {
    "analysis": "The MCP Server is primarily focused on providing seamless integration with Meilisearch, a powerful search and indexing engine. Its core functionality revolves around enabling real-time communication and advanced search capabilities, including vector search, within AI workflows. The server acts as a bridge between AI models and Meilisearch's APIs, simplifying data retrieval and management for AI-driven applications. The available tool (Optional Settings) suggests some basic server management functionality but does not significantly alter the primary focus on search and indexing.",
    "reasoning": "The primary label \"Web Search & Research\" was chosen because the server's primary functionality is centered around search capabilities (including vector search) and indexing, which are fundamental to information retrieval and research tasks. The secondary label \"AI/ML Tools\" was added because the server is designed to integrate with AI models and enhance AI workflows. The custom label \"Search Engine Integration\" was chosen to highlight the server's unique role in connecting AI systems with Meilisearch's advanced search APIs.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": "Search Engine Integration",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2339,
    "server_name": "Meilisearch API Server",
    "rank_by_usage": 2340,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@falcosan_mcp-meilisearch.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@falcosan/mcp-meilisearch/mcp?config=eyJNRUlMSVNFQVJDSF9IT1NUIjogImh0dHA6Ly9sb2NhbGhvc3Q6NzcwMCIsICJNRUlMSVNFQVJDSF9BUElfS0VZIjogIiJ9&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "Connection timeout (20 seconds)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2339,
      "name": "Meilisearch API Server",
      "author": "@falcosan/mcp-meilisearch",
      "overview": "Provide AI models with seamless access to Meilisearch's powerful search and indexing capabilities through a comprehensive MCP server implementation. Enable real-time communication and advanced search functionalities including vector search within AI workflows. Simplify integration of Meilisearch APIs as callable tools for enhanced AI-driven data retrieval and management.",
      "repository_url": "https://github.com/falcosan/mcp",
      "homepage": "https://smithery.ai/server/@falcosan/mcp-meilisearch",
      "remote_or_local": "Remote",
      "license": "Not specified",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@falcosan_mcp-meilisearch.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "Optional Settings",
          "description": "Access and manage servers by signing in.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"MEILISEARCH_HOST\": \"http://localhost:7700\",\n  \"MEILISEARCH_API_KEY\": \"\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@falcosan/mcp-meilisearch/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"MEILISEARCH_HOST\": \"http://localhost:7700\",\n  \"MEILISEARCH_API_KEY\": \"\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@falcosan/mcp-meilisearch/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "cf_2340.@falcosan_mcp-meilisearch_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2011
  }
}