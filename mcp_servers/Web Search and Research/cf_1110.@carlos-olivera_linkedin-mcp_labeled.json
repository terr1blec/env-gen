{
  "labels": {
    "analysis": "The MCP Server facilitates job searching and feed monitoring on LinkedIn by providing tools to retrieve user profiles, job listings, and feed posts. It supports advanced filtering, pagination, and resume analysis to streamline recruitment workflows. The core functionality revolves around LinkedIn data extraction and automation for HR and job seekers.",
    "reasoning": "The primary label is \"Web Search & Research\" as the server's main purpose is to search for and retrieve professional information from LinkedIn. \"Browser Automation\" is a secondary fit due to its automation capabilities for LinkedIn operations. No custom label is needed as the predefined categories adequately cover the functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Browser Automation",
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1109,
    "server_name": "LinkedIn Job and Feed Search Server",
    "rank_by_usage": 1110,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@carlos-olivera_linkedin-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@carlos-olivera/linkedin-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1109,
      "name": "LinkedIn Job and Feed Search Server",
      "author": "@carlos-olivera/linkedin-mcp",
      "overview": "Enable seamless job applications and feed searches on LinkedIn through advanced profile retrieval, job search with multiple filters, feed post access, and resume analysis. Extract key profile details and parse resumes to enhance recruitment workflows. Customize search parameters and pagination for efficient data retrieval.",
      "repository_url": "https://github.com/carlos-olivera/linkedin-mcp",
      "homepage": "https://smithery.ai/server/@carlos-olivera/linkedin-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@carlos-olivera_linkedin-mcp.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "get_profile",
          "description": "Deploy Server LinkedIn Job and Feed Search Server @carlos-olivera/linkedin-mcp Try in Playground get_profile",
          "parameters": [
            {
              "name": "Retrieves",
              "required": false,
              "type": "string"
            },
            {
              "name": "the",
              "required": false,
              "type": "string"
            },
            {
              "name": "User",
              "required": false,
              "type": "string"
            },
            {
              "name": "Profile",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_feed_posts",
          "description": "Retrieve LinkedIn feed posts. :return: List of feed post details",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@carlos-olivera/linkedin-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@carlos-olivera/linkedin-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1110.@carlos-olivera_linkedin-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1087
  }
}