{
  "labels": {
    "analysis": "The MCP Server enables autonomous network traffic analysis by interfacing with Suricata, a popular open-source network intrusion detection system (IDS). Its core functionality revolves around processing network traffic data from PCAP files to generate alerts and statistics, which are useful for security monitoring and threat detection. The tools provided allow users to retrieve Suricata version information, help output, and analysis results from network captures, enhancing security workflows by automating tedious manual processes.",
    "reasoning": "The primary label \"Security & Authentication\" was chosen because the server's main purpose is to process network traffic data for security analysis, specifically intrusion detection and alert generation. The secondary label \"Data Analysis & Processing\" was added because it involves statistical analysis of network traffic. While not explicitly predefined, the \"Network Security Monitoring\" custom label captures the specific focus on analyzing network packets for security purposes.",
    "primary_label": "Security & Authentication",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": "Network Security Monitoring",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2285,
    "server_name": "Suricata Network Traffic Analysis Server",
    "rank_by_usage": 2286,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Medinios_SuricataMCP.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Medinios/SuricataMCP/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_suricata_version",
          "description": "",
          "input_schema": {
            "properties": {},
            "title": "get_suricata_versionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_suricata_help",
          "description": "",
          "input_schema": {
            "properties": {},
            "title": "get_suricata_helpArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_alerts_from_pcap_file",
          "description": "\n    Processes a PCAP file with Suricata and returns the generated alert logs.\n\n    This function runs Suricata against a given PCAP file, stores the results in a specified directory,\n    and then reads the generated `fast.log` file to return its contents.\n\n    Args:\n        pcap_destination (str): The path to the PCAP file to analyze.\n        destination_folder_results (str): The directory where Suricata should output its results.\n\n    Returns:\n        str: The contents of the `fast.log` file generated by Suricata.\n\n    Raises:\n        CommandExecutionError: If the `fast.log` file is not found or an unexpected error occurs during execution.\n    ",
          "input_schema": {
            "properties": {
              "pcap_destination": {
                "title": "Pcap Destination",
                "type": "string"
              },
              "destination_folder_results": {
                "title": "Destination Folder Results",
                "type": "string"
              }
            },
            "required": [
              "pcap_destination",
              "destination_folder_results"
            ],
            "title": "get_alerts_from_pcap_fileArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_stats_from_pcap_file",
          "description": "\n    Processes a PCAP file with Suricata and returns the generated statistics logs.\n\n    This function runs Suricata against a given PCAP file, stores the results in a specified directory,\n    and then reads the generated `stats.log` file to return its contents.\n\n    Args:\n        pcap_destination (str): The path to the PCAP file to analyze.\n        destination_folder_results (str): The directory where Suricata should output its results.\n\n    Returns:\n        str: The contents of the `stats.log` file generated by Suricata.\n\n    Raises:\n        CommandExecutionError: If the `stats.log` file is not found or an unexpected error occurs during execution.\n    ",
          "input_schema": {
            "properties": {
              "pcap_destination": {
                "title": "Pcap Destination",
                "type": "string"
              },
              "destination_folder_results": {
                "title": "Destination Folder Results",
                "type": "string"
              }
            },
            "required": [
              "pcap_destination",
              "destination_folder_results"
            ],
            "title": "get_stats_from_pcap_fileArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "get_suricata_version",
        "get_suricata_help",
        "get_alerts_from_pcap_file",
        "get_stats_from_pcap_file"
      ]
    },
    "server_info_crawled": {
      "id": 2285,
      "name": "Suricata Network Traffic Analysis Server",
      "author": "@Medinios/SuricataMCP",
      "overview": "Enable autonomous network traffic analysis by programmatically interacting with Suricata through a simple MCP interface. Retrieve Suricata version info, help output, and alerts from pcap files seamlessly integrated with AI coding tools. Enhance your security workflows with easy access to Suricata's powerful detection capabilities.",
      "repository_url": "https://github.com/Medinios/SuricataMCP",
      "homepage": "https://smithery.ai/server/@Medinios/SuricataMCP",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Medinios_SuricataMCP.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "get_suricata_version",
          "description": "",
          "input_schema": {
            "properties": {},
            "title": "get_suricata_versionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_suricata_help",
          "description": "",
          "input_schema": {
            "properties": {},
            "title": "get_suricata_helpArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_alerts_from_pcap_file",
          "description": "\n    Processes a PCAP file with Suricata and returns the generated alert logs.\n\n    This function runs Suricata against a given PCAP file, stores the results in a specified directory,\n    and then reads the generated `fast.log` file to return its contents.\n\n    Args:\n        pcap_destination (str): The path to the PCAP file to analyze.\n        destination_folder_results (str): The directory where Suricata should output its results.\n\n    Returns:\n        str: The contents of the `fast.log` file generated by Suricata.\n\n    Raises:\n        CommandExecutionError: If the `fast.log` file is not found or an unexpected error occurs during execution.\n    ",
          "input_schema": {
            "properties": {
              "pcap_destination": {
                "title": "Pcap Destination",
                "type": "string"
              },
              "destination_folder_results": {
                "title": "Destination Folder Results",
                "type": "string"
              }
            },
            "required": [
              "pcap_destination",
              "destination_folder_results"
            ],
            "title": "get_alerts_from_pcap_fileArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_stats_from_pcap_file",
          "description": "\n    Processes a PCAP file with Suricata and returns the generated statistics logs.\n\n    This function runs Suricata against a given PCAP file, stores the results in a specified directory,\n    and then reads the generated `stats.log` file to return its contents.\n\n    Args:\n        pcap_destination (str): The path to the PCAP file to analyze.\n        destination_folder_results (str): The directory where Suricata should output its results.\n\n    Returns:\n        str: The contents of the `stats.log` file generated by Suricata.\n\n    Raises:\n        CommandExecutionError: If the `stats.log` file is not found or an unexpected error occurs during execution.\n    ",
          "input_schema": {
            "properties": {
              "pcap_destination": {
                "title": "Pcap Destination",
                "type": "string"
              },
              "destination_folder_results": {
                "title": "Destination Folder Results",
                "type": "string"
              }
            },
            "required": [
              "pcap_destination",
              "destination_folder_results"
            ],
            "title": "get_stats_from_pcap_fileArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Medinios/SuricataMCP/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Medinios/SuricataMCP/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "2286.@Medinios_SuricataMCP_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1966
  }
}