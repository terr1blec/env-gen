{
  "labels": {
    "analysis": "The MCP Server \"AutoSpectra\" is focused on automating browser interactions, generating test cases, and enhancing AI agents with web automation capabilities. Its tools enable web scraping, accessibility checks, visual testing, and API interactions. It also supports debugging of automation scripts and integrates with AI for processing complex tasks.",
    "reasoning": "The primary functionality of \"AutoSpectra\" revolves around browser automation and generating tests, which aligns closely with the predefined category \"Browser Automation.\" The server also includes tools for API interactions, which makes \"API Integration\" a relevant secondary label. Additionally, the AI processing capabilities justify including \"AI/ML Tools\" as a secondary label.",
    "primary_label": "Browser Automation",
    "secondary_labels": [
      "API Integration",
      "AI/ML Tools"
    ],
    "custom_label": "Web Test Automation",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1587,
    "server_name": "AutoSpectra",
    "rank_by_usage": 1588,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@samuelvinay91_autospectra-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@samuelvinay91/autospectra-mcp-server/mcp?config=eyJwb3J0IjogMzAwMCwgInNsb3dNbyI6IDUwLCAiaGVhZGxlc3MiOiBmYWxzZX0=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "navigate",
          "description": "Navigate to a URL",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to navigate to"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "click",
          "description": "Click on an element",
          "input_schema": {
            "type": "object",
            "properties": {
              "selector": {
                "type": "string",
                "description": "CSS selector of the element"
              }
            },
            "required": [
              "selector"
            ]
          },
          "annotations": null
        },
        {
          "name": "type",
          "description": "Type text into an input field",
          "input_schema": {
            "type": "object",
            "properties": {
              "selector": {
                "type": "string",
                "description": "CSS selector of the input field"
              },
              "text": {
                "type": "string",
                "description": "Text to type"
              },
              "clearFirst": {
                "type": "boolean",
                "description": "Clear the field before typing"
              }
            },
            "required": [
              "selector",
              "text"
            ]
          },
          "annotations": null
        },
        {
          "name": "extract",
          "description": "Extract data from an element",
          "input_schema": {
            "type": "object",
            "properties": {
              "selector": {
                "type": "string",
                "description": "CSS selector of the element"
              },
              "attribute": {
                "type": "string",
                "description": "Attribute to extract (default: textContent)"
              }
            },
            "required": [
              "selector"
            ]
          },
          "annotations": null
        },
        {
          "name": "screenshot",
          "description": "Take a screenshot",
          "input_schema": {
            "type": "object",
            "properties": {
              "fullPage": {
                "type": "boolean",
                "description": "Whether to take a full page screenshot"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "check_accessibility",
          "description": "Run accessibility tests on the current page",
          "input_schema": {
            "type": "object",
            "properties": {
              "rules": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Specific accessibility rules to check"
              },
              "includeHidden": {
                "type": "boolean",
                "description": "Whether to include hidden elements in the test"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "generate_tests",
          "description": "Generate test cases for an application",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the application to analyze"
              },
              "framework": {
                "type": "string",
                "description": "Test framework to use (e.g., playwright, mocha, jest)"
              },
              "style": {
                "type": "string",
                "description": "Test style (e.g., bdd, tdd)"
              },
              "format": {
                "type": "string",
                "description": "Output format (e.g., javascript, typescript)"
              },
              "prompt": {
                "type": "string",
                "description": "Description of the test scenarios to generate"
              }
            },
            "required": [
              "url",
              "prompt"
            ]
          },
          "annotations": null
        },
        {
          "name": "ai_process",
          "description": "Process a task with AI to generate automation steps",
          "input_schema": {
            "type": "object",
            "properties": {
              "task": {
                "type": "string",
                "description": "Task description"
              },
              "url": {
                "type": "string",
                "description": "URL context"
              }
            },
            "required": [
              "task"
            ]
          },
          "annotations": null
        },
        {
          "name": "self_healing_record",
          "description": "Record a test session with self-healing selectors",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to start recording at"
              },
              "outputFormat": {
                "type": "string",
                "description": "Output format (e.g., playwright, cypress)"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "visual_comparison",
          "description": "Compare visual snapshots of a web page",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to compare"
              },
              "baselinePath": {
                "type": "string",
                "description": "Path to baseline image (if any)"
              },
              "threshold": {
                "type": "number",
                "description": "Comparison threshold (0-1)"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "list_frameworks",
          "description": "Get a list of supported test frameworks, styles, and formats",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        },
        {
          "name": "api_request",
          "description": "Make an HTTP request to an API endpoint",
          "input_schema": {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "description": "HTTP method (GET, POST, PUT, DELETE)"
              },
              "url": {
                "type": "string",
                "description": "API endpoint URL"
              },
              "headers": {
                "type": "object",
                "description": "Request headers"
              },
              "data": {
                "type": "object",
                "description": "Request body"
              },
              "params": {
                "type": "object",
                "description": "URL parameters"
              },
              "auth": {
                "type": "object",
                "description": "Authentication details"
              }
            },
            "required": [
              "method",
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "validate_schema",
          "description": "Validate API responses against schemas",
          "input_schema": {
            "type": "object",
            "properties": {
              "response": {
                "type": "object",
                "description": "API response to validate"
              },
              "schema": {
                "type": "object",
                "description": "JSON schema to validate against"
              },
              "schemaPath": {
                "type": "string",
                "description": "Path to schema file"
              }
            },
            "required": [
              "response"
            ]
          },
          "annotations": null
        },
        {
          "name": "create_mock",
          "description": "Create mock API endpoints for testing",
          "input_schema": {
            "type": "object",
            "properties": {
              "endpoint": {
                "type": "string",
                "description": "Endpoint path to mock"
              },
              "method": {
                "type": "string",
                "description": "HTTP method"
              },
              "response": {
                "type": "object",
                "description": "Mock response"
              },
              "statusCode": {
                "type": "number",
                "description": "Response status code"
              }
            },
            "required": [
              "endpoint",
              "method",
              "response"
            ]
          },
          "annotations": null
        },
        {
          "name": "graphql_request",
          "description": "Make GraphQL requests",
          "input_schema": {
            "type": "object",
            "properties": {
              "endpoint": {
                "type": "string",
                "description": "GraphQL API endpoint"
              },
              "query": {
                "type": "string",
                "description": "GraphQL query"
              },
              "variables": {
                "type": "object",
                "description": "Query variables"
              },
              "headers": {
                "type": "object",
                "description": "Request headers"
              }
            },
            "required": [
              "endpoint",
              "query"
            ]
          },
          "annotations": null
        },
        {
          "name": "run_test",
          "description": "Run a generated test file",
          "input_schema": {
            "type": "object",
            "properties": {
              "testPath": {
                "type": "string",
                "description": "Path to the test file to run"
              },
              "installDeps": {
                "type": "boolean",
                "description": "Whether to install dependencies if needed"
              }
            },
            "required": [
              "testPath"
            ]
          },
          "annotations": null
        },
        {
          "name": "initialize_computer",
          "description": "Initialize a computer use provider",
          "input_schema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Provider type: \"api\" (direct API call) or \"container\" (Docker container with full Linux environment)",
                "enum": [
                  "api",
                  "container"
                ]
              },
              "apiKey": {
                "type": "string",
                "description": "Optional Anthropic API key (will use environment variable if not provided)"
              },
              "containerImage": {
                "type": "string",
                "description": "Optional container image to use (for container provider)"
              },
              "width": {
                "type": "number",
                "description": "Optional screen width (for container provider)"
              },
              "height": {
                "type": "number",
                "description": "Optional screen height (for container provider)"
              }
            },
            "required": [
              "type"
            ]
          },
          "annotations": null
        },
        {
          "name": "debug_test",
          "description": "Create or update a debug test session for interactive development",
          "input_schema": {
            "type": "object",
            "properties": {
              "testName": {
                "type": "string",
                "description": "Name of the debug test"
              },
              "testScript": {
                "type": "string",
                "description": "JavaScript test script containing step definitions"
              },
              "runImmediately": {
                "type": "boolean",
                "description": "Whether to run the test immediately after creation"
              },
              "breakAt": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Step IDs to break execution at"
              },
              "clearPrevious": {
                "type": "boolean",
                "description": "Whether to clear any previous debug session with the same name"
              }
            },
            "required": [
              "testName"
            ]
          },
          "annotations": null
        },
        {
          "name": "run_debug_test",
          "description": "Run a debug test",
          "input_schema": {
            "type": "object",
            "properties": {
              "testName": {
                "type": "string",
                "description": "Name of the debug test to run"
              },
              "fromStep": {
                "type": "number",
                "description": "Index of the step to start execution from"
              },
              "toStep": {
                "type": "number",
                "description": "Index of the step to end execution at"
              },
              "runToBreakpoint": {
                "type": "boolean",
                "description": "Whether to pause execution at breakpoints"
              }
            },
            "required": [
              "testName"
            ]
          },
          "annotations": null
        },
        {
          "name": "continue_debug_test",
          "description": "Continue execution of a paused debug test",
          "input_schema": {
            "type": "object",
            "properties": {
              "steps": {
                "type": "number",
                "description": "Number of steps to execute before pausing again"
              },
              "runToBreakpoint": {
                "type": "boolean",
                "description": "Whether to pause execution at breakpoints"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "modify_debug_step",
          "description": "Add or modify a step in a debug test",
          "input_schema": {
            "type": "object",
            "properties": {
              "stepId": {
                "type": "string",
                "description": "ID of the step to modify"
              },
              "type": {
                "type": "string",
                "description": "Type of step (navigate, click, type, etc.)"
              },
              "args": {
                "type": "object",
                "description": "Arguments for the step"
              },
              "index": {
                "type": "number",
                "description": "Index to insert the step at (for new steps)"
              },
              "runAfter": {
                "type": "boolean",
                "description": "Whether to run the step immediately after modification"
              }
            },
            "required": [
              "stepId",
              "type",
              "args"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_debug_state",
          "description": "Get the current debug state including steps, logs, and screenshots",
          "input_schema": {
            "type": "object",
            "properties": {
              "includeStepResults": {
                "type": "boolean",
                "description": "Whether to include step results in the response"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "cleanup_debug_session",
          "description": "Clean up debug session resources",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        },
        {
          "name": "use_computer",
          "description": "Use Claude computer capabilities to perform complex tasks",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Description of the computer task to perform"
              },
              "model": {
                "type": "string",
                "description": "Claude model to use (default: claude-3-7-sonnet-20240307)"
              }
            },
            "required": [
              "prompt"
            ]
          },
          "annotations": null
        },
        {
          "name": "smart_computer_use",
          "description": "Use computer capabilities with fallback to AutoSpectra automation tools",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Description of the computer task to perform"
              },
              "useAutomation": {
                "type": "boolean",
                "description": "Whether to fall back to automation tools if computer use fails (default: true)"
              },
              "model": {
                "type": "string",
                "description": "Claude model to use (default: claude-3-7-sonnet-20240307)"
              }
            },
            "required": [
              "prompt"
            ]
          },
          "annotations": null
        },
        {
          "name": "cleanup_computer",
          "description": "Clean up computer use provider resources",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        }
      ],
      "tool_count": 26,
      "tool_names": [
        "navigate",
        "click",
        "type",
        "extract",
        "screenshot",
        "check_accessibility",
        "generate_tests",
        "ai_process",
        "self_healing_record",
        "visual_comparison",
        "list_frameworks",
        "api_request",
        "validate_schema",
        "create_mock",
        "graphql_request",
        "run_test",
        "initialize_computer",
        "debug_test",
        "run_debug_test",
        "continue_debug_test",
        "modify_debug_step",
        "get_debug_state",
        "cleanup_debug_session",
        "use_computer",
        "smart_computer_use",
        "cleanup_computer"
      ]
    },
    "server_info_crawled": {
      "id": 1587,
      "name": "AutoSpectra",
      "author": "@samuelvinay91/autospectra-mcp-server",
      "overview": "Automate browser interactions and generate tests effortlessly. Enhance your AI agents with powerful browser automation, accessibility checks, and visual testing capabilities in the cloud.",
      "repository_url": "https://github.com/samuelvinay91/autospectra-mcp-server",
      "homepage": "https://smithery.ai/server/@samuelvinay91/autospectra-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@samuelvinay91_autospectra-mcp-server.json",
      "tools_count": 26,
      "tools": [
        {
          "name": "navigate",
          "description": "Navigate to a URL",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to navigate to"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "click",
          "description": "Click on an element",
          "input_schema": {
            "type": "object",
            "properties": {
              "selector": {
                "type": "string",
                "description": "CSS selector of the element"
              }
            },
            "required": [
              "selector"
            ]
          },
          "annotations": null
        },
        {
          "name": "type",
          "description": "Type text into an input field",
          "input_schema": {
            "type": "object",
            "properties": {
              "selector": {
                "type": "string",
                "description": "CSS selector of the input field"
              },
              "text": {
                "type": "string",
                "description": "Text to type"
              },
              "clearFirst": {
                "type": "boolean",
                "description": "Clear the field before typing"
              }
            },
            "required": [
              "selector",
              "text"
            ]
          },
          "annotations": null
        },
        {
          "name": "extract",
          "description": "Extract data from an element",
          "input_schema": {
            "type": "object",
            "properties": {
              "selector": {
                "type": "string",
                "description": "CSS selector of the element"
              },
              "attribute": {
                "type": "string",
                "description": "Attribute to extract (default: textContent)"
              }
            },
            "required": [
              "selector"
            ]
          },
          "annotations": null
        },
        {
          "name": "screenshot",
          "description": "Take a screenshot",
          "input_schema": {
            "type": "object",
            "properties": {
              "fullPage": {
                "type": "boolean",
                "description": "Whether to take a full page screenshot"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "check_accessibility",
          "description": "Run accessibility tests on the current page",
          "input_schema": {
            "type": "object",
            "properties": {
              "rules": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Specific accessibility rules to check"
              },
              "includeHidden": {
                "type": "boolean",
                "description": "Whether to include hidden elements in the test"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "generate_tests",
          "description": "Generate test cases for an application",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the application to analyze"
              },
              "framework": {
                "type": "string",
                "description": "Test framework to use (e.g., playwright, mocha, jest)"
              },
              "style": {
                "type": "string",
                "description": "Test style (e.g., bdd, tdd)"
              },
              "format": {
                "type": "string",
                "description": "Output format (e.g., javascript, typescript)"
              },
              "prompt": {
                "type": "string",
                "description": "Description of the test scenarios to generate"
              }
            },
            "required": [
              "url",
              "prompt"
            ]
          },
          "annotations": null
        },
        {
          "name": "ai_process",
          "description": "Process a task with AI to generate automation steps",
          "input_schema": {
            "type": "object",
            "properties": {
              "task": {
                "type": "string",
                "description": "Task description"
              },
              "url": {
                "type": "string",
                "description": "URL context"
              }
            },
            "required": [
              "task"
            ]
          },
          "annotations": null
        },
        {
          "name": "self_healing_record",
          "description": "Record a test session with self-healing selectors",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to start recording at"
              },
              "outputFormat": {
                "type": "string",
                "description": "Output format (e.g., playwright, cypress)"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "visual_comparison",
          "description": "Compare visual snapshots of a web page",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to compare"
              },
              "baselinePath": {
                "type": "string",
                "description": "Path to baseline image (if any)"
              },
              "threshold": {
                "type": "number",
                "description": "Comparison threshold (0-1)"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "list_frameworks",
          "description": "Get a list of supported test frameworks, styles, and formats",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        },
        {
          "name": "api_request",
          "description": "Make an HTTP request to an API endpoint",
          "input_schema": {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "description": "HTTP method (GET, POST, PUT, DELETE)"
              },
              "url": {
                "type": "string",
                "description": "API endpoint URL"
              },
              "headers": {
                "type": "object",
                "description": "Request headers"
              },
              "data": {
                "type": "object",
                "description": "Request body"
              },
              "params": {
                "type": "object",
                "description": "URL parameters"
              },
              "auth": {
                "type": "object",
                "description": "Authentication details"
              }
            },
            "required": [
              "method",
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "validate_schema",
          "description": "Validate API responses against schemas",
          "input_schema": {
            "type": "object",
            "properties": {
              "response": {
                "type": "object",
                "description": "API response to validate"
              },
              "schema": {
                "type": "object",
                "description": "JSON schema to validate against"
              },
              "schemaPath": {
                "type": "string",
                "description": "Path to schema file"
              }
            },
            "required": [
              "response"
            ]
          },
          "annotations": null
        },
        {
          "name": "create_mock",
          "description": "Create mock API endpoints for testing",
          "input_schema": {
            "type": "object",
            "properties": {
              "endpoint": {
                "type": "string",
                "description": "Endpoint path to mock"
              },
              "method": {
                "type": "string",
                "description": "HTTP method"
              },
              "response": {
                "type": "object",
                "description": "Mock response"
              },
              "statusCode": {
                "type": "number",
                "description": "Response status code"
              }
            },
            "required": [
              "endpoint",
              "method",
              "response"
            ]
          },
          "annotations": null
        },
        {
          "name": "graphql_request",
          "description": "Make GraphQL requests",
          "input_schema": {
            "type": "object",
            "properties": {
              "endpoint": {
                "type": "string",
                "description": "GraphQL API endpoint"
              },
              "query": {
                "type": "string",
                "description": "GraphQL query"
              },
              "variables": {
                "type": "object",
                "description": "Query variables"
              },
              "headers": {
                "type": "object",
                "description": "Request headers"
              }
            },
            "required": [
              "endpoint",
              "query"
            ]
          },
          "annotations": null
        },
        {
          "name": "run_test",
          "description": "Run a generated test file",
          "input_schema": {
            "type": "object",
            "properties": {
              "testPath": {
                "type": "string",
                "description": "Path to the test file to run"
              },
              "installDeps": {
                "type": "boolean",
                "description": "Whether to install dependencies if needed"
              }
            },
            "required": [
              "testPath"
            ]
          },
          "annotations": null
        },
        {
          "name": "initialize_computer",
          "description": "Initialize a computer use provider",
          "input_schema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Provider type: \"api\" (direct API call) or \"container\" (Docker container with full Linux environment)",
                "enum": [
                  "api",
                  "container"
                ]
              },
              "apiKey": {
                "type": "string",
                "description": "Optional Anthropic API key (will use environment variable if not provided)"
              },
              "containerImage": {
                "type": "string",
                "description": "Optional container image to use (for container provider)"
              },
              "width": {
                "type": "number",
                "description": "Optional screen width (for container provider)"
              },
              "height": {
                "type": "number",
                "description": "Optional screen height (for container provider)"
              }
            },
            "required": [
              "type"
            ]
          },
          "annotations": null
        },
        {
          "name": "debug_test",
          "description": "Create or update a debug test session for interactive development",
          "input_schema": {
            "type": "object",
            "properties": {
              "testName": {
                "type": "string",
                "description": "Name of the debug test"
              },
              "testScript": {
                "type": "string",
                "description": "JavaScript test script containing step definitions"
              },
              "runImmediately": {
                "type": "boolean",
                "description": "Whether to run the test immediately after creation"
              },
              "breakAt": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Step IDs to break execution at"
              },
              "clearPrevious": {
                "type": "boolean",
                "description": "Whether to clear any previous debug session with the same name"
              }
            },
            "required": [
              "testName"
            ]
          },
          "annotations": null
        },
        {
          "name": "run_debug_test",
          "description": "Run a debug test",
          "input_schema": {
            "type": "object",
            "properties": {
              "testName": {
                "type": "string",
                "description": "Name of the debug test to run"
              },
              "fromStep": {
                "type": "number",
                "description": "Index of the step to start execution from"
              },
              "toStep": {
                "type": "number",
                "description": "Index of the step to end execution at"
              },
              "runToBreakpoint": {
                "type": "boolean",
                "description": "Whether to pause execution at breakpoints"
              }
            },
            "required": [
              "testName"
            ]
          },
          "annotations": null
        },
        {
          "name": "continue_debug_test",
          "description": "Continue execution of a paused debug test",
          "input_schema": {
            "type": "object",
            "properties": {
              "steps": {
                "type": "number",
                "description": "Number of steps to execute before pausing again"
              },
              "runToBreakpoint": {
                "type": "boolean",
                "description": "Whether to pause execution at breakpoints"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "modify_debug_step",
          "description": "Add or modify a step in a debug test",
          "input_schema": {
            "type": "object",
            "properties": {
              "stepId": {
                "type": "string",
                "description": "ID of the step to modify"
              },
              "type": {
                "type": "string",
                "description": "Type of step (navigate, click, type, etc.)"
              },
              "args": {
                "type": "object",
                "description": "Arguments for the step"
              },
              "index": {
                "type": "number",
                "description": "Index to insert the step at (for new steps)"
              },
              "runAfter": {
                "type": "boolean",
                "description": "Whether to run the step immediately after modification"
              }
            },
            "required": [
              "stepId",
              "type",
              "args"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_debug_state",
          "description": "Get the current debug state including steps, logs, and screenshots",
          "input_schema": {
            "type": "object",
            "properties": {
              "includeStepResults": {
                "type": "boolean",
                "description": "Whether to include step results in the response"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "cleanup_debug_session",
          "description": "Clean up debug session resources",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        },
        {
          "name": "use_computer",
          "description": "Use Claude computer capabilities to perform complex tasks",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Description of the computer task to perform"
              },
              "model": {
                "type": "string",
                "description": "Claude model to use (default: claude-3-7-sonnet-20240307)"
              }
            },
            "required": [
              "prompt"
            ]
          },
          "annotations": null
        },
        {
          "name": "smart_computer_use",
          "description": "Use computer capabilities with fallback to AutoSpectra automation tools",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Description of the computer task to perform"
              },
              "useAutomation": {
                "type": "boolean",
                "description": "Whether to fall back to automation tools if computer use fails (default: true)"
              },
              "model": {
                "type": "string",
                "description": "Claude model to use (default: claude-3-7-sonnet-20240307)"
              }
            },
            "required": [
              "prompt"
            ]
          },
          "annotations": null
        },
        {
          "name": "cleanup_computer",
          "description": "Clean up computer use provider resources",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"port\": 3000,\n  \"slowMo\": 50,\n  \"headless\": false\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@samuelvinay91/autospectra-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"port\": 3000,\n  \"slowMo\": 50,\n  \"headless\": false\n}",
      "python_sdk_url": "https://server.smithery.ai/@samuelvinay91/autospectra-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "1588.@samuelvinay91_autospectra-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1449
  }
}