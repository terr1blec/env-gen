{
  "labels": {
    "analysis": "The MCP Server enables seamless integration with Zerodha, an Indian stockbroking platform, allowing users to manage stock and mutual fund trading through voice commands and automated processes. It provides tools to get market data, place/manage orders, handle mutual fund investments, and more, all interactable via Claude AI.",
    "reasoning": "The primary function of personalized stock trading and mutual fund management clearly falls under the Financial Services category. The secondary labels of Cryptocurrency & Blockchain (though focused on stocks here) and API Integration are relevant due to the automated trading capabilities and backend connections. No custom label is needed as the predefined categories cover the functionality well.",
    "primary_label": "Financial Services",
    "secondary_labels": [
      "API Integration",
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 385,
    "server_name": "Zerodha Integration",
    "rank_by_usage": 386,
    "usage_count": "67",
    "original_file": "../crawler/smithery/@aptro_zerodha-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@aptro/zerodha-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 385,
      "name": "Zerodha Integration",
      "author": "@aptro/zerodha-mcp",
      "overview": "Interact with your Zerodha trading account directly through Claude AI. Manage your stocks, mutual funds, and trading orders seamlessly with voice commands and automated processes.",
      "repository_url": "https://github.com/aptro/zerodha-mcp",
      "homepage": "https://smithery.ai/server/@aptro/zerodha-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "67",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@aptro_zerodha-mcp.json",
      "tools_count": 18,
      "tools": [
        {
          "name": "initiate_login",
          "description": "Deploy Server Zerodha Integration @aptro/zerodha-mcp Try in Playground initiate_login",
          "parameters": []
        },
        {
          "name": "get_request_token",
          "description": "Get the current request token after login redirect",
          "parameters": [
            {
              "name": "get_request_token",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_holdings",
          "description": "Get user's holdings/portfolio",
          "parameters": [
            {
              "name": "get_holdings",
              "required": false,
              "type": "string"
            },
            {
              "name": "Get",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_positions",
          "description": "Description not available",
          "parameters": [
            {
              "name": "get_positions",
              "required": false,
              "type": "string"
            },
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "positions",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_margins",
          "description": "Description not available",
          "parameters": [
            {
              "name": "get_margins",
              "required": false,
              "type": "string"
            },
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "account",
              "required": false,
              "type": "string"
            },
            {
              "name": "margins",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "place_order",
          "description": "Place an order on Zerodha Args: tradingsymbol: Trading symbol (e.g., 'INFY') exchange: Exchange (NSE, BSE, NFO, etc.) transaction_type: BUY or SELL quantity: Number of shares/units product: Product code (CNC, MIS, NRML) order_type: Order type (MARKET, LIMIT, SL, SL-M) price: Price for LIMIT orders trigger_price: Trigger price for SL orders",
          "parameters": []
        },
        {
          "name": "get_quote",
          "description": "Get quote for symbols Args: symbols: List of symbols (e.g., ['NSE:INFY', 'BSE:RELIANCE'])",
          "parameters": [
            {
              "name": "symbols",
              "required": true,
              "type": "string"
            },
            {
              "name": "Add",
              "required": false,
              "type": "string"
            },
            {
              "name": "Item",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_historical_data",
          "description": "Get historical data for an instrument Args: instrument_token: Instrument token from_date: From date (format: 2024-01-01) to_date: To date (format: 2024-03-13) interval: Candle interval (minute, day, 3minute, etc.)",
          "parameters": []
        },
        {
          "name": "check_and_authenticate",
          "description": "Check if Kite is authenticated and initiate authentication if needed. Returns the authentication status and any relevant messages.",
          "parameters": []
        },
        {
          "name": "get_mf_orders",
          "description": "Get all mutual fund orders",
          "parameters": [
            {
              "name": "get_mf_orders",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "place_mf_order",
          "description": "Place a mutual fund order Args: tradingsymbol: Trading symbol (e.g., 'INF090I01239') transaction_type: BUY or SELL amount: Amount to invest or redeem tag: Optional tag for the order",
          "parameters": [
            {
              "name": "BUY",
              "required": false,
              "type": "string"
            },
            {
              "name": "or",
              "required": false,
              "type": "string"
            },
            {
              "name": "SELL",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "cancel_mf_order",
          "description": "Cancel a mutual fund order\n\n    Args:\n        order_id: Order ID to cancel",
          "parameters": [
            {
              "name": "order_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_mf_instruments",
          "description": "Get all available mutual fund instruments",
          "parameters": [
            {
              "name": "get_mf_instruments",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_mf_holdings",
          "description": "Get user's mutual fund holdings",
          "parameters": [
            {
              "name": "get_mf_holdings",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_mf_sips",
          "description": "Get all mutual fund SIPs",
          "parameters": [
            {
              "name": "get_mf_sips",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "place_mf_sip",
          "description": "Place a mutual fund SIP (Systematic Investment Plan) Args: tradingsymbol: Trading symbol (e.g., 'INF090I01239') amount: Amount per instalment instalments: Number of instalments (minimum 6) frequency: weekly, monthly, or quarterly initial_amount: Optional initial amount instalment_day: Optional day of month/week for instalment (1-31 for monthly, 1-7 for weekly) tag: Optional tag for the SIP",
          "parameters": [
            {
              "name": "Optional",
              "required": false,
              "type": "string"
            },
            {
              "name": "initial",
              "required": false,
              "type": "string"
            },
            {
              "name": "amount",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "modify_mf_sip",
          "description": "Modify a mutual fund SIP Args: sip_id: SIP ID to modify amount: New amount per instalment frequency: New frequency (weekly, monthly, or quarterly) instalments: New number of instalments instalment_day: New day of month/week for instalment status: SIP status (active or paused)",
          "parameters": []
        },
        {
          "name": "cancel_mf_sip",
          "description": "Cancel a mutual fund SIP\n\n    Args:\n        sip_id: SIP ID to cancel",
          "parameters": [
            {
              "name": "sip_id",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@aptro/zerodha-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "kiteApiKey",
          "required": true,
          "description": "Zerodha Kite API Key"
        },
        {
          "name": "kiteApiSecret",
          "required": true,
          "description": "Zerodha Kite API Secret"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@aptro/zerodha-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0386.@aptro_zerodha-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 380
  }
}