{
  "labels": {
    "analysis": "The MCP Server \"Redis Cloud API\" is primarily focused on managing Redis Cloud resources through natural language commands. It provides tools to create, monitor, and configure Redis Cloud subscriptions, databases, and other deployment-related tasks. The server enables users to interact with Redis Cloud services in an intuitive way, streamlining productivity by abstracting complex cloud operations into simple command structures. Key functionalities include subscription management, database creation, task tracking, and region/plan validation.",
    "reasoning": "The primary label \"Cloud Services\" is chosen because the server's core functionality revolves around managing cloud-based Redis deployments. Secondary labels include \"Database Operations\" due to the tools for managing databases and \"Operating System\" for its system-level interaction capabilities (though less central). The custom label \"Redis Cloud Management\" is added to specifically highlight its niche functionality, as existing labels don't fully capture the Redis-specific management capabilities.",
    "primary_label": "Cloud Services",
    "secondary_labels": [
      "Database Operations",
      "Operating System"
    ],
    "custom_label": "Redis Cloud Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1566,
    "server_name": "Redis Cloud API",
    "rank_by_usage": 1567,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@redis_mcp-redis-cloud.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@redis/mcp-redis-cloud/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1566,
      "name": "Redis Cloud API",
      "author": "@redis/mcp-redis-cloud",
      "overview": "Manage your Redis Cloud resources effortlessly using natural language. Create databases, monitor subscriptions, and configure cloud deployments with simple commands. Streamline your Redis Cloud experience and enhance productivity with intuitive interactions.",
      "repository_url": "https://github.com/redis/mcp-redis-cloud",
      "homepage": "https://smithery.ai/server/@redis/mcp-redis-cloud",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@redis_mcp-redis-cloud.json",
      "tools_count": 16,
      "tools": [
        {
          "name": "get-current-account",
          "description": "Deploy Server Redis Cloud API @redis/mcp-redis-cloud Try in Playground get-current-account",
          "parameters": []
        },
        {
          "name": "get-current-payment-methods",
          "description": "Get the current payment methods for the current Cloud Redis account",
          "parameters": []
        },
        {
          "name": "get-database-modules",
          "description": "Lookup list of database modules supported in current account (support may differ based on subscription and database settings). These modules are also called capabilities.",
          "parameters": []
        },
        {
          "name": "get-pro-plans-regions",
          "description": "Lookup list of regions for cloud provider. These regions include the providers too.",
          "parameters": []
        },
        {
          "name": "create-pro-subscription",
          "description": "Create a new pro subscription. Returns a TASK ID that can be used to track the status of the subscription creation. Prerequisites: 1) Verify payment method by checking get-current-payment-methods. 2) For database modules, validate against get-database-modules list. 3) Validate regions using get-pro-plans-regions. The payload must match the input schema.",
          "parameters": []
        },
        {
          "name": "get-pro-subscriptions",
          "description": "Get the pro subscriptions for the current Cloud Redis account",
          "parameters": []
        },
        {
          "name": "get-pro-subscription",
          "description": "Get pro subscription by ID. The payload must match the input schema.",
          "parameters": []
        },
        {
          "name": "get-essential-subscriptions",
          "description": "Get the essential subscriptions for the current Cloud Redis account. A paginated response is returned, and to get all the essential subscriptions, the page and size parameters must be used until all the essential subscriptions are retrieved.",
          "parameters": []
        },
        {
          "name": "get-essential-subscription-by-id",
          "description": "Get an essential subscription by ID for the current Cloud Redis account",
          "parameters": []
        },
        {
          "name": "create-essential-subscription",
          "description": "Create a new essential subscription. Returns a TASK ID that can be used to track the status of the subscription creation",
          "parameters": []
        },
        {
          "name": "delete-essential-subscription",
          "description": "Delete an essential subscription by ID",
          "parameters": [
            {
              "name": "subscriptionId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-essentials-plans",
          "description": "Get the available plans for essential subscriptions. Always ask for which provider the plans are want to be retrieved. A paginated response is returned, and to get all the plans, the page and size parameters must be used until all the plans are retrieved.",
          "parameters": []
        },
        {
          "name": "get-tasks",
          "description": "Get the current tasks for the current Cloud Redis account",
          "parameters": []
        },
        {
          "name": "get-task-by-id",
          "description": "Get a task by ID for the current Cloud Redis account",
          "parameters": [
            {
              "name": "taskId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-pro-databases",
          "description": "Get the pro databases for the provided subscription Id",
          "parameters": []
        },
        {
          "name": "create-pro-database",
          "description": "Create a new database inside the specified subscription ID. Returns a TASK ID that can be used to track the status of the database creationPrerequisites: 1) For database modules, validate against get-database-modules list. 2) Validate regions using get-pro-plans-regions. The payload must match the input schema.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@redis/mcp-redis-cloud/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiKey",
          "required": true,
          "description": "Redis Cloud API Key"
        },
        {
          "name": "secretKey",
          "required": true,
          "description": "Redis Cloud API Secret Key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@redis/mcp-redis-cloud/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1567.@redis_mcp-redis-cloud_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1433
  }
}