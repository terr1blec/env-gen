{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate the integration of LLM applications with external documentation sources, enabling enhanced knowledge retrieval and response capabilities. Its core functionality revolves around listing available documentation sources and fetching relevant documentation files for use in applications. The server acts as an intermediary for accessing structured documentation data, making it valuable for applications requiring up-to-date or external knowledge sources.",
    "reasoning": "The primary label \"API Integration\" was chosen because the server's main function is to provide programmatic access to documentation sources via tools like list_doc_sources and fetch_docs. These tools act as an interface for integrating documentation data with other applications. Additionally, \"Web Search & Research\" is included as a secondary label since the server helps applications gather information from external documentation sources. \"File Management\" is also relevant due to the server's ability to fetch and parse files from URLs or local storage.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Web Search & Research",
      "File Management"
    ],
    "custom_label": "Documentation Integration",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2124,
    "server_name": "Documentation Server",
    "rank_by_usage": 2125,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@esakrissa_mcp-doc.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@esakrissa/mcp-doc/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2124,
      "name": "Documentation Server",
      "author": "@esakrissa/mcp-doc",
      "overview": "Integrate your LLM applications with specific documentation sources seamlessly. Access and fetch documentation files to enhance your application's knowledge and response capabilities.",
      "repository_url": "https://github.com/esakrissa/mcp-doc",
      "homepage": "https://smithery.ai/server/@esakrissa/mcp-doc",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@esakrissa_mcp-doc.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "list_doc_sources",
          "description": "List all available documentation sources. This is the first tool you should call in the documentation workflow. It provides URLs to documentation files (langgraph.",
          "parameters": []
        },
        {
          "name": "fetch_docs",
          "description": "Fetch and parse documentation from a given URL or local file. Use this tool after list_doc_sources to:\n1. First fetch the documentation file (langgraph.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@esakrissa/mcp-doc/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@esakrissa/mcp-doc/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2125.@esakrissa_mcp-doc_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1844
  }
}