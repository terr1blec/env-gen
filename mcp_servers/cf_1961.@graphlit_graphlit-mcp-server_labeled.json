{
  "labels": {
    "analysis": "The Graphlit MCP Server is designed to integrate various data sources into a centralized knowledge base. It provides tools to ingest content from multiple platforms (e.g., Slack, Email, Cloud Storage, RSS feeds, and social media) as well as perform web crawling and scraping. The server enables asynchronous ingestion of content, querying of feeds, and retrieval of relevant information, making it a powerful tool for consolidating and managing unstructured or scattered data.",
    "reasoning": "The primary label **Data Analysis & Processing** was chosen because the server's core functionality revolves around ingesting, structuring, and retrieving data from diverse sources. This aligns with the category's focus on data transformation and management. The secondary labels **Memory Management** and **Web Search & Research** reflect its additional capabilities in storing knowledge and retrieving web-based information. No custom label is needed as the predefined categories adequately cover the server's functions.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "Memory Management",
      "Web Search & Research"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1960,
    "server_name": "Graphlit",
    "rank_by_usage": 1961,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@graphlit_graphlit-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@graphlit/graphlit-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1960,
      "name": "Graphlit",
      "author": "@graphlit/graphlit-mcp-server",
      "overview": "Integrate MCP clients with the Graphlit service.\n\nIngest anything from Slack to Gmail to podcast feeds, in addition to web crawling, into a Graphlit project - and then retrieve relevant contents from the MCP client.",
      "repository_url": "https://github.com/graphlit/graphlit-mcp-server",
      "homepage": "https://smithery.ai/server/@graphlit/graphlit-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@graphlit_graphlit-mcp-server.json",
      "tools_count": 31,
      "tools": [
        {
          "name": "retrieveContent",
          "description": "Deploy Server @graphlit/graphlit-mcp-server Try in Playground retrieveContent",
          "parameters": []
        },
        {
          "name": "queryFeeds",
          "description": "Query feeds by name and/or feed type. Returns the feed name, identifier and other feed properties.",
          "parameters": [
            {
              "name": "queryFeeds",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "deleteFeed",
          "description": "Delete a feed and all of its ingested content. Accepts a feed identifier which was returned from one of the ingestion tools, like ingestGoogleDriveFiles. Content deletion will happen asynchronously. Returns the feed identifier and feed state, i.e. Deleted.",
          "parameters": []
        },
        {
          "name": "isFeedDone",
          "description": "Check if an asynchronous feed has completed ingesting all the available content. Accepts a feed identifier which was returned from one of the ingestion tools, like ingestGoogleDriveFiles. Returns whether the feed is done or not.",
          "parameters": []
        },
        {
          "name": "listMicrosoftTeamsTeams",
          "description": "Lists available Microsoft Teams teams. Returns a list of Microsoft Teams teams, where the team identifier can be used with listMicrosoftTeamsChannels to enumerate Microsoft Teams channels.",
          "parameters": [
            {
              "name": "listMicrosoftTeamsTeams",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "listMicrosoftTeamsChannels",
          "description": "Lists available Microsoft Teams teams. Returns a list of Microsoft Teams teams, where the team identifier can be used with listMicrosoftTeamsChannels to enumerate Microsoft Teams channels.",
          "parameters": []
        },
        {
          "name": "listSlackChannels",
          "description": "Lists available Slack channels. Returns a list of Slack channels, where the channel name can be used with ingestSlackMessages to ingest messages into Graphlit knowledge base.",
          "parameters": [
            {
              "name": "listSlackChannels",
              "required": false,
              "type": "string"
            },
            {
              "name": "Lists",
              "required": false,
              "type": "string"
            },
            {
              "name": "available",
              "required": false,
              "type": "string"
            },
            {
              "name": "Slack",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "listSharePointLibraries",
          "description": "Lists available SharePoint libraries. Returns a list of SharePoint libraries, where the selected libraryId can be used with listSharePointFolders to enumerate SharePoint folders in a library.",
          "parameters": [
            {
              "name": "listSharePointLibraries",
              "required": false,
              "type": "string"
            },
            {
              "name": "Lists",
              "required": false,
              "type": "string"
            },
            {
              "name": "available",
              "required": false,
              "type": "string"
            },
            {
              "name": "SharePoint",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "listSharePointFolders",
          "description": "Lists available SharePoint libraries. Returns a list of SharePoint libraries, where the selected libraryId can be used with listSharePointFolders to enumerate SharePoint folders in a library.",
          "parameters": []
        },
        {
          "name": "ingestSharePointFiles",
          "description": "Lists available SharePoint folders. Returns a list of SharePoint folders, which can be used with ingestSharePointFiles to ingest files into Graphlit knowledge base.",
          "parameters": []
        },
        {
          "name": "ingestOneDriveFiles",
          "description": "Ingests files from OneDrive folder into Graphlit knowledge base. Accepts an optional read limit for the number of files to ingest. Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "ingestGoogleDriveFiles",
          "description": "Delete a feed and all of its ingested content. Accepts a feed identifier which was returned from one of the ingestion tools, like ingestGoogleDriveFiles. Content deletion will happen asynchronously. Returns the feed identifier and feed state, i.e. Deleted.",
          "parameters": []
        },
        {
          "name": "ingestDropboxFiles",
          "description": "Ingests files from Dropbox folder into Graphlit knowledge base. Accepts optional relative path to Dropbox folder (i.e. /Pictures), and an optional read limit for the number of files to ingest. If no path provided, ingests files from root Dropbox folder. Executes asynchonously and returns the feed identifier.",
          "parameters": [
            {
              "name": "ingestDropboxFiles",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "ingestBoxFiles",
          "description": "Ingests files from Box folder into Graphlit knowledge base. Accepts optional Box folder identifier, and an optional read limit for the number of files to ingest. If no folder identifier provided, ingests files from root Box folder (i.e. \"0\"). Folder identifier can be inferred from Box URL. https://app.box.com/folder/123456 -> folder identifier is \"123456\". Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "ingestGitHubFiles",
          "description": "Ingests files from GitHub repository into Graphlit knowledge base. Accepts GitHub repository owner and repository name and an optional read limit for the number of files to ingest. For example, for GitHub repository (https://github.com/openai/tiktoken), 'openai' is the repository owner, and 'tiktoken' is the repository name. Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "ingestNotionPages",
          "description": "Ingests pages from Notion database into Graphlit knowledge base. Accepts an optional read limit for the number of messages to ingest. Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "ingestMicrosoftTeamsMessages",
          "description": "Lists available Microsoft Teams channels. Returns a list of Microsoft Teams channels, where the channel identifier can be used with ingestMicrosoftTeamsMessages to ingest messages into Graphlit knowledge base.",
          "parameters": []
        },
        {
          "name": "ingestSlackMessages",
          "description": "Lists available Slack channels. Returns a list of Slack channels, where the channel name can be used with ingestSlackMessages to ingest messages into Graphlit knowledge base.",
          "parameters": []
        },
        {
          "name": "ingestDiscordMessages",
          "description": "Ingests messages from Discord channel into Graphlit knowledge base. Accepts Discord channel name and an optional read limit for the number of messages to ingest. Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "ingestRedditPosts",
          "description": "Ingests posts from Reddit subreddit into Graphlit knowledge base. Accepts a subreddit name and an optional read limit for the number of posts to ingest. Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "ingestGoogleEmail",
          "description": "Ingests emails from Google Email account into Graphlit knowledge base. Accepts an optional read limit for the number of emails to ingest. Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "ingestMicrosoftEmail",
          "description": "Ingests emails from Microsoft Email account into Graphlit knowledge base. Accepts an optional read limit for the number of emails to ingest. Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "ingestLinearIssues",
          "description": "Ingests issues from Linear project into Graphlit knowledge base. Accepts Linear project name and an optional read limit for the number of issues to ingest. Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "ingestGitHubIssues",
          "description": "Ingests issues from GitHub repository into Graphlit knowledge base. Accepts GitHub repository owner and repository name and an optional read limit for the number of issues to ingest. For example, for GitHub repository (https://github.com/openai/tiktoken), 'openai' is the repository owner, and 'tiktoken' is the repository name. Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "ingestJiraIssues",
          "description": "Ingests issues from Atlassian Jira repository into Graphlit knowledge base. Accepts Atlassian Jira server URL and project name, and an optional read limit for the number of issues to ingest. Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "webCrawl",
          "description": "Crawls web pages from web site into Graphlit knowledge base. Accepts a URL and an optional read limit for the number of pages to crawl. Uses sitemap.xml to discover pages to be crawled from website. Executes asynchonously and returns the feed identifier.",
          "parameters": [
            {
              "name": "Uses",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "webScrape",
          "description": "Scrapes web page into Graphlit knowledge base. Returns Markdown text and metadata extracted from web page.",
          "parameters": [
            {
              "name": "webScrape",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "webMap",
          "description": "Enumerates the web pages at or beneath the provided URL using web sitemap. Accepts web page URL as string. Returns list of mapped URIs from web site.",
          "parameters": []
        },
        {
          "name": "webSearch",
          "description": "Performs web search based on search query. Format the search query as what would be entered into a Google search. Accepts search query as string, and optional search service type. Search service types: Tavily, Exa. Defaults to Tavily. Returns URL, title and relevant Markdown text from resulting web pages.",
          "parameters": [
            {
              "name": "webSearch",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "ingestRSS",
          "description": "Ingests posts from RSS feed into Graphlit knowledge base. For podcast RSS feeds, audio will be downloaded, transcribed and ingested into Graphlit knowledge base. Accepts RSS URL and an optional read limit for the number of posts to read. Executes asynchonously and returns the feed identifier.",
          "parameters": []
        },
        {
          "name": "ingestUrl",
          "description": "Ingests content from URL into Graphlit knowledge base. Can ingest individual Word documents, PDFs, audio recordings, videos, images, or any other unstructured data. Executes asynchonously and returns the content identifier.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@graphlit/graphlit-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "jwtSecret",
          "required": true,
          "description": "JWT secret for signing tokens"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@graphlit/graphlit-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1961.@graphlit_graphlit-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1719
  }
}