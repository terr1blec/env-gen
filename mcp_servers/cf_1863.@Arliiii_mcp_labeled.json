{
  "labels": {
    "analysis": "The WeatherMCP Server is primarily focused on retrieving and displaying real-time weather data for various locations, either by city name or geographic coordinates. It provides tools for checking current weather conditions, getting weather summaries, and verifying API connectivity. Additionally, it offers motivational messages alongside weather summaries. The server can be deployed easily via Docker or locally, indicating it's designed for simplicity and accessibility in weather data retrieval.",
    "reasoning": "The primary functionality of fetching and displaying weather data aligns well with the \"Weather\" category. The inclusion of motivational messages and API connectivity checks suggests a user-friendly approach to weather information, but these features are supplementary rather than defining the core functionality. No secondary labels are necessary as the predefined \"Weather\" category adequately covers all core aspects of the server.",
    "primary_label": "Others",
    "secondary_labels": [
      "Web Search & Research"
    ],
    "custom_label": "The main category that best describes this server's primary functionality \n    Weather",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1862,
    "server_name": "WeatherMCP Server",
    "rank_by_usage": 1863,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Arliiii_mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Arliiii/mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1862,
      "name": "WeatherMCP Server",
      "author": "@Arliiii/mcp",
      "overview": "Provide real-time weather data and summaries by city or coordinates with motivational messages. Easily check API connectivity and troubleshoot with built-in tools. Deploy quickly using Docker or run locally with simple configuration.",
      "repository_url": "https://github.com/Arliiii/mcp",
      "homepage": "https://smithery.ai/server/@Arliiii/mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Arliiii_mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "get_current_weather",
          "description": "Deploy Server WeatherMCP Server @Arliiii/mcp Try in Playground get_current_weather",
          "parameters": []
        },
        {
          "name": "get_weather_by_coordinates",
          "description": "Get current weather by geographic coordinates. Args: latitude: Latitude (-90 to 90) longitude: Longitude (-180 to 180) units: Temperature units - celsius, fahrenheit, or kelvin (default: celsius) Returns: JSON string with complete weather data",
          "parameters": []
        },
        {
          "name": "get_weather_summary",
          "description": "Get a concise weather summary with motivational message. Args: city: City name (required) Returns: JSON string with concise weather summary",
          "parameters": []
        },
        {
          "name": "check_api_status",
          "description": "Check OpenWeatherMap API connectivity and configuration. Returns: JSON string with API status and troubleshooting information",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Arliiii/mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiKey",
          "required": true,
          "description": "Get your free API key from https://openweathermap.org/api"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Arliiii/mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1863.@Arliiii_mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1651
  }
}