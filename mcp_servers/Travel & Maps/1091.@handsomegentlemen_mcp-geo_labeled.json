{
  "labels": {
    "analysis": "The EdgeOne Geo Location Server is designed to provide geolocation data to large language models through a simplified interface. Its primary function is to retrieve user location information, enabling AI applications to access real-time geolocation data seamlessly. This facilitates location-aware capabilities within AI models, enhancing their ability to provide contextually relevant responses or features.",
    "reasoning": "The server's core functionality and available tool (\"get_geolocation\") are focused on providing geolocation data, which aligns with the predefined \"Location Services\" category. Since location data is often used to enable location-based services and features in AI and other applications, this is the most appropriate primary label. No secondary or custom labels are needed as the predefined categories sufficiently cover the server's functionality.",
    "primary_label": "Travel & Maps",
    "secondary_labels": [],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1090,
    "server_name": "EdgeOne Geo Location Server",
    "rank_by_usage": 1091,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@handsomegentlemen_mcp-geo.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@handsomegentlemen/mcp-geo/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_geolocation",
          "description": "Get the user's geolocation information",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_geolocation"
      ]
    },
    "server_info_crawled": {
      "id": 1090,
      "name": "EdgeOne Geo Location Server",
      "author": "@handsomegentlemen/mcp-geo",
      "overview": "Provide geolocation data to large language models by exposing a tool that retrieves user location information. Enable AI models to access real-time geolocation through a simple interface integrated with EdgeOne Pages Functions. Enhance AI applications with location-aware capabilities seamlessly.",
      "repository_url": "https://github.com/handsomegentlemen/mcp-geo",
      "homepage": "https://smithery.ai/server/@handsomegentlemen/mcp-geo",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@handsomegentlemen_mcp-geo.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_geolocation",
          "description": "Get the user's geolocation information",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@handsomegentlemen/mcp-geo/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@handsomegentlemen/mcp-geo/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1091.@handsomegentlemen_mcp-geo_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1068
  }
}