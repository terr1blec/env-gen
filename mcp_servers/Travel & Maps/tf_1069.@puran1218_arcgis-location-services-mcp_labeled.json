{
  "labels": {
    "analysis": "The MCP Server leverages ArcGIS Location Services to provide a suite of geolocation-based tools. Its core functionality includes geocoding (converting addresses to coordinates), reverse geocoding (converting coordinates to addresses), finding nearby places, directions, and elevation data. These tools are primarily used for mapping, navigation, and location-based services, enhancing applications with accurate and detailed location data.",
    "reasoning": "The primary label \"Travel & Maps\" was chosen because the server's main functionality revolves around mapping, navigation, and geolocation services, which are core aspects of travel and map applications. The secondary label \"Geospatial Services\" was added as a custom label to highlight the specific nature of the geospatially-focused tools provided. \"GIS & Mapping\" could also fit under predefined categories but is more specific as a custom label. No other predefined categories are as closely aligned to the server's core functionality.",
    "primary_label": "Travel & Maps",
    "secondary_labels": [
      "Operating System"
    ],
    "custom_label": "GIS & Mapping",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1068,
    "server_name": "ArcGIS Location Services",
    "rank_by_usage": 1069,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@puran1218_arcgis-location-services-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@puran1218/arcgis-location-services-mcp/mcp?config=eyJhcmNnaXNBcGlLZXkiOiAiIn0=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_basemap_tile",
          "description": "Access static basemap tiles service with different styles.\n\n    Args:\n        version: API version (default: v1)\n        style_base: The base style category (default: arcgis)\n        style_name: Map style name (e.g., navigation, streets, satellite)\n        row: Tile row coordinate\n        level: Zoom level\n        column: Tile column coordinate\n    ",
          "input_schema": {
            "properties": {
              "version": {
                "default": "v1",
                "title": "Version",
                "type": "string"
              },
              "style_base": {
                "default": "arcgis",
                "title": "Style Base",
                "type": "string"
              },
              "style_name": {
                "default": "navigation",
                "title": "Style Name",
                "type": "string"
              },
              "row": {
                "default": 17,
                "title": "Row",
                "type": "integer"
              },
              "level": {
                "default": 52333,
                "title": "Level",
                "type": "integer"
              },
              "column": {
                "default": 22866,
                "title": "Column",
                "type": "integer"
              }
            },
            "title": "get_basemap_tileArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "find_nearby_places",
          "description": "Find nearby places and points of interest with optional detailed information.\n\n    Args:\n        x: Longitude of the center point (e.g., -122.4194)\n        y: Latitude of the center point (e.g., 37.7749)\n        pageSize: Number of results to return (default: 20)\n        categories: Optional category filter (e.g., \"restaurant\", \"hotel\", \"coffee\")\n        radius: Search radius in meters (default: 5000)\n        includeDetails: Whether to include full details for each place (default: False)\n        detailsLimit: Maximum number of places to get details for when includeDetails=True (default: 3)\n    ",
          "input_schema": {
            "properties": {
              "x": {
                "title": "X",
                "type": "number"
              },
              "y": {
                "title": "Y",
                "type": "number"
              },
              "pageSize": {
                "default": 10,
                "title": "Pagesize",
                "type": "integer"
              },
              "categories": {
                "default": "",
                "title": "Categories",
                "type": "string"
              },
              "radius": {
                "default": 5000,
                "title": "Radius",
                "type": "integer"
              },
              "includeDetails": {
                "default": false,
                "title": "Includedetails",
                "type": "boolean"
              },
              "detailsLimit": {
                "default": 1,
                "title": "Detailslimit",
                "type": "integer"
              }
            },
            "required": [
              "x",
              "y"
            ],
            "title": "find_nearby_placesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "geocode",
          "description": "Search for an address, place or point of interest.\n\n    Args:\n        singleLine: Complete address in a single string (e.g., \"1600 Pennsylvania Ave NW, DC\")\n        address: Place name or address (e.g., \"Starbucks\" or \"380 New York St\")\n        location: Optional point to search near, as \"longitude,latitude\" (e.g., \"-122.4194,37.7749\")\n        category: Optional POI category to search for (e.g., \"gas station\")\n        outFields: Fields to return in the response (default: all fields)\n    ",
          "input_schema": {
            "properties": {
              "singleLine": {
                "default": "",
                "title": "Singleline",
                "type": "string"
              },
              "address": {
                "default": "",
                "title": "Address",
                "type": "string"
              },
              "location": {
                "default": "",
                "title": "Location",
                "type": "string"
              },
              "category": {
                "default": "",
                "title": "Category",
                "type": "string"
              },
              "outFields": {
                "default": "*",
                "title": "Outfields",
                "type": "string"
              }
            },
            "title": "geocodeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "reverse_geocode",
          "description": "Convert geographic coordinates to an address.\n\n    Args:\n        location: Location as \"longitude,latitude\" (e.g., \"-79.3871,43.6426\")\n        outFields: Fields to include in the response (default: all fields)\n    ",
          "input_schema": {
            "properties": {
              "location": {
                "title": "Location",
                "type": "string"
              },
              "outFields": {
                "default": "*",
                "title": "Outfields",
                "type": "string"
              }
            },
            "required": [
              "location"
            ],
            "title": "reverse_geocodeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_directions",
          "description": "Get detailed turn-by-turn directions between locations.\n\n    Args:\n        stops: Two or more locations as a semicolon-separated list of \"longitude,latitude\" pairs\n              (e.g., \"-122.68782,45.51238;-122.690176,45.522054\")\n    ",
          "input_schema": {
            "properties": {
              "stops": {
                "title": "Stops",
                "type": "string"
              }
            },
            "required": [
              "stops"
            ],
            "title": "get_directionsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_elevation",
          "description": "Get elevation for locations on land or water.\n\n    Args:\n        lon: Longitude of a single point (e.g., -117.195)\n        lat: Latitude of a single point (e.g., 34.065)\n        coordinates: JSON array of [lon, lat] pairs for multiple points (e.g., \"[[-117.182, 34.0555],[-117.185, 34.057]]\")\n        relativeTo: Reference point for elevation measurement (e.g., \"meanSeaLevel\", \"ellipsoid\")\n    ",
          "input_schema": {
            "properties": {
              "lon": {
                "default": null,
                "title": "Lon",
                "type": "number"
              },
              "lat": {
                "default": null,
                "title": "Lat",
                "type": "number"
              },
              "coordinates": {
                "default": null,
                "title": "Coordinates",
                "type": "string"
              },
              "relativeTo": {
                "default": null,
                "title": "Relativeto",
                "type": "string"
              }
            },
            "title": "get_elevationArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 6,
      "tool_names": [
        "get_basemap_tile",
        "find_nearby_places",
        "geocode",
        "reverse_geocode",
        "get_directions",
        "get_elevation"
      ]
    },
    "server_info_crawled": {
      "id": 1068,
      "name": "ArcGIS Location Services",
      "author": "@puran1218/arcgis-location-services-mcp",
      "overview": "Leverage powerful geocoding, reverse geocoding, and routing capabilities to enhance your applications. Access detailed location data and nearby points of interest seamlessly. Integrate with ArcGIS Location Services to provide users with accurate and efficient location-based solutions.",
      "repository_url": "https://github.com/puran1218/arcgis-location-services-mcp",
      "homepage": "https://smithery.ai/server/@puran1218/arcgis-location-services-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@puran1218_arcgis-location-services-mcp.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "get_basemap_tile",
          "description": "Access static basemap tiles service with different styles.\n\n    Args:\n        version: API version (default: v1)\n        style_base: The base style category (default: arcgis)\n        style_name: Map style name (e.g., navigation, streets, satellite)\n        row: Tile row coordinate\n        level: Zoom level\n        column: Tile column coordinate\n    ",
          "input_schema": {
            "properties": {
              "version": {
                "default": "v1",
                "title": "Version",
                "type": "string"
              },
              "style_base": {
                "default": "arcgis",
                "title": "Style Base",
                "type": "string"
              },
              "style_name": {
                "default": "navigation",
                "title": "Style Name",
                "type": "string"
              },
              "row": {
                "default": 17,
                "title": "Row",
                "type": "integer"
              },
              "level": {
                "default": 52333,
                "title": "Level",
                "type": "integer"
              },
              "column": {
                "default": 22866,
                "title": "Column",
                "type": "integer"
              }
            },
            "title": "get_basemap_tileArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "find_nearby_places",
          "description": "Find nearby places and points of interest with optional detailed information.\n\n    Args:\n        x: Longitude of the center point (e.g., -122.4194)\n        y: Latitude of the center point (e.g., 37.7749)\n        pageSize: Number of results to return (default: 20)\n        categories: Optional category filter (e.g., \"restaurant\", \"hotel\", \"coffee\")\n        radius: Search radius in meters (default: 5000)\n        includeDetails: Whether to include full details for each place (default: False)\n        detailsLimit: Maximum number of places to get details for when includeDetails=True (default: 3)\n    ",
          "input_schema": {
            "properties": {
              "x": {
                "title": "X",
                "type": "number"
              },
              "y": {
                "title": "Y",
                "type": "number"
              },
              "pageSize": {
                "default": 10,
                "title": "Pagesize",
                "type": "integer"
              },
              "categories": {
                "default": "",
                "title": "Categories",
                "type": "string"
              },
              "radius": {
                "default": 5000,
                "title": "Radius",
                "type": "integer"
              },
              "includeDetails": {
                "default": false,
                "title": "Includedetails",
                "type": "boolean"
              },
              "detailsLimit": {
                "default": 1,
                "title": "Detailslimit",
                "type": "integer"
              }
            },
            "required": [
              "x",
              "y"
            ],
            "title": "find_nearby_placesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "geocode",
          "description": "Search for an address, place or point of interest.\n\n    Args:\n        singleLine: Complete address in a single string (e.g., \"1600 Pennsylvania Ave NW, DC\")\n        address: Place name or address (e.g., \"Starbucks\" or \"380 New York St\")\n        location: Optional point to search near, as \"longitude,latitude\" (e.g., \"-122.4194,37.7749\")\n        category: Optional POI category to search for (e.g., \"gas station\")\n        outFields: Fields to return in the response (default: all fields)\n    ",
          "input_schema": {
            "properties": {
              "singleLine": {
                "default": "",
                "title": "Singleline",
                "type": "string"
              },
              "address": {
                "default": "",
                "title": "Address",
                "type": "string"
              },
              "location": {
                "default": "",
                "title": "Location",
                "type": "string"
              },
              "category": {
                "default": "",
                "title": "Category",
                "type": "string"
              },
              "outFields": {
                "default": "*",
                "title": "Outfields",
                "type": "string"
              }
            },
            "title": "geocodeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "reverse_geocode",
          "description": "Convert geographic coordinates to an address.\n\n    Args:\n        location: Location as \"longitude,latitude\" (e.g., \"-79.3871,43.6426\")\n        outFields: Fields to include in the response (default: all fields)\n    ",
          "input_schema": {
            "properties": {
              "location": {
                "title": "Location",
                "type": "string"
              },
              "outFields": {
                "default": "*",
                "title": "Outfields",
                "type": "string"
              }
            },
            "required": [
              "location"
            ],
            "title": "reverse_geocodeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_directions",
          "description": "Get detailed turn-by-turn directions between locations.\n\n    Args:\n        stops: Two or more locations as a semicolon-separated list of \"longitude,latitude\" pairs\n              (e.g., \"-122.68782,45.51238;-122.690176,45.522054\")\n    ",
          "input_schema": {
            "properties": {
              "stops": {
                "title": "Stops",
                "type": "string"
              }
            },
            "required": [
              "stops"
            ],
            "title": "get_directionsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_elevation",
          "description": "Get elevation for locations on land or water.\n\n    Args:\n        lon: Longitude of a single point (e.g., -117.195)\n        lat: Latitude of a single point (e.g., 34.065)\n        coordinates: JSON array of [lon, lat] pairs for multiple points (e.g., \"[[-117.182, 34.0555],[-117.185, 34.057]]\")\n        relativeTo: Reference point for elevation measurement (e.g., \"meanSeaLevel\", \"ellipsoid\")\n    ",
          "input_schema": {
            "properties": {
              "lon": {
                "default": null,
                "title": "Lon",
                "type": "number"
              },
              "lat": {
                "default": null,
                "title": "Lat",
                "type": "number"
              },
              "coordinates": {
                "default": null,
                "title": "Coordinates",
                "type": "string"
              },
              "relativeTo": {
                "default": null,
                "title": "Relativeto",
                "type": "string"
              }
            },
            "title": "get_elevationArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"arcgisApiKey\": \"\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@puran1218/arcgis-location-services-mcp/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"arcgisApiKey\": \"\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@puran1218/arcgis-location-services-mcp/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "1069.@puran1218_arcgis-location-services-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1046
  }
}