{
  "labels": {
    "analysis": "The MCP Server provides location-based services including geocoding, reverse geocoding, route calculation, and navigation optimizations. It primarily focuses on transforming addresses into coordinates, finding optimal paths for navigation, and providing real-time traffic-aware directions. The tools support various transportation modes and incorporate future traffic predictions for better route planning.",
    "reasoning": "The server's core functionality revolves around location data processing and navigation, which aligns closely with the Travel & Maps category. The tools enable detailed address searches, geocoding, and multi-destination route planning, making this the most fitting primary label. Secondary labels like Data Analysis & Processing are relevant due to the server's ability to analyze and process real-time traffic data for optimized routing.",
    "primary_label": "Travel & Maps",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": "Real-Time Traffic Navigation",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2324,
    "server_name": "Kakao Mobility & Kakao Map Server",
    "rank_by_usage": 2325,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@CaChiJ_kakao-navigation-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@CaChiJ/kakao-navigation-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2324,
      "name": "Kakao Mobility & Kakao Map Server",
      "author": "@CaChiJ/kakao-navigation-mcp-server",
      "overview": "Provide location search and route finding services tailored for the domestic environment. Transform addresses into coordinates and find optimal paths using various transportation modes, incorporating real-time traffic information.",
      "repository_url": "https://github.com/CaChiJ/kakao-navigation-mcp-server",
      "homepage": "https://smithery.ai/server/@CaChiJ/kakao-navigation-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@CaChiJ_kakao-navigation-mcp-server.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "direction_search_by_coords",
          "description": "Deploy Server Kakao Mobility & Kakao Map Server @CaChiJ/kakao-navigation-mcp-server Try in Playground direction_search_by_coords",
          "parameters": [
            {
              "name": "direction_search_by_coords",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "direction_search_by_address",
          "description": "Search for directions between two locations using their addresses. The tool first geocodes the addresses to coordinates, then finds the optimal route between them.",
          "parameters": [
            {
              "name": "direction_search_by_address",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "address_search_by_place_name",
          "description": "Search for addresses using a place name or keyword. Returns detailed location information including coordinates and address details.",
          "parameters": [
            {
              "name": "address_search_by_place_name",
              "required": false,
              "type": "string"
            },
            {
              "name": "placeName",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "geocode",
          "description": "Convert an address into geographic coordinates (geocoding). Returns the exact location coordinates and address details for the given place name.",
          "parameters": []
        },
        {
          "name": "future_direction_search_by_coords",
          "description": "Search for directions with future departure time. Provides navigation information considering traffic predictions for a specific future time. Supports various options like waypoints, route preferences, and vehicle details.",
          "parameters": [
            {
              "name": "future_direction_search_by_coords",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "multi_destination_direction_search",
          "description": "Search for directions between a starting point and multiple destinations with coordinates. Returns a summary of the route including distance, duration, and route details. For detailed route information, additional calls to the car navigation API are required.",
          "parameters": [
            {
              "name": "multi_destination_direction_search",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@CaChiJ/kakao-navigation-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "kakaoRestApiKey",
          "required": true,
          "description": "Kakao REST API í‚¤"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@CaChiJ/kakao-navigation-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2325.@CaChiJ_kakao-navigation-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2000
  }
}