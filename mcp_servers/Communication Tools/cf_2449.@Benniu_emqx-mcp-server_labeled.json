{
  "labels": {
    "analysis": "The MCP Server primarily facilitates interaction with an EMQX MQTT broker through various MQTT management operations. It allows users to publish MQTT messages, list connected clients, retrieve detailed client information, and forcibly disconnect clients. This indicates a focus on protocol-level interaction and management within an MQTT ecosystem, particularly for monitoring and controlling client connections in real-time.",
    "reasoning": "The primary functionality aligns strongly with operational management of MQTT clients and messages, which falls under protocol-specific communication tools. While MQTT is often used in IoT and device communication, the server's core operations are explicitly about managing the broker-client interactions rather than broader IoT or cloud services.",
    "primary_label": "Communication Tools",
    "secondary_labels": [
      "API Integration",
      "Operating System"
    ],
    "custom_label": "MQTT Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2448,
    "server_name": "EMQX MCP Server",
    "rank_by_usage": 2449,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Benniu_emqx-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Benniu/emqx-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2448,
      "name": "EMQX MCP Server",
      "author": "@Benniu/emqx-mcp-server",
      "overview": "A Model Context Protocol (MCP) server implementation that provides EMQX MQTT broker interaction.",
      "repository_url": "https://github.com/Benniu/emqx-mcp-server",
      "homepage": "https://smithery.ai/server/@Benniu/emqx-mcp-server",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Benniu_emqx-mcp-server.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "publish_mqtt_message",
          "description": "Deploy Server EMQX MCP Server @Benniu/emqx-mcp-server Try in Playground publish_mqtt_message",
          "parameters": [
            {
              "name": "publish_mqtt_message",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_mqtt_clients",
          "description": "List MQTT clients connected to your EMQX Cluster",
          "parameters": [
            {
              "name": "list_mqtt_clients",
              "required": false,
              "type": "string"
            },
            {
              "name": "request",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_mqtt_client",
          "description": "Get detailed information about a specific MQTT client by client ID",
          "parameters": [
            {
              "name": "get_mqtt_client",
              "required": false,
              "type": "string"
            },
            {
              "name": "request",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "kick_mqtt_client",
          "description": "Disconnect a client from the MQTT broker by client ID",
          "parameters": [
            {
              "name": "kick_mqtt_client",
              "required": false,
              "type": "string"
            },
            {
              "name": "request",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Benniu/emqx-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "emqxApiKey",
          "required": true,
          "description": "API key for authenticating with the EMQX API."
        },
        {
          "name": "emqxApiSecret",
          "required": true,
          "description": "API secret for authenticating with the EMQX API."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Benniu/emqx-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2449.@Benniu_emqx-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2089
  }
}