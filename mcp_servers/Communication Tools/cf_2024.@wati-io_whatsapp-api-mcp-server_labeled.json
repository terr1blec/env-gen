{
  "labels": {
    "analysis": "The WATI WhatsApp MCP Server is designed to facilitate automated and AI-powered interactions with WhatsApp accounts. It provides tools for searching contacts, reading and managing messages, sending various types of media, and handling interactive messages with buttons. The server leverages the official Wati API to ensure secure and reliable communication, making it suitable for chatbots, customer support automation, and other use cases requiring WhatsApp integration. Its core functionality revolves around WhatsApp message management, media handling, and interactive communication.",
    "reasoning": "The primary label \"Communication Tools\" is chosen because the server's main function is to enable and manage WhatsApp communication, which falls under messaging and interaction. The secondary label \"API Integration\" is selected because the server acts as a bridge between AI agents and the WhatsApp API, requiring robust API handling capabilities. The secondary label \"Web Search & Research\" is included due to the tools that allow for searching contacts and messages, which can be used for information gathering purposes.",
    "primary_label": "Communication Tools",
    "secondary_labels": [
      "API Integration",
      "Web Search & Research"
    ],
    "custom_label": "WhatsApp Automation",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2023,
    "server_name": "WATI WhatsApp MCP Server",
    "rank_by_usage": 2024,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@wati-io_whatsapp-api-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@wati-io/whatsapp-api-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2023,
      "name": "WATI WhatsApp MCP Server",
      "author": "@wati-io/whatsapp-api-mcp-server",
      "overview": "Enable seamless interaction with your WhatsApp account through AI agents by searching contacts, reading messages, and sending text or media messages. Enhance your WhatsApp conversations with interactive buttons and media handling capabilities. Connect effortlessly using the official Wati API for secure and reliable communication.",
      "repository_url": "https://github.com/wati-io/whatsapp-api-mcp-server",
      "homepage": "https://smithery.ai/server/@wati-io/whatsapp-api-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@wati-io_whatsapp-api-mcp-server.json",
      "tools_count": 11,
      "tools": [
        {
          "name": "search_contacts",
          "description": "Deploy Server WATI WhatsApp MCP Server @wati-io/whatsapp-api-mcp-server Try in Playground search_contacts",
          "parameters": []
        },
        {
          "name": "list_messages",
          "description": "Get WhatsApp messages matching specified criteria with optional context. Args: after: Optional ISO-8601 formatted string to only return messages after this date before: Optional ISO-8601 formatted string to only return messages before this date sender_phone_number: Optional phone number to filter messages by sender chat_waid: Optional WhatsApp ID (WAID) to filter messages by chat query: Optional search term to filter messages by content limit: Maximum number of messages to return (default 20) page: Page number for pagination (default 0) include_context: Whether to include messages before and after matches (default True) context_before: Number of messages to include before each match (default 1) context_after: Number of messages to include after each match (default 1)",
          "parameters": []
        },
        {
          "name": "list_chats",
          "description": "Get WhatsApp chats matching specified criteria. Args: query: Optional search term to filter chats by name or WAID limit: Maximum number of chats to return (default 20) page: Page number for pagination (default 0) include_last_message: Whether to include the last message in each chat (default True) sort_by: Field to sort results by, either \"last_active\" or \"name\" (default \"last_active\")",
          "parameters": []
        },
        {
          "name": "get_chat",
          "description": "Get WhatsApp chat metadata by WAID. Args: chat_waid: The WhatsApp ID (WAID) of the chat to retrieve include_last_message: Whether to include the last message (default True)",
          "parameters": []
        },
        {
          "name": "get_direct_chat_by_contact",
          "description": "Get WhatsApp chat metadata by sender phone number. Args: sender_phone_number: The phone number to search for",
          "parameters": []
        },
        {
          "name": "get_contact_chats",
          "description": "Get the WhatsApp chat for the specified contact. Args: waid: The contact's WhatsApp ID (WAID) to search for limit: Maximum number of chats to return (default 20) page: Page number for pagination (default 0)",
          "parameters": []
        },
        {
          "name": "send_message",
          "description": "Send a WhatsApp message to a contact. Args: recipient: The recipient's phone number with country code but no + or other symbols (e.g., \"85264318721\") message: The message text to send Returns: A dictionary containing success status and a status message",
          "parameters": []
        },
        {
          "name": "send_file",
          "description": "Send a file such as a picture, raw audio, video or document via WhatsApp to the specified recipient. Args: recipient: The recipient's phone number with country code but no + or other symbols (e.g., \"85264318721\") media_path: The absolute path to the media file to send (image, video, document) Returns: A dictionary containing success status and a status message",
          "parameters": []
        },
        {
          "name": "send_audio_message",
          "description": "Send any audio file as a WhatsApp audio message to the specified recipient. Args: recipient: The recipient's phone number with country code but no + or other symbols (e.g., \"85264318721\") media_path: The absolute path to the audio file to send Returns: A dictionary containing success status and a status message",
          "parameters": []
        },
        {
          "name": "download_media",
          "description": "Download media from a WhatsApp message and get the local file path. Args: message_id: The ID of the message containing the media chat_waid: The WhatsApp ID (WAID) of the chat containing the message Returns: A dictionary containing success status, a status message, and the file path if successful",
          "parameters": [
            {
              "name": "chat_waid",
              "required": true,
              "type": "string"
            },
            {
              "name": "message_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "send_interactive_buttons",
          "description": "Send an interactive WhatsApp message with buttons. Args: recipient: The recipient's phone number with country code but no + or other symbols (e.g., \"85264318721\") body_text: The main text content of the message buttons: List of button objects, each with 'text' key (and optionally 'id') header_text: Optional text to display in the header footer_text: Optional text to display in the footer header_image: Optional URL or local path to an image to display in the header header_video: Optional URL or local path to a video to display in the header header_document: Optional URL or local path to a document to display in the header Returns: A dictionary containing success status and a status message",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@wati-io/whatsapp-api-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "watiAuthToken",
          "required": true,
          "description": "Your Wati authentication token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@wati-io/whatsapp-api-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2024.@wati-io_whatsapp-api-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1767
  }
}