{
  "labels": {
    "analysis": "The MCP Server is specifically designed to integrate AI agents with LINE Official Accounts, enabling automated messaging and user interaction. It provides tools for sending text and rich flex messages, retrieving user profiles, and facilitating real-time communication. The core functionality revolves around enhancing conversational experiences between AI-driven workflows and LINE users, primarily through the LINE Messaging API.",
    "reasoning": "The primary label \"Communication Tools\" is chosen because the server facilitates messaging and interaction, aligning with messaging-related functionalities. \"API Integration\" is selected as a secondary label since the server relies heavily on the LINE Messaging API for its operations. No custom label is needed as the predefined categories sufficiently cover the server's functionality.",
    "primary_label": "Communication Tools",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2193,
    "server_name": "LINE Bot Integration Server",
    "rank_by_usage": 2194,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@hirosuke0520_line-mcp-demo.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@hirosuke0520/line-mcp-demo/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2193,
      "name": "LINE Bot Integration Server",
      "author": "@hirosuke0520/line-mcp-demo",
      "overview": "Enable AI agents to interact seamlessly with LINE Official Accounts by sending text and rich flex messages, and retrieving user profiles. Facilitate real-time communication and user engagement through the LINE Messaging API. Simplify connecting AI-driven workflows with LINE users for enhanced conversational experiences.",
      "repository_url": "https://github.com/hirosuke0520/line-mcp-demo",
      "homepage": "https://smithery.ai/server/@hirosuke0520/line-mcp-demo",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@hirosuke0520_line-mcp-demo.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "push_text_message",
          "description": "Deploy Server LINE Bot Integration Server Claim Server @hirosuke0520/line-mcp-demo Try in Playground push_text_message",
          "parameters": [
            {
              "name": "push_text_message",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "push_flex_message",
          "description": "Push a highly customizable flex message to user via LINE. Supports both bubble (single container) and carousel (multiple swipeable bubbles) layouts.",
          "parameters": [
            {
              "name": "push_flex_message",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_profile",
          "description": "Get detailed profile information of a LINE user including display name, profile picture URL, status message and language.",
          "parameters": [
            {
              "name": "get_profile",
              "required": false,
              "type": "string"
            },
            {
              "name": "userId",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@hirosuke0520/line-mcp-demo/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "channelAccessToken",
          "required": true,
          "description": "LINE channel access token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@hirosuke0520/line-mcp-demo/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2194.@hirosuke0520_line-mcp-demo_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1892
  }
}