{
  "labels": {
    "analysis": "The MCP Server is designed to provide seamless integration with PubNub's services and SDKs, enabling developers to access documentation, publish messages, retrieve real-time data, and manage PubNub applications. It focuses on enhancing real-time communication workflows, offering tools for documentation retrieval, message handling, presence monitoring, and application setup instructions. The server leverages standard JSON-RPC calls for interaction, making it suitable for development environments like Cursor IDE.",
    "reasoning": "The server's core functionality revolves around real-time messaging, channel management, and SDK interactions, which aligns with PubNub's primary use cases. The predefined category \"Communication Tools\" best captures its primary function as it deals with messaging, publishing, and presence data. Secondary labels such as \"API Integration\" and \"Development Tools\" are relevant due to its SDK documentation access and JSON-RPC interaction capabilities. No custom label is needed as the predefined categories sufficiently cover its functionality.",
    "primary_label": "Communication Tools",
    "secondary_labels": [
      "API Integration",
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1069,
    "server_name": "PubNub MCP Server",
    "rank_by_usage": 1070,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@stephenlb_pubnub-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@stephenlb/pubnub-mcp-server/mcp?config=eyJwdWJsaXNoS2V5IjogImRlbW8iLCAic3Vic2NyaWJlS2V5IjogImRlbW8ifQ==&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "read_pubnub_sdk_docs",
          "description": "Retrieve official PubNub SDK documentation for a specified programming language and optional API reference section. Use this tool to get code examples, usage patterns, and detailed explanations of PubNub SDK features.",
          "input_schema": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string",
                "enum": [
                  "javascript",
                  "python",
                  "java",
                  "go",
                  "ruby",
                  "swift",
                  "objective-c",
                  "c-sharp",
                  "php",
                  "rust",
                  "unity",
                  "kotlin",
                  "unreal"
                ],
                "description": "Programming language of the PubNub SDK to retrieve documentation for (e.g. javascript, python)"
              },
              "apiReference": {
                "type": "string",
                "enum": [
                  "configuration",
                  "publish-and-subscribe",
                  "presence",
                  "access-manager",
                  "channel-groups",
                  "storage-and-playback",
                  "mobile-push",
                  "objects",
                  "files",
                  "message-actions",
                  "misc"
                ],
                "default": "configuration",
                "description": "API reference section to retrieve (e.g. configuration, publish-and-subscribe; defaults to configuration)"
              }
            },
            "required": [
              "language"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "read_pubnub_resources",
          "description": "Access PubNub \"How to\" and \"resources\" documentation stored as markdown files in the \"resources\" directory. Specify the documentation section to retrieve conceptual guides, feature overviews, integration instructions, scaling advice, security best practices, or troubleshooting tips.",
          "input_schema": {
            "type": "object",
            "properties": {
              "document": {
                "type": "string",
                "enum": [
                  "how_to_add_chat_room_notifications",
                  "how_to_build_threaded_messaging",
                  "how_to_calculate_message_payload_size",
                  "how_to_configure_tls",
                  "how_to_define_valid_channel_names",
                  "how_to_detect_dropped_connections",
                  "how_to_develop_pubnub_functions",
                  "how_to_encrypt_messages_files",
                  "how_to_find_compliance_reports",
                  "how_to_get_live_event_support",
                  "how_to_handle_large_scale_events",
                  "how_to_implement_access_control",
                  "how_to_implement_webrtc_signaling",
                  "how_to_integrate_with_database_triggers",
                  "how_to_manage_channel_groups",
                  "how_to_manage_concurrent_connections",
                  "how_to_manage_sdk_versions_upgrades",
                  "how_to_mitigate_dos_attacks",
                  "how_to_optimize_mobile_battery_usage",
                  "how_to_optimize_publish_subscribe_speed",
                  "how_to_prevent_old_messages_on_subscribe",
                  "how_to_receive_data_via_rest_api",
                  "how_to_secure_application_keys",
                  "how_to_send_large_messages",
                  "how_to_send_receive_json",
                  "how_to_synchronize_multiple_devices",
                  "how_to_track_moving_objects",
                  "how_to_understand_channel_limits",
                  "how_to_understand_channels",
                  "how_to_understand_demo_keys",
                  "how_to_understand_http_499_errors",
                  "how_to_understand_publish_subscribe",
                  "how_to_understand_userid_uuid",
                  "how_to_use_custom_origin",
                  "how_to_use_file_sharing",
                  "how_to_use_message_persistence",
                  "how_to_use_pubnub_functions_kvstore_module",
                  "how_to_use_pubnub_functions_pubnub_module",
                  "how_to_use_pubnub_functions_vault_module",
                  "how_to_use_pubnub_functions_xhr_module",
                  "how_to_use_stream_controller",
                  "how_to_use_support_portal",
                  "how_to_whitelist_ip_addresses",
                  "how_to_write_a_pubnub_app",
                  "pubnub_concepts",
                  "pubnub_features",
                  "pubnub_functions",
                  "pubnub_integration",
                  "pubnub_scale",
                  "pubnub_security",
                  "pubnub_troubleshooting"
                ],
                "description": "Documentation section to fetch (concepts, features, functions, integration, scale, security, troubleshooting)"
              }
            },
            "required": [
              "document"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "publish_pubnub_message",
          "description": "Send a message to a specified PubNub channel. Provide the channel name and message payload; returns a timetoken confirming successful publication.",
          "input_schema": {
            "type": "object",
            "properties": {
              "channel": {
                "type": "string",
                "description": "Name of the PubNub channel (string) to publish the message to"
              },
              "message": {
                "type": "string",
                "description": "Message payload as a string"
              }
            },
            "required": [
              "channel",
              "message"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_pubnub_messages",
          "description": "Retrieve historical messages from specified PubNub channels, including message content and metadata. Provide an array of channel names to receive past communication records.",
          "input_schema": {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 1,
                "description": "List of one or more PubNub channel names (strings) to retrieve historical messages from"
              }
            },
            "required": [
              "channels"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_pubnub_presence",
          "description": "Obtain real-time presence data (occupancy, UUIDs, etc.) for specified PubNub channels and channel groups. Useful for monitoring active subscribers and their status.",
          "input_schema": {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": [],
                "description": "List of channel names (strings) to query presence data for"
              },
              "channelGroups": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": [],
                "description": "List of channel group names (strings) to query presence data for"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "write_pubnub_app",
          "description": "Provides instructions for creating a PubNub app. Includes a checklist of steps to follow, such as setting up the PubNub account, creating a new app, and configuring the app settings. This tool is useful for developers who are new to PubNub and need guidance on how to get started with building their first app.",
          "input_schema": {
            "type": "object",
            "properties": {
              "appType": {
                "type": "string",
                "enum": [
                  "default"
                ],
                "description": "Which PubNub app template to load"
              }
            },
            "required": [
              "appType"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 6,
      "tool_names": [
        "read_pubnub_sdk_docs",
        "read_pubnub_resources",
        "publish_pubnub_message",
        "get_pubnub_messages",
        "get_pubnub_presence",
        "write_pubnub_app"
      ]
    },
    "server_info_crawled": {
      "id": 1069,
      "name": "PubNub MCP Server",
      "author": "@stephenlb/pubnub-mcp-server",
      "overview": "Provide seamless access to PubNub SDK documentation and PubNub Functions resources through an MCP server integrated with Cursor IDE. Enable LLM-powered tools to publish messages, fetch SDK docs, and retrieve channel information effortlessly. Enhance your development workflow with interactive PubNub capabilities via standardized JSON-RPC calls.",
      "repository_url": "https://github.com/stephenlb/pubnub-mcp-server",
      "homepage": "https://smithery.ai/server/@stephenlb/pubnub-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@stephenlb_pubnub-mcp-server.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "read_pubnub_sdk_docs",
          "description": "Retrieve official PubNub SDK documentation for a specified programming language and optional API reference section. Use this tool to get code examples, usage patterns, and detailed explanations of PubNub SDK features.",
          "input_schema": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string",
                "enum": [
                  "javascript",
                  "python",
                  "java",
                  "go",
                  "ruby",
                  "swift",
                  "objective-c",
                  "c-sharp",
                  "php",
                  "rust",
                  "unity",
                  "kotlin",
                  "unreal"
                ],
                "description": "Programming language of the PubNub SDK to retrieve documentation for (e.g. javascript, python)"
              },
              "apiReference": {
                "type": "string",
                "enum": [
                  "configuration",
                  "publish-and-subscribe",
                  "presence",
                  "access-manager",
                  "channel-groups",
                  "storage-and-playback",
                  "mobile-push",
                  "objects",
                  "files",
                  "message-actions",
                  "misc"
                ],
                "default": "configuration",
                "description": "API reference section to retrieve (e.g. configuration, publish-and-subscribe; defaults to configuration)"
              }
            },
            "required": [
              "language"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "read_pubnub_resources",
          "description": "Access PubNub \"How to\" and \"resources\" documentation stored as markdown files in the \"resources\" directory. Specify the documentation section to retrieve conceptual guides, feature overviews, integration instructions, scaling advice, security best practices, or troubleshooting tips.",
          "input_schema": {
            "type": "object",
            "properties": {
              "document": {
                "type": "string",
                "enum": [
                  "how_to_add_chat_room_notifications",
                  "how_to_build_threaded_messaging",
                  "how_to_calculate_message_payload_size",
                  "how_to_configure_tls",
                  "how_to_define_valid_channel_names",
                  "how_to_detect_dropped_connections",
                  "how_to_develop_pubnub_functions",
                  "how_to_encrypt_messages_files",
                  "how_to_find_compliance_reports",
                  "how_to_get_live_event_support",
                  "how_to_handle_large_scale_events",
                  "how_to_implement_access_control",
                  "how_to_implement_webrtc_signaling",
                  "how_to_integrate_with_database_triggers",
                  "how_to_manage_channel_groups",
                  "how_to_manage_concurrent_connections",
                  "how_to_manage_sdk_versions_upgrades",
                  "how_to_mitigate_dos_attacks",
                  "how_to_optimize_mobile_battery_usage",
                  "how_to_optimize_publish_subscribe_speed",
                  "how_to_prevent_old_messages_on_subscribe",
                  "how_to_receive_data_via_rest_api",
                  "how_to_secure_application_keys",
                  "how_to_send_large_messages",
                  "how_to_send_receive_json",
                  "how_to_synchronize_multiple_devices",
                  "how_to_track_moving_objects",
                  "how_to_understand_channel_limits",
                  "how_to_understand_channels",
                  "how_to_understand_demo_keys",
                  "how_to_understand_http_499_errors",
                  "how_to_understand_publish_subscribe",
                  "how_to_understand_userid_uuid",
                  "how_to_use_custom_origin",
                  "how_to_use_file_sharing",
                  "how_to_use_message_persistence",
                  "how_to_use_pubnub_functions_kvstore_module",
                  "how_to_use_pubnub_functions_pubnub_module",
                  "how_to_use_pubnub_functions_vault_module",
                  "how_to_use_pubnub_functions_xhr_module",
                  "how_to_use_stream_controller",
                  "how_to_use_support_portal",
                  "how_to_whitelist_ip_addresses",
                  "how_to_write_a_pubnub_app",
                  "pubnub_concepts",
                  "pubnub_features",
                  "pubnub_functions",
                  "pubnub_integration",
                  "pubnub_scale",
                  "pubnub_security",
                  "pubnub_troubleshooting"
                ],
                "description": "Documentation section to fetch (concepts, features, functions, integration, scale, security, troubleshooting)"
              }
            },
            "required": [
              "document"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "publish_pubnub_message",
          "description": "Send a message to a specified PubNub channel. Provide the channel name and message payload; returns a timetoken confirming successful publication.",
          "input_schema": {
            "type": "object",
            "properties": {
              "channel": {
                "type": "string",
                "description": "Name of the PubNub channel (string) to publish the message to"
              },
              "message": {
                "type": "string",
                "description": "Message payload as a string"
              }
            },
            "required": [
              "channel",
              "message"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_pubnub_messages",
          "description": "Retrieve historical messages from specified PubNub channels, including message content and metadata. Provide an array of channel names to receive past communication records.",
          "input_schema": {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 1,
                "description": "List of one or more PubNub channel names (strings) to retrieve historical messages from"
              }
            },
            "required": [
              "channels"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_pubnub_presence",
          "description": "Obtain real-time presence data (occupancy, UUIDs, etc.) for specified PubNub channels and channel groups. Useful for monitoring active subscribers and their status.",
          "input_schema": {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": [],
                "description": "List of channel names (strings) to query presence data for"
              },
              "channelGroups": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": [],
                "description": "List of channel group names (strings) to query presence data for"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "write_pubnub_app",
          "description": "Provides instructions for creating a PubNub app. Includes a checklist of steps to follow, such as setting up the PubNub account, creating a new app, and configuring the app settings. This tool is useful for developers who are new to PubNub and need guidance on how to get started with building their first app.",
          "input_schema": {
            "type": "object",
            "properties": {
              "appType": {
                "type": "string",
                "enum": [
                  "default"
                ],
                "description": "Which PubNub app template to load"
              }
            },
            "required": [
              "appType"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"publishKey\": \"demo\",\n  \"subscribeKey\": \"demo\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@stephenlb/pubnub-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"publishKey\": \"demo\",\n  \"subscribeKey\": \"demo\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@stephenlb/pubnub-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "1070.@stephenlb_pubnub-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1047
  }
}