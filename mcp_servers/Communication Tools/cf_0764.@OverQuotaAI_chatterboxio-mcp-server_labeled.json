{
  "labels": {
    "analysis": "The ChatterBox Meeting Integration Server focuses on enhancing meeting productivity by enabling AI agents to join online meetings, capture transcripts/recordings, and generate summaries. It integrates with popular video conferencing platforms (Zoom, Google Meet, MS Teams) and provides tools for meeting access, information retrieval, and summarization. The server solves problems related to meeting data management, productivity, and accessibility for AI-driven workflows.",
    "reasoning": "The primary functionality revolves around meeting automation and data extraction, aligning with \"Communication Tools\" as it interacts with meeting platforms. Secondary labels include \"AI/ML Tools\" for summarization and \"Productivity\" due to its focus on workflow enhancement. No custom label is needed as predefined categories adequately cover its scope.",
    "primary_label": "Communication Tools",
    "secondary_labels": [
      "AI/ML Tools",
      "Daily Productivity"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 763,
    "server_name": "ChatterBox Meeting Integration Server",
    "rank_by_usage": 764,
    "usage_count": "8",
    "original_file": "../crawler/smithery/@OverQuotaAI_chatterboxio-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@OverQuotaAI/chatterboxio-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 763,
      "name": "ChatterBox Meeting Integration Server",
      "author": "@OverQuotaAI/chatterboxio-mcp-server",
      "overview": "Enable AI agents to join online meetings, capture transcripts and recordings, and generate concise meeting summaries. Seamlessly integrate with Zoom, Google Meet and MS Teams to enhance meeting productivity and insights. Simplify meeting data access and summarization for AI-driven workflows.",
      "repository_url": "https://github.com/ChatterBoxIO/chatterboxio-mcp-server",
      "homepage": "https://smithery.ai/server/@OverQuotaAI/chatterboxio-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "8",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@OverQuotaAI_chatterboxio-mcp-server.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "joinMeeting",
          "description": "Deploy Server ChatterBox Meeting Integration Server @OverQuotaAI/chatterboxio-mcp-server Try in Playground joinMeeting",
          "parameters": [
            {
              "name": "joinMeeting",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getMeetingInfo",
          "description": "Get information about a meeting",
          "parameters": [
            {
              "name": "getMeetingInfo",
              "required": false,
              "type": "string"
            },
            {
              "name": "sessionId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "summarizeMeeting",
          "description": "Generate a concise summary of a meeting's contents from its transcript",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@OverQuotaAI/chatterboxio-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "chatterboxApiKey",
          "required": true,
          "description": "ChatterBox API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@OverQuotaAI/chatterboxio-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0764.@OverQuotaAI_chatterboxio-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 746
  }
}