{
  "labels": {
    "analysis": "The MCP Server primarily focuses on integrating and retrieving chat data from ChannelTalk via its OPEN API. It provides tools to list user chats and retrieve message details, with capabilities for filtering and processing data efficiently to enhance AI assistant interactions. The core functionality revolves around accessing and managing chat-related information.",
    "reasoning": "The primary label \"Communication Tools\" was chosen because the server's core functionality involves accessing and managing chat data, which is central to communication systems. The secondary label \"API Integration\" is relevant due to the server's reliance on ChannelTalk's OPEN API for data retrieval. No custom label is needed as the predefined labels adequately cover the server's functionality.",
    "primary_label": "Communication Tools",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 770,
    "server_name": "ChannelTalk Integration",
    "rank_by_usage": 771,
    "usage_count": "8",
    "original_file": "../crawler/smithery/@scarfunk_mcp-channel-io.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@scarfunk/mcp-channel-io/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 770,
      "name": "ChannelTalk Integration",
      "author": "@scarfunk/mcp-channel-io",
      "overview": "Enable AI assistants to access and utilize chat information from ChannelTalk by integrating with its OPEN API. Retrieve chat lists and message details efficiently with filtering options to enhance conversational AI capabilities. Reduce response size for smoother AI operations by processing only necessary information.",
      "repository_url": "https://github.com/scarfunk/mcp-channel-io",
      "homepage": "https://smithery.ai/server/@scarfunk/mcp-channel-io",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "8",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@scarfunk_mcp-channel-io.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "list_of_user_chats",
          "description": "Deploy Server ChannelTalk Integration @scarfunk/mcp-channel-io Try in Playground list_of_user_chats",
          "parameters": [
            {
              "name": "list_of_user_chats",
              "required": false,
              "type": "string"
            },
            {
              "name": "state",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "retrieve_list_of_messages_in_user_chats",
          "description": "Retrieve list of messages in a user chats with parallel request",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@scarfunk/mcp-channel-io/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "accessKey",
          "required": true,
          "description": "Channel Talk ACCESS_KEY"
        },
        {
          "name": "secretKey",
          "required": true,
          "description": "Channel Talk SECRET_KEY"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@scarfunk/mcp-channel-io/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0771.@scarfunk_mcp-channel-io_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 753
  }
}