{
  "labels": {
    "analysis": "The MCP Server provides read-only access to Linear issues (a project management tool) and their associated comments through API integration. It allows language models to fetch detailed information about issues and comments using a Linear API token. The primary functionality involves retrieving and displaying structured project management data from Linear, with tools specifically designed to fetch issue details and comments. The server is designed to integrate seamlessly with Claude for Desktop, enabling interactive queries of Linear issues.",
    "reasoning": "The primary label \"Project Management\" best describes the server's core functionality, as it deals with accessing and retrieving data from a project management tool (Linear). The secondary label \"API Integration\" is relevant because the server relies on the Linear API to fetch data. No custom label is needed as the predefined labels adequately capture the server's purpose.",
    "primary_label": "Project Management",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false
  },
  "metadata": {
    "server_id": 2009,
    "server_name": "Linear Issues Server",
    "rank_by_usage": 2010,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@keegancsmith_linear-issues-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@keegancsmith/linear-issues-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2009,
      "name": "Linear Issues Server",
      "author": "@keegancsmith/linear-issues-mcp-server",
      "overview": "Provide read-only access to Linear issues and their comments through a simple MCP server. Enable language models to fetch issue details and associated comments using a Linear API token. Seamlessly integrate with Claude for Desktop to query Linear issues interactively.",
      "repository_url": "https://github.com/keegancsmith/linear-issues-mcp-server",
      "homepage": "https://smithery.ai/server/@keegancsmith/linear-issues-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@keegancsmith_linear-issues-mcp-server.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "linear_get_issue",
          "description": "Deploy Server Linear Issues Server Claim Server @keegancsmith/linear-issues-mcp-server Try in Playground linear_get_issue",
          "parameters": []
        },
        {
          "name": "linear_get_issue_with_comments",
          "description": "Fetch a Linear issue with all its comments and complete information.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@keegancsmith/linear-issues-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "linearApiToken",
          "required": true,
          "description": "Linear API token (API key or OAuth token)"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@keegancsmith/linear-issues-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2010.@keegancsmith_linear-issues-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1753
  }
}