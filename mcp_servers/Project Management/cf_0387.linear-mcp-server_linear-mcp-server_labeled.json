{
  "labels": {
    "analysis": "The MCP Server is designed to interact with the Linear API, a project management tool. It provides tools for creating, updating, searching, and managing Linear issues (tasks), as well as adding comments to issues. This server bridges LLMs with Linear's workflow, enabling automation and AI-assisted project management. Its core functionality focuses on issue tracking, task management, and team collaboration within Linear.",
    "reasoning": "The primary label \"Project Management\" captures the server's core role of managing tasks and issues within Linear. The secondary labels \"Daily Productivity\" and \"Communication Tools\" reflect its utility in organizing workflows and facilitating team communication via comments. No custom label is needed as the predefined categories cover the server's functionality well.",
    "primary_label": "Project Management",
    "secondary_labels": [
      "Daily Productivity",
      "Communication Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false
  },
  "metadata": {
    "server_id": 386,
    "server_name": "Linear MCP Server",
    "rank_by_usage": 387,
    "usage_count": "67",
    "original_file": "../crawler/smithery/linear-mcp-server_linear-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/linear-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 386,
      "name": "Linear MCP Server",
      "author": "linear-mcp-server",
      "overview": "A Model Context Protocol server for the Linear API, enabling LLM interaction with Linear issues.",
      "repository_url": "https://github.com/jerhadf/linear-mcp-server",
      "homepage": "https://smithery.ai/server/linear-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "67",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/linear-mcp-server_linear-mcp-server.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "linear_create_issue",
          "description": "Deploy Server Linear MCP Server linear-mcp-server Try in Playground linear_create_issue",
          "parameters": [
            {
              "name": "linear_create_issue",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "linear_update_issue",
          "description": "Updates an existing Linear issue's properties. Use this to modify issue details like title, description, priority, or status. Requires the issue ID and accepts any combination of updatable fields. Returns the updated issue's identifier and URL.",
          "parameters": [
            {
              "name": "linear_update_issue",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "linear_search_issues",
          "description": "Searches Linear issues using flexible criteria. Supports filtering by any combination of: title/description text, team, status, assignee, labels, priority (1=urgent, 2=high, 3=normal, 4=low), and estimate. Returns up to 10 issues by default (configurable via limit).",
          "parameters": [
            {
              "name": "priority",
              "required": false,
              "type": "string"
            },
            {
              "name": "assigneeId",
              "required": false,
              "type": "string"
            },
            {
              "name": "includeArchived",
              "required": false,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "linear_get_user_issues",
          "description": "Retrieves issues assigned to a specific user or the authenticated user if no userId is provided. Returns issues sorted by last updated, including priority, status, and other metadata. Useful for finding a user's workload or tracking assigned tasks.",
          "parameters": [
            {
              "name": "linear_get_user_issues",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "linear_add_comment",
          "description": "Adds a comment to an existing Linear issue. Supports markdown formatting in the comment body. Can optionally specify a custom user name and avatar for the comment. Returns the created comment's details including its URL.",
          "parameters": [
            {
              "name": "linear_add_comment",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/linear-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "linearApiKey",
          "required": true,
          "description": "Linear API key for authenticating with the Linear API."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/linear-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0387.linear-mcp-server_linear-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 381
  }
}