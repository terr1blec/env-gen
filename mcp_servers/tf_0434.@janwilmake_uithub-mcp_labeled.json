{
  "labels": {
    "analysis": "The UIThub MCP Server is designed to facilitate natural language exploration and analysis of GitHub repositories. It retrieves repository contents with smart filtering options, allowing users to fetch and understand code efficiently. The core functionality involves interacting with GitHub repositories, retrieving file structures, applying filters for relevant context, and integrating with Claude Desktop for augmented code analysis. This server solves problems related to accessing, understanding, and working with code in a structured and intuitive manner.",
    "reasoning": "The primary label \"Code Analysis & Repository Tools\" captures the server's core functionality of exploring and analyzing GitHub repositories. The secondary label \"Browser Automation\" is included because the server retrieves repository contents, which involves automated fetching of data from GitHub. The secondary label \"Development Tools\" fits due to the server's focus on code analysis and integration with Claude Desktop for enhanced development workflows. A custom label \"GitHub Integration\" was added to describe the server's unique focus on GitHub repository interactions.",
    "primary_label": "Operating System",
    "secondary_labels": [
      "Browser Automation",
      "Development Tools"
    ],
    "custom_label": "GitHub Integration",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 433,
    "server_name": "UIThub MCP Server",
    "rank_by_usage": 434,
    "usage_count": "48",
    "original_file": "../crawler/smithery/@janwilmake_uithub-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@janwilmake/uithub-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "getRepositoryContents",
          "description": "Get repository contents from GitHub. Unless otherwise instructed, ensure to always first get the tree only (omitFiles:true) to get an idea of the file structure. Afterwards, use the different filters to get only the context relevant to cater to the user request.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "type": "string",
                "description": "GitHub repository owner"
              },
              "repo": {
                "type": "string",
                "description": "GitHub repository name"
              },
              "branch": {
                "type": "string",
                "description": "Branch name (defaults to main if not provided)"
              },
              "path": {
                "type": "string",
                "description": "File or directory path within the repository"
              },
              "ext": {
                "type": "string",
                "description": "Comma-separated list of file extensions to include"
              },
              "dir": {
                "type": "string",
                "description": "Comma-separated list of directories to include"
              },
              "excludeExt": {
                "type": "string",
                "description": "Comma-separated list of file extensions to exclude"
              },
              "excludeDir": {
                "type": "string",
                "description": "Comma-separated list of directories to exclude"
              },
              "maxFileSize": {
                "type": "integer",
                "description": "Maximum file size to include (in bytes)"
              },
              "maxTokens": {
                "type": "integer",
                "description": "Limit the response to a maximum number of tokens (defaults to 50000)"
              },
              "omitFiles": {
                "type": "boolean",
                "description": "If true, response will not include the file contents"
              },
              "omitTree": {
                "type": "boolean",
                "description": "If true, response will not include the directory tree"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "getRepositoryContents"
      ]
    },
    "server_info_crawled": {
      "id": 433,
      "name": "UIThub MCP Server",
      "author": "@janwilmake/uithub-mcp",
      "overview": "Enable natural language exploration and analysis of GitHub repositories by retrieving repository contents with smart filtering options. Seamlessly integrate with Claude Desktop to fetch and understand code from GitHub repositories. Enhance your ability to discuss and work with code through intuitive access to repository data.",
      "repository_url": "https://github.com/janwilmake/uithub-mcp",
      "homepage": "https://smithery.ai/server/@janwilmake/uithub-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "48",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@janwilmake_uithub-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "getRepositoryContents",
          "description": "Get repository contents from GitHub. Unless otherwise instructed, ensure to always first get the tree only (omitFiles:true) to get an idea of the file structure. Afterwards, use the different filters to get only the context relevant to cater to the user request.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "type": "string",
                "description": "GitHub repository owner"
              },
              "repo": {
                "type": "string",
                "description": "GitHub repository name"
              },
              "branch": {
                "type": "string",
                "description": "Branch name (defaults to main if not provided)"
              },
              "path": {
                "type": "string",
                "description": "File or directory path within the repository"
              },
              "ext": {
                "type": "string",
                "description": "Comma-separated list of file extensions to include"
              },
              "dir": {
                "type": "string",
                "description": "Comma-separated list of directories to include"
              },
              "excludeExt": {
                "type": "string",
                "description": "Comma-separated list of file extensions to exclude"
              },
              "excludeDir": {
                "type": "string",
                "description": "Comma-separated list of directories to exclude"
              },
              "maxFileSize": {
                "type": "integer",
                "description": "Maximum file size to include (in bytes)"
              },
              "maxTokens": {
                "type": "integer",
                "description": "Limit the response to a maximum number of tokens (defaults to 50000)"
              },
              "omitFiles": {
                "type": "boolean",
                "description": "If true, response will not include the file contents"
              },
              "omitTree": {
                "type": "boolean",
                "description": "If true, response will not include the directory tree"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@janwilmake/uithub-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@janwilmake/uithub-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0434.@janwilmake_uithub-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 428
  }
}