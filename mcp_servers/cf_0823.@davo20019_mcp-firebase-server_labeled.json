{
  "labels": {
    "analysis": "The MCP Firestore Bridge Server facilitates seamless interaction between Large Language Models and Firebase Firestore by exposing standard Firestore operations as callable tools. It enables querying, adding, updating, and listing Firestore documents and collections through an MCP interface. This server simplifies integrating Firestore data into AI workflows, acting as a middleware layer between AI systems and the database.",
    "reasoning": "The primary label \"Database Operations\" is selected because the core functionality revolves around interacting with a Firestore database, including querying, updating, and managing documents and collections. The \"AI/ML Tools\" secondary label is included because the server is specifically designed to bridge between AI systems and database operations, making it uniquely valuable in AI workflows. The \"Cloud Services\" secondary label is appropriate since Firestore is a cloud-based NoSQL database service.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "AI/ML Tools",
      "Cloud Services"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 822,
    "server_name": "Firebase Firestore Bridge Server",
    "rank_by_usage": 823,
    "usage_count": "6",
    "original_file": "../crawler/smithery/@davo20019_mcp-firebase-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@davo20019/mcp-firebase-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 822,
      "name": "Firebase Firestore Bridge Server",
      "author": "@davo20019/mcp-firebase-server",
      "overview": "Enable seamless interaction between Large Language Models and Firebase Firestore by exposing Firestore operations as callable tools. Query, add, update, and list Firestore documents and collections directly through an MCP interface. Simplify integration of Firestore data into your AI workflows with this dedicated MCP server.",
      "repository_url": "https://github.com/davo20019/mcp-firebase-server",
      "homepage": "https://smithery.ai/server/@davo20019/mcp-firebase-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "6",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@davo20019_mcp-firebase-server.json",
      "tools_count": 7,
      "tools": [
        {
          "name": "query_firestore_collection",
          "description": "Deploy Server Firebase Firestore Bridge Server Claim Server @davo20019/mcp-firebase-server Try in Playground query_firestore_collection",
          "parameters": []
        },
        {
          "name": "add_document_to_firestore",
          "description": "Adds a new document with an auto-generated ID to the specified Firestore collection. Args: collection_name: The name of the Firestore collection where the document will be added. document_data: A dictionary representing the document to add. Returns: A dictionary containing the success status and the ID of the new document, or an error message.",
          "parameters": []
        },
        {
          "name": "list_firestore_collections",
          "description": "Lists all top-level collections in the Firestore database. Returns: A list of dictionaries, where each dictionary contains the 'id' of a collection. Returns an error message if Firestore is not initialized or an error occurs.",
          "parameters": []
        },
        {
          "name": "get_firestore_document",
          "description": "Retrieves a specific document from a Firestore collection by its ID. Args: collection_name: The name of the Firestore collection. document_id: The ID of the document to retrieve. Returns: A dictionary representing the document data, including its ID. Returns an error message if the document doesn't exist, Firestore is not initialized, or an error occurs.",
          "parameters": []
        },
        {
          "name": "list_document_subcollections",
          "description": "Lists all subcollections of a specified document in Firestore. Args: collection_name: The name of the parent collection. document_id: The ID of the document whose subcollections are to be listed. Returns: A list of dictionaries, where each dictionary contains the 'id' of a subcollection. Returns an error message if Firestore is not initialized, the document doesn't exist, or an error occurs.",
          "parameters": []
        },
        {
          "name": "update_firestore_document",
          "description": "Updates an existing document in a specified Firestore collection. Args: collection_name: The name of the Firestore collection. document_id: The ID of the document to update. update_data: A dictionary containing the fields to update. Returns: A dictionary containing the success status, or an error message.",
          "parameters": []
        },
        {
          "name": "query_firestore_collection_with_filter",
          "description": "Retrieves documents from a specified Firestore collection, filtering by field values. Currently supports equality (==) filters only. Args: collection_name: The name of the Firestore collection to query. filters: A dictionary where keys are field names and values are the values to filter by. Example: {\"category\": \"electronics\", \"available\": True} limit: The maximum number of documents to return (default is 50). Returns: A list of documents from the collection that match the filters. Returns an error message if Firestore is not initialized or an error occurs.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@davo20019/mcp-firebase-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "serviceAccountKeyPath",
          "required": true,
          "description": "Absolute path to Firebase service account key JSON file"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@davo20019/mcp-firebase-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0823.@davo20019_mcp-firebase-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 804
  }
}