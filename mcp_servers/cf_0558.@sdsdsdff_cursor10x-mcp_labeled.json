{
  "labels": {
    "analysis": "The MCP Server is designed to provide developers with a continuous, project-centric context awareness system. It enhances AI assistants by maintaining persistent memory of conversations, code structures, milestones, and semantic relationships. The tools it provides focus on memory management, context retrieval, and project tracking, allowing for adaptive and autonomous context management within development workflows.",
    "reasoning": "The primary functionality of this server revolves around memory management and context awareness, which aligns well with the \"Memory Management\" category. It also supports several aspects of development tools, particularly in maintaining project context and automating context retrieval, justifying its secondary label under \"Development Tools.\" There is no unique functionality that necessitates a custom label beyond the predefined ones.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 557,
    "server_name": "DevContext",
    "rank_by_usage": 558,
    "usage_count": "22",
    "original_file": "../crawler/smithery/@sdsdsdff_cursor10x-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@sdsdsdff/cursor10x-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 557,
      "name": "DevContext",
      "author": "@sdsdsdff/cursor10x-mcp",
      "overview": "Provide developers with continuous, project-centric context awareness that deeply understands your codebase and development workflow. Enhance AI assistants with persistent memory of conversations, code structures, milestones, and semantic relationships to boost productivity and contextual relevance. Seamlessly integrate with your projects to deliver adaptive, autonomous context management and retrieval.",
      "repository_url": "https://github.com/sdsdsdff/cursor10x-mcp",
      "homepage": "https://smithery.ai/server/@sdsdsdff/cursor10x-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "22",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@sdsdsdff_cursor10x-mcp.json",
      "tools_count": 18,
      "tools": [
        {
          "name": "generateBanner",
          "description": "Deploy Server @sdsdsdff/cursor10x-mcp Try in Playground generateBanner",
          "parameters": [
            {
              "name": "generateBanner",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "checkHealth",
          "description": "Checks the health of the memory system and its database",
          "parameters": [
            {
              "name": "checkHealth",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "initConversation",
          "description": "Initializes a conversation by storing the user message, generating a banner, and retrieving context in one operation",
          "parameters": [
            {
              "name": "content",
              "required": true,
              "type": "string"
            },
            {
              "name": "metadata",
              "required": false,
              "type": "string"
            },
            {
              "name": "importance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "endConversation",
          "description": "Ends a conversation by storing the assistant message, recording a milestone, and logging an episode in one operation",
          "parameters": [
            {
              "name": "endConversation",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "storeUserMessage",
          "description": "Stores a user message in the short-term memory",
          "parameters": [
            {
              "name": "content",
              "required": true,
              "type": "string"
            },
            {
              "name": "metadata",
              "required": false,
              "type": "string"
            },
            {
              "name": "importance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "storeAssistantMessage",
          "description": "Stores an assistant message in the short-term memory",
          "parameters": [
            {
              "name": "storeAssistantMessage",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "trackActiveFile",
          "description": "Tracks an active file being accessed by the user",
          "parameters": [
            {
              "name": "action",
              "required": true,
              "type": "string"
            },
            {
              "name": "filename",
              "required": true,
              "type": "string"
            },
            {
              "name": "metadata",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getRecentMessages",
          "description": "Retrieves recent messages from the short-term memory",
          "parameters": [
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "importance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getActiveFiles",
          "description": "Retrieves active files from the short-term memory",
          "parameters": [
            {
              "name": "getActiveFiles",
              "required": false,
              "type": "string"
            },
            {
              "name": "limit",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "storeMilestone",
          "description": "Stores a project milestone in the long-term memory",
          "parameters": [
            {
              "name": "storeMilestone",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "storeDecision",
          "description": "Stores a project decision in the long-term memory",
          "parameters": [
            {
              "name": "storeDecision",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "storeRequirement",
          "description": "Stores a project requirement in the long-term memory",
          "parameters": [
            {
              "name": "storeRequirement",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "recordEpisode",
          "description": "Records an episode (action) in the episodic memory",
          "parameters": [
            {
              "name": "recordEpisode",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getRecentEpisodes",
          "description": "Retrieves recent episodes from the episodic memory",
          "parameters": [
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "context",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getComprehensiveContext",
          "description": "Retrieves comprehensive context from all memory systems",
          "parameters": [
            {
              "name": "getComprehensiveContext",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getMemoryStats",
          "description": "Retrieves statistics about the memory system",
          "parameters": [
            {
              "name": "getMemoryStats",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "manageVector",
          "description": "Unified tool for managing vector embeddings with operations for store, search, update, and delete",
          "parameters": [
            {
              "name": "manageVector",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "diagnoseVectors",
          "description": "Run diagnostics on the vector storage system to identify issues",
          "parameters": [
            {
              "name": "diagnoseVectors",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@sdsdsdff/cursor10x-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "tursoAuthToken",
          "required": true,
          "description": "Turso auth token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@sdsdsdff/cursor10x-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0558.@sdsdsdff_cursor10x-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 546
  }
}