{
  "labels": {
    "analysis": "The MCP Server is primarily focused on providing weather-related services through a standardized JSON-RPC interface. It offers tools to retrieve weather information based on coordinates or city names, as well as interactive features like a weather assistant that can chat with users to provide weather updates. The core functionality revolves around weather data retrieval, presentation, and interaction.",
    "reasoning": "The primary label \"Weather\" is chosen because the server's tools are exclusively related to weather data and interaction. Secondary labels \"Communication Tools\" and \"API Integration\" are selected because the server facilitates user interaction (through chat) and provides external data through an API-like JSON-RPC interface. No custom label is needed as the predefined categories adequately cover the functionality.",
    "primary_label": "Weather",
    "secondary_labels": [
      "Communication Tools",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1892,
    "server_name": "Deneme MCP Server",
    "rank_by_usage": 1893,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@iremaltunay55_deneme.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@iremaltunay55/deneme/mcp?config=eyJ1bml0cyI6ICJtZXRyaWMiLCAiYXBpX2tleSI6ICI2YjJlOTdiMWI2NTU5NDM2YWVlMzdiODNiNzE0MTJiMyIsICJsYW5ndWFnZSI6ICJ0ciJ9&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_weather_by_coordinates",
          "description": "\n    Enlem ve boylam koordinatlarına göre hava durumu bilgilerini getirir.\n\n    Args:\n        latitude: Enlem (-90 ile 90 arasında)\n        longitude: Boylam (-180 ile 180 arasında)\n        units: Ölçü birimi (metric, imperial, standard)\n\n    Returns:\n        JSON formatında hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              },
              "units": {
                "default": null,
                "title": "Units",
                "type": "string"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "title": "get_weather_by_coordinatesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather_by_city",
          "description": "\n    Şehir adına göre hava durumu bilgilerini getirir.\n\n    Args:\n        city_name: Şehir adı\n        country_code: Ülke kodu (opsiyonel, örn: TR, US)\n        units: Ölçü birimi (metric, imperial, standard)\n\n    Returns:\n        JSON formatında hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "city_name": {
                "title": "City Name",
                "type": "string"
              },
              "country_code": {
                "default": "",
                "title": "Country Code",
                "type": "string"
              },
              "units": {
                "default": null,
                "title": "Units",
                "type": "string"
              }
            },
            "required": [
              "city_name"
            ],
            "title": "get_weather_by_cityArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather",
          "description": "\n    Kullanıcı dostu hava durumu asistanı - koordinatlara göre hava durumu getirir.\n\n    Bu araç, kullanıcıyla dostane iletişim kurar ve hava durumu bilgilerini\n    anlaşılır şekilde sunar.\n\n    Args:\n        latitude: Enlem (-90 ile 90 arasında)\n        longitude: Boylam (-180 ile 180 arasında)\n\n    Returns:\n        Kullanıcı dostu formatta hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "title": "get_weatherArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "chat_weather_assistant",
          "description": "\n    Hava durumu asistanı ile sohbet et.\n\n    Bu araç kullanıcının mesajlarını analiz eder ve uygun yanıtlar verir.\n    Koordinat bilgilerini toplar ve hava durumu sorgular.\n\n    Args:\n        message: Kullanıcının mesajı\n\n    Returns:\n        Asistan yanıtı\n    ",
          "input_schema": {
            "properties": {
              "message": {
                "title": "Message",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "title": "chat_weather_assistantArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "weather_greeting",
          "description": "\n    Hava durumu asistanının karşılama mesajı.\n\n    Returns:\n        Dostane karşılama mesajı\n    ",
          "input_schema": {
            "properties": {},
            "title": "weather_greetingArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 5,
      "tool_names": [
        "get_weather_by_coordinates",
        "get_weather_by_city",
        "get_weather",
        "chat_weather_assistant",
        "weather_greeting"
      ]
    },
    "server_info_crawled": {
      "id": 1892,
      "name": "Deneme MCP Server",
      "author": "@iremaltunay55/deneme",
      "overview": "Provide a Python-based MCP server that exposes tools, resources, and prompts for LLM integration. Enable dynamic interaction with external data and actions through a standardized JSON-RPC interface. Facilitate seamless extension of LLM capabilities with custom functionalities.",
      "repository_url": "https://github.com/iremaltunay55/deneme",
      "homepage": "https://smithery.ai/server/@iremaltunay55/deneme",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@iremaltunay55_deneme.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "get_weather_by_coordinates",
          "description": "\n    Enlem ve boylam koordinatlarına göre hava durumu bilgilerini getirir.\n\n    Args:\n        latitude: Enlem (-90 ile 90 arasında)\n        longitude: Boylam (-180 ile 180 arasında)\n        units: Ölçü birimi (metric, imperial, standard)\n\n    Returns:\n        JSON formatında hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              },
              "units": {
                "default": null,
                "title": "Units",
                "type": "string"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "title": "get_weather_by_coordinatesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather_by_city",
          "description": "\n    Şehir adına göre hava durumu bilgilerini getirir.\n\n    Args:\n        city_name: Şehir adı\n        country_code: Ülke kodu (opsiyonel, örn: TR, US)\n        units: Ölçü birimi (metric, imperial, standard)\n\n    Returns:\n        JSON formatında hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "city_name": {
                "title": "City Name",
                "type": "string"
              },
              "country_code": {
                "default": "",
                "title": "Country Code",
                "type": "string"
              },
              "units": {
                "default": null,
                "title": "Units",
                "type": "string"
              }
            },
            "required": [
              "city_name"
            ],
            "title": "get_weather_by_cityArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather",
          "description": "\n    Kullanıcı dostu hava durumu asistanı - koordinatlara göre hava durumu getirir.\n\n    Bu araç, kullanıcıyla dostane iletişim kurar ve hava durumu bilgilerini\n    anlaşılır şekilde sunar.\n\n    Args:\n        latitude: Enlem (-90 ile 90 arasında)\n        longitude: Boylam (-180 ile 180 arasında)\n\n    Returns:\n        Kullanıcı dostu formatta hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "title": "get_weatherArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "chat_weather_assistant",
          "description": "\n    Hava durumu asistanı ile sohbet et.\n\n    Bu araç kullanıcının mesajlarını analiz eder ve uygun yanıtlar verir.\n    Koordinat bilgilerini toplar ve hava durumu sorgular.\n\n    Args:\n        message: Kullanıcının mesajı\n\n    Returns:\n        Asistan yanıtı\n    ",
          "input_schema": {
            "properties": {
              "message": {
                "title": "Message",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "title": "chat_weather_assistantArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "weather_greeting",
          "description": "\n    Hava durumu asistanının karşılama mesajı.\n\n    Returns:\n        Dostane karşılama mesajı\n    ",
          "input_schema": {
            "properties": {},
            "title": "weather_greetingArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"units\": \"metric\",\n  \"api_key\": \"6b2e97b1b6559436aee37b83b71412b3\",\n  \"language\": \"tr\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@iremaltunay55/deneme/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"units\": \"metric\",\n  \"api_key\": \"6b2e97b1b6559436aee37b83b71412b3\",\n  \"language\": \"tr\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@iremaltunay55/deneme/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "1893.@iremaltunay55_deneme_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1674
  }
}