{
  "labels": {
    "analysis": "The MCP Server described is focused on enabling seamless interaction with Ethereum and EVM-compatible blockchain networks. It provides a comprehensive suite of tools for wallet creation, transaction management, smart contract interactions, and blockchain data retrieval. This server facilitates secure and efficient management of cryptocurrency assets, allowing users to create wallets, sign transactions, and access on-chain data without needing extensive technical knowledge. The available tools cover the full spectrum of blockchain wallet and transaction operations.",
    "reasoning": "The primary functionality of the server revolves around cryptocurrency wallet management and blockchain interactions, which clearly aligns with the **Cryptocurrency & Blockchain** category. Additional relevant functionalities include blockchain data retrieval and smart contract interactions, which can be represented by **API Integration** and **Database Operations** as secondary labels. The server doesn't appear to have unique functionality that requires a custom label.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "API Integration",
      "Database Operations"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 990,
    "server_name": "Crypto Wallet EVM",
    "rank_by_usage": 991,
    "usage_count": "2",
    "original_file": "../crawler/smithery/@dcSpark_mcp-cryptowallet-evm.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@dcSpark/mcp-cryptowallet-evm/mcp?config=eyJwcml2YXRlS2V5IjogIiJ9&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "wallet_provider_set",
          "description": "Set the provider URL. By default, the provider URL is set to the ETH mainnet or the URL set in the PROVIDER_URL environment variable.",
          "input_schema": {
            "type": "object",
            "properties": {
              "providerURL": {
                "type": "string",
                "description": "The provider RPC URL"
              }
            },
            "required": [
              "providerURL"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_create_random",
          "description": "Create a new wallet with a random private key",
          "input_schema": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "description": "Optional password to encrypt the wallet"
              },
              "path": {
                "type": "string",
                "description": "Optional HD path"
              },
              "locale": {
                "type": "string",
                "description": "Optional locale for the wordlist"
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_from_private_key",
          "description": "Create a wallet from a private key",
          "input_schema": {
            "type": "object",
            "properties": {
              "privateKey": {
                "type": "string",
                "description": "The private key"
              }
            },
            "required": [
              "privateKey"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_create_mnemonic_phrase",
          "description": "Create a mnemonic phrase",
          "input_schema": {
            "type": "object",
            "properties": {
              "length": {
                "type": "number",
                "description": "The length of the mnemonic phrase",
                "enum": [
                  12,
                  15,
                  18,
                  21,
                  24
                ]
              },
              "locale": {
                "type": "string",
                "description": "Optional locale for the wordlist"
              }
            },
            "required": [
              "length"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_from_mnemonic",
          "description": "Create a wallet from a mnemonic phrase",
          "input_schema": {
            "type": "object",
            "properties": {
              "mnemonic": {
                "type": "string",
                "description": "The mnemonic phrase"
              },
              "path": {
                "type": "string",
                "description": "Optional HD path"
              },
              "locale": {
                "type": "string",
                "description": "Optional locale for the wordlist"
              }
            },
            "required": [
              "mnemonic"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_from_encrypted_json",
          "description": "Create a wallet by decrypting an encrypted JSON wallet",
          "input_schema": {
            "type": "object",
            "properties": {
              "json": {
                "type": "string",
                "description": "The encrypted JSON wallet"
              },
              "password": {
                "type": "string",
                "description": "The password to decrypt the wallet"
              }
            },
            "required": [
              "json",
              "password"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_encrypt",
          "description": "Encrypt a wallet with a password",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet to encrypt (private key, mnemonic, or JSON)"
              },
              "password": {
                "type": "string",
                "description": "The password to encrypt the wallet"
              },
              "options": {
                "type": "object",
                "description": "Optional encryption options",
                "properties": {
                  "scrypt": {
                    "type": "object",
                    "properties": {
                      "N": {
                        "type": "number"
                      },
                      "r": {
                        "type": "number"
                      },
                      "p": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "wallet",
              "password"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_get_address",
          "description": "Get the wallet address",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_public_key",
          "description": "Get the wallet public key",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_private_key",
          "description": "Get the wallet private key (with appropriate security warnings)",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "password": {
                "type": "string",
                "description": "The password to decrypt the wallet if it's encrypted"
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_balance",
          "description": "Get the balance of the wallet",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "blockTag": {
                "type": "string",
                "description": "Optional block tag (latest, pending, etc.)"
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_chain_id",
          "description": "Get the chain ID the wallet is connected to",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_gas_price",
          "description": "Get the current gas price",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_transaction_count",
          "description": "Get the number of transactions sent from this account (nonce)",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "blockTag": {
                "type": "string",
                "description": "Optional block tag (latest, pending, etc.)"
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_call",
          "description": "Call a contract method without sending a transaction",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "transaction": {
                "type": "object",
                "description": "The transaction to call",
                "properties": {
                  "to": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "gasLimit": {
                    "type": "string"
                  },
                  "gasPrice": {
                    "type": "string"
                  }
                },
                "required": [
                  "to"
                ]
              },
              "blockTag": {
                "type": "string",
                "description": "Optional block tag (latest, pending, etc.)"
              }
            },
            "required": [
              "transaction"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_send_transaction",
          "description": "Send a transaction",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "transaction": {
                "type": "object",
                "description": "The transaction to send",
                "properties": {
                  "to": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "gasLimit": {
                    "type": "string"
                  },
                  "gasPrice": {
                    "type": "string"
                  },
                  "nonce": {
                    "type": "number"
                  },
                  "type": {
                    "type": "number"
                  },
                  "maxFeePerGas": {
                    "type": "string"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string"
                  }
                },
                "required": [
                  "to"
                ]
              }
            },
            "required": [
              "transaction"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_sign_transaction",
          "description": "Sign a transaction without sending it",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "transaction": {
                "type": "object",
                "description": "The transaction to sign",
                "properties": {
                  "to": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "gasLimit": {
                    "type": "string"
                  },
                  "gasPrice": {
                    "type": "string"
                  },
                  "nonce": {
                    "type": "number"
                  },
                  "type": {
                    "type": "number"
                  },
                  "maxFeePerGas": {
                    "type": "string"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string"
                  }
                },
                "required": [
                  "to"
                ]
              }
            },
            "required": [
              "transaction"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_populate_transaction",
          "description": "Populate a transaction with missing fields",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "transaction": {
                "type": "object",
                "description": "The transaction to populate",
                "properties": {
                  "to": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "gasLimit": {
                    "type": "string"
                  },
                  "gasPrice": {
                    "type": "string"
                  },
                  "nonce": {
                    "type": "number"
                  },
                  "type": {
                    "type": "number"
                  },
                  "maxFeePerGas": {
                    "type": "string"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string"
                  }
                },
                "required": [
                  "to"
                ]
              }
            },
            "required": [
              "transaction"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_sign_message",
          "description": "Sign a message",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "message": {
                "type": "string",
                "description": "The message to sign"
              }
            },
            "required": [
              "message"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_sign_typed_data",
          "description": "Sign typed data (EIP-712)",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "domain": {
                "type": "object",
                "description": "The domain data"
              },
              "types": {
                "type": "object",
                "description": "The type definitions"
              },
              "value": {
                "type": "object",
                "description": "The value to sign"
              }
            },
            "required": [
              "domain",
              "types",
              "value"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_verify_message",
          "description": "Verify a signed message",
          "input_schema": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "The original message"
              },
              "signature": {
                "type": "string",
                "description": "The signature to verify"
              },
              "address": {
                "type": "string",
                "description": "The address that supposedly signed the message"
              }
            },
            "required": [
              "message",
              "signature",
              "address"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_verify_typed_data",
          "description": "Verify signed typed data",
          "input_schema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "object",
                "description": "The domain data"
              },
              "types": {
                "type": "object",
                "description": "The type definitions"
              },
              "value": {
                "type": "object",
                "description": "The value that was signed"
              },
              "signature": {
                "type": "string",
                "description": "The signature to verify"
              },
              "address": {
                "type": "string",
                "description": "The address that supposedly signed the data"
              }
            },
            "required": [
              "domain",
              "types",
              "value",
              "signature",
              "address"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_block",
          "description": "Get a block by number or hash",
          "input_schema": {
            "type": "object",
            "properties": {
              "blockHashOrBlockTag": {
                "type": "string",
                "description": "Block hash or block tag (latest, pending, etc.)"
              },
              "includeTransactions": {
                "type": "boolean",
                "description": "Whether to include full transactions or just hashes"
              }
            },
            "required": [
              "blockHashOrBlockTag"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_transaction",
          "description": "Get a transaction by hash",
          "input_schema": {
            "type": "object",
            "properties": {
              "transactionHash": {
                "type": "string",
                "description": "The transaction hash"
              }
            },
            "required": [
              "transactionHash"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_transaction_receipt",
          "description": "Get a transaction receipt",
          "input_schema": {
            "type": "object",
            "properties": {
              "transactionHash": {
                "type": "string",
                "description": "The transaction hash"
              }
            },
            "required": [
              "transactionHash"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_code",
          "description": "Get the code at an address",
          "input_schema": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "The address to get code from"
              },
              "blockTag": {
                "type": "string",
                "description": "Optional block tag (latest, pending, etc.)"
              }
            },
            "required": [
              "address"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_storage_at",
          "description": "Get the storage at a position for an address",
          "input_schema": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "The address to get storage from"
              },
              "position": {
                "type": "string",
                "description": "The storage position"
              },
              "blockTag": {
                "type": "string",
                "description": "Optional block tag (latest, pending, etc.)"
              }
            },
            "required": [
              "address",
              "position"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_estimate_gas",
          "description": "Estimate the gas required for a transaction",
          "input_schema": {
            "type": "object",
            "properties": {
              "transaction": {
                "type": "object",
                "description": "The transaction to estimate gas for",
                "properties": {
                  "to": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            "required": [
              "transaction"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_logs",
          "description": "Get logs that match a filter",
          "input_schema": {
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "description": "The filter to apply",
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "fromBlock": {
                    "type": "string"
                  },
                  "toBlock": {
                    "type": "string"
                  }
                }
              }
            },
            "required": [
              "filter"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_ens_resolver",
          "description": "Get the ENS resolver for a name",
          "input_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The ENS name"
              }
            },
            "required": [
              "name"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_lookup_address",
          "description": "Lookup the ENS name for an address",
          "input_schema": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "The address to lookup"
              }
            },
            "required": [
              "address"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_resolve_name",
          "description": "Resolve an ENS name to an address",
          "input_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The ENS name to resolve"
              }
            },
            "required": [
              "name"
            ]
          },
          "annotations": null
        },
        {
          "name": "network_get_network",
          "description": "Get the current network information",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "network_get_block_number",
          "description": "Get the current block number",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "network_get_fee_data",
          "description": "Get the current fee data (base fee, max priority fee, etc.)",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        }
      ],
      "tool_count": 35,
      "tool_names": [
        "wallet_provider_set",
        "wallet_create_random",
        "wallet_from_private_key",
        "wallet_create_mnemonic_phrase",
        "wallet_from_mnemonic",
        "wallet_from_encrypted_json",
        "wallet_encrypt",
        "wallet_get_address",
        "wallet_get_public_key",
        "wallet_get_private_key",
        "wallet_get_balance",
        "wallet_get_chain_id",
        "wallet_get_gas_price",
        "wallet_get_transaction_count",
        "wallet_call",
        "wallet_send_transaction",
        "wallet_sign_transaction",
        "wallet_populate_transaction",
        "wallet_sign_message",
        "wallet_sign_typed_data",
        "wallet_verify_message",
        "wallet_verify_typed_data",
        "provider_get_block",
        "provider_get_transaction",
        "provider_get_transaction_receipt",
        "provider_get_code",
        "provider_get_storage_at",
        "provider_estimate_gas",
        "provider_get_logs",
        "provider_get_ens_resolver",
        "provider_lookup_address",
        "provider_resolve_name",
        "network_get_network",
        "network_get_block_number",
        "network_get_fee_data"
      ]
    },
    "server_info_crawled": {
      "id": 990,
      "name": "Crypto Wallet EVM",
      "author": "@dcSpark/mcp-cryptowallet-evm",
      "overview": "Enable seamless interaction with Ethereum and EVM-compatible blockchains. Create wallets, check balances, send transactions, and interact with smart contracts effortlessly.",
      "repository_url": "https://github.com/dcSpark/mcp-cryptowallet-evm",
      "homepage": "https://smithery.ai/server/@dcSpark/mcp-cryptowallet-evm",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "2",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@dcSpark_mcp-cryptowallet-evm.json",
      "tools_count": 35,
      "tools": [
        {
          "name": "wallet_provider_set",
          "description": "Set the provider URL. By default, the provider URL is set to the ETH mainnet or the URL set in the PROVIDER_URL environment variable.",
          "input_schema": {
            "type": "object",
            "properties": {
              "providerURL": {
                "type": "string",
                "description": "The provider RPC URL"
              }
            },
            "required": [
              "providerURL"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_create_random",
          "description": "Create a new wallet with a random private key",
          "input_schema": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "description": "Optional password to encrypt the wallet"
              },
              "path": {
                "type": "string",
                "description": "Optional HD path"
              },
              "locale": {
                "type": "string",
                "description": "Optional locale for the wordlist"
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_from_private_key",
          "description": "Create a wallet from a private key",
          "input_schema": {
            "type": "object",
            "properties": {
              "privateKey": {
                "type": "string",
                "description": "The private key"
              }
            },
            "required": [
              "privateKey"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_create_mnemonic_phrase",
          "description": "Create a mnemonic phrase",
          "input_schema": {
            "type": "object",
            "properties": {
              "length": {
                "type": "number",
                "description": "The length of the mnemonic phrase",
                "enum": [
                  12,
                  15,
                  18,
                  21,
                  24
                ]
              },
              "locale": {
                "type": "string",
                "description": "Optional locale for the wordlist"
              }
            },
            "required": [
              "length"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_from_mnemonic",
          "description": "Create a wallet from a mnemonic phrase",
          "input_schema": {
            "type": "object",
            "properties": {
              "mnemonic": {
                "type": "string",
                "description": "The mnemonic phrase"
              },
              "path": {
                "type": "string",
                "description": "Optional HD path"
              },
              "locale": {
                "type": "string",
                "description": "Optional locale for the wordlist"
              }
            },
            "required": [
              "mnemonic"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_from_encrypted_json",
          "description": "Create a wallet by decrypting an encrypted JSON wallet",
          "input_schema": {
            "type": "object",
            "properties": {
              "json": {
                "type": "string",
                "description": "The encrypted JSON wallet"
              },
              "password": {
                "type": "string",
                "description": "The password to decrypt the wallet"
              }
            },
            "required": [
              "json",
              "password"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_encrypt",
          "description": "Encrypt a wallet with a password",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet to encrypt (private key, mnemonic, or JSON)"
              },
              "password": {
                "type": "string",
                "description": "The password to encrypt the wallet"
              },
              "options": {
                "type": "object",
                "description": "Optional encryption options",
                "properties": {
                  "scrypt": {
                    "type": "object",
                    "properties": {
                      "N": {
                        "type": "number"
                      },
                      "r": {
                        "type": "number"
                      },
                      "p": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "wallet",
              "password"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_get_address",
          "description": "Get the wallet address",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_public_key",
          "description": "Get the wallet public key",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_private_key",
          "description": "Get the wallet private key (with appropriate security warnings)",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "password": {
                "type": "string",
                "description": "The password to decrypt the wallet if it's encrypted"
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_balance",
          "description": "Get the balance of the wallet",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "blockTag": {
                "type": "string",
                "description": "Optional block tag (latest, pending, etc.)"
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_chain_id",
          "description": "Get the chain ID the wallet is connected to",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_gas_price",
          "description": "Get the current gas price",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_get_transaction_count",
          "description": "Get the number of transactions sent from this account (nonce)",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "blockTag": {
                "type": "string",
                "description": "Optional block tag (latest, pending, etc.)"
              }
            },
            "required": []
          },
          "annotations": null
        },
        {
          "name": "wallet_call",
          "description": "Call a contract method without sending a transaction",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "transaction": {
                "type": "object",
                "description": "The transaction to call",
                "properties": {
                  "to": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "gasLimit": {
                    "type": "string"
                  },
                  "gasPrice": {
                    "type": "string"
                  }
                },
                "required": [
                  "to"
                ]
              },
              "blockTag": {
                "type": "string",
                "description": "Optional block tag (latest, pending, etc.)"
              }
            },
            "required": [
              "transaction"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_send_transaction",
          "description": "Send a transaction",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "transaction": {
                "type": "object",
                "description": "The transaction to send",
                "properties": {
                  "to": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "gasLimit": {
                    "type": "string"
                  },
                  "gasPrice": {
                    "type": "string"
                  },
                  "nonce": {
                    "type": "number"
                  },
                  "type": {
                    "type": "number"
                  },
                  "maxFeePerGas": {
                    "type": "string"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string"
                  }
                },
                "required": [
                  "to"
                ]
              }
            },
            "required": [
              "transaction"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_sign_transaction",
          "description": "Sign a transaction without sending it",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "transaction": {
                "type": "object",
                "description": "The transaction to sign",
                "properties": {
                  "to": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "gasLimit": {
                    "type": "string"
                  },
                  "gasPrice": {
                    "type": "string"
                  },
                  "nonce": {
                    "type": "number"
                  },
                  "type": {
                    "type": "number"
                  },
                  "maxFeePerGas": {
                    "type": "string"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string"
                  }
                },
                "required": [
                  "to"
                ]
              }
            },
            "required": [
              "transaction"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_populate_transaction",
          "description": "Populate a transaction with missing fields",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "transaction": {
                "type": "object",
                "description": "The transaction to populate",
                "properties": {
                  "to": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "gasLimit": {
                    "type": "string"
                  },
                  "gasPrice": {
                    "type": "string"
                  },
                  "nonce": {
                    "type": "number"
                  },
                  "type": {
                    "type": "number"
                  },
                  "maxFeePerGas": {
                    "type": "string"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string"
                  }
                },
                "required": [
                  "to"
                ]
              }
            },
            "required": [
              "transaction"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_sign_message",
          "description": "Sign a message",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "message": {
                "type": "string",
                "description": "The message to sign"
              }
            },
            "required": [
              "message"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_sign_typed_data",
          "description": "Sign typed data (EIP-712)",
          "input_schema": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "string",
                "description": "The wallet (private key, mnemonic, or JSON). If not provided, uses PRIVATE_KEY environment variable if set."
              },
              "domain": {
                "type": "object",
                "description": "The domain data"
              },
              "types": {
                "type": "object",
                "description": "The type definitions"
              },
              "value": {
                "type": "object",
                "description": "The value to sign"
              }
            },
            "required": [
              "domain",
              "types",
              "value"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_verify_message",
          "description": "Verify a signed message",
          "input_schema": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "The original message"
              },
              "signature": {
                "type": "string",
                "description": "The signature to verify"
              },
              "address": {
                "type": "string",
                "description": "The address that supposedly signed the message"
              }
            },
            "required": [
              "message",
              "signature",
              "address"
            ]
          },
          "annotations": null
        },
        {
          "name": "wallet_verify_typed_data",
          "description": "Verify signed typed data",
          "input_schema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "object",
                "description": "The domain data"
              },
              "types": {
                "type": "object",
                "description": "The type definitions"
              },
              "value": {
                "type": "object",
                "description": "The value that was signed"
              },
              "signature": {
                "type": "string",
                "description": "The signature to verify"
              },
              "address": {
                "type": "string",
                "description": "The address that supposedly signed the data"
              }
            },
            "required": [
              "domain",
              "types",
              "value",
              "signature",
              "address"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_block",
          "description": "Get a block by number or hash",
          "input_schema": {
            "type": "object",
            "properties": {
              "blockHashOrBlockTag": {
                "type": "string",
                "description": "Block hash or block tag (latest, pending, etc.)"
              },
              "includeTransactions": {
                "type": "boolean",
                "description": "Whether to include full transactions or just hashes"
              }
            },
            "required": [
              "blockHashOrBlockTag"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_transaction",
          "description": "Get a transaction by hash",
          "input_schema": {
            "type": "object",
            "properties": {
              "transactionHash": {
                "type": "string",
                "description": "The transaction hash"
              }
            },
            "required": [
              "transactionHash"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_transaction_receipt",
          "description": "Get a transaction receipt",
          "input_schema": {
            "type": "object",
            "properties": {
              "transactionHash": {
                "type": "string",
                "description": "The transaction hash"
              }
            },
            "required": [
              "transactionHash"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_code",
          "description": "Get the code at an address",
          "input_schema": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "The address to get code from"
              },
              "blockTag": {
                "type": "string",
                "description": "Optional block tag (latest, pending, etc.)"
              }
            },
            "required": [
              "address"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_storage_at",
          "description": "Get the storage at a position for an address",
          "input_schema": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "The address to get storage from"
              },
              "position": {
                "type": "string",
                "description": "The storage position"
              },
              "blockTag": {
                "type": "string",
                "description": "Optional block tag (latest, pending, etc.)"
              }
            },
            "required": [
              "address",
              "position"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_estimate_gas",
          "description": "Estimate the gas required for a transaction",
          "input_schema": {
            "type": "object",
            "properties": {
              "transaction": {
                "type": "object",
                "description": "The transaction to estimate gas for",
                "properties": {
                  "to": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            "required": [
              "transaction"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_logs",
          "description": "Get logs that match a filter",
          "input_schema": {
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "description": "The filter to apply",
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "fromBlock": {
                    "type": "string"
                  },
                  "toBlock": {
                    "type": "string"
                  }
                }
              }
            },
            "required": [
              "filter"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_get_ens_resolver",
          "description": "Get the ENS resolver for a name",
          "input_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The ENS name"
              }
            },
            "required": [
              "name"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_lookup_address",
          "description": "Lookup the ENS name for an address",
          "input_schema": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "The address to lookup"
              }
            },
            "required": [
              "address"
            ]
          },
          "annotations": null
        },
        {
          "name": "provider_resolve_name",
          "description": "Resolve an ENS name to an address",
          "input_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The ENS name to resolve"
              }
            },
            "required": [
              "name"
            ]
          },
          "annotations": null
        },
        {
          "name": "network_get_network",
          "description": "Get the current network information",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "network_get_block_number",
          "description": "Get the current block number",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "network_get_fee_data",
          "description": "Get the current fee data (base fee, max priority fee, etc.)",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"privateKey\": \"\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@dcSpark/mcp-cryptowallet-evm/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"privateKey\": \"\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@dcSpark/mcp-cryptowallet-evm/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0991.@dcSpark_mcp-cryptowallet-evm_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 969
  }
}