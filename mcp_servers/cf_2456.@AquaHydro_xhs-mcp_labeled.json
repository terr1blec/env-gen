{
  "labels": {
    "analysis": "The MCP Server for 小红书 enables direct interaction with the platform through HTTP API requests, focusing on tasks like searching notes, retrieving note content, accessing comments, and posting comments. It simplifies accessing 小红书 data without relying on heavy browser automation. The tools provided focus on search, content access, and comment interaction, indicating its primary use case is data retrieval and user engagement on the platform.",
    "reasoning": "The primary label \"Social Media\" is chosen because the server enables interactions with a social media platform (小红书). The predefined category \"API Integration\" is selected as a secondary label as the tools rely on reverse-engineered HTTP APIs. \"Data Analysis & Processing\" is not a perfect fit but could be considered due to the data retrieval capabilities.",
    "primary_label": "Social Media",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": "Xiaohongshu Automation",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2455,
    "server_name": "小红书 MCP 服务",
    "rank_by_usage": 2456,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@AquaHydro_xhs-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@AquaHydro/xhs-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2455,
      "name": "小红书 MCP 服务",
      "author": "@AquaHydro/xhs-mcp",
      "overview": "Enable seamless interaction with 小红书 by searching notes, retrieving note content, accessing comments, and posting comments. Simplify 小红书 data access without heavy browser automation tools. Enhance your applications with direct HTTP API requests using JavaScript reverse engineering.",
      "repository_url": "https://github.com/AquaHydro/xhs-mcp",
      "homepage": "https://smithery.ai/server/@AquaHydro/xhs-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@AquaHydro_xhs-mcp.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "check_cookie",
          "description": "Deploy Server @AquaHydro/xhs-mcp Try in Playground check_cookie",
          "parameters": []
        },
        {
          "name": "search_notes",
          "description": "根据关键词搜索笔记\n\n        Args:\n            keywords: 搜索关键词",
          "parameters": [
            {
              "name": "keywords",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_note_content",
          "description": "获取笔记内容 Args: note_id: 笔记 note_id xsec_token: 笔记 xsec_token",
          "parameters": []
        },
        {
          "name": "get_note_comments",
          "description": "获取笔记评论 Args: note_id: 笔记 note_id xsec_token: 笔记 xsec_token",
          "parameters": []
        },
        {
          "name": "post_comment",
          "description": "发布评论到指定笔记\n\n    Args:\n        note_id: 笔记 note_id\n        comment: 要发布的评论内容",
          "parameters": [
            {
              "name": "comment",
              "required": true,
              "type": "string"
            },
            {
              "name": "note_id",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@AquaHydro/xhs-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@AquaHydro/xhs-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2456.@AquaHydro_xhs-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2096
  }
}