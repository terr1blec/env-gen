{
  "labels": {
    "analysis": "The MCP Server provides tools for integrating with Naver's search APIs, enabling AI agents to retrieve structured information across multiple categories (blogs, news, books, images, etc.). The tools support pagination, adult content filtering, and keyboard input correction, making it a comprehensive solution for enhanced search capabilities. The primary use case is to empower applications with efficient, multi-category search functionalities through a standardized interface.",
    "reasoning": "The primary label \"Web Search & Research\" is chosen because the server's core functionality revolves around accessing and retrieving structured data from various search categories, which aligns with web search and research tools. Secondary labels like \"API Integration\" and \"Content Creation\" are relevant due to the server's role in integrating Naver's APIs and potentially aiding in content creation tasks. No custom label is needed as the predefined categories cover the server's functionality well.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "API Integration",
      "Content Creation"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 198,
    "server_name": "Naver Search",
    "rank_by_usage": 199,
    "usage_count": "237",
    "original_file": "../crawler/smithery/@jikime_py-mcp-naver-search.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@jikime/py-mcp-naver-search/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "Connection timeout (20 seconds)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 198,
      "name": "Naver Search",
      "author": "@jikime/py-mcp-naver-search",
      "overview": "Provide AI agents with seamless access to Naver's diverse search APIs, enabling them to retrieve blogs, news, books, images, shopping items, and more with structured, LLM-optimized responses. Enhance search capabilities with pagination, adult content checks, and keyboard input error correction. Empower your applications to perform rich, multi-category searches efficiently through a standardized MCP interface.",
      "repository_url": "https://github.com/jikime/py-mcp-naver-search",
      "homepage": "https://smithery.ai/server/@jikime/py-mcp-naver-search",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "237",
      "success_rate": "99.80%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@jikime_py-mcp-naver-search.json",
      "tools_count": 13,
      "tools": [
        {
          "name": "search_blog",
          "description": "Deploy Server Naver Search @jikime/py-mcp-naver-search Try in Playground search_blog",
          "parameters": [
            {
              "name": "search_blog",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_news",
          "description": "Searches for news on Naver using the given keyword. The page parameter allows for page navigation and sort='sim'/'date' is supported.",
          "parameters": [
            {
              "name": "search_news",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_book",
          "description": "Searches for book information on Naver using the given keyword. The page parameter allows for page navigation.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "type": "string"
            },
            {
              "name": "sort",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "display",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "check_adult_query",
          "description": "Determines if the input query is an adult search term.",
          "parameters": [
            {
              "name": "check_adult_query",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_encyclopedia",
          "description": "Searches for encyclopedia information on Naver using the given keyword. The page parameter allows for page navigation.",
          "parameters": [
            {
              "name": "search_encyclopedia",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_cafe_article",
          "description": "Searches for cafe articles on Naver using the given keyword. The page parameter allows for page navigation and sort='sim'/'date' is supported.",
          "parameters": [
            {
              "name": "search_cafe_article",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_kin",
          "description": "Searches for knowledgeiN Q&A on Naver using the given keyword. The page parameter allows for page navigation and sort='sim'/'date'/'point' is supported.",
          "parameters": [
            {
              "name": "search_kin",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_local",
          "description": "Searches for local business information using the given keyword. (display maximum 5, start maximum 1) sort='random'/'comment' is supported.",
          "parameters": [
            {
              "name": "search_local",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "correct_errata",
          "description": "Converts Korean/English keyboard input errors.",
          "parameters": [
            {
              "name": "correct_errata",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_shop",
          "description": "Searches for shopping product information on Naver using the given keyword. The page parameter allows for page navigation and sort='sim'/'date'/'asc'/'dsc' is supported.",
          "parameters": [
            {
              "name": "search_shop",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_doc",
          "description": "Searches for academic papers, reports, etc. using the given keyword. The page parameter allows for page navigation.",
          "parameters": [
            {
              "name": "search_doc",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_image",
          "description": "Searches for images using the given keyword. The page parameter allows for page navigation and sort='sim'/'date', filter='all'/'large'/'medium'/'small' is supported.",
          "parameters": [
            {
              "name": "search_image",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_webkr",
          "description": "Searches for web documents using the given keyword. The page parameter allows for page navigation.",
          "parameters": [
            {
              "name": "search_webkr",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@jikime/py-mcp-naver-search/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "naverClientSecret",
          "required": true,
          "description": "Naver API client secret"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@jikime/py-mcp-naver-search/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0199.@jikime_py-mcp-naver-search_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 195
  }
}