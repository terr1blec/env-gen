{
  "labels": {
    "analysis": "The MCP Server focuses on fitness and nutrition, providing tools for tracking food intake, analyzing nutritional content, searching exercises, calculating caloric needs, and creating comprehensive fitness plans. It integrates with Nutritionix for food and nutrition data and WGER for exercise information, offering a holistic approach to health and wellness management. The tools enable users to monitor their dietary habits, find suitable workouts, calculate calorie burn, and receive personalized fitness recommendations.",
    "reasoning": "The primary label \"Health & Fitness\" was chosen because the server's tools are directly related to managing fitness, nutrition, and well-being. Secondary labels \"AI/ML Tools\" and \"Daily Productivity\" were selected because the server uses data analysis to provide personalized recommendations (AI/ML) and helps users maintain their fitness routines and dietary goals (Daily Productivity). No custom label was needed as the functionality is well-covered by predefined categories.",
    "primary_label": "Health & Fitness",
    "secondary_labels": [
      "AI/ML Tools",
      "Daily Productivity"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1120,
    "server_name": "Nutritionix & Wger - Fitness and Nutrition MCP",
    "rank_by_usage": 1121,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@DiogoROliveira_mcp-api_wrapper.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@DiogoROliveira/mcp-api_wrapper/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1120,
      "name": "Nutritionix & Wger - Fitness and Nutrition MCP",
      "author": "@DiogoROliveira/mcp-api_wrapper",
      "overview": "Not found",
      "repository_url": "https://github.com/DiogoROliveira/MCP-API_Wrapper",
      "homepage": "https://smithery.ai/server/@DiogoROliveira/mcp-api_wrapper",
      "remote_or_local": "Remote",
      "license": "https://smithery.ai/",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@DiogoROliveira_mcp-api_wrapper.json",
      "tools_count": 13,
      "tools": [
        {
          "name": "search_foods",
          "description": "Deploy Server Nutritionix & Wger - Fitness and Nutrition MCP @DiogoROliveira/mcp-api_wrapper Try in Playground search_foods",
          "parameters": []
        },
        {
          "name": "get_food_nutrients",
          "description": "Get detailed nutritional information for a specific food. Args: food_name: Name of the food (e.g., \"1 large apple\", \"100g chicken breast\") quantity: Amount of the food (default: 1.0) unit: Unit of measurement (default: \"serving\") Returns: JSON string containing detailed nutritional information",
          "parameters": []
        },
        {
          "name": "compare_foods",
          "description": "Compare nutritional information between two foods side by side. Args: food1: First food to compare food2: Second food to compare quantity: Amount for both foods (default: 1.0) unit: Unit of measurement for both foods (default: \"serving\") Returns: JSON string containing side-by-side nutritional comparison",
          "parameters": []
        },
        {
          "name": "analyze_meal",
          "description": "Analyze the total nutritional content of a complete meal. Args: foods_list: List of foods in the meal (e.g., [\"1 cup rice\", \"100g chicken\", \"1 medium apple\"]) meal_name: Name for the meal (default: \"Custom Meal\") Returns: JSON string containing total nutritional analysis of the meal",
          "parameters": []
        },
        {
          "name": "calculate_daily_needs",
          "description": "Calculate daily caloric and nutritional needs based on personal characteristics. Args: age: Age in years gender: \"male\" or \"female\" weight_kg: Weight in kilograms height_cm: Height in centimeters activity_level: \"sedentary\", \"light\", \"moderate\", \"active\", or \"very_active\" Returns: JSON string containing calculated daily nutritional needs",
          "parameters": []
        },
        {
          "name": "search_exercises",
          "description": "Search for exercises in the WGER database. Args: query: Exercise search term (e.g., \"squat\", \"bench press\", \"cardio\") limit: Maximum number of results to return (default: 20) Returns: JSON string containing exercise search results",
          "parameters": []
        },
        {
          "name": "get_exercises_by_muscle",
          "description": "Get exercises targeting specific muscle groups. Args: muscle_group: Target muscle group (e.g., \"chest\", \"legs\", \"back\", \"shoulders\", \"arms\") limit: Maximum number of exercises to return (default: 15) Returns: JSON string containing exercises for the specified muscle group",
          "parameters": []
        },
        {
          "name": "get_equipment_exercises",
          "description": "Get exercises that can be performed with specific equipment. Args: equipment_name: Equipment type (e.g., \"dumbbell\", \"barbell\", \"bodyweight\", \"machine\") limit: Maximum number of exercises to return (default: 15) Returns: JSON string containing exercises for the specified equipment",
          "parameters": []
        },
        {
          "name": "get_workout_templates",
          "description": "Get pre-made workout templates from WGER. Args: difficulty: Workout difficulty (\"beginner\", \"intermediate\", \"advanced\") Returns: JSON string containing workout templates",
          "parameters": []
        },
        {
          "name": "calculate_exercise_calories",
          "description": "Calculate calories burned for exercises using Nutritionix exercise API. Args: exercise_name: Name of the exercise (e.g., \"running\", \"cycling\", \"weight lifting\") duration_min: Duration in minutes (default: 30) weight_kg: Body weight in kilograms (default: 70) Returns: JSON string containing exercise and calories burned information",
          "parameters": []
        },
        {
          "name": "create_fitness_plan",
          "description": "Create a comprehensive fitness plan combining nutrition and workout recommendations. Args: age: Age in years gender: \"male\" or \"female\" weight_kg: Weight in kilograms height_cm: Height in centimeters goal: Fitness goal (\"lose_weight\", \"gain_muscle\", \"maintain\", \"athletic_performance\") activity_level: Current activity level (\"sedentary\", \"light\", \"moderate\", \"active\", \"very_active\") workout_days: Number of workout days per week (default: 4) equipment: Available equipment (\"gym\", \"home\", \"bodyweight\", \"minimal\") Returns: JSON string containing comprehensive fitness plan",
          "parameters": []
        },
        {
          "name": "suggest_pre_post_workout_meals",
          "description": "Suggest optimal pre and post-workout meals based on workout type and goals. Args: workout_type: Type of workout (\"strength\", \"cardio\", \"mixed\", \"hiit\") duration_min: Workout duration in minutes (default: 60) weight_kg: Body weight in kilograms (default: 70) goal: Fitness goal (\"lose_weight\", \"gain_muscle\", \"maintain\", \"endurance\") Returns: JSON string containing pre and post-workout meal recommendations",
          "parameters": []
        },
        {
          "name": "track_weekly_progress",
          "description": "Track and analyze weekly fitness progress with recommendations. Args: current_weight: Current weight in kg target_weight: Target weight in kg weekly_workouts_completed: Number of workouts completed this week goal: Fitness goal (\"lose_weight\", \"gain_muscle\", \"maintain\") Returns: JSON string containing progress analysis and recommendations",
          "parameters": [
            {
              "name": "goal",
              "required": false,
              "type": "string"
            },
            {
              "name": "target_weight",
              "required": true,
              "type": "string"
            },
            {
              "name": "current_weight",
              "required": true,
              "type": "string"
            },
            {
              "name": "weekly_workouts_completed",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@DiogoROliveira/mcp-api_wrapper/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "nutritionixAppKey",
          "required": true,
          "description": "Nutritionix Application Key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@DiogoROliveira/mcp-api_wrapper/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1121.@DiogoROliveira_mcp-api_wrapper_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1098
  }
}