{
  "labels": {
    "analysis": "The MCP Server is designed for comprehensive document manipulation, supporting operations for Microsoft Word, Excel, and PDF files. It provides tools for creating, editing, converting, and managing documents, which enhances productivity by streamlining document workflows. The server offers functionalities for both simple and complex document operations, making it a versatile tool for users who need to handle various types of documents efficiently.",
    "reasoning": "The primary functionality of the server revolves around document creation, editing, and conversion, which closely aligns with the \"File Management\" category. Secondary labels such as \"Office Productivity\" and \"Document Conversion\" provide additional context about the server's capabilities. While predefined categories cover the core functionalities, no unique functionality warrants a custom label.",
    "primary_label": "File Management",
    "secondary_labels": [
      "Daily Productivity",
      "Content Creation"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 524,
    "server_name": "Document Operations Server",
    "rank_by_usage": 525,
    "usage_count": "28",
    "original_file": "../crawler/smithery/@alejandroBallesterosC_document-edit-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@alejandroBallesterosC/document-edit-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "Connection timeout (20 seconds)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 524,
      "name": "Document Operations Server",
      "author": "@alejandroBallesterosC/document-edit-mcp",
      "overview": "Enable seamless document manipulation for Microsoft Word, Excel, and PDF files. Create, edit, and convert documents effortlessly, enhancing your productivity with Claude Desktop. Streamline your document workflows with powerful operations at your fingertips.",
      "repository_url": "https://github.com/alejandroBallesterosC/document-edit-mcp",
      "homepage": "https://smithery.ai/server/@alejandroBallesterosC/document-edit-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "28",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@alejandroBallesterosC_document-edit-mcp.json",
      "tools_count": 8,
      "tools": [
        {
          "name": "create_word_document",
          "description": "Deploy Server Document Operations Server Claim Server @alejandroBallesterosC/document-edit-mcp Try in Playground create_word_document",
          "parameters": []
        },
        {
          "name": "edit_word_document",
          "description": "Edit an existing Microsoft Word document using the specified operations. Args: filepath: Path to the Word document operations: List of operations to perform, where each operation is a dictionary with: - type: Operation type (add_paragraph, add_heading, edit_paragraph, delete_paragraph) - Additional parameters depending on the operation type Returns: Operation result with success status, message, and filepath",
          "parameters": []
        },
        {
          "name": "convert_txt_to_word",
          "description": "Convert a text file to a Microsoft Word document. Args: source_path: Path to the text file target_path: Path where to save the Word document Returns: Operation result with success status, message, and filepath",
          "parameters": []
        },
        {
          "name": "create_excel_file",
          "description": "Create a new Excel file with the provided content. Args: filepath: Path where to save the Excel file content: Data content, either JSON string or CSV-like string Returns: Operation result with success status, message, and filepath",
          "parameters": []
        },
        {
          "name": "edit_excel_file",
          "description": "Edit an existing Excel file using the specified operations. Args: filepath: Path to the Excel file operations: List of operations to perform, where each operation is a dictionary with: - type: Operation type (update_cell, update_range, delete_row, delete_column, add_sheet, delete_sheet) - Additional parameters depending on the operation type Returns: Operation result with success status, message, and filepath",
          "parameters": []
        },
        {
          "name": "convert_csv_to_excel",
          "description": "Convert a CSV file to an Excel file. Args: source_path: Path to the CSV file target_path: Path where to save the Excel file Returns: Operation result with success status, message, and filepath",
          "parameters": []
        },
        {
          "name": "create_pdf_file",
          "description": "Create a new PDF file with the provided text content. Args: filepath: Path where to save the PDF file content: Text content for the PDF Returns: Operation result with success status, message, and filepath",
          "parameters": []
        },
        {
          "name": "convert_word_to_pdf",
          "description": "Convert a Microsoft Word document to a PDF file. Args: source_path: Path to the Word document target_path: Path where to save the PDF file Returns: Operation result with success status, message, and filepath",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@alejandroBallesterosC/document-edit-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@alejandroBallesterosC/document-edit-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0525.@alejandroBallesterosC_document-edit-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 514
  }
}