{
  "labels": {
    "analysis": "The MCP Server \"Snowflake Database Access Server\" is designed to manage and execute SQL queries on Snowflake databases while controlling access rights through fine-grained user permissions. It automates connection management, query execution, and error handling, making it easier to interact with Snowflake databases securely and efficiently. The primary tool, \"execute_query,\" demonstrates its core functionality of executing SQL queries programmatically.",
    "reasoning": "The primary label \"Database Operations\" was chosen because the server's core functionality revolves around managing database connections, executing queries, and handling query results on Snowflake databases. The \"Security & Authentication\" label was added as a secondary label because the server controls database access rights precisely through user permissions. No custom label is needed as the functionality is well-covered by predefined categories.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Security & Authentication"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 182,
    "server_name": "Snowflake Database Access Server",
    "rank_by_usage": 183,
    "usage_count": "258",
    "original_file": "../crawler/smithery/@datawiz168_mcp-service-snowflake.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@datawiz168/mcp-service-snowflake/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 182,
      "name": "Snowflake Database Access Server",
      "author": "@datawiz168/mcp-service-snowflake",
      "overview": "mcp‑server‑snowflake controls database access rights precisely by way of database users. If you only need to read data, just assign a user with read‑only database permissions. Enable seamless execution of SQL queries on Snowflake databases. Automatically manage database connections and handle query results and errors securely. Simplify your data operations with robust error handling and automatic connection management.",
      "repository_url": "https://github.com/datawiz168/mcp-snowflake-service",
      "homepage": "https://smithery.ai/server/@datawiz168/mcp-service-snowflake",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "258",
      "success_rate": "99.81%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@datawiz168_mcp-service-snowflake.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "execute_query",
          "description": "Deploy Server Snowflake Database Access Server @datawiz168/mcp-service-snowflake Try in Playground execute_query",
          "parameters": [
            {
              "name": "execute_query",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@datawiz168/mcp-service-snowflake/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@datawiz168/mcp-service-snowflake/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0183.@datawiz168_mcp-service-snowflake_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 179
  }
}