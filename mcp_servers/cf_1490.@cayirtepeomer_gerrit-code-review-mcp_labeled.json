{
  "labels": {
    "analysis": "The MCP Server is focused on enabling AI-assisted code review workflows for Gerrit, a widely used code review tool. It provides tools to fetch detailed change information and compare differences between patchsets, streamlining the review process. The primary use case is integrating Gerrit data into AI tools to facilitate efficient code review, comparison of file modifications, and analysis of changes.",
    "reasoning": "The primary functionality aligns with code-related operations and development workflows, making \"Development Tools\" the most appropriate label. Secondary relevance is seen in \"Database Operations\" due to data querying aspects, and \"API Integration\" since the server likely interacts with Gerrit's API. While code review is a specific use case, the broader functionality supports general development tooling.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "API Integration",
      "Database Operations"
    ],
    "custom_label": "Code Review Automation",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1489,
    "server_name": "Gerrit Code Review Server",
    "rank_by_usage": 1490,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@cayirtepeomer_gerrit-code-review-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@cayirtepeomer/gerrit-code-review-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1489,
      "name": "Gerrit Code Review Server",
      "author": "@cayirtepeomer/gerrit-code-review-mcp",
      "overview": "Enable AI assistants to review Gerrit changes and patchsets through a streamlined interface. Fetch detailed change information, compare patchset differences, and analyze file modifications efficiently. Simplify code review workflows by integrating Gerrit data directly into your tools.",
      "repository_url": "https://github.com/cayirtepeomer/gerrit-code-review-mcp",
      "homepage": "https://smithery.ai/server/@cayirtepeomer/gerrit-code-review-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@cayirtepeomer_gerrit-code-review-mcp.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "fetch_gerrit_change",
          "description": "Deploy Server Gerrit Code Review Server @cayirtepeomer/gerrit-code-review-mcp Try in Playground fetch_gerrit_change",
          "parameters": []
        },
        {
          "name": "fetch_patchset_diff",
          "description": "Fetch differences between two patchsets of a Gerrit change.\n    \n    Args:\n        change_id: The Gerrit change ID\n        base_patchset: The base patchset number to compare from\n        target_patchset: The target patchset number to compare to\n        file_path: Optional specific file path to get diff for. If not provided, returns diffs for all changed files.\n    Returns:\n        Dict containing the diff information between the patchsets",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@cayirtepeomer/gerrit-code-review-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@cayirtepeomer/gerrit-code-review-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1490.@cayirtepeomer_gerrit-code-review-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1376
  }
}