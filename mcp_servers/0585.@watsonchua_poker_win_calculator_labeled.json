{
  "labels": {
    "analysis": "The MCP Server is designed to assist with gameplay analysis in poker and strategy games. The primary function is the poker win calculator which uses Monte Carlo simulations to calculate win probabilities and suggest optimal poker actions based on the current hand. This is useful for improving poker strategy and decision-making. Additionally, the server provides a tool for analyzing Nim games using the nim-sum strategy, making it versatile for different types of strategy-based gaming analytics.",
    "reasoning": "The primary label \"Gaming\" was chosen because the server's core functionality revolves around analyzing poker hands and suggesting strategies for poker games, which are clearly gaming-related tools. The secondary label \"Strategy & Analytics\" was selected to highlight the analytical and strategic aspects of the tools. The custom label \"Poker Strategy Assistant\" was chosen to describe the unique functionality of the server, which is not fully captured by the predefined labels.",
    "primary_label": "Gaming",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": "Poker Strategy Assistant",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 584,
    "server_name": "Poker Win Calculator",
    "rank_by_usage": 585,
    "usage_count": "19",
    "original_file": "../crawler/smithery/@watsonchua_poker_win_calculator.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@watsonchua/poker_win_calculator/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "analyse_poker_cards",
          "description": "\n    Suggests poker actions based on the current game state.\n    This function evaluates a poker hand and provides strategic recommendations by calculating \n    win probabilities through Monte Carlo simulations.\n    Parameters:\n    ----------\n    my_cards_input : str\n        The player's two cards as a space-separated string of rank+suit where rank is one of [1,2,3,4,5,6,7,8,9,10,J,Q,K,A] suit is 'h' for hearts, 's' for spades, 'c' for clubs, and 'd' for diamonds (e.g., 'As Kh')\n    community_input : str\n        The community cards as a space-separated string (e.g., 'Jd 10c 7h'), or empty if none\n    opponent_input : str\n        The opponent's cards as a space-separated string if known, or empty if unknown\n    Returns:\n    -------\n    dict\n        A dictionary containing:\n        - 'win_probability': float, the calculated probability of winning the hand\n        - 'suggested_action': str, the recommended action (fold, check/call, bet/raise)\n        - 'best_hand': str or None, description of the best hand currently possible with the community cards,\n        or None if no community cards are present\n    ",
          "input_schema": {
            "properties": {
              "my_cards_input": {
                "title": "My Cards Input",
                "type": "string"
              },
              "community_input": {
                "title": "Community Input",
                "type": "string"
              },
              "opponent_input": {
                "title": "Opponent Input",
                "type": "string"
              }
            },
            "required": [
              "my_cards_input",
              "community_input",
              "opponent_input"
            ],
            "title": "analyse_poker_cardsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_best_nim_move",
          "description": "\n    Determine the best move in a Nim game using the nim-sum strategy.\n    \n    Args:\n        piles: A list of integers representing the number of objects in each pile.\n        \n    Returns:\n        A tuple (pile_index, objects_to_remove) representing the best move.\n        If no winning move exists, returns a safe move or the first valid move.\n    ",
          "input_schema": {
            "properties": {
              "piles": {
                "title": "piles",
                "type": "string"
              }
            },
            "required": [
              "piles"
            ],
            "title": "get_best_nim_moveArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "analyse_poker_cards",
        "get_best_nim_move"
      ]
    },
    "server_info_crawled": {
      "id": 584,
      "name": "Poker Win Calculator",
      "author": "@watsonchua/poker_win_calculator",
      "overview": "Calculate your chances of winning in poker games with ease. Utilize advanced algorithms to analyze your hand and make informed decisions. Enhance your poker strategy and improve your gameplay with this powerful tool.",
      "repository_url": "https://github.com/watsonchua/poker_win_calculator",
      "homepage": "https://smithery.ai/server/@watsonchua/poker_win_calculator",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "19",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@watsonchua_poker_win_calculator.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "analyse_poker_cards",
          "description": "\n    Suggests poker actions based on the current game state.\n    This function evaluates a poker hand and provides strategic recommendations by calculating \n    win probabilities through Monte Carlo simulations.\n    Parameters:\n    ----------\n    my_cards_input : str\n        The player's two cards as a space-separated string of rank+suit where rank is one of [1,2,3,4,5,6,7,8,9,10,J,Q,K,A] suit is 'h' for hearts, 's' for spades, 'c' for clubs, and 'd' for diamonds (e.g., 'As Kh')\n    community_input : str\n        The community cards as a space-separated string (e.g., 'Jd 10c 7h'), or empty if none\n    opponent_input : str\n        The opponent's cards as a space-separated string if known, or empty if unknown\n    Returns:\n    -------\n    dict\n        A dictionary containing:\n        - 'win_probability': float, the calculated probability of winning the hand\n        - 'suggested_action': str, the recommended action (fold, check/call, bet/raise)\n        - 'best_hand': str or None, description of the best hand currently possible with the community cards,\n        or None if no community cards are present\n    ",
          "input_schema": {
            "properties": {
              "my_cards_input": {
                "title": "My Cards Input",
                "type": "string"
              },
              "community_input": {
                "title": "Community Input",
                "type": "string"
              },
              "opponent_input": {
                "title": "Opponent Input",
                "type": "string"
              }
            },
            "required": [
              "my_cards_input",
              "community_input",
              "opponent_input"
            ],
            "title": "analyse_poker_cardsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_best_nim_move",
          "description": "\n    Determine the best move in a Nim game using the nim-sum strategy.\n    \n    Args:\n        piles: A list of integers representing the number of objects in each pile.\n        \n    Returns:\n        A tuple (pile_index, objects_to_remove) representing the best move.\n        If no winning move exists, returns a safe move or the first valid move.\n    ",
          "input_schema": {
            "properties": {
              "piles": {
                "title": "piles",
                "type": "string"
              }
            },
            "required": [
              "piles"
            ],
            "title": "get_best_nim_moveArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@watsonchua/poker_win_calculator/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@watsonchua/poker_win_calculator/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0585.@watsonchua_poker_win_calculator_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 571
  }
}