{
  "labels": {
    "analysis": "The MCP Server described is focused on enhancing AI responses with relevant documentation through vector search capabilities. It enables the creation of documentation-aware AI assistants and context-aware tooling for developers. The primary tool mentioned is \"Optional Settings,\" which pertains to server management via sign-in, suggesting some level of authentication and server control functionality.",
    "reasoning": "The primary functionality aligns most closely with enabling AI models to dynamically retrieve and process documentation (likely for semantic search and contextual understanding), which makes \"AI/ML Tools\" the most appropriate primary label. The server management aspect could be a secondary or supportive feature, but the core purpose is documentation retrieval and enhancement, which isn't directly covered by predefined categories. Thus, a custom label is also included.",
    "primary_label": "AI/ML Tools",
    "secondary_labels": [
      "Memory Management",
      "File Management"
    ],
    "custom_label": "Documentation Retrieval System",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1243,
    "server_name": "RAG Documentation Server",
    "rank_by_usage": 1244,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@sanderkooger_mcp-server-ragdocs.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@sanderkooger/mcp-server-ragdocs/mcp?config=eyJNT0RFTCI6ICJub21pYy1lbWJlZC10ZXh0IiwgIlFEUkFOVF9VUkwiOiAiaHR0cDovL2xvY2FsaG9zdDo2MzMzIiwgIk9MTEFNQV9CQVNFX1VSTCI6ICJodHRwOi8vbG9jYWxob3N0OjExNDM0IiwgIkVNQkVERElOR1NfUFJPVklERVIiOiAib2xsYW1hIn0=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1243,
      "name": "RAG Documentation Server",
      "author": "@sanderkooger/mcp-server-ragdocs",
      "overview": "Enhance AI responses with relevant documentation by retrieving and processing information through vector search. Build documentation-aware AI assistants and create context-aware tooling for developers with ease.",
      "repository_url": "https://github.com/sanderkooger/mcp-server-ragdocs",
      "homepage": "https://smithery.ai/server/@sanderkooger/mcp-server-ragdocs",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@sanderkooger_mcp-server-ragdocs.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "Optional Settings",
          "description": "Access and manage servers by signing in.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"MODEL\": \"nomic-embed-text\",\n  \"QDRANT_URL\": \"http://localhost:6333\",\n  \"OLLAMA_BASE_URL\": \"http://localhost:11434\",\n  \"EMBEDDINGS_PROVIDER\": \"ollama\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@sanderkooger/mcp-server-ragdocs/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"MODEL\": \"nomic-embed-text\",\n  \"QDRANT_URL\": \"http://localhost:6333\",\n  \"OLLAMA_BASE_URL\": \"http://localhost:11434\",\n  \"EMBEDDINGS_PROVIDER\": \"ollama\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@sanderkooger/mcp-server-ragdocs/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "cf_1244.@sanderkooger_mcp-server-ragdocs_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1193
  }
}