{
  "labels": {
    "analysis": "The MCP Server \"Yunxiao DevOps Server\" is primarily focused on enabling AI assistants to manage development workflows, enhancing collaboration between developers through automation. The core functionality revolves around code management, project and pipeline automation, package handling, and organizational collaboration. The available tools clearly target repository management, change request tracking, project tracking, and CI/CD pipeline operations, with strong emphasis on development automation. The server enables teams to reduce repetitive tasks by automating core workflows, allowing developers to focus on innovation and delivery.",
    "reasoning": "The primary focus of the server on code management, project management, and pipeline automation firmly places it in the \"Development Tools\" category. The secondary labels \"CI/CD\" and \"Collaboration Tools\" are included to highlight its specific technical capabilities and team-oriented features. A custom label was not deemed necessary as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Development Tools",
      "Communication Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2409,
    "server_name": "Yunxiao DevOps Server",
    "rank_by_usage": 2410,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@yjiace_alibabacloud-devops-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@yjiace/alibabacloud-devops-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2409,
      "name": "Yunxiao DevOps Server",
      "author": "@yjiace/alibabacloud-devops-mcp-server",
      "overview": "Enable AI assistants to interact seamlessly with the Yunxiao platform for enhanced development collaboration. Automate code repository management, code reviews, project and pipeline management, and package handling to optimize workflows and boost team productivity. Reduce repetitive tasks and focus on innovation and product delivery.",
      "repository_url": "https://github.com/yjiace/alibabacloud-devops-mcp-server",
      "homepage": "https://smithery.ai/server/@yjiace/alibabacloud-devops-mcp-server",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@yjiace_alibabacloud-devops-mcp-server.json",
      "tools_count": 53,
      "tools": [
        {
          "name": "create_branch",
          "description": "Deploy Server Yunxiao DevOps Server @yjiace/alibabacloud-devops-mcp-server Try in Playground create_branch",
          "parameters": [
            {
              "name": "create_branch",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_branch",
          "description": "[Code Management] Get information about a branch in a Codeup repository",
          "parameters": [
            {
              "name": "get_branch",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_branch",
          "description": "[Code Management] Delete a branch from a Codeup repository",
          "parameters": [
            {
              "name": "delete_branch",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_branches",
          "description": "[Code Management] List branches in a Codeup repository",
          "parameters": [
            {
              "name": "list_branches",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_file_blobs",
          "description": "[Code Management] Get file content from a Codeup repository",
          "parameters": [
            {
              "name": "get_file_blobs",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_file",
          "description": "[Code Management] Create a new file in a Codeup repository",
          "parameters": [
            {
              "name": "create_file",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_file",
          "description": "[Code Management] Update an existing file in a Codeup repository",
          "parameters": [
            {
              "name": "update_file",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_file",
          "description": "[Code Management] Delete a file from a Codeup repository",
          "parameters": [
            {
              "name": "delete_file",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "compare",
          "description": "[Code Management] Query code to compare content",
          "parameters": [
            {
              "name": "compare",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_repository",
          "description": "[Code Management] Get information about a Codeup repository",
          "parameters": [
            {
              "name": "get_repository",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_repositories",
          "description": "[Code Management] Get the CodeUp Repository List. A Repository serves as a unit for managing source code and is distinct from a Project. Use Case: View my repositories",
          "parameters": [
            {
              "name": "Use",
              "required": false,
              "type": "string"
            },
            {
              "name": "View",
              "required": false,
              "type": "string"
            },
            {
              "name": "my",
              "required": false,
              "type": "string"
            },
            {
              "name": "repositories",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_change_request",
          "description": "[Code Management] Get information about a change request",
          "parameters": [
            {
              "name": "get_change_request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_change_requests",
          "description": "[Code Management] List change requests",
          "parameters": [
            {
              "name": "list_change_requests",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_change_request",
          "description": "description workItemIds repositoryId* sourceBranch* targetBranch* organizationId* reviewerUserIds sourceProjectId targetProjectId create_change_request_comment",
          "parameters": [
            {
              "name": "create_change_request",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_change_request_comment",
          "description": "[Code Management] Create a comment on a change request",
          "parameters": [
            {
              "name": "create_change_request_comment",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_change_request_comments",
          "description": "[Code Management] List comments on a change request",
          "parameters": [
            {
              "name": "list_change_request_comments",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_change_request_patch_sets",
          "description": "[Code Management] List patch sets for a change request",
          "parameters": [
            {
              "name": "list_change_request_patch_sets",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_current_organization_info",
          "description": "Get information about the current user and organization based on the token. In the absence of an explicitly specified organization ID, this result will take precedence.",
          "parameters": [
            {
              "name": "get_current_organization_info",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_user_organizations",
          "description": "Get the list of organizations the current user belongs to",
          "parameters": [
            {
              "name": "get_user_organizations",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_current_user",
          "description": "Get information about the current user based on the token. In the absence of an explicitly specified user ID, this result will take precedence.",
          "parameters": [
            {
              "name": "get_current_user",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_organization_departments",
          "description": "Get the list of departments in an organization",
          "parameters": [
            {
              "name": "get_organization_departments",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_organization_department_info",
          "description": "Get information about a department in an organization",
          "parameters": [
            {
              "name": "get_organization_department_info",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_organization_department_ancestors",
          "description": "Get the ancestors of a department in an organization",
          "parameters": [
            {
              "name": "get_organization_department_ancestors",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_organization_members",
          "description": "Get the list of members in an organization",
          "parameters": [
            {
              "name": "get_organization_members",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_organization_member_info",
          "description": "Get information about a member in an organization",
          "parameters": [
            {
              "name": "get_organization_member_info",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_organization_member_info_by_user_id",
          "description": "Get information about a member in an organization by user ID",
          "parameters": [
            {
              "name": "get_organization_member_info_by_user_id",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_organization_members",
          "description": "[Organization Management] Search for organization members",
          "parameters": [
            {
              "name": "search_organization_members",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_organization_roles",
          "description": "[Organization Management] List organization roles",
          "parameters": [
            {
              "name": "list_organization_roles",
              "required": false,
              "type": "string"
            },
            {
              "name": "organizationId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_organization_role",
          "description": "[Organization Management] Get information about an organization role",
          "parameters": [
            {
              "name": "get_organization_role",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_project",
          "description": "[Project Management] Get information about a Yunxiao project",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "type": "string"
            },
            {
              "name": "organizationId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_projects",
          "description": "[Project Management] Search for Yunxiao Project List. A Project is a project management unit that includes work items and sprints, and it is different from a code repository (Repository). Use Cases: Query projects I am involved in Query projects I have created",
          "parameters": [
            {
              "name": "Use",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_work_item",
          "description": "[Project Management] Get information about a work item",
          "parameters": [
            {
              "name": "get_work_item",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_work_item",
          "description": "[Project Management] Create a work item",
          "parameters": [
            {
              "name": "create_work_item",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_workitems",
          "description": "[Project Management] Search work items with various filter conditions",
          "parameters": [
            {
              "name": "search_workitems",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_work_item_types",
          "description": "[Project Management] Get the list of work item types for a project",
          "parameters": [
            {
              "name": "get_work_item_types",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_pipeline",
          "description": "[Pipeline Management] Get details of a specific pipeline in an organization",
          "parameters": [
            {
              "name": "get_pipeline",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_pipelines",
          "description": "[Pipeline Management] Get a list of pipelines in an organization with filtering options",
          "parameters": [
            {
              "name": "list_pipelines",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "generate_pipeline_yaml",
          "description": "[Pipeline Management] Generate only the YAML configuration for a pipeline without creating it. **📋 Use Cases:** - Preview YAML before creating pipeline - Generate YAML for manual deployment - Debug pipeline configuration **📖 Recommended Workflow:** 1. 🎯 Parse user description for explicit parameters 2. 🔍 If missing context, prefer IDE detection (terminal + file reading) over API calls 3. 🚀 Call this tool with collected parameters **💡 Parameter Collection Strategy:** - For QUICK pipeline creation: Use IDE detection (git config, file reading) - For PRECISE parameter selection: Consider list_repositories, list_service_connections when needed - Balance efficiency vs. accuracy based on user intent **⚡ Built-in capabilities:** Handles default service connections internally, auto-extracts project name from repo URL",
          "parameters": [
            {
              "name": "Recommended",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_pipeline_from_description",
          "description": "[Pipeline Management] Create a pipeline using structured parameters extracted from user descriptions and environment context. **🔧 Built-in Capabilities:** - ✅ Automatically retrieves default service connection IDs when not specified - ✅ Handles repository and service connection logic internally - ✅ Auto-extracts project name from repository URL (git@host:org/repo.git → repo) - ✅ Supports both IDE detection and explicit parameter specification **📖 Recommended Workflow:** 1. 🎯 PARSE user description for explicit parameters 2. 🔍 DETECT missing info from IDE environment FIRST: - Run `git config --get remote.origin.url` → repoUrl - Run `git branch --show-current` → branch - Auto-extract serviceName from repoUrl - Check project files for tech stack: * pom.xml → buildLanguage='java', buildTool='maven' * build.gradle → buildLanguage='java', buildTool='gradle' * package.json + package-lock.json → buildLanguage='nodejs', buildTool='npm' * package.json + yarn.lock → buildLanguage='nodejs', buildTool='yarn' * requirements.txt → buildLanguage='python', buildTool='pip' * go.mod → buildLanguage='go', buildTool='go' * *.csproj → buildLanguage='dotnet', buildTool='dotnet' 3. 🚀 CALL this tool with collected parameters **⚠️ Important Guidelines:** - DO NOT call list_repositories unless user explicitly asks to choose from available repositories - DO NOT call list_service_connections unless user explicitly asks to choose from available connections - ALWAYS try IDE detection first before making any API calls - If IDE detection fails, THEN consider API calls as fallback **🎯 Parameter Priority:** 1. 👤 USER EXPLICIT (highest) - buildLanguage, buildTool, versions, deployTarget 2. 🔍 IDE DETECTION (preferred) - repoUrl, branch, serviceName, tech stack 3. 🤖 TOOL DEFAULTS (automatic) - serviceConnectionId, organizationId **🔍 IDE Detection Rules (MUST TRY FIRST):** - 📂 Repository: `git config --get remote.origin.url` → repoUrl - 🌿 Branch: `git branch --show-current` → branch - 🏷️ Service Name: Auto-extracted from repoUrl (git@host:org/repo.git → repo) - ☕ Java Maven: pom.xml exists → buildLanguage='java', buildTool='maven' - 🏗️ Java Gradle: build.gradle exists → buildLanguage='java', buildTool='gradle' - 🟢 Node npm: package.json + package-lock.json → buildLanguage='nodejs', buildTool='npm' - 🧶 Node yarn: package.json + yarn.lock → buildLanguage='nodejs', buildTool='yarn' - 🐍 Python: requirements.txt → buildLanguage='python', buildTool='pip' - 🐹 Go: go.mod → buildLanguage='go', buildTool='go' - 💙 .NET: *.csproj → buildLanguage='dotnet', buildTool='dotnet' **📝 Version Detection (from project files):** - ☕ JDK: Read pom.xml <maven.compiler.source> → jdkVersion - 🟢 Node: Read package.json engines.node → nodeVersion - 🐍 Python: Read .python-version, pyproject.toml → pythonVersion - 🐹 Go: Read go.mod go directive → goVersion **🎯 Deployment Parsing:** - '部署到主机/VM/虚拟机' → deployTarget='vm' - '部署到Kubernetes/K8s' → deployTarget='k8s' - '只构建/构建制品' → deployTarget='none' **🔗 Service Connection Strategy (3 scenarios):** 1. **User specifies ID explicitly** (e.g., '使用服务连接ID abc123') → ✅ Pass serviceConnectionId=abc123 directly, NO list_service_connections call needed 2. **User doesn't specify any ID** (most common case) → ✅ Pass serviceConnectionId=null, tool will auto-retrieve default ID internally 3. **User wants to choose from available options** (e.g., '显示可用的服务连接让我选择') → 🔍 Call list_service_connections first, then let user choose, then create pipeline **🤔 When to Use Other Tools:** - User asks to \"select from available repositories\" → use list_repositories first - User wants to \"choose from service connections\" → use list_service_connections first - User wants to see options before deciding → gather info first, then create - For quick creation with current repo → directly use IDE detection **✅ Required:** organizationId, name, buildLanguage, buildTool",
          "parameters": []
        },
        {
          "name": "smart_list_pipelines",
          "description": "[Pipeline Management] Intelligently search pipelines with natural language time references (e.g., 'today', 'this week')",
          "parameters": [
            {
              "name": "smart_list_pipelines",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_pipeline_run",
          "description": "[Pipeline Management] Run a pipeline with optional parameters",
          "parameters": [
            {
              "name": "create_pipeline_run",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_latest_pipeline_run",
          "description": "[Pipeline Management] Get information about the latest pipeline run",
          "parameters": [
            {
              "name": "get_latest_pipeline_run",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_pipeline_run",
          "description": "[Pipeline Management] Get details of a specific pipeline run instance",
          "parameters": [
            {
              "name": "get_pipeline_run",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_pipeline_runs",
          "description": "[Pipeline Management] Get a list of pipeline run instances with filtering options",
          "parameters": [
            {
              "name": "list_pipeline_runs",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_pipeline_jobs_by_category",
          "description": "[Pipeline Management] Get pipeline execution tasks by category. Currently only supports DEPLOY category.",
          "parameters": [
            {
              "name": "list_pipeline_jobs_by_category",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_pipeline_job_historys",
          "description": "[Pipeline Management] Get the execution history of a pipeline task. Retrieve all execution records for a specific task in a pipeline.",
          "parameters": [
            {
              "name": "list_pipeline_job_historys",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "execute_pipeline_job_run",
          "description": "[Pipeline Management] Manually run a pipeline task. Start a specific job in a pipeline run instance.",
          "parameters": [
            {
              "name": "execute_pipeline_job_run",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_pipeline_job_run_log",
          "description": "[Pipeline Management] Get the execution logs of a pipeline job. Retrieve the log content for a specific job in a pipeline run.",
          "parameters": [
            {
              "name": "get_pipeline_job_run_log",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_pipeline",
          "description": "[Pipeline Management] Update an existing pipeline in Yunxiao by pipelineId. Use this to update pipeline YAML, stages, jobs, etc.",
          "parameters": [
            {
              "name": "update_pipeline",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_package_repositories",
          "description": "[Packages Management] List package repositories in an organization with filtering options",
          "parameters": [
            {
              "name": "list_package_repositories",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_artifacts",
          "description": "[Packages Management] List artifacts in a package repository with filtering options",
          "parameters": [
            {
              "name": "list_artifacts",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_artifact",
          "description": "[Packages Management] Get information about a single artifact in a package repository",
          "parameters": [
            {
              "name": "get_artifact",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_service_connections",
          "description": "[Service Connection Management] List service connections in an organization with filtering options",
          "parameters": [
            {
              "name": "list_service_connections",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@yjiace/alibabacloud-devops-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "yunxiaoAccessToken",
          "required": true,
          "description": "Alibaba Cloud Yunxiao personal access token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@yjiace/alibabacloud-devops-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2410.@yjiace_alibabacloud-devops-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2060
  }
}