{
  "labels": {
    "analysis": "The MCP Server integrates with PlayFab's cloud-based backend services, providing tools to interact with player data, item catalogs, and segmentation features. It enables AI assistants to perform functions like searching for items within PlayFab's inventory system, retrieving player profiles segmented by specific criteria, and managing groupings of players. The primary value is facilitating seamless interactions between AI/LLM clients and PlayFab's backend services for game development and player management.",
    "reasoning": "The primary label \"Game Development\" is chosen because the server is specifically designed to interact with PlayFab, a backend service widely used for game development and player management. The secondary label \"Database Operations\" is relevant due to its capabilities for querying player profiles and item data. The secondary label \"API Integration\" is appropriate because the server acts as middleware to bridge AI clients with PlayFab's API. No custom label is necessary as the predefined categories cover the server's functionality well.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Database Operations",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1469,
    "server_name": "PlayFab Server",
    "rank_by_usage": 1470,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@akiojin_playfab-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@akiojin/playfab-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1469,
      "name": "PlayFab Server",
      "author": "@akiojin/playfab-mcp-server",
      "overview": "Connect your AI assistant with PlayFab services to access item searches, player profiles, and segment information seamlessly. Enable natural interactions with PlayFab data through your LLM client. Start leveraging PlayFab functionalities effortlessly with this middleware solution.",
      "repository_url": "https://github.com/akiojin/playfab-mcp-server",
      "homepage": "https://smithery.ai/server/@akiojin/playfab-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@akiojin_playfab-mcp-server.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "search_items",
          "description": "Deploy Server PlayFab Server Claim Server @akiojin/playfab-mcp-server Try in Playground search_items",
          "parameters": [
            {
              "name": "count",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "required": false,
              "type": "string"
            },
            {
              "name": "search",
              "required": false,
              "type": "string"
            },
            {
              "name": "orderBy",
              "required": false,
              "type": "string"
            },
            {
              "name": "continuationToken",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_all_segments",
          "description": "PlayFab get all segments",
          "parameters": [
            {
              "name": "get_all_segments",
              "required": false,
              "type": "string"
            },
            {
              "name": "PlayFab",
              "required": false,
              "type": "string"
            },
            {
              "name": "get",
              "required": false,
              "type": "string"
            },
            {
              "name": "all",
              "required": false,
              "type": "string"
            },
            {
              "name": "segments",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_players_in_segments",
          "description": "Allows for paging through all players in a given segment. This API creates a snapshot of all player profiles that match the segment definition at the time of its creation and lives through the Total Seconds to Live, refreshing its life span on each subsequent use of the Continuation Token. Profiles that change during the course of paging will not be reflected in the results. AB Test segments are currently not supported by this operation. NOTE: This API is limited to being called 30 times in one minute. You will be returned an error if you exceed this threshold.",
          "parameters": [
            {
              "name": "segmentId",
              "required": true,
              "type": "string"
            },
            {
              "name": "continuationToken",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@akiojin/playfab-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "playfabDevSecretKey",
          "required": true,
          "description": "Your PlayFab Developer Secret Key."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@akiojin/playfab-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1470.@akiojin_playfab-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1359
  }
}