{
  "labels": {
    "analysis": "The MCP Server is designed to demonstrate versatile implementations of the Model Context Protocol (MCP) for secure LLM access to tools and data. Its available tools range from basic operations (echo, add) to more advanced features like long-running operations, environment variable inspection, LLM sampling, and metadata annotation. The server appears to be focused on showcasing how MCP can facilitate secure interactions between LLMs and various utilities, emphasizing flexibility and integration capabilities.",
    "reasoning": "The primary label \"Development Tools\" was chosen because the server primarily serves as a toolkit demonstration for developers working with MCP and LLM integrations. Secondary labels \"AI/ML Tools\" (due to LLM sampling capabilities) and \"Security & Authentication\" (implied by secure data access) were added to highlight other significant aspects. The custom label emphasizes the server's unique role in protocol showcasing.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "AI/ML Tools",
      "Security & Authentication"
    ],
    "custom_label": "Model Context Protocol Demonstration",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1065,
    "server_name": "Model Context Protocol Servers",
    "rank_by_usage": 1066,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@chuanmingliu_servers.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@chuanmingliu/servers/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "echo",
          "description": "Echoes back the input",
          "input_schema": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Message to echo"
              }
            },
            "required": [
              "message"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "add",
          "description": "Adds two numbers",
          "input_schema": {
            "type": "object",
            "properties": {
              "a": {
                "type": "number",
                "description": "First number"
              },
              "b": {
                "type": "number",
                "description": "Second number"
              }
            },
            "required": [
              "a",
              "b"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "printEnv",
          "description": "Prints all environment variables, helpful for debugging MCP server configuration",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "longRunningOperation",
          "description": "Demonstrates a long running operation with progress updates",
          "input_schema": {
            "type": "object",
            "properties": {
              "duration": {
                "type": "number",
                "default": 10,
                "description": "Duration of the operation in seconds"
              },
              "steps": {
                "type": "number",
                "default": 5,
                "description": "Number of steps in the operation"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "sampleLLM",
          "description": "Samples from an LLM using MCP's sampling feature",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "The prompt to send to the LLM"
              },
              "maxTokens": {
                "type": "number",
                "default": 100,
                "description": "Maximum number of tokens to generate"
              }
            },
            "required": [
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "getTinyImage",
          "description": "Returns the MCP_TINY_IMAGE",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "annotatedMessage",
          "description": "Demonstrates how annotations can be used to provide metadata about content",
          "input_schema": {
            "type": "object",
            "properties": {
              "messageType": {
                "type": "string",
                "enum": [
                  "error",
                  "success",
                  "debug"
                ],
                "description": "Type of message to demonstrate different annotation patterns"
              },
              "includeImage": {
                "type": "boolean",
                "default": false,
                "description": "Whether to include an example image"
              }
            },
            "required": [
              "messageType"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 7,
      "tool_names": [
        "echo",
        "add",
        "printEnv",
        "longRunningOperation",
        "sampleLLM",
        "getTinyImage",
        "annotatedMessage"
      ]
    },
    "server_info_crawled": {
      "id": 1065,
      "name": "Model Context Protocol Servers",
      "author": "@chuanmingliu/servers",
      "overview": "Showcase versatile implementations of the Model Context Protocol for secure LLM access to tools and data.",
      "repository_url": "https://github.com/chuanmingliu/servers",
      "homepage": "https://smithery.ai/server/@chuanmingliu/servers",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@chuanmingliu_servers.json",
      "tools_count": 7,
      "tools": [
        {
          "name": "echo",
          "description": "Echoes back the input",
          "input_schema": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Message to echo"
              }
            },
            "required": [
              "message"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "add",
          "description": "Adds two numbers",
          "input_schema": {
            "type": "object",
            "properties": {
              "a": {
                "type": "number",
                "description": "First number"
              },
              "b": {
                "type": "number",
                "description": "Second number"
              }
            },
            "required": [
              "a",
              "b"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "printEnv",
          "description": "Prints all environment variables, helpful for debugging MCP server configuration",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "longRunningOperation",
          "description": "Demonstrates a long running operation with progress updates",
          "input_schema": {
            "type": "object",
            "properties": {
              "duration": {
                "type": "number",
                "default": 10,
                "description": "Duration of the operation in seconds"
              },
              "steps": {
                "type": "number",
                "default": 5,
                "description": "Number of steps in the operation"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "sampleLLM",
          "description": "Samples from an LLM using MCP's sampling feature",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "The prompt to send to the LLM"
              },
              "maxTokens": {
                "type": "number",
                "default": 100,
                "description": "Maximum number of tokens to generate"
              }
            },
            "required": [
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "getTinyImage",
          "description": "Returns the MCP_TINY_IMAGE",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "annotatedMessage",
          "description": "Demonstrates how annotations can be used to provide metadata about content",
          "input_schema": {
            "type": "object",
            "properties": {
              "messageType": {
                "type": "string",
                "enum": [
                  "error",
                  "success",
                  "debug"
                ],
                "description": "Type of message to demonstrate different annotation patterns"
              },
              "includeImage": {
                "type": "boolean",
                "default": false,
                "description": "Whether to include an example image"
              }
            },
            "required": [
              "messageType"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@chuanmingliu/servers/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@chuanmingliu/servers/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1066.@chuanmingliu_servers_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1044
  }
}