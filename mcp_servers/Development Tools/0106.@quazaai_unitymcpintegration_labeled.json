{
  "labels": {
    "analysis": "The MCP Server is designed to integrate AI assistants with Unity game development environments. Its core functionality revolves around real-time interaction with Unity projects through various tools that allow querying scene information, executing C# code, modifying files, and accessing project data. This enables AI-driven enhancements to the game development workflow by providing programmatic access to Unity Editor functionalities and file operations within Unity projects.",
    "reasoning": "The primary label \"Development Tools\" is chosen because the server primarily enhances Unity game development workflows with AI integration, including code execution, scene inspection, and file manipulation. \"File Management\" is chosen as a secondary label because several tools specifically focus on reading, writing, and managing files within Unity projects. \"Game Development\" is introduced as a custom label to capture the server's unique focus on enhancing game development workflows in Unity specifically.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "File Management"
    ],
    "custom_label": "Game Development",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 105,
    "server_name": "Unity MCP Integration",
    "rank_by_usage": 106,
    "usage_count": "667",
    "original_file": "../crawler/smithery/@quazaai_unitymcpintegration.json",
    "mode": "smithery",
    "timestamp": 1751937975,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@quazaai/unitymcpintegration/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_current_scene_info",
          "description": "Retrieve information about the current scene in Unity Editor with configurable detail level",
          "input_schema": {
            "type": "object",
            "properties": {
              "detailLevel": {
                "type": "string",
                "enum": [
                  "RootObjectsOnly",
                  "FullHierarchy"
                ],
                "description": "RootObjectsOnly: Returns just root GameObjects. FullHierarchy: Returns complete hierarchy with all children.",
                "default": "RootObjectsOnly"
              }
            },
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "get_game_objects_info",
          "description": "Retrieve detailed information about specific GameObjects in the current scene",
          "input_schema": {
            "type": "object",
            "properties": {
              "instanceIDs": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "Array of GameObject instance IDs to get information for",
                "minItems": 1
              },
              "detailLevel": {
                "type": "string",
                "enum": [
                  "BasicInfo",
                  "IncludeComponents",
                  "IncludeChildren",
                  "IncludeComponentsAndChildren"
                ],
                "description": "BasicInfo: Basic GameObject information. IncludeComponents: Includes component details. IncludeChildren: Includes child GameObjects. IncludeComponentsAndChildren: Includes both components and a full hierarchy with components on children.",
                "default": "IncludeComponents"
              }
            },
            "required": [
              "instanceIDs"
            ],
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "execute_editor_command",
          "description": "Execute C# code directly in the Unity Editor - allows full flexibility including custom namespaces and multiple classes",
          "input_schema": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "C# code to execute in Unity Editor. You MUST define a public class named \"McpScript\" with a public static method named \"Execute\" that returns an object. Example: \"public class McpScript { public static object Execute() { /* your code here */ return result; } }\". You can include any necessary namespaces, additional classes, and methods.",
                "minLength": 1
              }
            },
            "required": [
              "code"
            ],
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "get_logs",
          "description": "Retrieve Unity Editor logs with filtering options",
          "input_schema": {
            "type": "object",
            "properties": {
              "types": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "Log",
                    "Warning",
                    "Error",
                    "Exception"
                  ]
                },
                "description": "Filter logs by type"
              },
              "count": {
                "type": "number",
                "description": "Maximum number of log entries to return",
                "minimum": 1,
                "maximum": 1000
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "message",
                    "stackTrace",
                    "logType",
                    "timestamp"
                  ]
                },
                "description": "Specify which fields to include in the output"
              },
              "messageContains": {
                "type": "string",
                "description": "Filter logs by message content"
              },
              "stackTraceContains": {
                "type": "string",
                "description": "Filter logs by stack trace content"
              },
              "timestampAfter": {
                "type": "string",
                "description": "Filter logs after this ISO timestamp"
              },
              "timestampBefore": {
                "type": "string",
                "description": "Filter logs before this ISO timestamp"
              }
            },
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "verify_connection",
          "description": "Verify that the MCP server has an active connection to Unity Editor",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "get_editor_state",
          "description": "Get the current Unity Editor state including project information",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "read_file",
          "description": "Read the contents of a file from the Unity project. Paths are relative to the project's Assets folder. For example, use 'Scenes/MainScene.unity' to read Assets/Scenes/MainScene.unity.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the file to read. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder."
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "read_multiple_files",
          "description": "Read the contents of multiple files from the Unity project simultaneously.",
          "input_schema": {
            "type": "object",
            "properties": {
              "paths": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of file paths to read. Paths can be absolute or relative to Unity project Assets folder."
              }
            },
            "required": [
              "paths"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "write_file",
          "description": "Create a new file or completely overwrite an existing file in the Unity project.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the file to write. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder."
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "edit_file",
          "description": "Make precise edits to a text file in the Unity project. Returns a git-style diff showing changes.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the file to edit. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder."
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "oldText": {
                      "type": "string",
                      "description": "Text to search for - must match exactly"
                    },
                    "newText": {
                      "type": "string",
                      "description": "Text to replace with"
                    }
                  },
                  "required": [
                    "oldText",
                    "newText"
                  ],
                  "additionalProperties": false
                },
                "description": "Array of edit operations to apply"
              },
              "dryRun": {
                "type": "boolean",
                "default": false,
                "description": "Preview changes using git-style diff format"
              }
            },
            "required": [
              "path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "list_directory",
          "description": "Get a listing of all files and directories in a specified path in the Unity project. Paths are relative to the Assets folder unless absolute. For example, use 'Scenes' to list all files in Assets/Scenes directory. Use empty string to list the Assets folder.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the directory to list. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Scenes\" will list all files in the Assets/Scenes directory."
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "directory_tree",
          "description": "Get a recursive tree view of files and directories in the Unity project as a JSON structure.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the directory to get tree of. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Prefabs\" will show the tree for Assets/Prefabs."
              },
              "maxDepth": {
                "type": "number",
                "default": 5,
                "description": "Maximum depth to traverse"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "search_files",
          "description": "Recursively search for files and directories matching a pattern in the Unity project.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to search from. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Scripts\" will search within Assets/Scripts."
              },
              "pattern": {
                "type": "string",
                "description": "Pattern to search for"
              },
              "excludePatterns": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": [],
                "description": "Patterns to exclude"
              }
            },
            "required": [
              "path",
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_file_info",
          "description": "Retrieve detailed metadata about a file or directory in the Unity project.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the file to get info for. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder."
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "find_assets_by_type",
          "description": "Find all Unity assets of a specified type (e.g., Material, Prefab, Scene, Script) in the project. Set searchPath to an empty string to search the entire Assets folder.",
          "input_schema": {
            "type": "object",
            "properties": {
              "assetType": {
                "type": "string",
                "description": "Type of assets to find (e.g., \"Material\", \"Prefab\", \"Scene\", \"Script\")"
              },
              "searchPath": {
                "type": "string",
                "default": "",
                "description": "Directory to search in. Can be absolute or relative to Unity project Assets folder. An empty string will search the entire Assets folder."
              },
              "maxDepth": {
                "type": "number",
                "default": 1,
                "description": "Maximum depth to search. 1 means search only in the specified directory, 2 includes immediate subdirectories, and so on. Set to -1 for unlimited depth."
              }
            },
            "required": [
              "assetType"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 15,
      "tool_names": [
        "get_current_scene_info",
        "get_game_objects_info",
        "execute_editor_command",
        "get_logs",
        "verify_connection",
        "get_editor_state",
        "read_file",
        "read_multiple_files",
        "write_file",
        "edit_file",
        "list_directory",
        "directory_tree",
        "search_files",
        "get_file_info",
        "find_assets_by_type"
      ]
    },
    "server_info_crawled": {
      "id": 105,
      "name": "Unity MCP Integration",
      "author": "@quazaai/unitymcpintegration",
      "overview": "Enable AI assistants to interact with your Unity projects in real-time. Access scene information, execute C# code, and monitor logs directly within the Unity Editor. Enhance your development workflow with seamless AI integration. Also Added File Access to Give more functionality to LLM",
      "repository_url": "https://github.com/quazaai/UnityMCPIntegration",
      "homepage": "https://smithery.ai/server/@quazaai/unitymcpintegration",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "667",
      "success_rate": "73.92%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@quazaai_unitymcpintegration.json",
      "tools_count": 15,
      "tools": [
        {
          "name": "get_current_scene_info",
          "description": "Retrieve information about the current scene in Unity Editor with configurable detail level",
          "input_schema": {
            "type": "object",
            "properties": {
              "detailLevel": {
                "type": "string",
                "enum": [
                  "RootObjectsOnly",
                  "FullHierarchy"
                ],
                "description": "RootObjectsOnly: Returns just root GameObjects. FullHierarchy: Returns complete hierarchy with all children.",
                "default": "RootObjectsOnly"
              }
            },
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "get_game_objects_info",
          "description": "Retrieve detailed information about specific GameObjects in the current scene",
          "input_schema": {
            "type": "object",
            "properties": {
              "instanceIDs": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "Array of GameObject instance IDs to get information for",
                "minItems": 1
              },
              "detailLevel": {
                "type": "string",
                "enum": [
                  "BasicInfo",
                  "IncludeComponents",
                  "IncludeChildren",
                  "IncludeComponentsAndChildren"
                ],
                "description": "BasicInfo: Basic GameObject information. IncludeComponents: Includes component details. IncludeChildren: Includes child GameObjects. IncludeComponentsAndChildren: Includes both components and a full hierarchy with components on children.",
                "default": "IncludeComponents"
              }
            },
            "required": [
              "instanceIDs"
            ],
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "execute_editor_command",
          "description": "Execute C# code directly in the Unity Editor - allows full flexibility including custom namespaces and multiple classes",
          "input_schema": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "C# code to execute in Unity Editor. You MUST define a public class named \"McpScript\" with a public static method named \"Execute\" that returns an object. Example: \"public class McpScript { public static object Execute() { /* your code here */ return result; } }\". You can include any necessary namespaces, additional classes, and methods.",
                "minLength": 1
              }
            },
            "required": [
              "code"
            ],
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "get_logs",
          "description": "Retrieve Unity Editor logs with filtering options",
          "input_schema": {
            "type": "object",
            "properties": {
              "types": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "Log",
                    "Warning",
                    "Error",
                    "Exception"
                  ]
                },
                "description": "Filter logs by type"
              },
              "count": {
                "type": "number",
                "description": "Maximum number of log entries to return",
                "minimum": 1,
                "maximum": 1000
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "message",
                    "stackTrace",
                    "logType",
                    "timestamp"
                  ]
                },
                "description": "Specify which fields to include in the output"
              },
              "messageContains": {
                "type": "string",
                "description": "Filter logs by message content"
              },
              "stackTraceContains": {
                "type": "string",
                "description": "Filter logs by stack trace content"
              },
              "timestampAfter": {
                "type": "string",
                "description": "Filter logs after this ISO timestamp"
              },
              "timestampBefore": {
                "type": "string",
                "description": "Filter logs before this ISO timestamp"
              }
            },
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "verify_connection",
          "description": "Verify that the MCP server has an active connection to Unity Editor",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "get_editor_state",
          "description": "Get the current Unity Editor state including project information",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false
          },
          "annotations": null
        },
        {
          "name": "read_file",
          "description": "Read the contents of a file from the Unity project. Paths are relative to the project's Assets folder. For example, use 'Scenes/MainScene.unity' to read Assets/Scenes/MainScene.unity.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the file to read. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder."
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "read_multiple_files",
          "description": "Read the contents of multiple files from the Unity project simultaneously.",
          "input_schema": {
            "type": "object",
            "properties": {
              "paths": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of file paths to read. Paths can be absolute or relative to Unity project Assets folder."
              }
            },
            "required": [
              "paths"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "write_file",
          "description": "Create a new file or completely overwrite an existing file in the Unity project.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the file to write. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder."
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "edit_file",
          "description": "Make precise edits to a text file in the Unity project. Returns a git-style diff showing changes.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the file to edit. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder."
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "oldText": {
                      "type": "string",
                      "description": "Text to search for - must match exactly"
                    },
                    "newText": {
                      "type": "string",
                      "description": "Text to replace with"
                    }
                  },
                  "required": [
                    "oldText",
                    "newText"
                  ],
                  "additionalProperties": false
                },
                "description": "Array of edit operations to apply"
              },
              "dryRun": {
                "type": "boolean",
                "default": false,
                "description": "Preview changes using git-style diff format"
              }
            },
            "required": [
              "path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "list_directory",
          "description": "Get a listing of all files and directories in a specified path in the Unity project. Paths are relative to the Assets folder unless absolute. For example, use 'Scenes' to list all files in Assets/Scenes directory. Use empty string to list the Assets folder.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the directory to list. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Scenes\" will list all files in the Assets/Scenes directory."
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "directory_tree",
          "description": "Get a recursive tree view of files and directories in the Unity project as a JSON structure.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the directory to get tree of. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Prefabs\" will show the tree for Assets/Prefabs."
              },
              "maxDepth": {
                "type": "number",
                "default": 5,
                "description": "Maximum depth to traverse"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "search_files",
          "description": "Recursively search for files and directories matching a pattern in the Unity project.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to search from. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Scripts\" will search within Assets/Scripts."
              },
              "pattern": {
                "type": "string",
                "description": "Pattern to search for"
              },
              "excludePatterns": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": [],
                "description": "Patterns to exclude"
              }
            },
            "required": [
              "path",
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_file_info",
          "description": "Retrieve detailed metadata about a file or directory in the Unity project.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the file to get info for. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder."
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "find_assets_by_type",
          "description": "Find all Unity assets of a specified type (e.g., Material, Prefab, Scene, Script) in the project. Set searchPath to an empty string to search the entire Assets folder.",
          "input_schema": {
            "type": "object",
            "properties": {
              "assetType": {
                "type": "string",
                "description": "Type of assets to find (e.g., \"Material\", \"Prefab\", \"Scene\", \"Script\")"
              },
              "searchPath": {
                "type": "string",
                "default": "",
                "description": "Directory to search in. Can be absolute or relative to Unity project Assets folder. An empty string will search the entire Assets folder."
              },
              "maxDepth": {
                "type": "number",
                "default": 1,
                "description": "Maximum depth to search. 1 means search only in the specified directory, 2 includes immediate subdirectories, and so on. Set to -1 for unlimited depth."
              }
            },
            "required": [
              "assetType"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@quazaai/unitymcpintegration/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@quazaai/unitymcpintegration/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0106.@quazaai_unitymcpintegration_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 103
  }
}