{
  "labels": {
    "analysis": "The MCP Server described specializes in integrating Claude with any OpenAI SDK-compatible chat completion APIs, allowing users to leverage multiple AI backends (e.g., OpenAI, Perplexity, Groq, xAI) through a unified interface. It enables seamless switching or simultaneous access to different AI models, increasing flexibility for developers and users who need varied AI capabilities.",
    "reasoning": "The primary label \"Development Tools\" is chosen because the server's core function revolves around SDK integration and API interactions, which are critical for software development workflows. \"AI/ML Tools\" is a secondary label due to its direct involvement in model interactions. No custom label is needed as the predefined options cover its functionality well.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2056,
    "server_name": "Any OpenAI Compatible API Integrations",
    "rank_by_usage": 2057,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/any-chat-completions-mcp-server_any-openai-compatible-api-integrations.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/any-chat-completions-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2056,
      "name": "Any OpenAI Compatible API Integrations",
      "author": "any-chat-completions-mcp-server",
      "overview": "Integrate Claude with any OpenAI SDK Compatible Chat Completion API like OpenAI, Perplexity, Groq, xAI, PyroPrompts, etc.",
      "repository_url": "https://github.com/pyroprompts/any-chat-completions-mcp",
      "homepage": "https://smithery.ai/server/any-chat-completions-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/any-chat-completions-mcp-server_any-openai-compatible-api-integrations.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "chat-with-string",
          "description": "Deploy Server Any OpenAI Compatible API Integrations Claim Server any-chat-completions-mcp-server Try in Playground chat-with-string",
          "parameters": [
            {
              "name": "Text",
              "required": false,
              "type": "string"
            },
            {
              "name": "chat",
              "required": false,
              "type": "string"
            },
            {
              "name": "with",
              "required": false,
              "type": "string"
            },
            {
              "name": "string",
              "required": false,
              "type": "string"
            },
            {
              "name": "content",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/any-chat-completions-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "aiChatKey",
          "required": true,
          "description": "API key for the chat provider"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/any-chat-completions-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2057.any-chat-completions-mcp-server_any-openai-compatible-api-integrations_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1793
  }
}