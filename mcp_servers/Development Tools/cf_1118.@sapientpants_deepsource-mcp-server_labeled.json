{
  "labels": {
    "analysis": "The DeepSource Server provides tools for retrieving and managing code quality metrics, security compliance reports, and dependency vulnerabilities. Its core functionality revolves around code analysis, quality management, and security compliance. The tools allow for detailed filtering, pagination, and management of code issues, analysis runs, vulnerabilities, and quality metrics. It also enables updating metric thresholds and settings, making it useful for enforcing code quality standards.",
    "reasoning": "The primary label \"Development Tools\" was chosen because the server's core functionality revolves around code analysis, issue management, and quality control, which are essential for software development. The secondary label \"Security & Authentication\" was selected due to its robust tools for security compliance and vulnerability management. The custom label \"Code Quality Management\" was added to highlight the server's specialized focus on code quality metrics and enforcement, which isn't fully captured by existing categories.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Security & Authentication"
    ],
    "custom_label": "Code Quality Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1117,
    "server_name": "DeepSource Server",
    "rank_by_usage": 1118,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@sapientpants_deepsource-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@sapientpants/deepsource-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1117,
      "name": "DeepSource Server",
      "author": "@sapientpants/deepsource-mcp-server",
      "overview": "Provide AI assistants with access to DeepSource's code quality metrics, issues, and analysis results through a standardized protocol. Retrieve and manage code quality data, security compliance reports, and dependency vulnerabilities to enhance project quality and security. Integrate seamlessly with AI tools to enable insightful code analysis and quality management.",
      "repository_url": "https://github.com/sapientpants/deepsource-mcp-server",
      "homepage": "https://smithery.ai/server/@sapientpants/deepsource-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@sapientpants_deepsource-mcp-server.json",
      "tools_count": 9,
      "tools": [
        {
          "name": "deepsource_projects",
          "description": "Deploy Server DeepSource Server Claim Server @sapientpants/deepsource-mcp-server Try in Playground deepsource_projects",
          "parameters": [
            {
              "name": "deepsource_projects",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "deepsource_project_issues",
          "description": "Get issues from a DeepSource project with support for Relay-style cursor-based pagination and filtering. For forward pagination, use `first` (defaults to 10) with optional `after` cursor. For backward pagination, use `last` (defaults to 10) with optional `before` cursor. The response includes `pageInfo` with `hasNextPage`, `hasPreviousPage`, `startCursor`, and `endCursor` to help navigate through pages. Filtering options: - `path`: Filter issues by specific file path - `analyzerIn`: Filter issues by specific analyzers - `tags`: Filter issues by tags",
          "parameters": []
        },
        {
          "name": "deepsource_project_runs",
          "description": "List analysis runs for a DeepSource project with support for Relay-style cursor-based pagination and filtering. For forward pagination, use `first` (defaults to 10) with optional `after` cursor. For backward pagination, use `last` (defaults to 10) with optional `before` cursor. The response includes `pageInfo` with `hasNextPage`, `hasPreviousPage`, `startCursor`, and `endCursor` to help navigate through pages. Filtering options: - `analyzerIn`: Filter runs by specific analyzers",
          "parameters": []
        },
        {
          "name": "deepsource_run",
          "description": "Get a specific analysis run by its runUid (UUID) or commitOid (commit hash).",
          "parameters": [
            {
              "name": "deepsource_run",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "deepsource_dependency_vulnerabilities",
          "description": "Get dependency vulnerabilities from a DeepSource project with support for Relay-style cursor-based pagination. For forward pagination, use `first` (defaults to 10) with optional `after` cursor. For backward pagination, use `last` (defaults to 10) with optional `before` cursor. The response includes `pageInfo` with `hasNextPage`, `hasPreviousPage`, `startCursor`, and `endCursor` to help navigate through pages. The response provides detailed information about each vulnerability, including: - Package information (name, ecosystem, purl) - Package version details - Vulnerability details (identifiers, severity, CVSS scores) - Reachability status (whether the vulnerability is reachable in the code) - Fixability information (whether and how the vulnerability can be fixed)",
          "parameters": []
        },
        {
          "name": "deepsource_quality_metrics",
          "description": "Get quality metrics from a DeepSource project with optional filtering by metric type. Metrics include code coverage, duplicate code percentage, and more, along with their: - Current values - Threshold settings - Pass/fail status - Configuration status (reporting and enforcement) For each metric, detailed information is provided for different programming languages and the aggregated metrics for the entire repository.",
          "parameters": []
        },
        {
          "name": "deepsource_update_metric_threshold",
          "description": "Update the threshold for a specific quality metric in a DeepSource project. This allows setting or removing threshold values that determine if a metric passes or fails. Thresholds can be set per language or for the entire repository (AGGREGATE). Examples: - Set a 80% line coverage threshold: metricShortcode=\"LCV\", metricKey=\"AGGREGATE\", thresholdValue=80 - Remove a threshold: metricShortcode=\"LCV\", metricKey=\"AGGREGATE\", thresholdValue=null",
          "parameters": []
        },
        {
          "name": "deepsource_update_metric_setting",
          "description": "Update the settings for a quality metric in a DeepSource project. This allows configuring how metrics are used in the project: - Enable/disable reporting the metric in the UI and API - Enable/disable enforcing thresholds (failing checks when thresholds aren't met) Example: - Enable reporting and enforce thresholds: isReported=true, isThresholdEnforced=true - Only report but don't enforce: isReported=true, isThresholdEnforced=false - Disable completely: isReported=false, isThresholdEnforced=false",
          "parameters": []
        },
        {
          "name": "deepsource_compliance_report",
          "description": "Get security compliance reports from a DeepSource project. This tool provides access to industry-standard security compliance reports including: - OWASP Top 10: Common web application security vulnerabilities - SANS Top 25: Most dangerous software errors - MISRA-C: Guidelines for safety-critical software in C The response includes: - Comprehensive statistics about security issues by category and severity - Compliance status (passing/failing) - Recommendations for improving security posture - Trend data showing changes over time",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@sapientpants/deepsource-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "deepsourceApiKey",
          "required": true,
          "description": "DeepSource API key used to authenticate with the DeepSource GraphQL API"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@sapientpants/deepsource-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1118.@sapientpants_deepsource-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1095
  }
}