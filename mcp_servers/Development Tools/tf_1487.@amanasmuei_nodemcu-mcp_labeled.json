{
  "labels": {
    "analysis": "The MCP Server described as \"NodeMCU Manager\" focuses on managing IoT devices, specifically NodeMCU (ESP8266) modules. It provides tools to monitor device status, send commands, and update configurations remotely. This indicates its core functionality is related to device management and remote control, primarily for IoT hardware. The mention of AI tool integration suggests it may also offer some automation capabilities when used with AI tools.",
    "reasoning": "The primary label is \"IoT Device Management\" as this is a custom label that best describes the server's focus on managing IoT devices. The secondary label \"API Integration\" is included because the server likely integrates with external services or AI tools like Claude Desktop, enabling extended functionality. While it could be loosely grouped under \"Operating System\" or \"Development Tools,\" the IoT-specific focus makes those less precise.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": "IoT Device Management",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1486,
    "server_name": "NodeMCU Manager",
    "rank_by_usage": 1487,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@amanasmuei_nodemcu-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@amanasmuei/nodemcu-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "list-devices",
          "description": null,
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-device",
          "description": null,
          "input_schema": {
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "string",
                "description": "The ID of the device to get information about"
              }
            },
            "required": [
              "deviceId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "send-command",
          "description": null,
          "input_schema": {
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "string",
                "description": "The ID of the device to send the command to"
              },
              "command": {
                "type": "string",
                "description": "The command to send (restart, update, status, etc.)"
              },
              "params": {
                "type": "object",
                "additionalProperties": {},
                "description": "Optional parameters for the command"
              }
            },
            "required": [
              "deviceId",
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "update-config",
          "description": null,
          "input_schema": {
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "string",
                "description": "The ID of the device to update configuration for"
              },
              "config": {
                "type": "object",
                "additionalProperties": {},
                "description": "Configuration parameters to update"
              }
            },
            "required": [
              "deviceId",
              "config"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "list-devices",
        "get-device",
        "send-command",
        "update-config"
      ]
    },
    "server_info_crawled": {
      "id": 1486,
      "name": "NodeMCU Manager",
      "author": "@amanasmuei/nodemcu-mcp",
      "overview": "Manage your NodeMCU (ESP8266) IoT devices effortlessly. Monitor device status, send commands, and update configurations remotely while integrating seamlessly with AI tools like Claude Desktop.",
      "repository_url": "https://github.com/amanasmuei/nodemcu-mcp",
      "homepage": "https://smithery.ai/server/@amanasmuei/nodemcu-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@amanasmuei_nodemcu-mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "list-devices",
          "description": null,
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-device",
          "description": null,
          "input_schema": {
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "string",
                "description": "The ID of the device to get information about"
              }
            },
            "required": [
              "deviceId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "send-command",
          "description": null,
          "input_schema": {
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "string",
                "description": "The ID of the device to send the command to"
              },
              "command": {
                "type": "string",
                "description": "The command to send (restart, update, status, etc.)"
              },
              "params": {
                "type": "object",
                "additionalProperties": {},
                "description": "Optional parameters for the command"
              }
            },
            "required": [
              "deviceId",
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "update-config",
          "description": null,
          "input_schema": {
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "string",
                "description": "The ID of the device to update configuration for"
              },
              "config": {
                "type": "object",
                "additionalProperties": {},
                "description": "Configuration parameters to update"
              }
            },
            "required": [
              "deviceId",
              "config"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@amanasmuei/nodemcu-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@amanasmuei/nodemcu-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1487.@amanasmuei_nodemcu-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1373
  }
}