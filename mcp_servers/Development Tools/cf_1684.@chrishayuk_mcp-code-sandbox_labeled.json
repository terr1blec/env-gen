{
  "labels": {
    "analysis": "The MCP Server described is primarily a secure code execution environment that provides isolated Python sandboxing capabilities. It allows users to create, manage, and execute code in safe, modular environments with file management, package installation, and visualization tools. The server supports various forms of data analysis through chart generation capabilities and includes tools for telnet communication, extending its utility beyond simple code execution.",
    "reasoning": "The primary label \"Development Tools\" was chosen because the server's core functionality centers around creating, executing, and managing Python code in secure environments, which is fundamental to development workflows. The secondary labels \"Data Analysis & Processing\" and \"API Integration\" were selected because the server offers robust chart generation tools and integrates with other tools like telnet, suggesting broader utility. The custom label \"Secure Code Execution\" was added to emphasize the sandboxing aspect, which is a unique value proposition of this server.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Data Analysis & Processing",
      "API Integration"
    ],
    "custom_label": "Secure Code Execution",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1683,
    "server_name": "Code Sandbox Server",
    "rank_by_usage": 1684,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@chrishayuk_mcp-code-sandbox.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@chrishayuk/mcp-code-sandbox/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1683,
      "name": "Code Sandbox Server",
      "author": "@chrishayuk/mcp-code-sandbox",
      "overview": "Provide secure and isolated Python code execution environments with file management and package installation capabilities. Manage sandbox lifecycles and execute code safely within modular, extensible sandboxes. Integrate seamlessly with Claude for Desktop and other MCP clients to enhance code execution workflows.",
      "repository_url": "https://github.com/chrishayuk/mcp-code-sandbox",
      "homepage": "https://smithery.ai/server/@chrishayuk/mcp-code-sandbox",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@chrishayuk_mcp-code-sandbox.json",
      "tools_count": 19,
      "tools": [
        {
          "name": "create_sandbox",
          "description": "Deploy Server Code Sandbox Server Claim Server @chrishayuk/mcp-code-sandbox Try in Playground create_sandbox",
          "parameters": []
        },
        {
          "name": "close_sandbox",
          "description": "Close and clean up a sandbox environment. Args: session_id: The unique identifier for the sandbox session Returns: A confirmation message indicating the sandbox was closed",
          "parameters": []
        },
        {
          "name": "get_sandbox_status",
          "description": "Get status information about sandboxes. Args: session_id: Optional session ID to get status for a specific sandbox Returns: Information about active sandboxes",
          "parameters": [
            {
              "name": "Information",
              "required": false,
              "type": "string"
            },
            {
              "name": "about",
              "required": false,
              "type": "string"
            },
            {
              "name": "active",
              "required": false,
              "type": "string"
            },
            {
              "name": "sandboxes",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "execute_code",
          "description": "Execute Python code in the sandbox environment. Args: session_id: The unique identifier for the sandbox session code: The Python code to execute Returns: A dictionary containing the execution results including logs and any errors",
          "parameters": []
        },
        {
          "name": "install_package",
          "description": "Install a Python package in the sandbox. Args: session_id: The unique identifier for the sandbox session package_name: The name of the Python package to install Returns: A dictionary containing the installation output or an error message",
          "parameters": []
        },
        {
          "name": "create_run_close",
          "description": "Create a sandbox, run code, and automatically close the sandbox in one operation. This is a convenience tool that combines create_sandbox, execute_code, and close_sandbox into a single operation, which is useful for simple one-off code executions. Args: code: The Python code to execute Returns: A dictionary containing the execution results",
          "parameters": []
        },
        {
          "name": "list_files",
          "description": "List files in the sandbox at the specified path. Args: session_id: The unique identifier for the sandbox session path: The directory path to list files from (default: root directory) Returns: A dictionary containing the file listing or an error message",
          "parameters": []
        },
        {
          "name": "read_file",
          "description": "Read the contents of a file in the sandbox. Args: session_id: The unique identifier for the sandbox session file_path: The path to the file to read Returns: A dictionary containing the file content or an error message",
          "parameters": []
        },
        {
          "name": "write_file",
          "description": "Write content to a file in the sandbox. Args: session_id: The unique identifier for the sandbox session file_path: The path to the file to write content: The content to write to the file Returns: A dictionary containing a success message or an error message",
          "parameters": []
        },
        {
          "name": "upload_file",
          "description": "Upload a file to the sandbox. Args: session_id: The unique identifier for the sandbox session file_name: The name of the file to create file_content: The content of the file destination_path: The directory where the file should be created (default: root directory) Returns: A dictionary containing a success message or an error message",
          "parameters": []
        },
        {
          "name": "connect",
          "description": "Connect to a telnet server Args: host: The hostname or IP address of the telnet server port: The port to connect to timeout: Connection timeout in seconds Returns: A dictionary containing connection information and initial response",
          "parameters": [
            {
              "name": "host",
              "required": true,
              "type": "string"
            },
            {
              "name": "port",
              "required": true,
              "type": "string"
            },
            {
              "name": "timeout",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "send_command",
          "description": "Send a command to the telnet server Args: session_id: The session ID returned by the connect function command: The command to send timeout: Timeout in seconds for waiting for a response Returns: A dictionary containing the server's response",
          "parameters": []
        },
        {
          "name": "disconnect",
          "description": "Disconnect from a telnet server Args: session_id: The session ID returned by the connect function Returns: A dictionary indicating success or failure",
          "parameters": []
        },
        {
          "name": "list_connections",
          "description": "List all active telnet connections Returns: A dictionary containing information about all active connections",
          "parameters": []
        },
        {
          "name": "generate_line_chart",
          "description": "Generate a line chart from data. Args: session_id: The unique identifier for the sandbox session data: List of data points (dictionaries) to plot x_key: The key for x-axis values in the data y_keys: List of keys for y-axis values to plot as multiple lines title: Chart title x_label: Label for x-axis (optional) y_label: Label for y-axis (optional) save_path: File path to save the chart (optional) Returns: A dictionary containing the chart information or an error message",
          "parameters": []
        },
        {
          "name": "generate_bar_chart",
          "description": "Generate a bar chart from data. Args: session_id: The unique identifier for the sandbox session data: List of data points (dictionaries) to plot category_key: The key for category labels in the data value_keys: List of keys for values to plot as grouped bars title: Chart title x_label: Label for x-axis (optional) y_label: Label for y-axis (optional) save_path: File path to save the chart (optional) orientation: Bar orientation: \"vertical\" or \"horizontal\" (default: \"vertical\") Returns: A dictionary containing the chart information or an error message",
          "parameters": []
        },
        {
          "name": "generate_scatter_plot",
          "description": "Generate a scatter plot from data. Args: session_id: The unique identifier for the sandbox session data: List of data points (dictionaries) to plot x_key: The key for x-axis values in the data y_key: The key for y-axis values in the data color_key: Optional key to use for point colors size_key: Optional key to use for point sizes title: Chart title x_label: Label for x-axis (optional) y_label: Label for y-axis (optional) save_path: File path to save the chart (optional) Returns: A dictionary containing the chart information or an error message",
          "parameters": []
        },
        {
          "name": "generate_interactive_chart",
          "description": "Generate an interactive chart using Plotly and return it as HTML. Args: session_id: The unique identifier for the sandbox session chart_type: Type of chart to generate: \"line\", \"bar\", \"scatter\", etc. data: List of data points (dictionaries) to plot x_key: The key for x-axis values in the data y_keys: List of keys for y-axis values to plot title: Chart title save_path: Path to save the HTML file (optional) Returns: A dictionary containing the chart HTML or an error message",
          "parameters": []
        },
        {
          "name": "generate_heatmap",
          "description": "Generate a heatmap visualization. Args: session_id: The unique identifier for the sandbox session data: 2D list of values to display in the heatmap row_labels: Optional list of row labels col_labels: Optional list of column labels title: Chart title save_path: File path to save the chart (optional) cmap: Colormap name (default: \"viridis\") Returns: A dictionary containing the chart information or an error message",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@chrishayuk/mcp-code-sandbox/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "e2bApiKey",
          "required": true,
          "description": "E2B API key for the default E2B interpreter"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@chrishayuk/mcp-code-sandbox/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1684.@chrishayuk_mcp-code-sandbox_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1521
  }
}