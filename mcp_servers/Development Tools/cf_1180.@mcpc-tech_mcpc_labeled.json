{
  "labels": {
    "analysis": "The MCP Server primarily functions as a code execution environment for JavaScript/TypeScript and Python code snippets. It provides a secure sandboxed environment to run code, supporting dynamic package imports while ensuring strict permission controls to prevent malicious activity. The server enables users or AI agents to execute, verify, and test code logic in a safe isolation, catering to development, testing, and automation needs.",
    "reasoning": "The primary \"Development Tools\" label is chosen because the server's core functionality revolves around executing and testing code snippets, which is a fundamental use case for developers. The \"API Integration\" and \"Security & Authentication\" secondary labels are included because of the ability to import external packages (API-like functionality) and the strict sandboxing mechanism for security. No custom label is necessary as the predefined labels adequately cover the functionality.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "API Integration",
      "Security & Authentication"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1179,
    "server_name": "Code Runner",
    "rank_by_usage": 1180,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@mcpc-tech_mcpc.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mcpc-tech/mcpc/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1179,
      "name": "Code Runner",
      "author": "@mcpc-tech/mcpc",
      "overview": "Run JavaScript, TypeScript, and Python code snippets securely in a sandboxed environment with support for dynamic package imports. Enable AI agents and workflows to execute and verify code logic safely and conveniently. Benefit from multi-language support and strict permission controls to prevent malicious code execution.\n\nCore Capabilities:\n\nImport Any Package: Dynamically import and use external libraries in your code (specific support depends on the chosen runtime).\nSecure Sandbox: Code runs in an isolated environment with strict limitations on file system, network, and environment variable access, preventing malicious code from affecting the host environment.\nMulti-language Support: Execute JavaScript/TypeScript and Python code snippets with ease!",
      "repository_url": "https://github.com/mcpc-tech/mcpc",
      "homepage": "https://smithery.ai/server/@mcpc-tech/mcpc",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mcpc-tech_mcpc.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "python-code-runner",
          "description": "Execute a Python snippet using pyodide and return the combined stdout/stderr(To see the results, make sure to write to stdout/stderr ). \nSend only valid Python code compatible with pyodide runtime.\n# Packages\nYou can directly import pure Python packages with wheels \nas well as packages from PyPI, the JsDelivr CDN or from other URLs.",
          "parameters": []
        },
        {
          "name": "javascript-code-runner",
          "description": "Execute a JavaScript/TypeScript snippet using Deno runtime and return the combined stdout/stderr(To see the results, make sure to write to stdout/stderr ). Send only valid JavaScript/TypeScript code compatible with Deno runtime (prefer ESM syntax). ** Runs on server-side, not browser.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mcpc-tech/mcpc/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mcpc-tech/mcpc/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1180.@mcpc-tech_mcpc_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1147
  }
}