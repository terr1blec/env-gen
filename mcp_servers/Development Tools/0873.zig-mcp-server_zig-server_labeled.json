{
  "labels": {
    "analysis": "The Zig Server is primarily focused on enhancing AI capabilities related to Zig programming language. Its tools are designed to assist with code optimization, performance estimation, code generation, and providing coding best practices. This positions the server as a specialized assistant for developers working with Zig, offering features that improve coding efficiency and quality.",
    "reasoning": "The primary label of \"Development Tools\" is chosen because the server's core functionality revolves around code analysis, optimization, and generation - all essential aspects of the software development lifecycle. The secondary label of \"Code Analysis\" is selected because it explicitly mentions tools for estimating computational complexity and providing improvement recommendations. While the server is specialized in Zig language, it doesn't necessitate a unique custom label as its functionality aligns with broader development tool categories.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Memory Management",
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 872,
    "server_name": "Zig Server",
    "rank_by_usage": 873,
    "usage_count": "5",
    "original_file": "../crawler/smithery/zig-mcp-server_zig-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/zig-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "optimize_code",
          "description": "Optimize Zig code for better performance",
          "input_schema": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Zig code to optimize"
              },
              "optimizationLevel": {
                "type": "string",
                "enum": [
                  "Debug",
                  "ReleaseSafe",
                  "ReleaseFast",
                  "ReleaseSmall"
                ],
                "description": "Optimization level to target"
              }
            },
            "required": [
              "code"
            ]
          },
          "annotations": null
        },
        {
          "name": "estimate_compute_units",
          "description": "Estimate computational complexity and resource usage",
          "input_schema": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Zig code to analyze"
              }
            },
            "required": [
              "code"
            ]
          },
          "annotations": null
        },
        {
          "name": "generate_code",
          "description": "Generate Zig code from natural language description",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Natural language description of desired code"
              },
              "context": {
                "type": "string",
                "description": "Additional context or requirements"
              }
            },
            "required": [
              "prompt"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_recommendations",
          "description": "Get code improvement recommendations and best practices",
          "input_schema": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Zig code to analyze"
              },
              "prompt": {
                "type": "string",
                "description": "Natural language query for specific recommendations"
              }
            },
            "required": [
              "code"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "optimize_code",
        "estimate_compute_units",
        "generate_code",
        "get_recommendations"
      ]
    },
    "server_info_crawled": {
      "id": 872,
      "name": "Zig Server",
      "author": "zig-mcp-server",
      "overview": "Enhance AI capabilities with Zig language tooling, code analysis, and documentation.",
      "repository_url": "https://github.com/openSVM/zig-mcp-server",
      "homepage": "https://smithery.ai/server/zig-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "5",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/zig-mcp-server_zig-server.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "optimize_code",
          "description": "Optimize Zig code for better performance",
          "input_schema": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Zig code to optimize"
              },
              "optimizationLevel": {
                "type": "string",
                "enum": [
                  "Debug",
                  "ReleaseSafe",
                  "ReleaseFast",
                  "ReleaseSmall"
                ],
                "description": "Optimization level to target"
              }
            },
            "required": [
              "code"
            ]
          },
          "annotations": null
        },
        {
          "name": "estimate_compute_units",
          "description": "Estimate computational complexity and resource usage",
          "input_schema": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Zig code to analyze"
              }
            },
            "required": [
              "code"
            ]
          },
          "annotations": null
        },
        {
          "name": "generate_code",
          "description": "Generate Zig code from natural language description",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Natural language description of desired code"
              },
              "context": {
                "type": "string",
                "description": "Additional context or requirements"
              }
            },
            "required": [
              "prompt"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_recommendations",
          "description": "Get code improvement recommendations and best practices",
          "input_schema": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Zig code to analyze"
              },
              "prompt": {
                "type": "string",
                "description": "Natural language query for specific recommendations"
              }
            },
            "required": [
              "code"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/zig-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/zig-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0873.zig-mcp-server_zig-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 854
  }
}