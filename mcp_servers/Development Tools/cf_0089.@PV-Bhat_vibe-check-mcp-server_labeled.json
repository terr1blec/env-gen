{
  "labels": {
    "analysis": "The MCP Server \"Vibe Check\" is designed to prevent errors in AI workflows by implementing strategic interrupts that prompt reconsideration. It uses tools to simplify plans, distill complexity, and learn from common errors. The core functionality revolves around enhancing metacognition and preventing overconfident mistakes in AI systems.",
    "reasoning": "The primary label is chosen because the server's main purpose is to stop and reassess AI workflows, which aligns with preventing errors in complex decision-making. The secondary labels reflect the server's role in learning from patterns and simplifying processes. The custom label is added to highlight the unique metaphorical aspect of the server's name and function.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "AI/ML Tools",
      "Memory Management"
    ],
    "custom_label": "Workflow Sanity Check",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 88,
    "server_name": "Vibe Check",
    "rank_by_usage": 89,
    "usage_count": "886",
    "original_file": "../crawler/smithery/@PV-Bhat_vibe-check-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@PV-Bhat/vibe-check-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 88,
      "name": "Vibe Check",
      "author": "@PV-Bhat/vibe-check-mcp-server",
      "overview": "The definitive Vibe Coder's sanity check MCP server: Prevent cascading errors in AI workflows by implementing strategic pattern interrupts. Uses tool call \"Vibe Check\" with LearnLM 1.5 Pro (Gemini API), fine-tuned for pedagogy and metacognition to enhance complex workflow strategy, and prevents tunnel vision errors.\n\nTLDR; Implement an agent fine-tuned to stop your agent and make it reconsider before it confidently implements something wrong.",
      "repository_url": "https://github.com/PV-Bhat/vibe-check-mcp-server",
      "homepage": "https://smithery.ai/server/@PV-Bhat/vibe-check-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "886",
      "success_rate": "98.53%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@PV-Bhat_vibe-check-mcp-server.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "vibe_check",
          "description": "Deploy Server @PV-Bhat/vibe-check-mcp-server Try in Playground",
          "parameters": [
            {
              "name": "vibe_check",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "vibe_distill",
          "description": "Plan simplification tool that reduces complexity and extracts essential elements to prevent over-engineering",
          "parameters": [
            {
              "name": "vibe_distill",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "vibe_learn",
          "description": "Pattern recognition system that tracks common errors and solutions to prevent recurring issues",
          "parameters": [
            {
              "name": "mistake",
              "required": true,
              "type": "string"
            },
            {
              "name": "category",
              "required": true,
              "type": "string"
            },
            {
              "name": "solution",
              "required": true,
              "type": "string"
            },
            {
              "name": "sessionId",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@PV-Bhat/vibe-check-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "geminiApiKey",
          "required": true,
          "description": "API key for the Gemini API integration if required."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@PV-Bhat/vibe-check-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0089.@PV-Bhat_vibe-check-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 87
  }
}