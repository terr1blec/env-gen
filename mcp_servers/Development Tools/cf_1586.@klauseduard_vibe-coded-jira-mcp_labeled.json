{
  "labels": {
    "analysis": "The MCP Server described is a JIRA Integration Server designed to streamline issue management by connecting directly with JIRA from within a Cursor IDE. It provides tools to fetch, search, create, update, and manage JIRA issues using JQL (JIRA Query Language), along with features for commenting, cloning issues, logging work time, and retrieving project information. The server is clearly focused on enhancing developer productivity by bringing JIRA operations into the development environment, reducing context switching and allowing for more efficient issue tracking and management. The available tools cover a comprehensive range of JIRA interactions, making this a powerful tool for teams using JIRA for project management.",
    "reasoning": "The primary label \"Development Tools\" is chosen because the server integrates directly with the development environment (Cursor IDE) and provides tools aimed at developers to manage JIRA issues without leaving their coding environment. This directly aligns with the category of \"Development Tools,\" which includes debugging, version control, and other developer-focused utilities. Given its close integration with JIRA, a project management tool, the secondary label \"Database Operations\" is appropriate because JIRA can be seen as a database of issues, and the tools manage data within this system. The secondary label \"Daily Productivity\" is also chosen because the server's primary goal is to enhance productivity by reducing friction in issue management.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Database Operations",
      "Daily Productivity"
    ],
    "custom_label": "JIRA Integration Server",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1585,
    "server_name": "JIRA Integration Server",
    "rank_by_usage": 1586,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@klauseduard_vibe-coded-jira-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@klauseduard/vibe-coded-jira-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1585,
      "name": "JIRA Integration Server",
      "author": "@klauseduard/vibe-coded-jira-mcp",
      "overview": "Integrate JIRA with your Cursor IDE to streamline issue management. Fetch, search, and filter JIRA issues effortlessly using JQL, while enjoying detailed error handling and logging. Enhance your productivity by customizing your view of JIRA data directly within your development environment.",
      "repository_url": "https://github.com/klauseduard/vibe-coded-jira-mcp",
      "homepage": "https://smithery.ai/server/@klauseduard/vibe-coded-jira-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@klauseduard_vibe-coded-jira-mcp.json",
      "tools_count": 9,
      "tools": [
        {
          "name": "get_issue",
          "description": "Deploy Server JIRA Integration Server Claim Server @klauseduard/vibe-coded-jira-mcp Try in Playground",
          "parameters": [
            {
              "name": "get_issue",
              "required": false,
              "type": "string"
            },
            {
              "name": "arguments",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_issues",
          "description": "Search for JIRA issues using JQL (JIRA Query Language). Required parameters: - jql: JIRA Query Language string (e.g., \"project = EHEALTHDEV AND assignee = currentUser()\") Optional parameters: - max_results: Number of results to return (default: 50, max: 100) - start_at: Pagination offset (default: 0) - fields: List of fields to return (default: [\"key\", \"summary\", \"status\", \"assignee\", \"issuetype\", \"priority\", \"created\", \"updated\"]) Example JQL queries: - \"project = EHEALTHDEV AND status = 'In Progress'\" - \"assignee = currentUser() ORDER BY created DESC\" - \"priority = Major AND created >= startOfDay(-7)\"",
          "parameters": []
        },
        {
          "name": "add_comment",
          "description": "Add a comment to a JIRA issue. Required parameters: - issue_key: The JIRA issue key (e.g., PROJ-123) - comment: Comment text to add to the issue Optional parameters: - visibility: Visibility settings for the comment (e.g., {'type': 'role', 'value': 'Administrators'}) Example: \"issue_key\": \"PROJ-123\", \"comment\": \"This is a comment added via the MCP server\", \"visibility\": { \"type\": \"group\", \"value\": \"jira-developers\"",
          "parameters": []
        },
        {
          "name": "create_issue",
          "description": "Create a new JIRA issue. Required parameters: - project_key: The project key (e.g. PROJ) - summary: Issue summary/title Optional parameters: - description: Issue description - issue_type: Issue type (default: \"Task\") - priority: Issue priority - assignee: Username of the assignee - labels: List of labels - custom_fields: Custom field values Example: \"project_key\": \"PROJ\", \"summary\": \"Implement new feature\", \"description\": \"Add the ability to create issues\", \"issue_type\": \"Task\", \"priority\": \"High\", \"assignee\": \"john.doe\", \"labels\": [\"feature\", \"v0.4\"]",
          "parameters": []
        },
        {
          "name": "update_issue",
          "description": "Update an existing JIRA issue. Required parameters: - issue_key: The JIRA issue key (e.g. PROJ-123) Optional parameters: - summary: New issue summary/title - description: New issue description - priority: New issue priority - assignee: New assignee username - labels: New list of labels - comment: Comment to add to the issue - custom_fields: Custom field values to update Example: \"issue_key\": \"PROJ-123\", \"summary\": \"Updated feature implementation\", \"description\": \"Adding more capabilities to issue creation\", \"priority\": \"High\", \"assignee\": \"jane.doe\", \"labels\": [\"feature\", \"v0.4\", \"in-progress\"], \"comment\": \"Updated the implementation plan\"",
          "parameters": []
        },
        {
          "name": "get_projects",
          "description": "Get list of JIRA projects. Optional parameters: - include_archived: Whether to include archived projects (default: False) - max_results: Maximum number of results to return (default: 50, max: 100) - start_at: Index of the first result to return (default: 0) Returns project information including: - id: Project ID - key: Project key - name: Project name - description: Project description - lead: Project lead's display name - url: Project URL - style: Project style - archived: Whether the project is archived - category: Project category name - simplified: Whether the project is simplified - project_type_key: Project type key",
          "parameters": []
        },
        {
          "name": "clone_issue",
          "description": "Clone an existing JIRA issue. Required parameters: - source_issue_key: The source JIRA issue key to clone from (e.g., PROJ-123) Optional parameters: - project_key: The target project key if different from source - summary: New summary (defaults to 'Clone of [ORIGINAL-SUMMARY]') - description: New description (defaults to original description) - issue_type: Issue type (defaults to original issue type) - priority: Issue priority (defaults to original priority) - assignee: Username of the assignee (defaults to original assignee) - labels: List of labels (defaults to original labels) - custom_fields: Custom field values to override - copy_attachments: Whether to copy attachments from the source issue (default: false) - add_link_to_source: Whether to add a link to the source issue (default: true) Example: \"source_issue_key\": \"PROJ-123\", \"project_key\": \"NEWPROJ\", \"summary\": \"Cloned issue with modifications\", \"assignee\": \"jane.doe\", \"copy_attachments\": true, \"custom_fields\": { \"customfield_10001\": \"High\", \"customfield_10002\": \"Backend\"",
          "parameters": []
        },
        {
          "name": "log_work",
          "description": "Log work time on a JIRA issue. Required parameters: - issue_key: The JIRA issue key (e.g., PROJ-123) - time_spent: Time spent in JIRA format (e.g., '2h 30m', '1d', '30m') Optional parameters: - comment: Comment for the work log - started_at: When the work was started (defaults to now) Example: \"issue_key\": \"EHEALTHDEV-123\", \"time_spent\": \"2h 30m\", \"comment\": \"Implemented feature X\", \"started_at\": \"2024-03-08T10:00:00\"",
          "parameters": []
        },
        {
          "name": "get_comments",
          "description": "Get comments for a JIRA issue. Required parameters: - issue_key: The JIRA issue key (e.g., PROJ-123) Optional parameters: - max_results: Maximum number of comments to return (default: 50, max: 100) - start_at: Index of the first comment to return (default: 0) Example: \"issue_key\": \"PROJ-123\", \"max_results\": 20, \"start_at\": 0 Returns: - issue_key: The issue key - total: Total number of comments for the issue - start_at: Index of the first comment returned - max_results: Maximum number of comments returned - comments: Array of comment objects with: - id: Comment ID - author: Display name of the comment author - body: Text content of the comment - created: Creation timestamp - updated: Last update timestamp (if available) - visibility: Visibility restrictions (if any)",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@klauseduard/vibe-coded-jira-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "jiraApiToken",
          "required": true,
          "description": "Your JIRA API token for authentication"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@klauseduard/vibe-coded-jira-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1586.@klauseduard_vibe-coded-jira-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1447
  }
}