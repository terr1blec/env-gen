{
  "labels": {
    "analysis": "The MCP Server \"Granola MCP Tool\" is designed to create and integrate custom MCP tools that extend the capabilities of an AI assistant within Cursor. It allows users to define tool inputs/outputs, implement functionality, and deploy these tools to enhance tasks like project information retrieval. The primary available tool, \"getGranolaTranscript,\" suggests capabilities related to accessing or processing transcripts. The server aims to streamline AI workflows by enabling tailored commands directly from the development environment.",
    "reasoning": "The primary label \"Development Tools\" is chosen because the server is primarily focused on extending AI capabilities within a development environment, which aligns with tools for code analysis, debugging, and version control. The secondary label \"Memory Management\" is included because the \"getGranolaTranscript\" tool suggests handling and retrieving transcript data, which relates to managing and storing information. The custom label \"AI Workflow Extension\" is added to emphasize the server's unique role in enhancing AI assistant functionalities within development workflows.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Memory Management"
    ],
    "custom_label": "AI Workflow Extension",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 760,
    "server_name": "Granola MCP Tool",
    "rank_by_usage": 761,
    "usage_count": "8",
    "original_file": "../crawler/smithery/@MinimumDaan_granola-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@MinimumDaan/granola-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 760,
      "name": "Granola MCP Tool",
      "author": "@MinimumDaan/granola-mcp",
      "overview": "Create and integrate custom MCP tools to extend your AI assistant's capabilities within Cursor. Easily define tool inputs and outputs, implement functionality, and deploy your tools to enhance project information retrieval and other tasks. Streamline your AI workflows by adding tailored commands accessible directly from your development environment.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@MinimumDaan/granola-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "8",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@MinimumDaan_granola-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "getGranolaTranscript",
          "description": "Deploy Server Granola MCP Tool @MinimumDaan/granola-mcp Try in Playground getGranolaTranscript",
          "parameters": [
            {
              "name": "getGranolaTranscript",
              "required": false,
              "type": "string"
            },
            {
              "name": "documentId",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@MinimumDaan/granola-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "granolaApiKey",
          "required": true,
          "description": "API key for Granola service"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@MinimumDaan/granola-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0761.@MinimumDaan_granola-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 743
  }
}