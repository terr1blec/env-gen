{
  "labels": {
    "analysis": "The BrasilAPI MCP Server provides access to a variety of Brazilian-specific data through a unified API interface. It offers tools to query information on postal codes (CEP), ISBNs, company information (CNPJ), banks, and other financial or geophysical data. The primary purpose is to serve as a centralized data source for applications needing reliable and updated Brazilian information, particularly useful for AI agents requiring localized data.",
    "reasoning": "The primary label \"Data Analysis & Processing\" was chosen because the server focuses on gathering, structuring, and providing access to structured data from various Brazilian sources. This aligns well with the predefined category as the tools process and deliver organized information for analysis. \"Financial Services\" and \"Travel & Maps\" (due to postal code functionality) were selected as secondary labels since the tools frequently handle financial (banks, taxes) and location-based (postal codes) data. A custom label was not necessary as the predefined categories sufficiently cover the functionality.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "Financial Services",
      "Travel & Maps"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1675,
    "server_name": "BrasilAPI MCP Server",
    "rank_by_usage": 1676,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@mauricio-cantu_brasil-api-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mauricio-cantu/brasil-api-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_postal_code_v1",
          "description": "Get a location data given a CEP (postal code).",
          "input_schema": {
            "type": "object",
            "properties": {
              "cep": {
                "type": "string",
                "description": "The CEP to query"
              }
            },
            "required": [
              "cep"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_postal_code_v2",
          "description": "Version 2 of get a location data given a CEP (postal code).",
          "input_schema": {
            "type": "object",
            "properties": {
              "cep": {
                "type": "string",
                "description": "The CEP to query"
              }
            },
            "required": [
              "cep"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_isbn",
          "description": "Get information about a book given an ISBN.",
          "input_schema": {
            "type": "object",
            "properties": {
              "ISBN": {
                "type": "string",
                "description": "The book's ISBN to query"
              }
            },
            "required": [
              "ISBN"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_cnpj",
          "description": "Get information about a company given a CNPJ.",
          "input_schema": {
            "type": "object",
            "properties": {
              "CNPJ": {
                "type": "string",
                "description": "The CNPJ to query"
              }
            },
            "required": [
              "CNPJ"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_all_banks",
          "description": "Get information of all banks from Brazil.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_bank_by_code",
          "description": "Get information from a specific bank given its code. The code from each bank is returned by get_all_banks tool.",
          "input_schema": {
            "type": "object",
            "properties": {
              "code": {
                "type": "number"
              }
            },
            "required": [
              "code"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 6,
      "tool_names": [
        "get_postal_code_v1",
        "get_postal_code_v2",
        "get_isbn",
        "get_cnpj",
        "get_all_banks",
        "get_bank_by_code"
      ]
    },
    "server_info_crawled": {
      "id": 1675,
      "name": "BrasilAPI MCP Server",
      "author": "@mauricio-cantu/brasil-api-mcp-server",
      "overview": "Query a variety of data from Brasil resources seamlessly. Access information on postal codes, area codes, banks, holidays, taxes, and more through a unified interface. Enhance your AI agents and applications with rich and updated data from BrasilAPI effortlessly.",
      "repository_url": "https://github.com/mauricio-cantu/brasil-api-mcp-server",
      "homepage": "https://smithery.ai/server/@mauricio-cantu/brasil-api-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mauricio-cantu_brasil-api-mcp-server.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "get_postal_code_v1",
          "description": "Get a location data given a CEP (postal code).",
          "input_schema": {
            "type": "object",
            "properties": {
              "cep": {
                "type": "string",
                "description": "The CEP to query"
              }
            },
            "required": [
              "cep"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_postal_code_v2",
          "description": "Version 2 of get a location data given a CEP (postal code).",
          "input_schema": {
            "type": "object",
            "properties": {
              "cep": {
                "type": "string",
                "description": "The CEP to query"
              }
            },
            "required": [
              "cep"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_isbn",
          "description": "Get information about a book given an ISBN.",
          "input_schema": {
            "type": "object",
            "properties": {
              "ISBN": {
                "type": "string",
                "description": "The book's ISBN to query"
              }
            },
            "required": [
              "ISBN"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_cnpj",
          "description": "Get information about a company given a CNPJ.",
          "input_schema": {
            "type": "object",
            "properties": {
              "CNPJ": {
                "type": "string",
                "description": "The CNPJ to query"
              }
            },
            "required": [
              "CNPJ"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_all_banks",
          "description": "Get information of all banks from Brazil.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_bank_by_code",
          "description": "Get information from a specific bank given its code. The code from each bank is returned by get_all_banks tool.",
          "input_schema": {
            "type": "object",
            "properties": {
              "code": {
                "type": "number"
              }
            },
            "required": [
              "code"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mauricio-cantu/brasil-api-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mauricio-cantu/brasil-api-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1676.@mauricio-cantu_brasil-api-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1517
  }
}