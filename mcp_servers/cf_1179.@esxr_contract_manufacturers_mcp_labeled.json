{
  "labels": {
    "analysis": "The MCP Server acts as a centralized catalog for contract manufacturers in the food and beverage sector. It allows users to search, filter, and retrieve manufacturer details using AI-powered matching, and provides dynamic data access via RESTful APIs. The core functionality revolves around facilitating business-to-business (B2B) connections between companies needing production services and available manufacturers.",
    "reasoning": "The primary focus on facilitating manufacturer discovery and integration with business workflows aligns with the \"Business Services\" category, even though it's not predefined. \"Database Operations\" is a secondary fit due to the structured querying of manufacturer data, and \"API Integration\" is relevant given its RESTful endpoint design.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Database Operations",
      "API Integration"
    ],
    "custom_label": "Food & Beverage Manufacturing",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1178,
    "server_name": "Contract Manufacturers Catalog Server",
    "rank_by_usage": 1179,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@esxr_contract_manufacturers_mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@esxr/contract_manufacturers_mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1178,
      "name": "Contract Manufacturers Catalog Server",
      "author": "@esxr/contract_manufacturers_mcp",
      "overview": "Provide access to a comprehensive catalog of contract manufacturers for food and beverage products. Search, filter, and find manufacturers by category, requirements, or product descriptions using AI-powered matching. Integrate easily with RESTful endpoints and reload data dynamically without server restarts.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@esxr/contract_manufacturers_mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@esxr_contract_manufacturers_mcp.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "list_all_manufacturers",
          "description": "Deploy Server Contract Manufacturers Catalog Server @esxr/contract_manufacturers_mcp Try in Playground list_all_manufacturers",
          "parameters": []
        },
        {
          "name": "get_manufacturer_requirements",
          "description": "Get the requirements for a specific manufacturer.\n\n    Args:\n        company_name: The name of the company\n\n    Returns:\n        List of requirements or None if manufacturer not found",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@esxr/contract_manufacturers_mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "OPENAI_API_KEY",
          "required": true,
          "description": "The secret key for authenticating with the OpenAI API."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@esxr/contract_manufacturers_mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1179.@esxr_contract_manufacturers_mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1146
  }
}