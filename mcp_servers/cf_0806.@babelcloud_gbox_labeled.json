{
  "labels": {
    "analysis": "The MCP Server \"gbox\" provides a self-hostable sandbox environment specifically designed for AI agents to execute various tasks in an isolated and secure manner. Key functionalities include file management (reading, writing), executing Python and Bash commands, web browsing, and managing persistent data. The server emphasizes secure, sandboxed operations and integration with AI clients like Claude Desktop and Cursor, making it a versatile tool for AI agent operations.",
    "reasoning": "The primary label \"Operating System\" is chosen because the server's core functionality revolves around executing system-level commands (Python, Bash) and managing files in a sandboxed environment. The secondary labels \"Memory Management\" and \"Development Tools\" are appropriate due to the server's file persistence capabilities and execution of code. The custom label \"AI Agent Execution\" highlights the unique focus on providing a secure sandbox for AI agents, which differentiates it from general-purpose servers.",
    "primary_label": "Operating System",
    "secondary_labels": [
      "Memory Management",
      "Development Tools"
    ],
    "custom_label": "AI Agent Execution",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 805,
    "server_name": "gbox",
    "rank_by_usage": 806,
    "usage_count": "7",
    "original_file": "../crawler/smithery/@babelcloud_gbox.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@babelcloud/gbox/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "Connection timeout (20 seconds)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 805,
      "name": "gbox",
      "author": "@babelcloud/gbox",
      "overview": "Provide a self-hostable sandbox environment for AI agents to execute commands, manage files, browse the web, and operate mobile devices. Enable seamless integration with AI clients like Claude Desktop and Cursor through a standard MCP server interface. Enhance agent capabilities with secure, flexible, and extensible sandboxed operations.",
      "repository_url": "https://github.com/babelcloud/gbox",
      "homepage": "https://smithery.ai/server/@babelcloud/gbox",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "7",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@babelcloud_gbox.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "list-boxes",
          "description": "Deploy Server Claim Server @babelcloud/gbox Try in Playground",
          "parameters": [
            {
              "name": "List",
              "required": false,
              "type": "string"
            },
            {
              "name": "all",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "read-file",
          "description": "Read a file from the API server. If the file is a small text file (less than 1MB), the content will be returned directly. If the file is a small image or audio file (less than 5MB), the content will be returned as base64 encoded data. For large files or unsupported types, a resource URL will be returned with file metadata. The path must start with / and requires a boxId to specify which box to read from.",
          "parameters": []
        },
        {
          "name": "write-file",
          "description": "Write content to a file in the sandbox. If the file doesn't exist, it will be created. If it exists, it will be overwritten. The path must start with / and requires a boxId to specify which box to write to.",
          "parameters": []
        },
        {
          "name": "run-python",
          "description": "Run Python code in a sandbox. The Python image comes with uv package manager pre-installed and pip is not available. The following Python packages are pre-installed: numpy, scipy, pandas, scikit-learn, requests, beautifulsoup4, pillow, matplotlib. To install additional Python packages, use run-bash tool to execute 'uv pip install --system' as virtual environments are not yet supported. The default working directory is /var/gbox. To persist files after sandbox reclamation, save them to /var/gbox/share directory. Files in this directory will be retained for a period of time after the sandbox is reclaimed. To read files generated by your program, use the read-file tool with the boxId returned from this tool.",
          "parameters": []
        },
        {
          "name": "run-bash",
          "description": "Run Bash commands in a sandbox. To persist files after sandbox reclamation, save them to /var/gbox/share directory. Files in this directory will be retained for a period of time after the sandbox is reclaimed. The default working directory is /var/gbox. To read files generated by your program, use the read-file tool with the boxId returned from this tool.",
          "parameters": []
        },
        {
          "name": "view-url-as",
          "description": "Fetch and view content from a URL as HTML, Markdown, or screenshot. Optionally specify a boxId to reuse a specific browser session.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@babelcloud/gbox/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@babelcloud/gbox/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0806.@babelcloud_gbox_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 787
  }
}