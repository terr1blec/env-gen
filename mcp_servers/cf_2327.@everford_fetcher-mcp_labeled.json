{
  "labels": {
    "analysis": "The MCP Server \"Fetcher\" is primarily designed for retrieving web page content through automated web browsing and extraction. It utilizes Playwright, a headless browser, to navigate and extract data efficiently. The available tools, such as 'fetch_url' and 'fetch_urls', indicate that the server specializes in web scraping and the automated retrieval of web page content, making it highly suitable for tasks that require gathering information from websites quickly and with minimal setup.",
    "reasoning": "The primary functionality of the server aligns with web scraping and browser automation, making 'Browser Automation' the most fitting primary label. Since web scraping is a common application of browser automation and the server is clearly focused on retrieving web data, this label best represents its core purpose. The 'Web Search & Research' secondary label is relevant because the server facilitates gathering information from web pages, which is essential for research purposes. No custom label is needed as the predefined labels adequately capture the server's functionality.",
    "primary_label": "Browser Automation",
    "secondary_labels": [
      "Web Search & Research"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2326,
    "server_name": "Fetcher",
    "rank_by_usage": 2327,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@everford_fetcher-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@everford/fetcher-mcp/mcp?config=eyJkZWJ1ZyI6IGZhbHNlfQ==&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2326,
      "name": "Fetcher",
      "author": "@everford/fetcher-mcp",
      "overview": "Effortlessly retrieve web page content using AI-powered capabilities. Leverage the Playwright headless browser to navigate and extract information quickly and efficiently. Simplify your web scraping tasks with easy setup and configuration.",
      "repository_url": "https://github.com/everford/fetcher-mcp",
      "homepage": "https://smithery.ai/server/@everford/fetcher-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@everford_fetcher-mcp.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "fetch_url",
          "description": "Deploy Server Claim Server @everford/fetcher-mcp Try in Playground",
          "parameters": []
        },
        {
          "name": "fetch_urls",
          "description": "Retrieve web page content from multiple specified URLs",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"debug\": false\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@everford/fetcher-mcp/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"debug\": false\n}",
      "python_sdk_url": "https://server.smithery.ai/@everford/fetcher-mcp/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "cf_2327.@everford_fetcher-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2002
  }
}