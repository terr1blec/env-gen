{
  "labels": {
    "analysis": "The Lithic MCP Server is designed to interact with Lithic's banking and card services through a TypeScript-based server. It provides tools to deploy and manage server resources related to Lithic's API, focusing on seamless integration with financial services. The available tools (\"get_resource\" and \"list_resources\") suggest functionality centered around resource management and API interaction, specifically in the context of financial services.",
    "reasoning": "The primary label is \"Financial Services\" because the server's core functionality revolves around accessing and managing banking and card services. \"API Integration\" is a relevant secondary label since the server interacts with Lithic's API endpoints. No custom label is needed as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Financial Services",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1475,
    "server_name": "Lithic MCP Server",
    "rank_by_usage": 1476,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@mohit-novo_mcp-lithic.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mohit-novo/mcp-lithic/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1475,
      "name": "Lithic MCP Server",
      "author": "@mohit-novo/mcp-lithic",
      "overview": "Access Lithic banking and card services seamlessly. Utilize a TypeScript-based server to interact with Lithic's API endpoints in a type-safe manner. Get started quickly with Docker support for easy deployment.",
      "repository_url": "https://github.com/mohit-novo/mcp-lithic",
      "homepage": "https://smithery.ai/server/@mohit-novo/mcp-lithic",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mohit-novo_mcp-lithic.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "get_resource",
          "description": "Deploy Server Lithic MCP Server Claim Server @mohit-novo/mcp-lithic Try in Playground get_resource",
          "parameters": [
            {
              "name": "resourceId",
              "required": true,
              "type": "string"
            },
            {
              "name": "resourceType",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_resources",
          "description": "List resources of a specific type",
          "parameters": [
            {
              "name": "list_resources",
              "required": false,
              "type": "string"
            },
            {
              "name": "resourceType",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mohit-novo/mcp-lithic/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "lithicApiKey",
          "required": true,
          "description": "Your Lithic API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mohit-novo/mcp-lithic/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1476.@mohit-novo_mcp-lithic_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1365
  }
}