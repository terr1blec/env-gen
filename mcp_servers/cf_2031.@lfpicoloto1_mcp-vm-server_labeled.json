{
  "labels": {
    "analysis": "The MCP VM Server provides a virtual machine environment that allows for code execution and interaction with virtualized resources through the Model Context Protocol. It enables secure, sandboxed execution of tools and integration with LLMs, enhancing agent capabilities by offering a programmable and isolated environment. The available tools primarily focus on VM management, including listing machine types, images, VMs, creating new VMs, and retrieving details about existing VMs.",
    "reasoning": "The primary functionality of the server revolves around creating, managing, and interacting with virtual machines. This aligns most closely with the **Operating System** category due to its focus on system-level operations like process management and virtual machine deployment. The additional tools related to VM creation and management make **Cloud Services** a relevant secondary label, as it deals with scalable, virtualized infrastructure. No custom labels are necessary as the predefined labels adequately cover the server's core functionality.",
    "primary_label": "Operating System",
    "secondary_labels": [
      "Cloud Services"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2030,
    "server_name": "MCP VM Server",
    "rank_by_usage": 2031,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@lfpicoloto1_mcp-vm-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@lfpicoloto1/mcp-vm-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2030,
      "name": "MCP VM Server",
      "author": "@lfpicoloto1/mcp-vm-server",
      "overview": "Provide a virtual machine environment accessible via the Model Context Protocol to enable execution of code and interaction with virtualized resources. Facilitate integration of LLMs with a sandboxed VM for running tools and accessing resources securely. Enhance agent capabilities by offering a programmable and isolated execution context.",
      "repository_url": "https://github.com/lfpicoloto1/mcp-vm-server",
      "homepage": "https://smithery.ai/server/@lfpicoloto1/mcp-vm-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@lfpicoloto1_mcp-vm-server.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "list_machine_types",
          "description": "Deploy Server MCP VM Server @lfpicoloto1/mcp-vm-server Try in Playground list_machine_types",
          "parameters": []
        },
        {
          "name": "list_images",
          "description": "List all available images. Returns: Dict containing the list of images and pagination info",
          "parameters": []
        },
        {
          "name": "list_vms",
          "description": "List all virtual machines in the current tenant. Returns: Dict containing the list of VMs and pagination info",
          "parameters": []
        },
        {
          "name": "get_vm",
          "description": "Get details of a specific virtual machine. Args: vm_id: ID of the virtual machine to get details for Returns: Dict containing the VM details",
          "parameters": []
        },
        {
          "name": "create_vm",
          "description": "Create a new virtual machine. Args: name: Name of the VM machine_type_name: Name of the machine type ssh_key_name: Name of the SSH key to use image_name: Name of the image to use availability_zone: Optional availability zone vpc_id: Optional VPC ID user_data: Optional user data script (base64 encoded) Returns: Dict containing the VM creation response",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@lfpicoloto1/mcp-vm-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "mgcApiKey",
          "required": true,
          "description": "API key for accessing the VM API"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@lfpicoloto1/mcp-vm-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2031.@lfpicoloto1_mcp-vm-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1771
  }
}