{
  "labels": {
    "analysis": "The MCP Server is designed to securely execute Python code locally without requiring Docker or virtual machines. Its primary functionality is to provide a sandboxed environment for running Python scripts generated by LLMs, enhancing the LLM experience by allowing safe code execution. The tool restricts certain imports for security and requires the output to be stored in a specified variable. It is particularly useful for calculations and data manipulations.",
    "reasoning": "The primary label \"Development Tools\" is chosen because the server's core functionality revolves around executing Python code, which is a fundamental aspect of software development. The secondary label \"Security & Authentication\" is included due to the emphasis on secure code execution within a restricted environment. No custom label is needed as the functionality is well-covered by the predefined categories.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Security & Authentication"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 824,
    "server_name": "Safe Local Python Executor",
    "rank_by_usage": 825,
    "usage_count": "6",
    "original_file": "../crawler/smithery/@maxim-saplin_mcp_safe_local_python_executor.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@maxim-saplin/mcp_safe_local_python_executor/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "run_python",
          "description": "Execute Python code in a secure sandbox environment.\n\nThis tool allows running simple Python code for calculations and data manipulations.\nThe execution environment is restricted for security purposes. Make sure you create a single file\nthat can be executed in one go and it returns a result.\n\nDefault allowed imports:\n- math\n- random \n- datetime\n- time\n- json\n- re\n- string\n- collections\n- itertools\n- functools\n- operator\n\nArgs:\n    code: The Python code to execute. Must be valid Python 3 code. The result must be stored in a variable called `result`. E.g.:\n    ```python\n    import math\n    result = math.sqrt(16)\n    ```\n    \nReturns:\n    A dictionary with execution results containing:\n    - result: The final value or None if no value is returned\n    - logs: Any output from print statements\n",
          "input_schema": {
            "properties": {
              "code": {
                "title": "Code",
                "type": "string"
              }
            },
            "required": [
              "code"
            ],
            "title": "run_pythonArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "run_python"
      ]
    },
    "server_info_crawled": {
      "id": 824,
      "name": "Safe Local Python Executor",
      "author": "@maxim-saplin/mcp_safe_local_python_executor",
      "overview": "Run Python code generated by LLMs securely on your local machine. This tool provides a safe execution environment without the need for Docker or VMs, making it easy to integrate Python capabilities into your applications. Enhance your LLM experience with reliable code execution and avoid the risks of direct Python evaluation.",
      "repository_url": "https://github.com/maxim-saplin/mcp_safe_local_python_executor",
      "homepage": "https://smithery.ai/server/@maxim-saplin/mcp_safe_local_python_executor",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "6",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@maxim-saplin_mcp_safe_local_python_executor.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "run_python",
          "description": "Execute Python code in a secure sandbox environment.\n\nThis tool allows running simple Python code for calculations and data manipulations.\nThe execution environment is restricted for security purposes. Make sure you create a single file\nthat can be executed in one go and it returns a result.\n\nDefault allowed imports:\n- math\n- random \n- datetime\n- time\n- json\n- re\n- string\n- collections\n- itertools\n- functools\n- operator\n\nArgs:\n    code: The Python code to execute. Must be valid Python 3 code. The result must be stored in a variable called `result`. E.g.:\n    ```python\n    import math\n    result = math.sqrt(16)\n    ```\n    \nReturns:\n    A dictionary with execution results containing:\n    - result: The final value or None if no value is returned\n    - logs: Any output from print statements\n",
          "input_schema": {
            "properties": {
              "code": {
                "title": "Code",
                "type": "string"
              }
            },
            "required": [
              "code"
            ],
            "title": "run_pythonArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@maxim-saplin/mcp_safe_local_python_executor/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@maxim-saplin/mcp_safe_local_python_executor/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0825.@maxim-saplin_mcp_safe_local_python_executor_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 806
  }
}