{
  "labels": {
    "analysis": "The BuildBetter MCP Server is primarily designed for querying and interacting with BuildBetter's data through GraphQL. It provides tools for listing schema types, building and validating GraphQL queries, searching through extractions and conversations, and fetching static resources. The server emphasizes safe, read-only access with features like query templates and persona filtering to tailor data access, making it suitable for applications that need to integrate or analyze structured data from BuildBetter's ecosystem.",
    "reasoning": "The primary label \"Database Operations\" was chosen because the server's core functionality revolves around querying structured data via GraphQL, which is a key operation in database management. \"Data Analysis & Processing\" is a secondary label due to the tools for searching extractions, finding common issues, and querying specific topics, which support analytical tasks. \"Query Construction\" is a custom label to highlight the server's specialized tools for building and validating GraphQL queries, which is a unique aspect of its functionality.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": "Query Construction",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1345,
    "server_name": "BuildBetter MCP Server",
    "rank_by_usage": 1346,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@buildbetter-app_buildbetter-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@buildbetter-app/buildbetter-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1345,
      "name": "BuildBetter MCP Server",
      "author": "@buildbetter-app/buildbetter-mcp",
      "overview": "Enable safe, read-only querying of BuildBetter's data through a standardized MCP interface. Explore schema types, run GraphQL queries, and access rich context to enhance your LLM applications. Benefit from built-in prompt templates and secure persona filtering to tailor data access.",
      "repository_url": "https://github.com/buildbetter-app/BuildBetter-MCP",
      "homepage": "https://smithery.ai/server/@buildbetter-app/buildbetter-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@buildbetter-app_buildbetter-mcp.json",
      "tools_count": 15,
      "tools": [
        {
          "name": "run-query",
          "description": "Deploy Server BuildBetter MCP Server @buildbetter-app/buildbetter-mcp Try in Playground",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "variables",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list-types",
          "description": "Get a list of available GraphQL object types (excluding internal ones)",
          "parameters": []
        },
        {
          "name": "build-query",
          "description": "Build a simple GraphQL query string for a specific type",
          "parameters": []
        },
        {
          "name": "schema-overview",
          "description": "Return a markdown cheat-sheet describing key schema relationships (mermaid diagram).",
          "parameters": []
        },
        {
          "name": "search-extractions",
          "description": "Search extractions (signals) by keyword/phrase with optional extraction type filter and limit",
          "parameters": []
        },
        {
          "name": "find-fields",
          "description": "Return the field names for a specified GraphQL type (object or input object)",
          "parameters": []
        },
        {
          "name": "open-resource",
          "description": "Fetch a static resource by URI returned from ListResources",
          "parameters": [
            {
              "name": "uri",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "read-resource",
          "description": "Alias of open-resource to fetch a static resource by URI",
          "parameters": [
            {
              "name": "uri",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "recent-conversation-with",
          "description": "Find the most recent conversation with a specific person by name",
          "parameters": []
        },
        {
          "name": "top-customer-issues",
          "description": "Get the most common customer issues from extractions/signals",
          "parameters": [
            {
              "name": "days",
              "required": false,
              "type": "string"
            },
            {
              "name": "limit",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "topic-conversations",
          "description": "Find conversations discussing a specific topic",
          "parameters": [
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "topic",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "query-template",
          "description": "Generate a query from predefined templates for common tasks",
          "parameters": []
        },
        {
          "name": "validate-query",
          "description": "Check if a GraphQL query is valid before executing it",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "nl-query",
          "description": "Generate a GraphQL query from a natural language description",
          "parameters": [
            {
              "name": "description",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "help",
          "description": "Get help on using BuildBetter MCP effectively",
          "parameters": [
            {
              "name": "help",
              "required": false,
              "type": "string"
            },
            {
              "name": "topic",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@buildbetter-app/buildbetter-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiKey",
          "required": true,
          "description": "BuildBetter API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@buildbetter-app/buildbetter-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1346.@buildbetter-app_buildbetter-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1270
  }
}