{
  "labels": {
    "analysis": "The MCP Server is specifically designed to expose the functionality of the Bazel build system to AI agents. It provides tools for building, querying, testing, and managing Bazel projects, even in environments where Bazel might not be properly configured. The server bridges the gap between AI-powered workflows and software build processes, enabling seamless interaction with Bazel's core operations.",
    "reasoning": "The primary function of this server revolves around managing build systems, which aligns with software development workflows. While \"Development Tools\" is a broad match, the Bazel-specific functionality might not cover all general development needs. The secondary label \"Operating System\" is included because some tools interact with the system's file structure and workspace paths. No custom label is needed as the predefined categories adequately describe the server's functionality.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Operating System"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1579,
    "server_name": "Bazel MCP Server",
    "rank_by_usage": 1580,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@nacgarg_bazel-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@nacgarg/bazel-mcp-server/mcp?config=eyJiYXplbFBhdGgiOiAiYmF6ZWwiLCAid29ya3NwYWNlUGF0aCI6ICIuIn0=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "bazel_build_target",
          "description": "Build specified Bazel targets",
          "input_schema": {
            "type": "object",
            "properties": {
              "targets": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Bazel targets to build (e.g. ['//path/to:target'])"
              },
              "additionalArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Additional Bazel command line arguments (e.g. ['--verbose_failures', '--sandbox_debug'])"
              }
            },
            "required": [
              "targets"
            ]
          },
          "annotations": null
        },
        {
          "name": "bazel_query_target",
          "description": "Query the Bazel dependency graph for targets matching a pattern",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "Bazel query pattern (e.g. 'deps(//path/to:target)')"
              },
              "additionalArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Additional Bazel command line arguments (e.g. ['--output=label_kind', '--noimplicit_deps'])"
              }
            },
            "required": [
              "pattern"
            ]
          },
          "annotations": null
        },
        {
          "name": "bazel_test_target",
          "description": "Run Bazel tests for specified targets",
          "input_schema": {
            "type": "object",
            "properties": {
              "targets": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Bazel test targets to run (e.g. ['//path/to:test'])"
              },
              "additionalArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Additional Bazel command line arguments (e.g. ['--cache_test_results=no', '--test_output=all'])"
              }
            },
            "required": [
              "targets"
            ]
          },
          "annotations": null
        },
        {
          "name": "bazel_list_targets",
          "description": "List all available Bazel targets under a given path",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path within the workspace to list targets for (e.g. '//path/to' or '//' for all targets)"
              },
              "additionalArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Additional Bazel command line arguments (e.g. ['--output=build', '--keep_going'])"
              }
            },
            "required": [
              "path"
            ]
          },
          "annotations": null
        },
        {
          "name": "bazel_fetch_dependencies",
          "description": "Fetch Bazel external dependencies",
          "input_schema": {
            "type": "object",
            "properties": {
              "targets": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of specific targets to fetch dependencies for"
              },
              "additionalArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Additional Bazel command line arguments (e.g. ['--experimental_repository_cache_hardlinks', '--repository_cache=path/to/cache'])"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "bazel_set_workspace_path",
          "description": "Set the current Bazel workspace path for subsequent commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the Bazel workspace directory"
              }
            },
            "required": [
              "path"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 6,
      "tool_names": [
        "bazel_build_target",
        "bazel_query_target",
        "bazel_test_target",
        "bazel_list_targets",
        "bazel_fetch_dependencies",
        "bazel_set_workspace_path"
      ]
    },
    "server_info_crawled": {
      "id": 1579,
      "name": "Bazel MCP Server",
      "author": "@nacgarg/bazel-mcp-server",
      "overview": "Expose Bazel build system functionality to your AI agents. Build, query, and test Bazel targets seamlessly, even in misconfigured environments. Enhance your development workflow with powerful tools for managing Bazel projects.",
      "repository_url": "https://github.com/nacgarg/bazel-mcp-server",
      "homepage": "https://smithery.ai/server/@nacgarg/bazel-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@nacgarg_bazel-mcp-server.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "bazel_build_target",
          "description": "Build specified Bazel targets",
          "input_schema": {
            "type": "object",
            "properties": {
              "targets": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Bazel targets to build (e.g. ['//path/to:target'])"
              },
              "additionalArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Additional Bazel command line arguments (e.g. ['--verbose_failures', '--sandbox_debug'])"
              }
            },
            "required": [
              "targets"
            ]
          },
          "annotations": null
        },
        {
          "name": "bazel_query_target",
          "description": "Query the Bazel dependency graph for targets matching a pattern",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "Bazel query pattern (e.g. 'deps(//path/to:target)')"
              },
              "additionalArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Additional Bazel command line arguments (e.g. ['--output=label_kind', '--noimplicit_deps'])"
              }
            },
            "required": [
              "pattern"
            ]
          },
          "annotations": null
        },
        {
          "name": "bazel_test_target",
          "description": "Run Bazel tests for specified targets",
          "input_schema": {
            "type": "object",
            "properties": {
              "targets": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Bazel test targets to run (e.g. ['//path/to:test'])"
              },
              "additionalArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Additional Bazel command line arguments (e.g. ['--cache_test_results=no', '--test_output=all'])"
              }
            },
            "required": [
              "targets"
            ]
          },
          "annotations": null
        },
        {
          "name": "bazel_list_targets",
          "description": "List all available Bazel targets under a given path",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path within the workspace to list targets for (e.g. '//path/to' or '//' for all targets)"
              },
              "additionalArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Additional Bazel command line arguments (e.g. ['--output=build', '--keep_going'])"
              }
            },
            "required": [
              "path"
            ]
          },
          "annotations": null
        },
        {
          "name": "bazel_fetch_dependencies",
          "description": "Fetch Bazel external dependencies",
          "input_schema": {
            "type": "object",
            "properties": {
              "targets": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of specific targets to fetch dependencies for"
              },
              "additionalArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Additional Bazel command line arguments (e.g. ['--experimental_repository_cache_hardlinks', '--repository_cache=path/to/cache'])"
              }
            }
          },
          "annotations": null
        },
        {
          "name": "bazel_set_workspace_path",
          "description": "Set the current Bazel workspace path for subsequent commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the Bazel workspace directory"
              }
            },
            "required": [
              "path"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"bazelPath\": \"bazel\",\n  \"workspacePath\": \".\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@nacgarg/bazel-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"bazelPath\": \"bazel\",\n  \"workspacePath\": \".\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@nacgarg/bazel-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "1580.@nacgarg_bazel-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1444
  }
}