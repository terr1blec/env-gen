{
  "labels": {
    "analysis": "The MCP Server specializes in retrieving transcripts and subtitles from YouTube videos, with support for multiple languages and rich metadata. It enhances video processing workflows by enabling users to extract, analyze, and manipulate text content from videos programmatically.",
    "reasoning": "The primary function of the server is to extract and process text from YouTube videos, which fits well under Content Creation and Web Search & Research. The ability to handle multiple languages and metadata also supports Data Analysis & Processing capabilities.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "Web Search & Research",
      "Data Analysis & Processing"
    ],
    "custom_label": "Video Metadata Processing",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 84,
    "server_name": "YouTube Transcript Server",
    "rank_by_usage": 85,
    "usage_count": "936",
    "original_file": "../crawler/smithery/@sinco-lab_mcp-youtube-transcript.json",
    "mode": "smithery",
    "timestamp": 1751937975,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@sinco-lab/mcp-youtube-transcript/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_transcripts",
          "description": "Extract and process transcripts from a YouTube video.\n\n**Parameters:**\n- `url` (string, required): YouTube video URL or ID.\n- `lang` (string, optional, default 'en'): Language code for transcripts (e.g. 'en', 'uk', 'ja', 'ru', 'zh').\n- `enableParagraphs` (boolean, optional, default false): Enable automatic paragraph breaks.\n\n**IMPORTANT:** If the user does *not* specify a language *code*, **DO NOT** include the `lang` parameter in the tool call. Do not guess the language or use parts of the user query as the language code.",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "YouTube video URL or ID"
              },
              "lang": {
                "type": "string",
                "default": "en",
                "description": "Language code for transcripts, default 'en' (e.g. 'en', 'uk', 'ja', 'ru', 'zh')"
              },
              "enableParagraphs": {
                "type": "boolean",
                "default": false,
                "description": "Enable automatic paragraph breaks, default `false`"
              }
            },
            "required": [
              "url"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_transcripts"
      ]
    },
    "server_info_crawled": {
      "id": 84,
      "name": "YouTube Transcript Server",
      "author": "@sinco-lab/mcp-youtube-transcript",
      "overview": "Retrieve transcripts and subtitles from YouTube videos effortlessly. Analyze content with support for multiple languages and detailed metadata, enhancing your video processing workflows.",
      "repository_url": "https://github.com/sinco-lab/mcp-youtube-transcript",
      "homepage": "https://smithery.ai/server/@sinco-lab/mcp-youtube-transcript",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "936",
      "success_rate": "99.01%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@sinco-lab_mcp-youtube-transcript.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_transcripts",
          "description": "Extract and process transcripts from a YouTube video.\n\n**Parameters:**\n- `url` (string, required): YouTube video URL or ID.\n- `lang` (string, optional, default 'en'): Language code for transcripts (e.g. 'en', 'uk', 'ja', 'ru', 'zh').\n- `enableParagraphs` (boolean, optional, default false): Enable automatic paragraph breaks.\n\n**IMPORTANT:** If the user does *not* specify a language *code*, **DO NOT** include the `lang` parameter in the tool call. Do not guess the language or use parts of the user query as the language code.",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "YouTube video URL or ID"
              },
              "lang": {
                "type": "string",
                "default": "en",
                "description": "Language code for transcripts, default 'en' (e.g. 'en', 'uk', 'ja', 'ru', 'zh')"
              },
              "enableParagraphs": {
                "type": "boolean",
                "default": false,
                "description": "Enable automatic paragraph breaks, default `false`"
              }
            },
            "required": [
              "url"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@sinco-lab/mcp-youtube-transcript/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@sinco-lab/mcp-youtube-transcript/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0085.@sinco-lab_mcp-youtube-transcript_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 84
  }
}