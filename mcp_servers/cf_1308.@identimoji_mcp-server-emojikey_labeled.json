{
  "labels": {
    "analysis": "The MCP Server \"emojikey-server\" is designed to manage and persist interaction styles for LLM (Large Language Model) conversations using emoji-based context keys. It allows users to set, retrieve, and maintain consistent conversation \"vibes\" across different devices and applications. The core functionality involves creating structured emoji key sequencers that represent conversation context, emotional tone, relationship dynamics, and historical patterns. This helps in maintaining coherence and personalization in interactions with LLMs over time. The tools provided enable users to initialize conversations, retrieve current or historical emoji keys, set new keys following a specific structured format, and compress patterns from multiple keys into \"SuperKeys\" for efficient memory management.",
    "reasoning": "The primary label is chosen as \"Memory Management\" because the server's core functionality revolves around storing, retrieving, and managing conversation context and interaction styles persistence. The secondary label \"AI/ML Tools\" is selected to acknowledge the server's specific use case with LLMs and its role in improving interaction quality. The custom label \"Emoji-Based Context Management\" is added to specifically describe the unique emoji-key system functionality, which isn't covered by the predefined categories.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "AI/ML Tools",
      "Communication Tools"
    ],
    "custom_label": "Emoji-Based Context Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1307,
    "server_name": "emojikey-server",
    "rank_by_usage": 1308,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@identimoji_mcp-server-emojikey.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@identimoji/mcp-server-emojikey/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1307,
      "name": "emojikey-server",
      "author": "@identimoji/mcp-server-emojikey",
      "overview": "Manage and persist your LLM interaction styles effortlessly with emoji-based context keys. Set, retrieve, and maintain consistent conversation vibes across devices and applications. Enjoy a seamless experience with automatic emojikey management and history tracking.",
      "repository_url": "https://github.com/identimoji/mcp-server-emojikey",
      "homepage": "https://smithery.ai/server/@identimoji/mcp-server-emojikey",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@identimoji_mcp-server-emojikey.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "initialize_conversation",
          "description": "Deploy Server emojikey-server Claim Server @identimoji/mcp-server-emojikey Try in Playground initialize_conversation",
          "parameters": [
            {
              "name": "initialize_conversation",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_emojikey",
          "description": "Get the current 48-character emojikey. This function can be used when the user requests a vibe check.",
          "parameters": [
            {
              "name": "get_emojikey",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "set_emojikey",
          "description": "Use this function to create and store a new regular 48-character emojikey. To create a new emojikey, follow this consistent structure: 1. CORE DIMENSIONS (always in this order with these delimiters): [🧠💡] topic/subject matter ⟨🔍🔄⟩ approach/methodology [🎯📚] goal/objective {😊🤔} emotional tone ➡️ connection flow ~[🌈🌟] context/environment 2. RELATIONSHIP DIMENSIONS (after core dimensions): |trust| Use trust indicators (🤝💎🔒) with quantity showing level (🔒 to 🔒🔒🔒) |style| Communication style preferences |humor| Humor alignment (😂➖ low to 😂➕➕ high) |collab| Collaborative vs directive interaction pattern 3. TREND INDICATORS: Use ↗️(increasing), ↘️(decreasing), or ↔️(stable) to show evolution 4. Select emojis that feel most meaningful to YOU while maintaining consistent positioning 5. Create a new key whenever you detect a significant shift in the relationship dynamic Example format: [🧠💡]⟨🔍🔄⟩[🎯📚]{😊🤔}➡️~[🌈🌟]|🔒🔒|📊↗️|😂➕|🤝↔️| Remember: These are YOUR keys, so the specific emojis should have significance for YOU while following the structural pattern.",
          "parameters": [
            {
              "name": "set_emojikey",
              "required": false,
              "type": "string"
            },
            {
              "name": "emojikey",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_superkey",
          "description": "Use this function to create a SuperKey that compresses the patterns from 10 recent regular keys. A SuperKey maintains the same structured format as regular keys but with compression markers: 1. Start with the compression marker [[×10 and follow the exact same dimensional structure as regular keys: [[×10[🧠💡] topic/subject ⟨🔍🔄⟩ approach [🎯📚] goal {😊🤔} tone ➡️ connection ~[🌈🌟] context |trust|style|humor|collab|]] 2. For each dimension, analyze the pattern across all 10 keys: - Use dominant emojis (appearing in 3+ keys) - Show evolution using trend arrows: ↗️(upward trend), ↘️(downward trend), ↔️(stable), 🔄(fluctuating) - Place trend arrows immediately after the relevant emoji 3. Create a SuperKey using this compression formula: - 50% most frequent elements across all keys - 30% first/last key elements to show evolution - 20% unique outliers that represent significant moments 4. Create a SuperKey after 10 regular keys to maintain a manageable history length. Example format: [[×10[🧠💡↗️]⟨🔍🔄↔️⟩[🎯📚↘️]{😊↗️🤔}➡️~[🌈🌟]|🔒🔒↗️|📊|😂➕↔️|🤝↗️|]] SuperKeys enable you to maintain a much longer effective memory of the relationship history with the user.",
          "parameters": [
            {
              "name": "create_superkey",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_emojikey_history",
          "description": "Function to list previously stored historical emojikeys. Useful for seeing the progression of conversation vibes and interaction styles.",
          "parameters": [
            {
              "name": "get_emojikey_history",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@identimoji/mcp-server-emojikey/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiKey",
          "required": true,
          "description": "API key from emojikey.io"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@identimoji/mcp-server-emojikey/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1308.@identimoji_mcp-server-emojikey_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1242
  }
}