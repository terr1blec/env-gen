{
  "labels": {
    "analysis": "The MCP Server from Raccoon AI primarily enables automation of web-based tasks through its Model Context Protocol (MCP) and LAM API. Its core functionality includes web browsing, data extraction, and complex web task automation. The available tools suggest that users can deploy the server to automate interactions with websites, extract data, and perform structured queries (as indicated by the sample LAM query). This aligns closely with browser automation and web search/data extraction capabilities.",
    "reasoning": "The primary label \"Browser Automation\" was chosen because the server's main functionality revolves around automating web tasks and data extraction. The secondary label \"Web Search & Research\" is included due to its potential use in gathering web-based information. Since the functionality doesn't align with any other predefined categories or require custom labeling, no additional labels are needed.",
    "primary_label": "Browser Automation",
    "secondary_labels": [
      "Web Search & Research"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1228,
    "server_name": "Raccoon AI MCP Server",
    "rank_by_usage": 1229,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@raccoonaihq_raccoonai-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@raccoonaihq/raccoonai-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1228,
      "name": "Raccoon AI MCP Server",
      "author": "@raccoonaihq/raccoonai-mcp-server",
      "overview": "Raccoon AI's Model Context Protocol (MCP) server that enables leveraging the LAM API for web browsing, data extraction, and complex web tasks automation.",
      "repository_url": "https://github.com/raccoonaihq/raccoonai-mcp-server",
      "homepage": "https://smithery.ai/server/@raccoonaihq/raccoonai-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@raccoonaihq_raccoonai-mcp-server.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "raccoonai_lam_tool",
          "description": "Deploy Server Raccoon AI MCP Server @raccoonaihq/raccoonai-mcp-server Try in Playground raccoonai_lam_tool",
          "parameters": []
        },
        {
          "name": "sample_lam_query",
          "description": "Return a sample LAM query to demonstrate the API functionality.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@raccoonaihq/raccoonai-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "raccoon_secret_key",
          "required": true,
          "description": "The secret key for using Raccoon AI APIs, can be obtained from https://platform.flyingraccoon.tech"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@raccoonaihq/raccoonai-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1229.@raccoonaihq_raccoonai-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1179
  }
}