{
  "labels": {
    "analysis": "The MCP Server specializes in processing Allure test reports, converting them into structured JSON data optimized for large language model consumption. This facilitates AI-assisted analysis, debugging, and documentation generation from test results. The core functionality revolves around transforming test reports into an AI-friendly format, primarily serving the software testing and development workflows.",
    "reasoning": "The primary label \"Test Automation & Analysis\" was chosen because the server's core functionality focuses on processing test reports for automated analysis. Additional labels \"Development Tools\" and \"AI/ML Tools\" were selected due to the server's integration with AI models for test data processing. A custom label \"Test Report Transformation\" was added to specifically highlight its niche functionality.",
    "primary_label": "Browser Automation",
    "secondary_labels": [
      "Development Tools",
      "AI/ML Tools"
    ],
    "custom_label": "Test Report Transformation",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1915,
    "server_name": "Allure Report Transformer",
    "rank_by_usage": 1916,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@crisschan_mcp-allure.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@crisschan/mcp-allure/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_allure_report",
          "description": "\n    read allure report and return json data\n    ",
          "input_schema": {
            "properties": {
              "results_dir": {
                "title": "Results Dir",
                "type": "string"
              }
            },
            "required": [
              "results_dir"
            ],
            "title": "get_allure_reportArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_allure_report"
      ]
    },
    "server_info_crawled": {
      "id": 1915,
      "name": "Allure Report Transformer",
      "author": "@crisschan/mcp-allure",
      "overview": "Convert Allure test reports into formats optimized for large language model consumption. Enable AI-assisted test analysis, debugging, and documentation generation by providing structured, LLM-friendly test data. Improve efficiency and accuracy in interpreting test results with minimal cost.",
      "repository_url": "https://github.com/crisschan/mcp-allure",
      "homepage": "https://smithery.ai/server/@crisschan/mcp-allure",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@crisschan_mcp-allure.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_allure_report",
          "description": "\n    read allure report and return json data\n    ",
          "input_schema": {
            "properties": {
              "results_dir": {
                "title": "Results Dir",
                "type": "string"
              }
            },
            "required": [
              "results_dir"
            ],
            "title": "get_allure_reportArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@crisschan/mcp-allure/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@crisschan/mcp-allure/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1916.@crisschan_mcp-allure_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1691
  }
}