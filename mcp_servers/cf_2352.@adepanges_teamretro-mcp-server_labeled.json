{
  "labels": {
    "analysis": "The TeamRetro MCP Server primarily provides API integration for managing users, teams, actions, retrospectives, agreements, health models, and health checks within the TeamRetro platform. It offers comprehensive tools for user and team management, retrospective facilitation, action tracking, and health assessment workflows, all of which are essential for agile team practices. The server facilitates collaboration, project management, and continuous improvement processes commonly used by software development and project teams.",
    "reasoning": "The primary functionality of the server revolves around team and project management, making \"Daily Productivity\" the most fitting primary label. Secondary labels for \"Development Tools\" and \"API Integration\" are appropriate due to its support for agile methodologies and direct API access to TeamRetro's features. No custom label is needed as the server's functionality is well-covered by the predefined categories.",
    "primary_label": "Daily Productivity",
    "secondary_labels": [
      "Development Tools",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2351,
    "server_name": "TeamRetro MCP Server",
    "rank_by_usage": 2352,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@adepanges_teamretro-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@adepanges/teamretro-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2351,
      "name": "TeamRetro MCP Server",
      "author": "@adepanges/teamretro-mcp-server",
      "overview": "Provide standardized access to TeamRetro's platform by integrating its official API into your applications. Manage users, teams, actions, agreements, health checks, and retrospectives seamlessly through a comprehensive set of tools. Enhance team management and analytics workflows with this easy-to-use MCP server.",
      "repository_url": "https://github.com/adepanges/teamretro-mcp-server",
      "homepage": "https://smithery.ai/server/@adepanges/teamretro-mcp-server",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@adepanges_teamretro-mcp-server.json",
      "tools_count": 33,
      "tools": [
        {
          "name": "list_users",
          "description": "Deploy Server TeamRetro MCP Server @adepanges/teamretro-mcp-server Try in Playground",
          "parameters": [
            {
              "name": "list_users",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "add_user",
          "description": "Add a new user or update an existing user's information by their email address, specifying optional name and emailAddress",
          "parameters": [
            {
              "name": "add_user",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_user",
          "description": "Update an existing user's details, such as their name and emailAddress, by providing their current email",
          "parameters": [
            {
              "name": "name",
              "required": false,
              "type": "string"
            },
            {
              "name": "email",
              "required": true,
              "type": "string"
            },
            {
              "name": "emailAddress",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_user",
          "description": "Delete a user by their email address",
          "parameters": [
            {
              "name": "delete_user",
              "required": false,
              "type": "string"
            },
            {
              "name": "email",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_user",
          "description": "Retrieve detailed information about a single user by their email address",
          "parameters": [
            {
              "name": "get_user",
              "required": false,
              "type": "string"
            },
            {
              "name": "email",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_teams",
          "description": "List teams from TeamRetro with filtering by tags and IDs, and pagination using offset and limit parameters",
          "parameters": [
            {
              "name": "list_teams",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "detail_team",
          "description": "Retrieve detailed information about a single team by its unique ID",
          "parameters": [
            {
              "name": "detail_team",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_team",
          "description": "Update an existing team's details, such as its name and associated tags, by providing the team's ID",
          "parameters": [
            {
              "name": "update_team",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_team",
          "description": "Create a new team with a required name, and optional tags and members",
          "parameters": [
            {
              "name": "create_team",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_team",
          "description": "Delete an existing team by its ID",
          "parameters": [
            {
              "name": "delete_team",
              "required": false,
              "type": "string"
            },
            {
              "name": "teamId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_team_members",
          "description": "Retrieve a list of team members for a specified team ID with pagination controls for offset and limit.",
          "parameters": [
            {
              "name": "list_team_members",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_team_member",
          "description": "Fetch a team member by their email address within a specified team.",
          "parameters": [
            {
              "name": "get_team_member",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_team_member",
          "description": "Update a team member's details, such as their name or team admin status, by their email address within a specified team.",
          "parameters": [
            {
              "name": "update_team_member",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "remove_team_member",
          "description": "Remove a team member from a team by their email address.",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "type": "string"
            },
            {
              "name": "teamId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "add_team_member",
          "description": "Add a new team member to a team by their email address, with optional specification of team admin status.",
          "parameters": [
            {
              "name": "add_team_member",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_actions",
          "description": "Retrieve a list of actions from TeamRetro with optional filtering by team tags and team IDs, and pagination controls for offset and limit.",
          "parameters": [
            {
              "name": "list_actions",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_action",
          "description": "Create a new action in TeamRetro with required details such as team ID, title, due date, completion status, and assigned user.",
          "parameters": [
            {
              "name": "create_action",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_action",
          "description": "Fetch a single action by its unique ID from TeamRetro.",
          "parameters": [
            {
              "name": "get_action",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_action",
          "description": "Update an existing action in TeamRetro with new details such as title, due date, completion status, priority, and assigned user.",
          "parameters": [
            {
              "name": "update_action",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_action",
          "description": "Delete an existing action from TeamRetro by its action ID.",
          "parameters": [
            {
              "name": "delete_action",
              "required": false,
              "type": "string"
            },
            {
              "name": "actionId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_retrospectives",
          "description": "List retrospectives from TeamRetro with filtering by team tags and IDs, and pagination using offset and limit parameters",
          "parameters": [
            {
              "name": "list_retrospectives",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_retrospective",
          "description": "Retrieve detailed information about a single retrospective by its unique ID",
          "parameters": [
            {
              "name": "get_retrospective",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_retrospective",
          "description": "Delete an existing retrospective by its ID",
          "parameters": [
            {
              "name": "delete_retrospective",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_agreement",
          "description": "Delete an existing agreement by specifying its unique identifier",
          "parameters": [
            {
              "name": "delete_agreement",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_agreement",
          "description": "Update an existing agreement's details such as its title or associated team. Provide the agreement ID and the fields you wish to update.",
          "parameters": [
            {
              "name": "update_agreement",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_agreement",
          "description": "Retrieve a single agreement by its unique identifier. This will return the agreement's details including its title, associated team, and creation date.",
          "parameters": [
            {
              "name": "get_agreement",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_agreement",
          "description": "Create a new agreement in TeamRetro by specifying the team it belongs to and its title. This will return the newly created agreement with its unique identifier and other details.",
          "parameters": [
            {
              "name": "create_agreement",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_agreements",
          "description": "List agreements from TeamRetro with optional filtering by team tags and team IDs, as well as pagination controls. This allows for retrieving a specific subset of agreements based on the provided criteria.",
          "parameters": [
            {
              "name": "list_agreements",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_health_model",
          "description": "Retrieve a single health model by its unique identifier. This will return the health model's details including its name, dimensions, and creation date.",
          "parameters": [
            {
              "name": "get_health_model",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_health_models",
          "description": "List health models from TeamRetro with pagination controls. This allows for retrieving a specific subset of health models based on the provided offset and limit parameters.",
          "parameters": [
            {
              "name": "list_health_models",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_health_check",
          "description": "Delete an existing health check by specifying its unique identifier.",
          "parameters": [
            {
              "name": "delete_health_check",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_health_check",
          "description": "Retrieve a single health check by its unique identifier with optional attributes to include. This will return the health check's details including its title, date, team, health model, and status.",
          "parameters": [
            {
              "name": "get_health_check",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_health_checks",
          "description": "List health checks from TeamRetro with optional filtering by health model IDs, team tags, and team IDs, as well as pagination controls. This allows for retrieving a specific subset of health checks based on the provided criteria.",
          "parameters": [
            {
              "name": "list_health_checks",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@adepanges/teamretro-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "teamretroApiKey",
          "required": true,
          "description": "Your TeamRetro API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@adepanges/teamretro-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2352.@adepanges_teamretro-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2020
  }
}