{
  "labels": {
    "analysis": "The MCP Server, 302AI Browser Automation Server, is primarily focused on enabling users to control and automate web browsers using natural language commands. It allows for the creation and execution of browser tasks, as well as the retrieval of task results. The server supports dynamic tool loading and can operate in different modes, indicating a versatile approach to web automation. The tools provided suggest capabilities for automating web research and performing various browser-based tasks, all while maintaining simplicity in user interaction through AI-powered commands.",
    "reasoning": "The primary functionality of this server revolves around automating web browser tasks, which clearly aligns with the \"Browser Automation\" category. Additionally, the server's ability to conduct web research and its support for dynamic tool loading also fits well with the \"Web Search & Research\" category. No custom label is needed as the predefined categories cover the server's functionality adequately.",
    "primary_label": "Browser Automation",
    "secondary_labels": [
      "Web Search & Research"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1031,
    "server_name": "302AI Browser Automation Server",
    "rank_by_usage": 1032,
    "usage_count": "2",
    "original_file": "../crawler/smithery/@302ai_302_browser_use_mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@302ai/302_browser_use_mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1031,
      "name": "302AI Browser Automation Server",
      "author": "@302ai/302_browser_use_mcp",
      "overview": "Enable natural language control and automation of web browsers through an AI-powered server. Automate browser tasks and conduct web research seamlessly using simple commands. Supports dynamic tool loading and multiple operation modes including local and remote HTTP server usage.",
      "repository_url": "https://github.com/302ai/302_browser_use_mcp",
      "homepage": "https://smithery.ai/server/@302ai/302_browser_use_mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "2",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@302ai_302_browser_use_mcp.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "createBrowserAgentTask",
          "description": "Deploy Server 302AI Browser Automation Server Claim Server @302ai/302_browser_use_mcp Try in Playground createBrowserAgentTask",
          "parameters": []
        },
        {
          "name": "getBrowserAgentTaskResult",
          "description": "Get the result of the browser agent task. If no results are obtained, clearly return the task_id to the user for use in the next request.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@302ai/302_browser_use_mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@302ai/302_browser_use_mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1032.@302ai_302_browser_use_mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1010
  }
}