{
  "labels": {
    "analysis": "The MCP Server is designed to programmatically access and manage Splunkbase apps. It provides tools for searching, checking compatibility, downloading, and handling app versions, which are essential for Splunk administrators and users who need to manage their Splunk deployments efficiently. The server streamlines app management by providing a standardized interface for interactions with Splunkbase, reducing manual efforts and ensuring compatibility with specific Splunk versions.",
    "reasoning": "The Primary Label \"Application Management\" is chosen because the server's core functionality revolves around managing and interacting with Splunk apps. The secondary label \"Database Operations\" fits because the tools involve querying and handling app version information in a structured manner. The third secondary label \"API Integration\" is relevant since the tools are designed to interact programmatically with Splunkbase's API.",
    "primary_label": "Others",
    "secondary_labels": [
      "Database Operations",
      "API Integration"
    ],
    "custom_label": "Splunkbase Integration",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2261,
    "server_name": "Splunkbase MCP Server",
    "rank_by_usage": 2262,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@cschmidt0121_splunkbase-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@cschmidt0121/splunkbase-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2261,
      "name": "Splunkbase MCP Server",
      "author": "@cschmidt0121/splunkbase-mcp",
      "overview": "Access and manage Splunkbase apps programmatically. Search, download, and handle app versions through a standardized interface, enhancing your Splunk experience. Simplify your app management tasks with this powerful tool.",
      "repository_url": "https://github.com/cschmidt0121/splunkbase-mcp",
      "homepage": "https://smithery.ai/server/@cschmidt0121/splunkbase-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@cschmidt0121_splunkbase-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "search",
          "description": "Deploy Server Splunkbase MCP Server Claim Server @cschmidt0121/splunkbase-mcp Try in Playground",
          "parameters": []
        },
        {
          "name": "get_app_latest_version",
          "description": "Get the latest compatible version of an app for a specific Splunk version.\n\n    Args:\n        app: The name or numeric ID of the Splunkbase app\n        splunk_version: The Splunk version to check compatibility with\n        is_cloud: Whether to check compatibility with Splunk Cloud\n\n    Returns:\n        Dictionary containing release information",
          "parameters": []
        },
        {
          "name": "download_app",
          "description": "Download a specific version of an app. If no version is specified, downloads the latest.\n\n    Args:\n        app: The name or numeric ID of the Splunkbase app\n        output_dir: Directory to save the downloaded app\n        version: Optional specific version to download\n\n    Returns:\n        Success message with download details",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@cschmidt0121/splunkbase-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@cschmidt0121/splunkbase-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2262.@cschmidt0121_splunkbase-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1946
  }
}