{
  "labels": {
    "analysis": "The MCP Server is designed to streamline documentation research and knowledge management by providing tools for searching, retrieving, and organizing documentation in markdown format. Its core functionality revolves around documentation access, search, and content extraction, making it highly suitable for developers and teams needing quick access to technical resources. The available tools focus on searching, filtering, and presenting documentation content efficiently.",
    "reasoning": "The primary use case of this server is managing and retrieving documentation, which aligns most closely with \"Memory Management\" due to its focus on storage, retrieval, and organization of knowledge bases. \"Web Search & Research\" is relevant as a secondary label since it aids in research and information gathering. A custom label \"Documentation Management\" captures the specialized functionality beyond the predefined categories.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "Web Search & Research"
    ],
    "custom_label": "Documentation Management",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 842,
    "server_name": "DevDocs",
    "rank_by_usage": 843,
    "usage_count": "5",
    "original_file": "../crawler/smithery/@cyberagiinc_DevDocs.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@cyberagiinc/DevDocs/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "sync_file",
          "description": "Force sync a specific file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string",
                "description": "ID of the file to sync (without .md extension)"
              }
            },
            "required": [
              "file_id"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_status",
          "description": "Get server status",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        },
        {
          "name": "list_files",
          "description": "List all available markdown files",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        },
        {
          "name": "read_file",
          "description": "Read the content of a markdown file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string",
                "description": "ID of the file to read (without .md extension)"
              }
            },
            "required": [
              "file_id"
            ]
          },
          "annotations": null
        },
        {
          "name": "search_files",
          "description": "Search content across all markdown files",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query to find in markdown content"
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        },
        {
          "name": "search_by_tag",
          "description": "Search files by metadata tags",
          "input_schema": {
            "type": "object",
            "properties": {
              "tag": {
                "type": "string",
                "description": "Tag to search for in file metadata"
              }
            },
            "required": [
              "tag"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_stats",
          "description": "Get statistics about all markdown files",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        },
        {
          "name": "get_section",
          "description": "Get a specific section from a markdown file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string",
                "description": "ID of the file (without .md extension)"
              },
              "section_id": {
                "type": "string",
                "description": "ID of the section to retrieve"
              }
            },
            "required": [
              "file_id",
              "section_id"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_table_of_contents",
          "description": "Get table of contents for a markdown file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string",
                "description": "ID of the file (without .md extension)"
              }
            },
            "required": [
              "file_id"
            ]
          },
          "annotations": null
        },
        {
          "name": "smart_section_search",
          "description": "Advanced search for sections with ranking and confidence scores",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query to find in sections"
              },
              "max_results": {
                "type": "number",
                "description": "Maximum number of results to return (default: 10)"
              },
              "use_fuzzy": {
                "type": "boolean",
                "description": "Whether to use fuzzy matching (default: true)"
              },
              "use_regex": {
                "type": "boolean",
                "description": "Whether to use regex matching (default: true)"
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 10,
      "tool_names": [
        "sync_file",
        "get_status",
        "list_files",
        "read_file",
        "search_files",
        "search_by_tag",
        "get_stats",
        "get_section",
        "get_table_of_contents",
        "smart_section_search"
      ]
    },
    "server_info_crawled": {
      "id": 842,
      "name": "DevDocs",
      "author": "@cyberagiinc/DevDocs",
      "overview": "Transform your documentation research from weeks into hours of productive development. Leverage intelligent crawling and built-in MCP servers to streamline your team's knowledge base into actionable resources. Build faster with any technology using our LLM-ready platform.",
      "repository_url": "https://github.com/cyberagiinc/DevDocs",
      "homepage": "https://smithery.ai/server/@cyberagiinc/DevDocs",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "5",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@cyberagiinc_DevDocs.json",
      "tools_count": 10,
      "tools": [
        {
          "name": "sync_file",
          "description": "Force sync a specific file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string",
                "description": "ID of the file to sync (without .md extension)"
              }
            },
            "required": [
              "file_id"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_status",
          "description": "Get server status",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        },
        {
          "name": "list_files",
          "description": "List all available markdown files",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        },
        {
          "name": "read_file",
          "description": "Read the content of a markdown file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string",
                "description": "ID of the file to read (without .md extension)"
              }
            },
            "required": [
              "file_id"
            ]
          },
          "annotations": null
        },
        {
          "name": "search_files",
          "description": "Search content across all markdown files",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query to find in markdown content"
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        },
        {
          "name": "search_by_tag",
          "description": "Search files by metadata tags",
          "input_schema": {
            "type": "object",
            "properties": {
              "tag": {
                "type": "string",
                "description": "Tag to search for in file metadata"
              }
            },
            "required": [
              "tag"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_stats",
          "description": "Get statistics about all markdown files",
          "input_schema": {
            "type": "object",
            "properties": {}
          },
          "annotations": null
        },
        {
          "name": "get_section",
          "description": "Get a specific section from a markdown file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string",
                "description": "ID of the file (without .md extension)"
              },
              "section_id": {
                "type": "string",
                "description": "ID of the section to retrieve"
              }
            },
            "required": [
              "file_id",
              "section_id"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_table_of_contents",
          "description": "Get table of contents for a markdown file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string",
                "description": "ID of the file (without .md extension)"
              }
            },
            "required": [
              "file_id"
            ]
          },
          "annotations": null
        },
        {
          "name": "smart_section_search",
          "description": "Advanced search for sections with ranking and confidence scores",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query to find in sections"
              },
              "max_results": {
                "type": "number",
                "description": "Maximum number of results to return (default: 10)"
              },
              "use_fuzzy": {
                "type": "boolean",
                "description": "Whether to use fuzzy matching (default: true)"
              },
              "use_regex": {
                "type": "boolean",
                "description": "Whether to use regex matching (default: true)"
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@cyberagiinc/DevDocs/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@cyberagiinc/DevDocs/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0843.@cyberagiinc_DevDocs_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 824
  }
}