{
  "labels": {
    "analysis": "The MCP Server \"GeoPal Travel and Logistics Server\" focuses on providing tools for travel planning, routing optimization, and geospatial analysis. It integrates with OpenRouteService to offer functionalities like generating directions, calculating isochrones, finding Points of Interest (POIs), and solving complex routing problems such as Vehicle Routing Problems (VRP) and the Traveling Salesman Problem (TSP). The server enhances decision-making in logistics and travel planning by enabling efficient querying and manipulation of travel-related resources.",
    "reasoning": "The primary label \"Travel & Maps\" is chosen because the server's core functionality revolves around geospatial information, routing, and travel planning. Secondary labels \"Logistics\" and \"Route Optimization\" are added to highlight the server's specialized tools for logistics operations and route optimization, which are critical for its intended use cases. The predefined categories do not have a \"Logistics\" label, so it is added as a custom label since logistics is a significant aspect of the server's functionality.",
    "primary_label": "Travel & Maps",
    "secondary_labels": [
      "Travel & Maps",
      "Data Analysis & Processing"
    ],
    "custom_label": "Logistics",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 245,
    "server_name": "GeoPal Travel and Logistics Server",
    "rank_by_usage": 246,
    "usage_count": "162",
    "original_file": "../crawler/smithery/@Raghu6798_geopal_traveling_and_logistics.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Raghu6798/geopal_traveling_and_logistics/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 245,
      "name": "GeoPal Travel and Logistics Server",
      "author": "@Raghu6798/geopal_traveling_and_logistics",
      "overview": "Enable seamless integration of travel and logistics data with language models to enhance planning and operational workflows. Provide real-time access to geospatial and routing information through a standardized protocol. Facilitate efficient querying and manipulation of travel-related resources and tools for improved decision-making.",
      "repository_url": "https://github.com/Raghu6798/GeoPal_Traveling_and_Logistics",
      "homepage": "https://smithery.ai/server/@Raghu6798/geopal_traveling_and_logistics",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "162",
      "success_rate": "99.32%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Raghu6798_geopal_traveling_and_logistics.json",
      "tools_count": 8,
      "tools": [
        {
          "name": "get_directions",
          "description": "Deploy Server GeoPal Travel and Logistics Server @Raghu6798/geopal_traveling_and_logistics Try in Playground get_directions",
          "parameters": []
        },
        {
          "name": "geocode_address",
          "description": "Geocodes an address or place name using Openrouteservice's Pelias geocoding. Args: text: The address or place name to search for (e.g. \"Brandenburg Gate, Berlin, Germany\"). ctx: The MCP context object for logging. Returns: A dictionary containing the geocoding response from Openrouteservice.",
          "parameters": []
        },
        {
          "name": "get_isochrones",
          "description": "Calculates isochrones (reachability polygons) from specified locations and generates an interactive map. Args: locations: List of (longitude, latitude) tuples for isochrone centers. Example: [(8.69174, 49.40875)] profile: The travel profile (e.g., 'driving-car', 'cycling-regular', 'walking'). range: A list of one or more ranges for the isochrone, in seconds (for time) or meters (for distance). Example: [300, 600, 900] for 5, 10, 15 minutes. range_type: The type of range: 'time' or 'distance'. intervals: How many intervals to divide the range into for output polygons. ctx: The MCP context object for logging. Returns: A dictionary containing the isochrone response from Openrouteservice. Also generates an interactive HTML map in the 'maps' directory.",
          "parameters": []
        },
        {
          "name": "get_pois",
          "description": "Finds Points of Interest (POIs) near specified coordinates using OpenRouteService. Args: coordinates: A (longitude, latitude) tuple for the center point. Example: (78.4697936, 17.3615635) buffer: Search radius in meters (default: 1000m). Maximum is 2000m, do not exceed 2000m. limit: Maximum number of POIs to return (default: 500). filters: Optional filters for POI categories. Expected format is a dictionary where keys are filter types and values are lists of IDs. For example: \"category_ids\": [108] # List of integers representing category IDs Always send the ID(s) as a list, i.e., [id]. Commonly used category IDs for **trip planning** include: accomodation: id: 100 children: tourism: alpine_hut: 101 apartment: 102 camp_site: 103 caravan_site: 104 chalet: 105 guest_house: 106 hostel: 107 hotel: 108 motel: 109 wilderness_hut: 110 animals: id: 120 children: amenity: animal_boarding: 121 animal_shelter: 122 veterinary: 123 shop: pet: 124 arts_and_culture: id: 130 children: amenity: arts_centre: 131 library: 133 place_of_worship: 135 studio: 136 tourism: gallery: 132 museum: 134 education: id: 150 children: amenity: college: 151 driving_school: 152 kindergarten: 153 language_school: 154 music_school: 155 school: 156 university: 157 facilities: id: 160 children: amenity: compressed_air: 161 bench: 162 emergency_phone: 163 clock: 164 drinking_water: 166 hunting_stand: 168 internet_cafe: 169 kneipp_water_cure: 170 post_box: 171 recycling: 172 sanitary_dump_station: 174 shelter: 175 shower: 176 table: 177 telephone: 178 toilets: 179 waste_basket: 180 waste_disposal: 181 water_point: 182 emergency: access_point: 205 defibrillator: 165 fire_hydrant: 167 financial: id: 190 children: amenity: atm: 191 bank: 192 bureau_de_change: 193 healthcare: id: 200 children: amenity: baby_hatch: 201 clinic: 202 dentist: 203 doctors: 204 hospital: 206 nursing_home: 207 pharmacy: 208 retirement_home: 209 social_facility: 210 healthcare: blood_donation: 211 healthcare:speciality: vaccination: 212 vaccination: covid19: 213 historic: id: 220 children: historic: aircraft: 221 aqueduct: 222 archaeological_site: 223 castle: 224 cannon: 225 city_gate: 226 citywalls: 227 battlefield: 228 boundary_stone: 229 building: 230 farm: 231 fort: 232 gallows: 233 highwater_mark: 234 locomotive: 235 manor: 236 memorial: 237 milestone: 238 monastery: 239 monument: 240 optical_telegraph: 241 pillory: 242 ruins: 243 rune_stone: 244 ship: 245 tomb: 246 wayside_cross: 247 wayside_shrine: 248 wreck: 249 leisure_and_entertainment: id: 260 children: leisure: adult_gaming_centre: 261 amusement_arcade: 262 beach_resort: 263 bandstand: 264 bird_hide: 265 common: 266 dance: 267 dog_park: 268 firepit: 269 fishing: 270 fitness_centre: 271 garden: 272 golf_course: 273 hackerspace: 274 horse_riding: 275 ice_rink: 276 marina: 277 miniature_golf: 278 nature_reserve: 279 park: 280 picnic_table: 281 pitch: 282 playground: 283 sauna: 286 slipway: 287 sports_centre: 288 stadium: 289 summer_camp: 290 swimming_area: 291 swimming_pool: 292 track: 293 turkish_bath: 294 water_park: 295 wildlife_hide: 296 highway: raceway: 284 amenity: brothel: 297 casino: 298 cinema: 299 dive_centre: 300 dojo: 301 gambling: 302 nightclub: 303 planetarium: 304 public_bath: 285 social_centre: 305 spa: 306 stripclub: 307 tourism: aquarium: 308 theme_park: 309 zoo: 310 natural: id: 330 children: natural: cave_entrance: 331 beach: 332 geyser: 333 peak: 335 rock: 336 saddle: 337 spring: 338 volcano: 339 water: 340 public_places: id: 360 children: amenity: embassy: 361 crematorium: 362 community_centre: 363 courthouse: 364 coworking_space: 365 crypt: 366 fire_station: 367 grave_yard: 368 police: 369 post_office: 370 prison: 371 ranger_station: 372 rescue_station: 373 townhall: 374 service: id: 390 children: shop: beauty: 391 estate_agent: 392 dry_cleaning: 393 glaziery: 394 hairdresser: 395 laundry: 396 massage: 397 tailor: 399 tattoo: 400 amenity: photo_booth: 398 shops: id: 420 children: shop: agrarian: 421 alcohol: 422 antiques: 423 art: 424 bag: 425 bakery: 426 bed: 427 beverages: 428 bicycle: 429 books: 430 boutique: 431 brewing_supplies: 432 business_machines: 433 butcher: 434 cafe: 435 camera: 436 candles: 437 car: 438 car_parts: 439 carpet: 440 curtain: 441 cheese: 442 chemist: 443 chocolate: 444 clothes: 447 coffee: 448 computer: 449 confectionery: 450 convenience: 451 copyshop: 452 cosmetics: 453 dairy: 454 deli: 455 department_store: 456 doityourself: 457 electrical: 458 electronics: 459 erotic: 460 e-cigarette: 461 farm: 462 fashion: 463 fishing: 464 florist: 465 funeral_directors: 466 furniture: 467 games: 468 garden_centre: 469 garden_furniture: 470 gas: 471 general: 472 gift: 473 greengrocer: 474 grocery: 475 interior_decoration: 476 hairdresser_supply: 477 hardware: 478 hearing_aids: 479 herbalist: 480 hifi: 481 houseware: 482 hunting: 483 insurance: 484 jewelry: 485 leather: 486 locksmith: 487 kiosk: 488 kitchen: 489 lamps: 490 lottery: 491 mall: 492 medical_supply: 494 mobile_phone: 495 model: 496 motorcycle: 497 music: 498 musical_instrument: 499 nutrition_supplements: 500 newsagent: 501 optician: 502 organic: 503 outdoor: 504 paint: 505 pastry: 506 perfumery: 507 photo: 508 pyrotechnics: 509 radiotechnics: 510 seafood: 511 second_hand: 512 security: 513 shoes: 514 spices: 515 sports: 516 stationery: 517 supermarket: 518 swimming_pool: 519 tea: 520 ticket: 521 tiles: 522 tobacco: 523 toys: 524 trophy: 525 tyres: 526 variety_store: 527 video: 529 video_games: 530 watches: 531 weapons: 532 wine: 533 amenity: marketplace: 493 vending_machine: 528 sustenance: id: 560 children: amenity: bar: 561 bbq: 562 biergarten: 563 cafe: 564 drinking_water: 565 fast_food: 566 food_court: 567 ice_cream: 568 pub: 569 restaurant: 570 transport: id: 580 children: aeroway: aerodrome: 581 helipad: 598 heliport: 599 amenity: bicycle_parking: 583 bicycle_rental: 584 bicycle_repair_station: 585 boat_sharing: 586 bus_station: 587 bus_stop: 588 car_rental: 589 car_repair: 590 car_sharing: 591 car_wash: 592 charging_station: 593 ev_charging: 594 ferry_terminal: 595 fuel: 596 motorcycle_parking: 600 parking: 601 parking_entrance: 602 parking_space: 603 taxi: 606 railway: halt: 597 station: 604 tram_stop: 605 public_transport: platform: 607 stop_position: 608 stop_area: 609 station: 610 tourism: id: 620 children: tourism: artwork: 621 attraction: 622 information: 624 picnic_site: 625 viewpoint: 627 amenity: fountain: 623 shop: travel_agency: 626 These filters help narrow POIs to only those relevant to specific travel needs. ctx: The MCP context object for logging. Returns: The complete POI response object from OpenRouteService containing: - features: List of POI features with full details (names, categories, coordinates, properties, etc.) - info: Complete metadata about the request and response - All other fields returned by the OpenRouteService POI API",
          "parameters": []
        },
        {
          "name": "get_poi_names",
          "description": "Gets a simplified list of POI names near specified coordinates. Args: coordinates: A (longitude, latitude) tuple for the center point. buffer: Search radius in meters (default: 1000m). limit: Maximum number of POIs to return (default: 10). filters: Optional filters for POI categories. ctx: The MCP context object for logging. Returns: A list of POI names found in the area.",
          "parameters": []
        },
        {
          "name": "optimize_vehicle_routes",
          "description": "Solves Vehicle Routing Problems (VRP) using OpenRouteService's optimization endpoint. This is the main optimization tool that solves complex routing problems with multiple vehicles, jobs, capacity constraints, time windows, and other real-world constraints. Args: jobs: List of job objects describing places to visit. Each job should have: - id (int): Unique identifier - location (List[float]): [longitude, latitude] coordinates - Optional: service (int): Service time in seconds - Optional: time_windows (List[List[int]]): Valid time slots [[start, end]] - Optional: amount (List[int]): Multidimensional quantities (e.g., weight, volume) - Optional: skills (List[int]): Required vehicle skills - Optional: priority (int): Priority level 0-100 vehicles: List of vehicle objects describing available vehicles. Each vehicle should have: - id (int): Unique identifier - start (List[float]): [longitude, latitude] starting location - Optional: end (List[float]): [longitude, latitude] ending location - Optional: capacity (List[int]): Vehicle capacity for each dimension - Optional: skills (List[int]): Vehicle capabilities - Optional: time_window (List[int]): Working hours [start, end] - Optional: profile (str): Routing profile ('driving-car', 'cycling-regular', etc.) shipments: Optional list of pickup-delivery pairs. Each shipment has: - pickup: Pickup location details (similar to job) - delivery: Delivery location details (similar to job) - Optional: amount (List[int]): Quantities to transport matrices: Optional custom distance/duration matrices for faster computation. Format: {\"profile\": {\"durations\": [[...]], \"distances\": [[...]]}} ctx: The MCP context object for logging. Returns: Complete optimization solution including: - code: Status code (0 = success) - summary: Solution statistics (cost, routes, unassigned tasks) - routes: Detailed route information for each vehicle - unassigned: Tasks that couldn't be assigned Example: Simple 3-job, 1-vehicle problem: jobs = [ vehicles = [",
          "parameters": []
        },
        {
          "name": "create_simple_delivery_problem",
          "description": "Creates and solves a simple delivery optimization problem. This is a simplified interface for common delivery scenarios where you have: - One depot/warehouse location - Multiple delivery locations - One or more vehicles with similar characteristics Args: delivery_locations: List of (longitude, latitude) tuples for delivery points. Example: [(2.35, 48.86), (2.28, 48.87), (2.36, 48.84)] depot_location: (longitude, latitude) tuple for the depot/starting point. Example: (2.35, 48.85) vehicle_capacity: Optional list of integers representing vehicle capacity for different dimensions (e.g., [100] for 100 units capacity). If None, assumes no capacity constraints. service_times: Optional list of service times (in seconds) for each delivery location. If None, assumes no service time. If single value provided, applies to all locations. time_windows: Optional list of (start, end) time windows for each delivery. Times are in seconds from start of planning horizon. If None, assumes no time constraints. profile: The routing profile for the vehicles ctx: The MCP context object for logging. Returns: Complete optimization solution with routes and statistics. Example: Simple 3-delivery problem: delivery_locations = [(2.35, 48.86), (2.28, 48.87), (2.36, 48.84)] depot_location = (2.35, 48.85) vehicle_capacity = [100] # 100 units capacity service_times = [300, 400, 500] # 5, 6.67, 8.33 minutes per delivery",
          "parameters": []
        },
        {
          "name": "optimize_traveling_salesman",
          "description": "Solves the Traveling Salesman Problem (TSP) - finding the shortest route visiting all locations. This is a specialized optimization for the classic TSP where you need to visit all locations exactly once with minimal total travel time/distance. Args: locations: List of (longitude, latitude) tuples representing all locations to visit. Example: [(2.35, 48.86), (2.28, 48.87), (2.36, 48.84)] start_location: Optional (longitude, latitude) tuple for the starting point. If None, optimization will choose the best starting location. return_to_start: If True, the route will return to the starting location (round trip). If False, the route will end at the last visited location. ctx: The MCP context object for logging. Returns: Complete optimization solution including: - code: Status code (0 = success) - summary: Solution statistics (cost, routes, unassigned tasks) - routes: Detailed route information for each vehicle - unassigned: Tasks that couldn't be assigned",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Raghu6798/geopal_traveling_and_logistics/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "openRouteServiceApiKey",
          "required": true,
          "description": "OpenRouteService API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Raghu6798/geopal_traveling_and_logistics/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0246.@Raghu6798_geopal_traveling_and_logistics_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 242
  }
}