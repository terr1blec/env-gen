{
  "labels": {
    "analysis": "The MCP Server's core functionality revolves around watermarking PDF documents, both locally and online. Its tools allow embedding custom watermarks either on offline PDFs (via folder scanning) or online PDFs (via direct URL manipulation), enhancing document security and traceability. The primary purpose is to provide robust document protection and manipulation capabilities.",
    "reasoning": "The primary label \"Document Security\" was chosen because the server's core functionality is focused on securing documents through watermarking. The secondary label \"File Management\" is relevant because the tools allow manipulation of PDF files. Additional tools mention online PDF processing, which ties into the \"Cloud Services\" category, hence it is included as a secondary label. The existing predefined categories do not include a direct \"Document Security\" category, so this has been used as a custom primary label.",
    "primary_label": "File Management",
    "secondary_labels": [
      "File Management",
      "Cloud Services"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2306,
    "server_name": "Watermark Server",
    "rank_by_usage": 2307,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@A1ex-01_mcp-server-watermark.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@A1ex-01/mcp-server-watermark/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2306,
      "name": "Watermark Server",
      "author": "@A1ex-01/mcp-server-watermark",
      "overview": "Add watermarking capabilities to your MCP agents by embedding custom watermarks into PDF documents. Enhance document security and traceability seamlessly within your workflows. Enable your agents to manipulate PDFs with ease and precision.",
      "repository_url": "https://github.com/A1ex-01/mcp-server-watermark",
      "homepage": "https://smithery.ai/server/@A1ex-01/mcp-server-watermark",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@A1ex-01_mcp-server-watermark.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "scan-folder",
          "description": "Deploy Server Watermark Server @A1ex-01/mcp-server-watermark Try in Playground scan-folder",
          "parameters": [
            {
              "name": "input",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "watermark-local",
          "description": "Description not available",
          "parameters": [
            {
              "name": "input",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "watermark-link-to-link",
          "description": "读取在线文件地址，对在线文件地址的PDF文件添加水印，保存成在线地址",
          "parameters": [
            {
              "name": "input",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@A1ex-01/mcp-server-watermark/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@A1ex-01/mcp-server-watermark/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2307.@A1ex-01_mcp-server-watermark_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1983
  }
}