{
  "labels": {
    "analysis": "The MCP Server focuses on retrieving structured information about books and authors from the Open Library, specifically designed to enhance AI-assisted interactions with bibliographic data. Its primary tool enables AI assistants to fetch book details by title in a standardized JSON format, which suggests a strong emphasis on data retrieval, consistency, and integration with AI systems. The core functionality revolves around book and author information access, making it a specialized tool for literature-related queries.",
    "reasoning": "The primary label \"Web Search & Research\" was chosen because the server's core functionality involves retrieving detailed information from a database (Open Library), which aligns closely with research and information-gathering use cases. The structured JSON responses suggest a secondary focus on API integration, as the server is designed to provide standardized data outputs for AI systems. The secondary label \"Database Operations\" is also appropriate given the tool's interaction with Open Library's database. No custom label is necessary as the predefined categories sufficiently describe the server's functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Database Operations",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 143,
    "server_name": "Open Library MCP Server",
    "rank_by_usage": 144,
    "usage_count": "396",
    "original_file": "../crawler/smithery/@8enSmith_mcp-open-library.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@8enSmith/mcp-open-library/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_book_by_title",
          "description": "Search for a book by its title on Open Library.",
          "input_schema": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "The title of the book to search for."
              }
            },
            "required": [
              "title"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_book_by_title"
      ]
    },
    "server_info_crawled": {
      "id": 143,
      "name": "Open Library MCP Server",
      "author": "@8enSmith/mcp-open-library",
      "overview": "Enable AI assistants to search and retrieve detailed book and author information from the Open Library. Provide structured, consistent JSON responses for book titles, author details, and cover images. Enhance AI capabilities with comprehensive book and author data access via a standardized protocol.",
      "repository_url": "https://github.com/8enSmith/mcp-open-library",
      "homepage": "https://smithery.ai/server/@8enSmith/mcp-open-library",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "396",
      "success_rate": "99.05%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@8enSmith_mcp-open-library.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_book_by_title",
          "description": "Search for a book by its title on Open Library.",
          "input_schema": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "The title of the book to search for."
              }
            },
            "required": [
              "title"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@8enSmith/mcp-open-library/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@8enSmith/mcp-open-library/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0144.@8enSmith_mcp-open-library_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 141
  }
}