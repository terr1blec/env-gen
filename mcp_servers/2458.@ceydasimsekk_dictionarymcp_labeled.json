{
  "labels": {
    "analysis": "The MCP Server described is a Dictionary Server designed to provide word definitions and related linguistic information through a standardized protocol. The primary functionality is to offer dictionary lookup capabilities, which can enhance language understanding and vocabulary assistance within applications. The core problem this server solves is enabling quick and reliable access to dictionary data for automated systems or agents.",
    "reasoning": "The primary label \"Language & Lexicon\" is chosen because the server's core functionality revolves around dictionary lookups and word definitions, which are central to language understanding. Since this category is not predefined, a custom primary label is created. No secondary labels are needed as the functionality is narrowly focused on language and dictionary services.",
    "primary_label": "Others",
    "secondary_labels": [],
    "custom_label": "Dictionary Lookup",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": true
  },
  "metadata": {
    "server_id": 2457,
    "server_name": "Dictionary Server",
    "rank_by_usage": 2458,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@ceydasimsekk_dictionarymcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ceydasimsekk/dictionarymcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_definitions",
          "description": "\n    Get definitions for a word.\n    ",
          "input_schema": {
            "properties": {
              "word": {
                "title": "Word",
                "type": "string"
              }
            },
            "required": [
              "word"
            ],
            "title": "get_definitionsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_definitions"
      ]
    },
    "server_info_crawled": {
      "id": 2457,
      "name": "Dictionary Server",
      "author": "@ceydasimsekk/dictionarymcp",
      "overview": "Provide dictionary lookup capabilities to your agents by exposing word definitions and related information. Enhance language understanding and vocabulary assistance seamlessly within your applications. Enable quick and reliable access to dictionary data through a standardized protocol.",
      "repository_url": "https://github.com/ceydasimsekk/dictionarymcp",
      "homepage": "https://smithery.ai/server/@ceydasimsekk/dictionarymcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ceydasimsekk_dictionarymcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_definitions",
          "description": "\n    Get definitions for a word.\n    ",
          "input_schema": {
            "properties": {
              "word": {
                "title": "Word",
                "type": "string"
              }
            },
            "required": [
              "word"
            ],
            "title": "get_definitionsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@ceydasimsekk/dictionarymcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@ceydasimsekk/dictionarymcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "2458.@ceydasimsekk_dictionarymcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2098
  }
}