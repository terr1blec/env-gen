{
  "labels": {
    "analysis": "The MCP Server is designed to provide seamless access to NASA's extensive collection of astronomical and space-related data through various APIs. Its core functionality revolves around retrieving real-time and historical data related to space weather, Earth imagery, exoplanets, asteroids, and Mars rover missions. The server includes tools for querying specific datasets, managing API keys securely, and handling errors to ensure reliable data retrieval. It is primarily useful for applications that require integration with NASA's scientific resources, enabling enhanced AI knowledge with up-to-date space and astronomical information.",
    "reasoning": "The primary label, \"Web Search & Research,\" was chosen because the server's core functionality is to provide access to vast amounts of space and astronomical data, which can be used for research, educational purposes, and enhancing AI knowledge. The secondary labels, \"Data Analysis & Processing\" and \"API Integration,\" were selected because the server allows for querying and processing various types of scientific data and is built around integrating with NASA's APIs. The custom label, \"Astronomical Data Services,\" was added to specifically highlight the unique focus on NASA's space-related datasets.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Data Analysis & Processing",
      "API Integration"
    ],
    "custom_label": "Astronomical Data Services",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 686,
    "server_name": "NASA API Integration Server",
    "rank_by_usage": 687,
    "usage_count": "12",
    "original_file": "../crawler/smithery/@AnCode666_nasa-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@AnCode666/nasa-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 686,
      "name": "NASA API Integration Server",
      "author": "@AnCode666/nasa-mcp",
      "overview": "Provide seamless access to NASA's astronomical data, space weather, Earth imagery, and exoplanet information directly from your LLM applications. Query various NASA APIs including Astronomy Picture of the Day, Near Earth Objects, and more, enhancing your AI's knowledge with real-time space data. Securely manage API keys and handle errors for reliable data retrieval.",
      "repository_url": "https://github.com/AnCode666/nasa-mcp",
      "homepage": "https://smithery.ai/server/@AnCode666/nasa-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "12",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@AnCode666_nasa-mcp.json",
      "tools_count": 21,
      "tools": [
        {
          "name": "get_astronomy_picture_of_day",
          "description": "Deploy Server NASA API Integration Server @AnCode666/nasa-mcp Try in Playground get_astronomy_picture_of_day",
          "parameters": []
        },
        {
          "name": "get_asteroids_feed",
          "description": "Get a list of asteroids based on their closest approach date to Earth. Args: start_date: Start date for asteroid search in YYYY-MM-DD format. end_date: End date for asteroid search in YYYY-MM-DD format. The Feed date limit is only 7 Days. If not specified, 7 days after start_date is used.",
          "parameters": []
        },
        {
          "name": "get_asteroid_lookup",
          "description": "Look up a specific asteroid based on its NASA JPL ID. Args: asteroid_id: Asteroid ID in the NASA JPL small body (SPK-ID) system.",
          "parameters": []
        },
        {
          "name": "browse_asteroids",
          "description": "Browse the asteroid dataset.",
          "parameters": [
            {
              "name": "browse_asteroids",
              "required": false,
              "type": "string"
            },
            {
              "name": "Browse",
              "required": false,
              "type": "string"
            },
            {
              "name": "the",
              "required": false,
              "type": "string"
            },
            {
              "name": "asteroid",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_coronal_mass_ejection",
          "description": "Get coronal mass ejection (CME) data. Args: start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date. end_date: End date in YYYY-MM-DD format. Defaults to current date.",
          "parameters": []
        },
        {
          "name": "get_geomagnetic_storm",
          "description": "Get geomagnetic storm (GST) data. Args: start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date. end_date: End date in YYYY-MM-DD format. Defaults to current date.",
          "parameters": []
        },
        {
          "name": "get_solar_flare",
          "description": "Get solar flare (FLR) data. Args: start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date. end_date: End date in YYYY-MM-DD format. Defaults to current date.",
          "parameters": [
            {
              "name": "end_date",
              "required": false,
              "type": "string"
            },
            {
              "name": "start_date",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_solar_energetic_particle",
          "description": "Get solar energetic particle (SEP) data. Args: start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date. end_date: End date in YYYY-MM-DD format. Defaults to current date.",
          "parameters": []
        },
        {
          "name": "get_magnetopause_crossing",
          "description": "Get magnetopause crossing (MPC) data. Args: start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date. end_date: End date in YYYY-MM-DD format. Defaults to current date.",
          "parameters": []
        },
        {
          "name": "get_radiation_belt_enhancement",
          "description": "Get radiation belt enhancement (RBE) data. Args: start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date. end_date: End date in YYYY-MM-DD format. Defaults to current date.",
          "parameters": []
        },
        {
          "name": "get_hight_speed_stream",
          "description": "Get high speed stream (HSS) data. Args: start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date. end_date: End date in YYYY-MM-DD format. Defaults to current date.",
          "parameters": []
        },
        {
          "name": "get_wsa_enlil_simulation",
          "description": "Get WSA+Enlil simulation data. Args: start_date: Start date in YYYY-MM-DD format. Defaults to 7 days before current date. end_date: End date in YYYY-MM-DD format. Defaults to current date.",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "simulation",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_notifications",
          "description": "Get DONKI notifications. Args: start_date: Start date in YYYY-MM-DD format. Defaults to 7 days before current date. end_date: End date in YYYY-MM-DD format. Defaults to current date. notification_type: Notification type. Options: all, FLR, SEP, CME, IPS, MPC, GST, RBE, report.",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "DONKI",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_earth_imagery",
          "description": "Get Earth imagery from Landsat 8 satellite. Args: lat: Latitude. lon: Longitude. date: Image date in YYYY-MM-DD format. If not specified, the most recent image is used. dim: Width and height of the image in degrees (0.025 degrees is approximately 2.7 km). cloud_score: Calculate the percentage of the image covered by clouds (currently not available).",
          "parameters": []
        },
        {
          "name": "get_earth_assets",
          "description": "Get information about available imagery assets for a specific location and date. Args: lat: Latitude. lon: Longitude. date: Date in YYYY-MM-DD format. dim: Width and height of the image in degrees (0.025 degrees is approximately 2.7 km).",
          "parameters": []
        },
        {
          "name": "get_epic_imagery",
          "description": "Get images from the EPIC (Earth Polychromatic Imaging Camera). Args: collection: Collection type. Options: natural, enhanced.",
          "parameters": []
        },
        {
          "name": "get_epic_imagery_by_date",
          "description": "Get images from the EPIC (Earth Polychromatic Imaging Camera) for a specific date. Args: date: Date in YYYY-MM-DD format. collection: Collection type. Options: natural, enhanced.",
          "parameters": []
        },
        {
          "name": "get_epic_dates",
          "description": "Get available dates for EPIC images. Args: collection: Collection type. Options: natural, enhanced.",
          "parameters": []
        },
        {
          "name": "get_exoplanet_data",
          "description": "Get data from NASA's Exoplanet Archive. Args: query: Specific query to filter results using Exoplanet Archive syntax. Example: \"pl_orbper > 300 and pl_rade < 2\" table: Table to query. Common options: exoplanets (confirmed planets), cumulative (Kepler Objects of Interest), koi (subset of cumulative), tce (Threshold Crossing Events). format: Output format. Options: json, csv, xml, ipac. Default: json.",
          "parameters": [
            {
              "name": "Table",
              "required": false,
              "type": "string"
            },
            {
              "name": "to",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_mars_rover_photos",
          "description": "Get photos from a Mars rover (Curiosity, Opportunity, Spirit). Specify either sol (Martian day) or earth_date (YYYY-MM-DD), but not both. Args: rover_name: Name of the rover (curiosity, opportunity, spirit). sol: Martian sol (day number, starting from landing). Use if not using earth_date. earth_date: Earth date in YYYY-MM-DD format. Use if not using sol. camera: Filter by camera abbreviation (e.g., FHAZ, RHAZ, MAST, NAVCAM, PANCAM). See documentation for full list per rover. page: Page number for results (25 photos per page).",
          "parameters": []
        },
        {
          "name": "get_mars_rover_manifest",
          "description": "Get the mission manifest for a Mars rover (Curiosity, Opportunity, Spirit). Provides mission details like landing/launch dates, status, max sol/date, total photos, and photo counts per sol. Args: rover_name: Name of the rover (curiosity, opportunity, spirit).",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@AnCode666/nasa-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "nasaApiKey",
          "required": true,
          "description": "Your NASA API key for accessing NASA APIs"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@AnCode666/nasa-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0687.@AnCode666_nasa-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 671
  }
}