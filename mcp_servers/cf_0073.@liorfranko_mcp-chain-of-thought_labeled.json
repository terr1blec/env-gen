{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate systematic and structured programming workflows for AI Agents. Its core functionality revolves around task management, planning, and execution with a focus on improving development efficiency by avoiding redundant coding. The available tools enable deep task analysis, decomposition, execution tracking, and verification, ensuring consistent and high-quality outputs. The server emphasizes pseudocode generation, task consolidation, and project rule initialization.",
    "reasoning": "The primary label \"Development Tools\" is chosen because the server's primary functionality aligns with code analysis, task planning, and systematic programming workflows, which are essential for software development. The secondary labels \"Memory Management\" and \"Daily Productivity\" are selected because the server enhances task memory management and organizes development tasks, improving overall productivity. The custom label \"AI Development Assistance\" captures the unique aspect of guiding AI Agents through structured workflows.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Memory Management",
      "Daily Productivity"
    ],
    "custom_label": "AI Development Assistance",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 72,
    "server_name": "Chain of Thought",
    "rank_by_usage": 73,
    "usage_count": "1,198",
    "original_file": "../crawler/smithery/@liorfranko_mcp-chain-of-thought.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@liorfranko/mcp-chain-of-thought/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 72,
      "name": "Chain of Thought",
      "author": "@liorfranko/mcp-chain-of-thought",
      "overview": "Provide an intelligent task management system that guides AI Agents through structured workflows for systematic programming. Enhance task memory management to avoid redundant coding and improve development efficiency. Enable deep task planning, execution tracking, and project rule initialization to maintain consistency and quality.",
      "repository_url": "https://github.com/liorfranko/mcp-chain-of-thought",
      "homepage": "https://smithery.ai/server/@liorfranko/mcp-chain-of-thought",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "1,198",
      "success_rate": "99.95%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@liorfranko_mcp-chain-of-thought.json",
      "tools_count": 15,
      "tools": [
        {
          "name": "plan_task",
          "description": "Deploy Server Chain of Thought @liorfranko/mcp-chain-of-thought Try in Playground",
          "parameters": [
            {
              "name": "plan_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "analyze_task",
          "description": "Deeply analyze task requirements and systematically check the codebase, evaluate technical feasibility and potential risks. If code is needed, use pseudocode format providing only high-level logic flow and key steps, avoiding complete code.",
          "parameters": [
            {
              "name": "analyze_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "reflect_task",
          "description": "Critically review analysis results, evaluate solution completeness and identify optimization opportunities, ensuring the solution aligns with best practices. If code is needed, use pseudocode format providing only high-level logic flow and key steps, avoiding complete code.",
          "parameters": [
            {
              "name": "summary",
              "required": true,
              "type": "string"
            },
            {
              "name": "analysis",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "split_tasks",
          "description": "Decompose complex tasks into independent subtasks, establishing dependencies and priorities. ## updateMode - **append**: Keep existing tasks and add new ones - **overwrite**: Delete unfinished tasks, keep completed ones - **selective**: Intelligently match and update existing tasks based on name - **clearAllTasks**: Clear all tasks and create a backup (preferred mode) ## Key Requirements - **Provide concise pseudocode**: Only provide high-level logic flow and key steps, avoid complete code - **Consolidate when necessary**: Simple modifications can be integrated with other tasks to avoid excessive task count - **Submit in batches**: If there are too many tasks, use the \"split_tasks\" tool with parameters not exceeding 5000 characters",
          "parameters": []
        },
        {
          "name": "list_tasks",
          "description": "Generate a structured task list, including complete status tracking, priority, and dependencies",
          "parameters": [
            {
              "name": "list_tasks",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "execute_task",
          "description": "Execute a specific task according to the predefined plan, ensuring the output of each step meets quality standards",
          "parameters": [
            {
              "name": "execute_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "verify_task",
          "description": "Comprehensively verify task completion, ensuring all requirements and technical standards are met without missing details",
          "parameters": [
            {
              "name": "verify_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "complete_task",
          "description": "Formally mark a task as completed, generate a detailed completion report, and update the dependency status of related tasks",
          "parameters": [
            {
              "name": "complete_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_task",
          "description": "Delete unfinished tasks, but does not allow deleting completed tasks, ensuring the integrity of system records",
          "parameters": [
            {
              "name": "delete_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "clear_all_tasks",
          "description": "Clear unfinished tasks and reset the task list",
          "parameters": [
            {
              "name": "confirm",
              "required": true,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_task",
          "description": "Update task content, including name, description and notes, dependent tasks, related files, implementation guide and verification criteria. Completed tasks only allow updating summary and related files",
          "parameters": [
            {
              "name": "update_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_task",
          "description": "Search tasks by keyword or ID, displaying abbreviated task information",
          "parameters": [
            {
              "name": "query_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_task_detail",
          "description": "Get the complete detailed information of a task based on its ID, including unabridged implementation guides and verification criteria, etc.",
          "parameters": [
            {
              "name": "get_task_detail",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "process_thought",
          "description": "Engage in a flexible and evolving thinking process by creating, questioning, validating, and refining ideas to progressively deepen understanding and generate effective solutions. When needing to gather data, analyze, or research, prioritize reviewing relevant project code; if such code doesn't exist, search the web rather than speculating. Set nextThoughtNeeded to false when thinking is sufficient, otherwise adjust total_thoughts to extend the process",
          "parameters": [
            {
              "name": "process_thought",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "init_project_rules",
          "description": "Initialize project rules. Call this tool when the user requests to generate or initialize the project specification file, or if the user requests to change or update the project specification.",
          "parameters": [
            {
              "name": "init_project_rules",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@liorfranko/mcp-chain-of-thought/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@liorfranko/mcp-chain-of-thought/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0073.@liorfranko_mcp-chain-of-thought_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 72
  }
}