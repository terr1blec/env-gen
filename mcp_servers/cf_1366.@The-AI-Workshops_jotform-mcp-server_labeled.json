{
  "labels": {
    "analysis": "The MCP Server acts as an intermediary for interacting with the JotForm API, providing tools to manage users, forms, submissions, folders, and reports easily through MCP interfaces. It handles various operations such as creating, updating, retrieving, and deleting form-related data, managing user accounts, and searching submissions. The primary focus is on streamlining form management, submissions handling, and data retrieval, making it ideal for workflows requiring integration with JotForm's services.",
    "reasoning": "The primary label, \"Form Management,\" is chosen because the server's core functionality revolves around managing forms, submissions, and related activities through JotForm API. Secondary labels like \"Database Operations\" and \"API Integration\" reflect the server's ability to query and manipulate data and its role as an interfacing tool between applications and JotForm's backend. The functionality is specific to JotForm, so a custom label is not necessary.",
    "primary_label": "Others",
    "secondary_labels": [
      "Database Operations",
      "API Integration"
    ],
    "custom_label": "Form Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1365,
    "server_name": "JotForm API Server",
    "rank_by_usage": 1366,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@The-AI-Workshops_jotform-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@The-AI-Workshops/jotform-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1365,
      "name": "JotForm API Server",
      "author": "@The-AI-Workshops/jotform-mcp-server",
      "overview": "Enable seamless interaction with the JotForm API through a standardized MCP server interface. Perform user, form, submission, folder, and report management operations easily via exposed tools. Simplify integration of JotForm data and actions into your applications or workflows.",
      "repository_url": "https://github.com/The-AI-Workshops/jotform-mcp-server",
      "homepage": "https://smithery.ai/server/@The-AI-Workshops/jotform-mcp-server",
      "remote_or_local": "Remote",
      "license": "GPL-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@The-AI-Workshops_jotform-mcp-server.json",
      "tools_count": 50,
      "tools": [
        {
          "name": "get_user",
          "description": "Deploy Server JotForm API Server @The-AI-Workshops/jotform-mcp-server Try in Playground",
          "parameters": []
        },
        {
          "name": "get_usage",
          "description": "Get number of form submissions received this month. Returns: Number of submissions, SSL submissions, payment submissions, and upload space used as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_forms",
          "description": "Get a list of forms for this account. Args: ctx: The MCP server context. offset (Optional[int]): Start of each result set for form list. limit (Optional[int]): Number of results in each result set for form list. filter_array (Optional[Dict[str, Any]]): Filters the query results. Example: {\"status:eq\": \"ENABLED\"} order_by (Optional[str]): Order results by a form field name. Returns: Basic details of forms as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_submissions",
          "description": "Get a list of submissions for this account. Args: ctx: The MCP server context. offset (Optional[int]): Start of each result set. limit (Optional[int]): Number of results in each result set. filter_array (Optional[Dict[str, Any]]): Filters the query results. order_by (Optional[str]): Order results by a field name. Returns: Basic details of submissions as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_subusers",
          "description": "Get a list of sub users for this account. Returns: List of forms and form folders with access privileges as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_folders",
          "description": "Get a list of form folders for this account. Returns: Name of the folder and owner of the folder for shared folders as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_reports",
          "description": "List of URLs for reports in this account. Returns: Reports for all of the forms (Excel, CSV, etc.) as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_settings",
          "description": "Get user's settings for this account. Returns: User's time zone and language as a JSON string.",
          "parameters": []
        },
        {
          "name": "update_settings",
          "description": "Update user's settings. Args: ctx: The MCP server context. settings (Dict[str, Any]): New user setting values with setting keys. Returns: Changes on user settings as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_history",
          "description": "Get user activity log. Args: ctx: The MCP server context. action (Optional[str]): Filter results by activity performed. Default is 'all'. date (Optional[str]): Limit results by a date range. sort_by (Optional[str]): Lists results by ascending and descending order. start_date (Optional[str]): Limit results to only after a specific date. Format: MM/DD/YYYY. end_date (Optional[str]): Limit results to only before a specific date. Format: MM/DD/YYYY. Returns: Activity log as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_form",
          "description": "Get basic information about a form.\n\n    Args:\n        ctx: The MCP server context.\n        form_id (str): Form ID.\n\n    Returns:\n        Form details as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_form_questions",
          "description": "Get a list of all questions on a form. Args: ctx: The MCP server context. form_id (str): Form ID. Returns: Question properties of a form as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_form_question",
          "description": "Description not available",
          "parameters": []
        },
        {
          "name": "get_form_submissions",
          "description": "List of a form submissions. Args: ctx: The MCP server context. form_id (str): Form ID. offset (Optional[int]): Start of each result set. limit (Optional[int]): Number of results in each result set. filter_array (Optional[Dict[str, Any]]): Filters the query results. order_by (Optional[str]): Order results by a field name. Returns: Submissions of a specific form as a JSON string.",
          "parameters": [
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "offset",
              "required": false,
              "type": "string"
            },
            {
              "name": "form_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "order_by",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter_array",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_form_submission",
          "description": "Submit data to this form using the API. Args: ctx: The MCP server context. form_id (str): Form ID. submission (Dict[str, Any]): Submission data with question IDs. Example: {\"1_first\": \"John\", \"1_last\": \"Doe\", \"2\": \"test@example.com\"} For complex fields like name (qid_first, qid_last) or address (qid_addr_line1), use the underscore notation. Returns: Posted submission ID and URL as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_form_submissions",
          "description": "Description not available",
          "parameters": [
            {
              "name": "form_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "submissions",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_form_files",
          "description": "List of files uploaded on a form. Args: ctx: The MCP server context. form_id (str): Form ID. Returns: Uploaded file information and URLs as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_form_webhooks",
          "description": "Get list of webhooks for a form. Args: ctx: The MCP server context. form_id (str): Form ID. Returns: List of webhooks as a JSON string.",
          "parameters": []
        },
        {
          "name": "create_form_webhook",
          "description": "Add a new webhook. Args: ctx: The MCP server context. form_id (str): Form ID. webhook_url (str): Webhook URL. Returns: List of webhooks for the form as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_form_webhook",
          "description": "Delete a specific webhook of a form. Args: ctx: The MCP server context. form_id (str): Form ID. webhook_id (str): Webhook ID. Returns: Remaining webhook URLs of form as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_submission",
          "description": "Get submission data.\n\n    Args:\n        ctx: The MCP server context.\n        sid (str): Submission ID.\n\n    Returns:\n        Information and answers of a specific submission as a JSON string.",
          "parameters": []
        },
        {
          "name": "delete_submission",
          "description": "Delete a single submission. Args: ctx: The MCP server context. sid (str): Submission ID. Returns: Status of request as a JSON string.",
          "parameters": []
        },
        {
          "name": "edit_submission",
          "description": "Edit a single submission. Args: ctx: The MCP server context. sid (str): Submission ID. submission (Dict[str, Any]): New submission data with question IDs. Returns: Status of request as a JSON string.",
          "parameters": [
            {
              "name": "sid",
              "required": false,
              "type": "string"
            },
            {
              "name": "Submission",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_report",
          "description": "Get report details.\n\n    Args:\n        ctx: The MCP server context.\n        report_id (str): Report ID.\n\n    Returns:\n        Properties of a specific report as a JSON string.",
          "parameters": []
        },
        {
          "name": "create_report",
          "description": "Create new report of a form. Args: ctx: The MCP server context. form_id (str): Form ID. report (Dict[str, Any]): Report details (list_type, title, etc.). Returns: Report details and URL as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_report",
          "description": "Delete a specific report. Args: ctx: The MCP server context. report_id (str): Report ID. Returns: Status of request as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_folder",
          "description": "Get folder details.\n\n    Args:\n        ctx: The MCP server context.\n        folder_id (str): Folder ID.\n\n    Returns:\n        A list of forms in a folder and other details as a JSON string.",
          "parameters": []
        },
        {
          "name": "create_folder",
          "description": "Create a new folder. Args: ctx: The MCP server context. folder_properties (Dict[str, Any]): Properties of the new folder. Returns: New folder details as a JSON string.",
          "parameters": []
        },
        {
          "name": "delete_folder",
          "description": "Delete a specific folder and its subfolders. Args: ctx: The MCP server context. folder_id (str): Folder ID. Returns: Status of request as a JSON string.",
          "parameters": []
        },
        {
          "name": "update_folder",
          "description": "Update a specific folder. Args: ctx: The MCP server context. folder_id (str): Folder ID. folder_properties (Union[Dict[str, Any], str]): New properties of the folder (dict or JSON string). The client method expects a JSON string for the PUT body. Returns: Status of request as a JSON string.",
          "parameters": [
            {
              "name": "folder_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Folder",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "add_forms_to_folder",
          "description": "Add forms to a folder. Args: ctx: The MCP server context. folder_id (str): Folder ID. form_ids (List[str]): List of Form IDs. Returns: Status of request as a JSON string.",
          "parameters": [
            {
              "name": "folder_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Folder",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "add_form_to_folder",
          "description": "Add a specific form to a folder. Args: ctx: The MCP server context. folder_id (str): Folder ID. form_id (str): Form ID. Returns: Status of request as a JSON string.",
          "parameters": [
            {
              "name": "folder_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Folder",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_form_properties",
          "description": "Get a list of all properties on a form. Args: ctx: The MCP server context. form_id (str): Form ID. Returns: Form properties as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_form_property",
          "description": "Get a specific property of the form. Args: ctx: The MCP server context. form_id (str): Form ID. property_key (str): Property key. Returns: Given property key value as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "set_form_properties",
          "description": "Add or edit properties of a specific form (POST). Args: ctx: The MCP server context. form_id (str): Form ID. form_properties (Dict[str, Any]): New properties. Returns: Edited properties as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "set_multiple_form_properties",
          "description": "Add or edit properties of a specific form (PUT). Args: ctx: The MCP server context. form_id (str): Form ID. form_properties (Union[Dict[str, Any], str]): New properties (dict or JSON string). The client method expects a JSON string for the PUT body. Returns: Edited properties as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_form_reports",
          "description": "Get all the reports of a form. Args: ctx: The MCP server context. form_id (str): Form ID. Returns: List of all reports in a form as a JSON string.",
          "parameters": []
        },
        {
          "name": "clone_form",
          "description": "Clone a single form. Args: ctx: The MCP server context. form_id (str): Form ID. Returns: Status of request (details of the new cloned form) as a JSON string.",
          "parameters": []
        },
        {
          "name": "delete_form_question",
          "description": "Delete a single form question. Args: ctx: The MCP server context. form_id (str): Form ID. qid (str): Question ID. Returns: Status of request as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_form_question",
          "description": "Add new question to specified form. Args: ctx: The MCP server context. form_id (str): Form ID. question (Dict[str, Any]): New question properties. Returns: Properties of new question as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_form_questions",
          "description": "Add new questions to specified form (PUT). Args: ctx: The MCP server context. form_id (str): Form ID. questions (Union[List[Dict[str, Any]], str]): New questions (list of dicts or JSON string). The client method expects a JSON string for the PUT body. Returns: Properties of new questions as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "edit_form_question",
          "description": "Add or edit a single question properties. Args: ctx: The MCP server context. form_id (str): Form ID. qid (str): Question ID. question_properties (Dict[str, Any]): New question properties. Returns: Edited property and type of question as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_form",
          "description": "Create a new form.\n\n    Args:\n        ctx: The MCP server context.\n        form_definition (Dict[str, Any]): Questions, properties, and emails of the new form.\n            Example: {\"questions\": [{\"type\": \"control_textbox\", \"text\": \"Name\", \"order\": \"1\"}],\n                      \"properties\": {\"title\": \"My New Form\"}}\n\n    Returns:\n        New form details as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_forms",
          "description": "Create new forms (PUT). Args: ctx: The MCP server context. forms_definition (Union[List[Dict[str, Any]], str]): List of form definitions or a JSON string. The client method expects a JSON string for the PUT body. Returns: New forms details as a JSON string.",
          "parameters": []
        },
        {
          "name": "delete_form",
          "description": "Delete a specific form.\n\n    Args:\n        ctx: The MCP server context.\n        form_id (str): Form ID.\n\n    Returns:\n        Properties of deleted form as a JSON string.",
          "parameters": [
            {
              "name": "form_id",
              "required": false,
              "type": "string"
            },
            {
              "name": "Form",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "register_user",
          "description": "Register with username, password and email. Args: ctx: The MCP server context. user_details (Dict[str, str]): Username, password, and email. Returns: New user's details as a JSON string.",
          "parameters": []
        },
        {
          "name": "login_user",
          "description": "Login user with given credentials. Args: ctx: The MCP server context. credentials (Dict[str, str]): Username, password, application name, and access type. Returns: Logged in user's settings and app key as a JSON string.",
          "parameters": []
        },
        {
          "name": "logout_user",
          "description": "Logout user.\n\n    Returns:\n        Status of request as a JSON string.",
          "parameters": []
        },
        {
          "name": "get_plan",
          "description": "Get details of a plan. Args: ctx: The MCP server context. plan_name (str): Name of the requested plan (e.g., FREE, PREMIUM). Returns: Details of a plan as a JSON string.",
          "parameters": []
        },
        {
          "name": "search_submissions_by_date",
          "description": "Search submissions by date range or period across specified forms or all enabled forms. Provide EITHER 'period' OR ('start_date' and/or 'end_date'). Args: ctx: The MCP server context. form_ids (Optional[List[str]]): List of form IDs to search. If None or empty, searches all *enabled* forms. start_date (Optional[str]): Start date in YYYY-MM-DD format (inclusive). Use with end_date. end_date (Optional[str]): End date in YYYY-MM-DD format (inclusive). Use with start_date. period (Optional[str]): Relative period. Options: \"today\", \"last_7_days\", \"last_30_days\", \"current_month\", \"last_month\", \"current_accounting_month\", \"last_accounting_month\". Cannot be used with start_date/end_date. limit_per_form (Optional[int]): Max submissions per form request (default/max 1000). Returns: A JSON string containing a list of submissions aggregated from all searched forms, or an error message.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@The-AI-Workshops/jotform-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiKey",
          "required": true,
          "description": "Your JotForm API Key (from https://www.jotform.com/myaccount/api)."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@The-AI-Workshops/jotform-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1366.@The-AI-Workshops_jotform-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1285
  }
}