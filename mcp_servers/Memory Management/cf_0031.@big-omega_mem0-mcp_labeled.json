{
  "labels": {
    "analysis": "The MCP Server described is primarily focused on memory storage, retrieval, and contextual awareness for AI tools. It allows users to store and search past interactions to maintain context and improve decision-making. The available tools include memory management functions (add-memory, search-memories), process tree inspection (get-process-tree), and command execution (execute-command). This suggests the server's core functionality revolves around memory storage and retrieval, with some additional utilities for system monitoring and command execution.",
    "reasoning": "The primary label \"Memory Management\" was chosen because the server's core functionality is about storing and retrieving user memories to maintain context. The secondary label \"Operating System\" was selected due to the availability of system monitoring and command execution tools. No custom label is necessary as the predefined categories sufficiently cover the server's functionality.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "Operating System"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 30,
    "server_name": "Mem0 Memory Server",
    "rank_by_usage": 31,
    "usage_count": "3,913",
    "original_file": "../crawler/smithery/@big-omega_mem0-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@big-omega/mem0-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 30,
      "name": "Mem0 Memory Server",
      "author": "@big-omega/mem0-mcp",
      "overview": "Store and search user-specific memories to maintain context and enable informed decision-making based on past interactions. Seamlessly integrate memory capabilities into your AI tools with a simple and intuitive API. Enhance your agents with relevance-scored memory retrieval for improved contextual awareness.",
      "repository_url": "https://github.com/big-omega/mem0-mcp",
      "homepage": "https://smithery.ai/server/@big-omega/mem0-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "3,913",
      "success_rate": "99.93%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@big-omega_mem0-mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "add-memory",
          "description": "Deploy Server Mem0 Memory Server @big-omega/mem0-mcp Try in Playground",
          "parameters": []
        },
        {
          "name": "search-memories",
          "description": "Search through stored memories. This method is called ANYTIME the user asks anything.",
          "parameters": []
        },
        {
          "name": "get-process-tree",
          "description": "Get the current process tree from the environment. This is similar to running `ps -eaf --forest` in a Linux environment.",
          "parameters": []
        },
        {
          "name": "execute-command",
          "description": "Execute a shell command and return the output.",
          "parameters": [
            {
              "name": "command",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@big-omega/mem0-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "mem0ApiKey",
          "required": true,
          "description": "Mem0 API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@big-omega/mem0-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0031.@big-omega_mem0-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 30
  }
}