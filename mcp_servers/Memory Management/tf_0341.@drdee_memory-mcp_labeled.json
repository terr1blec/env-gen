{
  "labels": {
    "analysis": "The MCP Server is primarily designed for storing, retrieving, and managing \"memories\" or data entries through a command-line interface. Its core functionality revolves around persistent data storage and recall, making it suitable for applications requiring a simple memory backend. The available tools focus on basic CRUD (Create, Read, Update, Delete) operations for managing data entries.",
    "reasoning": "The primary label \"Memory Management\" is chosen because the server's core purpose is to store and retrieve memories (data). This aligns well with the \"Memory Management\" category, which includes knowledge bases and note-taking. No secondary labels are needed as the predefined categories adequately cover the functionality.",
    "primary_label": "Memory Management",
    "secondary_labels": [],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 340,
    "server_name": "Memory MCP",
    "rank_by_usage": 341,
    "usage_count": "90",
    "original_file": "../crawler/smithery/@drdee_memory-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@drdee/memory-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "remember",
          "description": "Store a new memory.",
          "input_schema": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "A concise title for the memory"
              },
              "content": {
                "type": "string",
                "description": "The full content of the memory to store"
              }
            },
            "required": [
              "title",
              "content"
            ],
            "title": "rememberArguments"
          },
          "annotations": null
        },
        {
          "name": "get_memory",
          "description": "Retrieve a specific memory by ID or title.",
          "input_schema": {
            "type": "object",
            "properties": {
              "memory_id": {
                "type": "integer",
                "description": "The ID of the memory to retrieve"
              },
              "title": {
                "type": "string",
                "description": "The title of the memory to retrieve"
              }
            },
            "title": "getMemoryArguments"
          },
          "annotations": null
        },
        {
          "name": "list_memories",
          "description": "List all stored memories.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "title": "listMemoriesArguments"
          },
          "annotations": null
        },
        {
          "name": "update_memory",
          "description": "Update an existing memory.",
          "input_schema": {
            "type": "object",
            "properties": {
              "memory_id": {
                "type": "integer",
                "description": "The ID of the memory to update"
              },
              "title": {
                "type": "string",
                "description": "Optional new title for the memory"
              },
              "content": {
                "type": "string",
                "description": "Optional new content for the memory"
              }
            },
            "required": [
              "memory_id"
            ],
            "title": "updateMemoryArguments"
          },
          "annotations": null
        },
        {
          "name": "delete_memory",
          "description": "Delete a memory.",
          "input_schema": {
            "type": "object",
            "properties": {
              "memory_id": {
                "type": "integer",
                "description": "The ID of the memory to delete"
              }
            },
            "required": [
              "memory_id"
            ],
            "title": "deleteMemoryArguments"
          },
          "annotations": null
        }
      ],
      "tool_count": 5,
      "tool_names": [
        "remember",
        "get_memory",
        "list_memories",
        "update_memory",
        "delete_memory"
      ]
    },
    "server_info_crawled": {
      "id": 340,
      "name": "Memory MCP",
      "author": "@drdee/memory-mcp",
      "overview": "Store and retrieve memories effortlessly with this server. Utilize a simple command-line interface to manage your memories, making it easy to remember important information. Enhance your applications with memory capabilities using a reliable and efficient backend.",
      "repository_url": "https://github.com/drdee/memory-mcp",
      "homepage": "https://smithery.ai/server/@drdee/memory-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "90",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@drdee_memory-mcp.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "remember",
          "description": "Store a new memory.",
          "input_schema": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "A concise title for the memory"
              },
              "content": {
                "type": "string",
                "description": "The full content of the memory to store"
              }
            },
            "required": [
              "title",
              "content"
            ],
            "title": "rememberArguments"
          },
          "annotations": null
        },
        {
          "name": "get_memory",
          "description": "Retrieve a specific memory by ID or title.",
          "input_schema": {
            "type": "object",
            "properties": {
              "memory_id": {
                "type": "integer",
                "description": "The ID of the memory to retrieve"
              },
              "title": {
                "type": "string",
                "description": "The title of the memory to retrieve"
              }
            },
            "title": "getMemoryArguments"
          },
          "annotations": null
        },
        {
          "name": "list_memories",
          "description": "List all stored memories.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "title": "listMemoriesArguments"
          },
          "annotations": null
        },
        {
          "name": "update_memory",
          "description": "Update an existing memory.",
          "input_schema": {
            "type": "object",
            "properties": {
              "memory_id": {
                "type": "integer",
                "description": "The ID of the memory to update"
              },
              "title": {
                "type": "string",
                "description": "Optional new title for the memory"
              },
              "content": {
                "type": "string",
                "description": "Optional new content for the memory"
              }
            },
            "required": [
              "memory_id"
            ],
            "title": "updateMemoryArguments"
          },
          "annotations": null
        },
        {
          "name": "delete_memory",
          "description": "Delete a memory.",
          "input_schema": {
            "type": "object",
            "properties": {
              "memory_id": {
                "type": "integer",
                "description": "The ID of the memory to delete"
              }
            },
            "required": [
              "memory_id"
            ],
            "title": "deleteMemoryArguments"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@drdee/memory-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@drdee/memory-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0341.@drdee_memory-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 337
  }
}