{
  "labels": {
    "analysis": "The Verodat MCP Server is a data management system that integrates with AI to facilitate dataset creation, retrieval, and analysis. Its core functionality revolves around managing structured datasets with capabilities for querying, filtering, and analyzing data. The tools provided enable comprehensive dataset management, from creation to complex AI-powered queries, with features for data schema inspection, query execution, and workspace context retrieval.",
    "reasoning": "The primary label is chosen because the server's main functionality is data management, storage, and retrieval, which aligns closely with the purpose of a knowledge base or data storage system. Database Operations and AI/ML Tools are appropriate secondary labels due to the tools that enable SQL-like querying and AI-powered data analysis.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "Database Operations",
      "AI/ML Tools"
    ],
    "custom_label": "AI-Augmented Data Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1821,
    "server_name": "Verodat MCP Server",
    "rank_by_usage": 1822,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Verodat_verodat-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Verodat/verodat-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1821,
      "name": "Verodat MCP Server",
      "author": "@Verodat/verodat-mcp-server",
      "overview": "Integrate Verodat's data management capabilities with AI systems seamlessly.",
      "repository_url": "https://github.com/Verodat/verodat-mcp-server",
      "homepage": "https://smithery.ai/server/@Verodat/verodat-mcp-server",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Verodat_verodat-mcp-server.json",
      "tools_count": 9,
      "tools": [
        {
          "name": "create-dataset",
          "description": "Deploy Server Verodat MCP Server @Verodat/verodat-mcp-server Try in Playground create-dataset",
          "parameters": [
            {
              "name": "true",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-datasets",
          "description": "WHEN TO USE: - When you need to list all available datasets in a workspace - When checking if a specific dataset exists - When displaying dataset metadata to users - When finding datasets by state (DRAFT/STAGE/PUBLISHED) - When you need to know the last update time of datasets - Before performing operations that require dataset IDs - Use default filter = 'vscope=PUBLISHED and vstate=ACTIVE' when filter is not available from request - Use other tools like get-accounts and get-workspaces to retrieve the account and workspace IDs when they are not provided in the request. Tool Description: Retrieves datasets from a workspace with filtering capabilities. Required parameters: - workspaceId: Workspace ID to query - accountId: accountId where workspace is located - filter: vscope and vstate value Optional parameters: - max: Maximum records to return (default: 9999) - offset: Pagination offset (default: 0) Common filter patterns: - Published & Active: \"vscope=PUBLISHED and vstate=ACTIVE\" Example usage: Getting draft datasets: \"accountId\": 123, \"workspaceId\": 123, \"filter\": \"vscope=DRAFT and vstate=ACTIVE\"",
          "parameters": []
        },
        {
          "name": "get-dataset-output",
          "description": "WHEN TO USE: - When you need to read actual data stored in a dataset - When analyzing data for reporting or visualization - When validating data quality or completeness - When exporting data for external use - When searching for specific records within a dataset - When paginating through large datasets - When filtering data based on specific criteria - Use default filter = 'vscope=PUBLISHED and vstate=ACTIVE' when filter is not available from request - Use other tools like get-accounts and get-workspaces to retrieve the account and workspace IDs when they are not provided in the request. Tool Description: Retrieves actual data records from a dataset with filtering and pagination. Required parameters: - datasetId: dataset ID to get data output for - workspaceId: Workspace ID to query - accountId: where workspace is located - filter: vscope and vstate value Optional parameters: - max: Maximum records (default: 9999) - offset: Pagination offset (default: 0) Example usage: Getting recent customer records: \"accountId\": 123, \"workspaceId\": 123, \"datasetId\": 456, \"filter\": \"vscope=DRAFT and vstate=ACTIVE\", \"max\": 9999",
          "parameters": []
        },
        {
          "name": "get-accounts",
          "description": "get-datasets WHEN TO USE: - When you need to list all available datasets in a workspace - When checking if a specific dataset exists - When displaying dataset metadata to users - When finding datasets by state (DRAFT/STAGE/PUBLISHED) - When you need to know the last update time of datasets - Before performing operations that require dataset IDs - Use default filter = 'vscope=PUBLISHED and vstate=ACTIVE' when filter is not available from request - Use other tools like get-accounts and get-workspaces to retrieve the account and workspace IDs when they are not provided in the request. Tool Description: Retrieves datasets from a workspace with filtering capabilities. Required parameters: - workspaceId: Workspace ID to query - accountId: accountId where workspace is located - filter: vscope and vstate value Optional parameters: - max: Maximum records to return (default: 9999) - offset: Pagination offset (default: 0) Common filter patterns: - Published & Active: \"vscope=PUBLISHED and vstate=ACTIVE\" Example usage: Getting draft datasets: \"accountId\": 123, \"workspaceId\": 123, \"filter\": \"vscope=DRAFT and vstate=ACTIVE\"",
          "parameters": []
        },
        {
          "name": "get-workspaces",
          "description": "get-datasets WHEN TO USE: - When you need to list all available datasets in a workspace - When checking if a specific dataset exists - When displaying dataset metadata to users - When finding datasets by state (DRAFT/STAGE/PUBLISHED) - When you need to know the last update time of datasets - Before performing operations that require dataset IDs - Use default filter = 'vscope=PUBLISHED and vstate=ACTIVE' when filter is not available from request - Use other tools like get-accounts and get-workspaces to retrieve the account and workspace IDs when they are not provided in the request. Tool Description: Retrieves datasets from a workspace with filtering capabilities. Required parameters: - workspaceId: Workspace ID to query - accountId: accountId where workspace is located - filter: vscope and vstate value Optional parameters: - max: Maximum records to return (default: 9999) - offset: Pagination offset (default: 0) Common filter patterns: - Published & Active: \"vscope=PUBLISHED and vstate=ACTIVE\" Example usage: Getting draft datasets: \"accountId\": 123, \"workspaceId\": 123, \"filter\": \"vscope=DRAFT and vstate=ACTIVE\"",
          "parameters": []
        },
        {
          "name": "get-ai-context",
          "description": "WHEN TO USE: - Before executing AI queries to understand available data structure - When needing to know the schema of datasets in a workspace - When mapping dataset fields for query construction - When validating data relationships - When building context-aware AI operations - When needing metadata about workspace configuration - When checking for recent updates to dataset structures Tool Description: Retrieves comprehensive workspace context including dataset configurations and metadata. Required parameters: - workspaceId: Target workspace ID - accountId: Account ID Example usage: \"workspaceId\": 123, \"accountId\": 456",
          "parameters": []
        },
        {
          "name": "execute-ai-query",
          "description": "WHEN TO USE: - When performing queries on data - When analyzing data - When generating reports from complex data relationships - When users need to query data without knowing SQL - When performing ad-hoc data analysis - When filtering and aggregating data based on specific criteria - When transforming data for visualization or export Tool Description: Executes AI-powered queries on dataset data, get structured queries and give data by executing that queries. Model have to transform natural language into queries and pass that generated queries in request. Retrieve the name of the product which has the highest rate. Now Model will convert above input of user into query and that query will used as input in this tool to get data. Required parameters: - accountId: Account ID - workspaceId: Workspace ID - query: queries that can be executable (e.g. SELECT product_name FROM products ORDER BY rate DESC LIMIT 1) Example usage: \"accountId\": 123, \"workspaceId\": 456, \"query\": \"SELECT product_name FROM products ORDER BY rate DESC LIMIT 1\"",
          "parameters": []
        },
        {
          "name": "get-dataset-targetfields",
          "description": "WHEN TO USE: - When you need to retrieve and inspect all target fields/columns defined in a dataset - When you need to understand the complete schema structure of a dataset - When validating field configurations and their data types (string, number, etc.) - When checking which fields are mandatory versus optional in the dataset - When reviewing field descriptions and metadata - When needing to check field properties like isKeyComponent and isCompound - When reviewing field naming conventions and SQL names Tool Description: Retrieves target fields configuration for a specific dataset with filtering and sorting capabilities. Required parameters: - accountId: Account ID where the workspace belongs - workspaceId: Workspace ID containing the dataset - datasetId: Dataset ID to fetch target fields from Optional parameters: - max: Maximum records to return (default: 1000) - offset: Pagination offset (default: 0) - filter: Filter string with prefix 'name contains ' for target fields (e.g., \"name contains 'count'\", \"name contains 'first'\", \"name contains 'last'\") - sort: Sort criteria with optional direction (e.g., \"name,asc\", \"datatype,desc\", \"description,asc\", \"mandatory,asc\", \"isKeyComponent,desc\", \"isCompound,asc\") Example usage: \"accountId\": 123, \"workspaceId\": 178, \"datasetId\": 3328, \"filter\": \"name contains 'count'\", \"sort\": \"name,desc\"",
          "parameters": []
        },
        {
          "name": "get-queries",
          "description": "WHEN TO USE: - When you need to retrieve existing AI queries for a workspace - When searching for specific query patterns or questions - When analyzing query usage statistics - When reviewing query history - When sorting queries by different criteria - When filtering queries based on question content Tool Description: Retrieves AI queries with filtering, sorting and pagination capabilities. Required parameters: - accountId: Account ID where the workspace belongs - workspaceId: Workspace ID to get queries from Optional parameters: - max: Maximum records to return (default: 10) - offset: Pagination offset (default: 0) - filter: Filter string (e.g., \"question CONTAINS 'batting'\") - sort: Sort criteria with direction. Available sort: \"orderNumber asc\" or \"orderNumber desc\" (sort by question number) \"question asc\" or \"question desc\" (sort by question text) \"query asc\" or \"query desc\" (sort by SQL query) \"params asc\" or \"params desc\" (sort by parameters) \"usageCount asc\" or \"usageCount desc\" (sort by usage count) Available sort fields: - orderNumber: Sort by question number - question: Sort by question text - query: Sort by SQL query - params: Sort by parameters - usageCount: Sort by usage count Example usage: \"accountId\": 123, \"workspaceId\": 187, \"max\": 10, \"offset\": 0, \"sort\": \"orderNumber asc\", \"filter\": \"question CONTAINS 'batting'\"",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Verodat/verodat-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "verodatAiApiKey",
          "required": true,
          "description": "The API key for accessing Verodat AI services."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Verodat/verodat-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1822.@Verodat_verodat-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1620
  }
}