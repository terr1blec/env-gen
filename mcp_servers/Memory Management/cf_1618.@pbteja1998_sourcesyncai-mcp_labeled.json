{
  "labels": {
    "analysis": "The MCP Server integrates AI models with SourceSync.ai's knowledge management platform, allowing seamless document management and retrieval. It provides tools for ingesting, organizing, searching, and managing documents from various sources, including text, files, URLs, websites, and external services. The server supports advanced search capabilities (semantic and hybrid) and connections to external data sources, making it suitable for enhancing AI with structured knowledge bases.",
    "reasoning": "The primary label \"Memory Management\" was chosen because the server's core functionality revolves around storing, retrieving, and organizing documents (knowledge bases). \"Data Analysis & Processing\" was included as a secondary label due to the server's support for semantic/hybrid search and document filtering. \"API Integration\" was added as another secondary label because the server manages connections to external services for data ingestion.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "Data Analysis & Processing",
      "API Integration"
    ],
    "custom_label": "Knowledge Base Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1617,
    "server_name": "SourceSync.ai MCP Server",
    "rank_by_usage": 1618,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@pbteja1998_sourcesyncai-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@pbteja1998/sourcesyncai-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1617,
      "name": "SourceSync.ai MCP Server",
      "author": "@pbteja1998/sourcesyncai-mcp",
      "overview": "Integrate your AI models with SourceSync.ai's knowledge management platform. Seamlessly manage, ingest, and search your documents while leveraging external services for enhanced data retrieval. Empower your AI with organized knowledge and efficient document management.",
      "repository_url": "https://github.com/pbteja1998/sourcesyncai-mcp",
      "homepage": "https://smithery.ai/server/@pbteja1998/sourcesyncai-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@pbteja1998_sourcesyncai-mcp.json",
      "tools_count": 25,
      "tools": [
        {
          "name": "validateApiKey",
          "description": "Deploy Server SourceSync.ai MCP Server @pbteja1998/sourcesyncai-mcp Try in Playground validateApiKey",
          "parameters": [
            {
              "name": "validateApiKey",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "createNamespace",
          "description": "Creates a new namespace with the provided configuration. Requires a name, file storage configuration, vector storage configuration, and embedding model configuration.",
          "parameters": [
            {
              "name": "createNamespace",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "listNamespaces",
          "description": "Lists all namespaces available for the current API key and optional tenant ID.",
          "parameters": [
            {
              "name": "listNamespaces",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getNamespace",
          "description": "Retrieves a specific namespace by its ID.",
          "parameters": [
            {
              "name": "tenantId",
              "required": false,
              "type": "string"
            },
            {
              "name": "namespaceId",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "updateNamespace",
          "description": "Updates an existing namespace with the provided configuration parameters.",
          "parameters": [
            {
              "name": "webScraperConfig",
              "required": false,
              "type": "string"
            },
            {
              "name": "fileStorageConfig",
              "required": false,
              "type": "string"
            },
            {
              "name": "googleDriveConfig",
              "required": false,
              "type": "string"
            },
            {
              "name": "vectorStorageConfig",
              "required": false,
              "type": "string"
            },
            {
              "name": "embeddingModelConfig",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "deleteNamespace",
          "description": "Permanently deletes a namespace by its ID.",
          "parameters": [
            {
              "name": "tenantId",
              "required": false,
              "type": "string"
            },
            {
              "name": "namespaceId",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "ingestText",
          "description": "Ingests raw text content into the namespace. Supports optional metadata and chunk configuration.",
          "parameters": [
            {
              "name": "ingestText",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "ingestFile",
          "description": "Ingests a file into the namespace. Supports various file formats with automatic parsing.",
          "parameters": [
            {
              "name": "ingestFile",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "ingestUrls",
          "description": "Ingests content from a list of URLs. Supports scraping options and metadata.",
          "parameters": [
            {
              "name": "ingestUrls",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "ingestSitemap",
          "description": "Ingests content from a website using its sitemap.xml. Supports path filtering and link limits.",
          "parameters": [
            {
              "name": "ingestSitemap",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "ingestWebsite",
          "description": "Crawls and ingests content from a website recursively. Supports depth control and path filtering.",
          "parameters": [
            {
              "name": "ingestWebsite",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "ingestConnector",
          "description": "Ingests all documents in the connector that are in backlog or failed status. No need to provide the document ids or file ids for the ingestion. Ids are already in the backlog when picked thorough the picker. If not, the user has to go through the authorization flow again, where they will be asked to pick the documents again.",
          "parameters": [
            {
              "name": "ingestConnector",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getIngestJobRunStatus",
          "description": "Checks the status of a previously submitted ingestion job.",
          "parameters": [
            {
              "name": "getIngestJobRunStatus",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "fetchDocuments",
          "description": "Fetches documents from the namespace based on filter criteria. Supports pagination and including specific document properties.",
          "parameters": [
            {
              "name": "fetchDocuments",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "updateDocuments",
          "description": "Updates metadata for documents that match the specified filter criteria.",
          "parameters": [
            {
              "name": "updateDocuments",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "deleteDocuments",
          "description": "Permanently deletes documents that match the specified filter criteria.",
          "parameters": [
            {
              "name": "deleteDocuments",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "resyncDocuments",
          "description": "Reprocesses documents that match the specified filter criteria. Useful for updating after schema changes.",
          "parameters": [
            {
              "name": "resyncDocuments",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "semanticSearch",
          "description": "Performs semantic search across the namespace to find relevant content based on meaning rather than exact keyword matches.",
          "parameters": [
            {
              "name": "semanticSearch",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "hybridSearch",
          "description": "Performs a combined keyword and semantic search, balancing between exact matches and semantic similarity. Requires hybridConfig with weights for both search types.",
          "parameters": [
            {
              "name": "hybridSearch",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "createConnection",
          "description": "Creates a new connection to a specific source. The connector parameter should be a valid SourceSync connector enum value. The clientRedirectUrl parameter is optional and can be used to specify a custom redirect URL for the connection. This will give you a authorization url which you can redirect the user to. The user will then be asked to pick the documents they want to ingest.",
          "parameters": [
            {
              "name": "createConnection",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "listConnections",
          "description": "Lists all connections for the current namespace, optionally filtered by connector type.",
          "parameters": [
            {
              "name": "listConnections",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getConnection",
          "description": "Retrieves details for a specific connection by its ID.",
          "parameters": [
            {
              "name": "getConnection",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "updateConnection",
          "description": "Updates a connection to a specific source. The connector parameter should be a valid SourceSync connector enum value. The clientRedirectUrl parameter is optional and can be used to specify a custom redirect URL for the connection. This will give you a authorization url which you can redirect the user to. The user will then be asked to pick the documents they want to ingest. This is useful if you want to update the connection to a different source or if you want to update the clientRedirectUrl or if you want to pick a different or new set of documents.",
          "parameters": [
            {
              "name": "updateConnection",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "revokeConnection",
          "description": "Revokes access for a specific connection, removing the integration with the external service.",
          "parameters": [
            {
              "name": "revokeConnection",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "fetchUrlContent",
          "description": "Fetches the content of a URL. Particularly useful for fetching parsed text file URLs.",
          "parameters": [
            {
              "name": "fetchUrlContent",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@pbteja1998/sourcesyncai-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "sourcesyncApiKey",
          "required": true,
          "description": "Your SourceSync.ai API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@pbteja1998/sourcesyncai-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1618.@pbteja1998_sourcesyncai-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1471
  }
}