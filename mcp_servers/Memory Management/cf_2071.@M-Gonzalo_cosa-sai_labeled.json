{
  "labels": {
    "analysis": "The Gemini Docs Server is designed to provide access to curated technical documentation and responses to complex queries using the Gemini API. Its available tools focus on task-specific guidance, problem-solving assistance, and code practice evaluation, indicating its primary use case revolves around technical documentation, knowledge retrieval, and developer support.",
    "reasoning": "The primary label is selected because the server's core function is delivering tailored documentation and expert responses, which aligns closely with a knowledge base or documentation system. Secondary labels are chosen due to the server's focus on providing examples, troubleshooting hints, and code reviews, which support developer productivity.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "Development Tools",
      "Web Search & Research"
    ],
    "custom_label": "Technical Documentation Hub",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2070,
    "server_name": "Gemini Docs Server",
    "rank_by_usage": 2071,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@M-Gonzalo_cosa-sai.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@M-Gonzalo/cosa-sai/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2070,
      "name": "Gemini Docs Server",
      "author": "@M-Gonzalo/cosa-sai",
      "overview": "Access documentation for various technologies using the Gemini API. Leverage a curated knowledge base for tailored responses to complex queries.",
      "repository_url": "https://github.com/M-Gonzalo/cosa-sai",
      "homepage": "https://smithery.ai/server/@M-Gonzalo/cosa-sai",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@M-Gonzalo_cosa-sai.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "can_x_be_done",
          "description": "Deploy Server Gemini Docs Server @M-Gonzalo/cosa-sai Try in Playground can_x_be_done",
          "parameters": [
            {
              "name": "can_x_be_done",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "how_to_do_x",
          "description": "Get examples and alternative approaches for a specific task",
          "parameters": []
        },
        {
          "name": "hints_for_problem",
          "description": "Get hints for solving a specific problem",
          "parameters": []
        },
        {
          "name": "is_this_good_practice",
          "description": "Check if a code snippet follows good practices",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@M-Gonzalo/cosa-sai/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "geminiApiKey",
          "required": true,
          "description": "API key for authenticating with the Gemini API."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@M-Gonzalo/cosa-sai/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2071.@M-Gonzalo_cosa-sai_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1805
  }
}