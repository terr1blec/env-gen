{
  "labels": {
    "analysis": "The MCP Server is designed to parse JavaScript error stack traces and map them back to the original source code using source maps. This functionality is crucial for developers debugging minified or obfuscated code in production environments. The server provides tools to fetch context around errors and supports batch parsing, enhancing the debugging process by providing accurate source locations and relevant code snippets.",
    "reasoning": "The primary label \"Development Tools\" is chosen because the server's core functionality revolves around code debugging and source code mapping, which are essential tasks in software development. The secondary label \"Operating System\" is included because the tool interacts with error stacks and source maps in a way that bridges low-level code execution and high-level developer tools. A custom label \"Error Mapping\" is added to highlight the unique aspect of translating minified stack traces back to original source code.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Operating System"
    ],
    "custom_label": "Error Mapping",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1528,
    "server_name": "Source Map Parser",
    "rank_by_usage": 1529,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@MasonChow_source-map-parser-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@MasonChow/source-map-parser-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "operating_guide",
          "description": "\n  # Parse Error Stack Trace\n\n  This tool allows you to parse error stack traces by mapping them to the corresponding source code locations using source maps.\n  It is particularly useful for debugging production errors where the stack trace points to minified or obfuscated code.\n",
          "input_schema": {
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "parse_stack",
          "description": "\n  # Parse Error Stack Trace\n\n  This tool allows you to parse error stack traces by providing the following:\n  - A downloadable source map URL.\n  - The line and column numbers from the stack trace.\n\n  The tool will map the provided stack trace information to the corresponding source code location using the source map.\n  It also supports fetching additional context lines around the error location for better debugging.\n\n  ## Parameters:\n  - **stacks**: An array of stack trace objects, each containing:\n    - **line**: The line number in the stack trace.\n    - **column**: The column number in the stack trace.\n    - **sourceMapUrl**: The URL of the source map file corresponding to the stack trace.\n\n  - **ctxOffset** (optional): The number of additional context lines to include before and after the error location in the source code. Defaults to 5.\n\n  ## Returns:\n  - A JSON object containing the parsed stack trace information, including the mapped source code location and context lines.\n  - If parsing fails, an error message will be returned for the corresponding stack trace.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "stacks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "line": {
                      "type": "number",
                      "description": "The line number in the stack trace."
                    },
                    "column": {
                      "type": "number",
                      "description": "The column number in the stack trace."
                    },
                    "sourceMapUrl": {
                      "type": "string",
                      "description": "The URL of the source map file corresponding to the stack trace."
                    }
                  },
                  "required": [
                    "line",
                    "column",
                    "sourceMapUrl"
                  ],
                  "additionalProperties": false
                }
              }
            },
            "required": [
              "stacks"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "operating_guide",
        "parse_stack"
      ]
    },
    "server_info_crawled": {
      "id": 1528,
      "name": "Source Map Parser",
      "author": "@MasonChow/source-map-parser-mcp",
      "overview": "Parse JavaScript error stack traces back to the original source code and extract relevant context information. Help developers quickly locate and fix issues by mapping errors to their source. Utilize batch parsing and context extraction for enhanced debugging capabilities.",
      "repository_url": "https://github.com/MasonChow/source-map-parser-mcp",
      "homepage": "https://smithery.ai/server/@MasonChow/source-map-parser-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@MasonChow_source-map-parser-mcp.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "operating_guide",
          "description": "\n  # Parse Error Stack Trace\n\n  This tool allows you to parse error stack traces by mapping them to the corresponding source code locations using source maps.\n  It is particularly useful for debugging production errors where the stack trace points to minified or obfuscated code.\n",
          "input_schema": {
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "parse_stack",
          "description": "\n  # Parse Error Stack Trace\n\n  This tool allows you to parse error stack traces by providing the following:\n  - A downloadable source map URL.\n  - The line and column numbers from the stack trace.\n\n  The tool will map the provided stack trace information to the corresponding source code location using the source map.\n  It also supports fetching additional context lines around the error location for better debugging.\n\n  ## Parameters:\n  - **stacks**: An array of stack trace objects, each containing:\n    - **line**: The line number in the stack trace.\n    - **column**: The column number in the stack trace.\n    - **sourceMapUrl**: The URL of the source map file corresponding to the stack trace.\n\n  - **ctxOffset** (optional): The number of additional context lines to include before and after the error location in the source code. Defaults to 5.\n\n  ## Returns:\n  - A JSON object containing the parsed stack trace information, including the mapped source code location and context lines.\n  - If parsing fails, an error message will be returned for the corresponding stack trace.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "stacks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "line": {
                      "type": "number",
                      "description": "The line number in the stack trace."
                    },
                    "column": {
                      "type": "number",
                      "description": "The column number in the stack trace."
                    },
                    "sourceMapUrl": {
                      "type": "string",
                      "description": "The URL of the source map file corresponding to the stack trace."
                    }
                  },
                  "required": [
                    "line",
                    "column",
                    "sourceMapUrl"
                  ],
                  "additionalProperties": false
                }
              }
            },
            "required": [
              "stacks"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@MasonChow/source-map-parser-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@MasonChow/source-map-parser-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1529.@MasonChow_source-map-parser-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1405
  }
}