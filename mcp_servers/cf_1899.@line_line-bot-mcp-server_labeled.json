{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate direct integration with LINE Messaging API, enabling AI agents to interact with LINE Official Accounts. Its core functionality includes sending text and rich flex messages to individual users or broadcasting to all followers, as well as retrieving user profile information and managing message quotas. The server enhances chatbot capabilities by providing tools for seamless communication via LINE.",
    "reasoning": "The primary label \"Communication Tools\" is chosen because the server's main functionality revolves around messaging and user interaction via the LINE platform. \"Web Search & Research\" is not applicable as the server does not focus on information retrieval. \"Social Media\" could also fit, but the predefined \"Communication Tools\" is more specific to the server's role in enabling direct messaging capabilities. No custom label is needed as the predefined categories cover the server's functionality well.",
    "primary_label": "Communication Tools",
    "secondary_labels": [
      "Social Media"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1898,
    "server_name": "LINE Bot Integration Server",
    "rank_by_usage": 1899,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@line_line-bot-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@line/line-bot-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1898,
      "name": "LINE Bot Integration Server",
      "author": "@line/line-bot-mcp-server",
      "overview": "Enable AI agents to interact seamlessly with your LINE Official Account by sending messages and retrieving user profiles. Push text and rich flex messages to individual users or broadcast to all followers effortlessly. Enhance your chatbot capabilities with direct LINE Messaging API integration.",
      "repository_url": "https://github.com/line/line-bot-mcp-server",
      "homepage": "https://smithery.ai/server/@line/line-bot-mcp-server",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@line_line-bot-mcp-server.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "push_text_message",
          "description": "Deploy Server LINE Bot Integration Server Claim Server @line/line-bot-mcp-server Try in Playground push_text_message",
          "parameters": [
            {
              "name": "push_text_message",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "push_flex_message",
          "description": "Push a highly customizable flex message to a user via LINE. Supports both bubble (single container) and carousel (multiple swipeable bubbles) layouts.",
          "parameters": [
            {
              "name": "push_flex_message",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "broadcast_text_message",
          "description": "Broadcast a simple text message via LINE to all users who have followed your LINE Official Account. Use this for sending plain text messages without formatting. Please be aware that this message will be sent to all users.",
          "parameters": [
            {
              "name": "broadcast_text_message",
              "required": false,
              "type": "string"
            },
            {
              "name": "message",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "broadcast_flex_message",
          "description": "Broadcast a highly customizable flex message via LINE to all users who have added your LINE Official Account. Supports both bubble (single container) and carousel (multiple swipeable bubbles) layouts. Please be aware that this message will be sent to all users.",
          "parameters": [
            {
              "name": "broadcast_flex_message",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_profile",
          "description": "Get detailed profile information of a LINE user including display name, profile picture URL, status message and language.",
          "parameters": [
            {
              "name": "get_profile",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_message_quota",
          "description": "Get the message quota and consumption of the LINE Official Account. This shows the monthly message limit and current usage.",
          "parameters": [
            {
              "name": "get_message_quota",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@line/line-bot-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "channelAccessToken",
          "required": true,
          "description": "Channel Access Token for LINE Messaging API"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@line/line-bot-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1899.@line_line-bot-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1678
  }
}