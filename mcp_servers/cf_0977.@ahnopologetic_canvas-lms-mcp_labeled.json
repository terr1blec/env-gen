{
  "labels": {
    "analysis": "The Canvas LMS Server is designed to programmatically interface with Canvas Learning Management System (LMS) data. Its core functionality revolves around retrieving and managing educational content such as courses, assignments, quizzes, syllabi, files, and planner items. The available tools enable users to query this educational data, integrate it with AI systems or development environments, and enhance productivity by automating access to learning materials and administrative tasks.",
    "reasoning": "The primary label \"Education\" is chosen because the server's core purpose is to interact with educational data from the Canvas LMS, which aligns with learning and course management. The secondary labels \"Database Operations\" and \"API Integration\" are selected because the server provides structured querying capabilities (similar to database operations) and acts as an intermediary to access Canvas LMS functionality through an API layer.",
    "primary_label": "Education",
    "secondary_labels": [
      "Database Operations",
      "API Integration"
    ],
    "custom_label": "Learning Management System (LMS) Automation",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 976,
    "server_name": "Canvas LMS Server",
    "rank_by_usage": 977,
    "usage_count": "3",
    "original_file": "../crawler/smithery/@ahnopologetic_canvas-lms-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ahnopologetic/canvas-lms-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 976,
      "name": "Canvas LMS Server",
      "author": "@ahnopologetic/canvas-lms-mcp",
      "overview": "Provide seamless access to education data from your Canvas LMS instance through a minimal MCP server. List and retrieve courses, assignments, quizzes, files, and planner items to integrate Canvas data into AI systems or development environments. Enhance your productivity by querying and managing your educational content programmatically.",
      "repository_url": "https://github.com/ahnopologetic/canvas-lms-mcp",
      "homepage": "https://smithery.ai/server/@ahnopologetic/canvas-lms-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "3",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ahnopologetic_canvas-lms-mcp.json",
      "tools_count": 10,
      "tools": [
        {
          "name": "get_assignment",
          "description": "Deploy Server Canvas LMS Server Claim Server @ahnopologetic/canvas-lms-mcp Try in Playground get_assignment",
          "parameters": [
            {
              "name": "Assignment",
              "required": false,
              "type": "string"
            },
            {
              "name": "object",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_course_modules",
          "description": "Get modules for a course. Args: course_id: Course ID include: Optional list of additional data to include Returns: List of Module objects",
          "parameters": []
        },
        {
          "name": "get_course_syllabus",
          "description": "Get a course's syllabus. Args: course_id: Course ID Returns: Course syllabus as string",
          "parameters": [
            {
              "name": "Course",
              "required": false,
              "type": "string"
            },
            {
              "name": "syllabus",
              "required": false,
              "type": "string"
            },
            {
              "name": "as",
              "required": false,
              "type": "string"
            },
            {
              "name": "string",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_course",
          "description": "Get a single course by ID.\n\nArgs:\n    course_id: Course ID\n    include: Optional list of additional data to include\n\nReturns:\n    Course object",
          "parameters": [
            {
              "name": "List",
              "required": false,
              "type": "string"
            },
            {
              "name": "of",
              "required": false,
              "type": "string"
            },
            {
              "name": "Module",
              "required": false,
              "type": "string"
            },
            {
              "name": "objects",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_quiz",
          "description": "Get a single quiz by ID. Args: course_id: Course ID quiz_id: Quiz ID Returns: Quiz object",
          "parameters": []
        },
        {
          "name": "list_assignments",
          "description": "List assignments for a course. Args: course_id: Course ID bucket: Bucket to filter assignments by (past, overdue, undated, ungraded, unsubmitted, upcoming, future) order_by: Field to order assignments by (due_at, position, name) page: Page number (1-indexed) items_per_page: Number of items per page Returns: PaginatedResponse containing assignments",
          "parameters": []
        },
        {
          "name": "list_courses",
          "description": "List courses that the user is actively enrolled in. Args: page: Page number (1-indexed) items_per_page: Number of items per page Returns: PaginatedResponse containing courses",
          "parameters": []
        },
        {
          "name": "list_files",
          "description": "List files for a course or folder. Args: course_id: Optional Course ID folder_id: Optional Folder ID include: Optional list of additional data to include page: Page number (1-indexed) items_per_page: Number of items per page Returns: PaginatedResponse[File]",
          "parameters": []
        },
        {
          "name": "list_planner_items",
          "description": "List planner items for the authenticated user. Args: start_date: start date in ISO 8601 format end_date: end date in ISO 8601 format context_codes: list of context codes (e.g., [\"course_123\"]) page: Page number (1-indexed) items_per_page: Number of items per page Returns: PaginatedResponse[PlannerItem]",
          "parameters": []
        },
        {
          "name": "list_quizzes",
          "description": "List quizzes for a course. Args: course_id: Course ID include: Optional list of additional data to include page: Page number (1-indexed) items_per_page: Number of items per page Returns: PaginatedResponse containing quizzes",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@ahnopologetic/canvas-lms-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "canvasApiToken",
          "required": true,
          "description": "Canvas API token for authentication"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@ahnopologetic/canvas-lms-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0977.@ahnopologetic_canvas-lms-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 955
  }
}