{
  "labels": {
    "analysis": "The MCP Server is designed to enhance coding accuracy and productivity by fetching up-to-date, version-specific code documentation and examples directly from source libraries. It eliminates outdated code and hallucinated APIs by integrating real-time library documentation into LLM context. The primary functionality revolves around library documentation resolution and retrieval, making it a valuable tool for developers seeking accurate, current information.",
    "reasoning": "The primary label \"Development Tools\" is chosen because the server's core functionality is centered around developer productivity by providing up-to-date code documentation and examples, which directly aids in coding, debugging, and programming tasks. There is no secondary label as the primary category fully covers the server's functionality. The custom label \"Code Documentation Retrieval\" is used to highlight the unique aspect of fetching and integrating real-time documentation from libraries.",
    "primary_label": "Development Tools",
    "secondary_labels": [],
    "custom_label": "Code Documentation Retrieval",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1623,
    "server_name": "Context7",
    "rank_by_usage": 1624,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@antonioevans_context7.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@antonioevans/context7/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "resolve-library-id",
          "description": "Resolves a package name to a Context7-compatible library ID and returns a list of matching libraries.\n\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID.\n\nWhen selecting the best match, consider:\n- Name similarity to the query\n- Description relevance\n- Code Snippet count (documentation coverage)\n- GitHub Stars (popularity)\n\nReturn the selected library ID and explain your choice. If there are multiple good matches, mention this but proceed with the most relevant one.",
          "input_schema": {
            "type": "object",
            "properties": {
              "libraryName": {
                "type": "string",
                "description": "Library name to search for and retrieve a Context7-compatible library ID."
              }
            },
            "required": [
              "libraryName"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-library-docs",
          "description": "Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool.",
          "input_schema": {
            "type": "object",
            "properties": {
              "context7CompatibleLibraryID": {
                "type": "string",
                "description": "Exact Context7-compatible library ID (e.g., 'mongodb/docs', 'vercel/nextjs') retrieved from 'resolve-library-id'."
              },
              "topic": {
                "type": "string",
                "description": "Topic to focus documentation on (e.g., 'hooks', 'routing')."
              },
              "tokens": {
                "type": "number",
                "description": "Maximum number of tokens of documentation to retrieve (default: 10000). Higher values provide more context but consume more tokens."
              }
            },
            "required": [
              "context7CompatibleLibraryID"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "resolve-library-id",
        "get-library-docs"
      ]
    },
    "server_info_crawled": {
      "id": 1623,
      "name": "Context7",
      "author": "@antonioevans/context7",
      "overview": "Fetch up-to-date, version-specific code documentation and examples directly from source libraries to enhance your prompts. Eliminate outdated code, hallucinated APIs, and generic answers by integrating real-time library docs into your LLM context. Improve coding accuracy and productivity with seamless access to current documentation.",
      "repository_url": "https://github.com/antonioevans/context7",
      "homepage": "https://smithery.ai/server/@antonioevans/context7",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@antonioevans_context7.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "resolve-library-id",
          "description": "Resolves a package name to a Context7-compatible library ID and returns a list of matching libraries.\n\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID.\n\nWhen selecting the best match, consider:\n- Name similarity to the query\n- Description relevance\n- Code Snippet count (documentation coverage)\n- GitHub Stars (popularity)\n\nReturn the selected library ID and explain your choice. If there are multiple good matches, mention this but proceed with the most relevant one.",
          "input_schema": {
            "type": "object",
            "properties": {
              "libraryName": {
                "type": "string",
                "description": "Library name to search for and retrieve a Context7-compatible library ID."
              }
            },
            "required": [
              "libraryName"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-library-docs",
          "description": "Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool.",
          "input_schema": {
            "type": "object",
            "properties": {
              "context7CompatibleLibraryID": {
                "type": "string",
                "description": "Exact Context7-compatible library ID (e.g., 'mongodb/docs', 'vercel/nextjs') retrieved from 'resolve-library-id'."
              },
              "topic": {
                "type": "string",
                "description": "Topic to focus documentation on (e.g., 'hooks', 'routing')."
              },
              "tokens": {
                "type": "number",
                "description": "Maximum number of tokens of documentation to retrieve (default: 10000). Higher values provide more context but consume more tokens."
              }
            },
            "required": [
              "context7CompatibleLibraryID"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@antonioevans/context7/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@antonioevans/context7/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1624.@antonioevans_context7_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1475
  }
}