{
  "labels": {
    "analysis": "The Gitingest MCP Server is designed to facilitate quick access to GitHub repository information through several specialized tools. Its core functionality revolves around extracting and presenting repository data such as summaries, directory structures, and file contents. The server acts as an intermediary that allows MCP clients to interact with GitHub repositories programmatically, offering capabilities that are particularly valuable for developers, researchers, and anyone needing structured access to version control data. The tools available manage various aspects of repository inspection without requiring direct Git or GitHub API usage by the end user.",
    "reasoning": "The primary label \"Web Search & Research\" was chosen because the server's main purpose is to gather and organize information from GitHub repositories, which aligns with research and information gathering use cases. The secondary label \"Development Tools\" was selected due to its utility for developers who need quick access to repository structures and file contents. The server doesn't fit well with predefined categories for direct GitHub API interaction, so no custom label is necessary.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 116,
    "server_name": "Gitingest MCP Server",
    "rank_by_usage": 117,
    "usage_count": "582",
    "original_file": "../crawler/smithery/@puravparab_gitingest-mcp.json",
    "mode": "smithery",
    "timestamp": 1751937975,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@puravparab/gitingest-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "git_summary",
          "description": "\n\tGet a summary of a GitHub repository that includes \n\t\t- Repo name, \n\t\t- Files in repo\n\t\t- Number of tokens in repo\n\t\t- Summary from the README.md\n\n\tArgs:\n\t\towner: The GitHub organization or username\n\t\trepo: The repository name\n\t\tbranch: Optional branch name (default: None)\n\t",
          "input_schema": {
            "properties": {
              "owner": {
                "title": "Owner",
                "type": "string"
              },
              "repo": {
                "title": "Repo",
                "type": "string"
              },
              "branch": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Branch"
              }
            },
            "required": [
              "owner",
              "repo"
            ],
            "title": "git_summaryArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "git_tree",
          "description": "\n\tGet the tree structure of a GitHub repository\n\n\tArgs:\n\t\towner: The GitHub organization or username\n\t\trepo: The repository name\n\t\tbranch: Optional branch name (default: None)\n\t",
          "input_schema": {
            "properties": {
              "owner": {
                "title": "Owner",
                "type": "string"
              },
              "repo": {
                "title": "Repo",
                "type": "string"
              },
              "branch": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Branch"
              }
            },
            "required": [
              "owner",
              "repo"
            ],
            "title": "git_treeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "git_files",
          "description": "\n\tGet the content of specific files from a GitHub repository\n\n\tArgs:\n\t\towner: The GitHub organization or username\n\t\trepo: The repository name\n\t\tfile_paths: List of paths to files within the repository\n\t\tbranch: Optional branch name (default: None)\n\t",
          "input_schema": {
            "properties": {
              "owner": {
                "title": "Owner",
                "type": "string"
              },
              "repo": {
                "title": "Repo",
                "type": "string"
              },
              "file_paths": {
                "items": {
                  "type": "string"
                },
                "title": "File Paths",
                "type": "array"
              },
              "branch": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Branch"
              }
            },
            "required": [
              "owner",
              "repo",
              "file_paths"
            ],
            "title": "git_filesArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 3,
      "tool_names": [
        "git_summary",
        "git_tree",
        "git_files"
      ]
    },
    "server_info_crawled": {
      "id": 116,
      "name": "Gitingest MCP Server",
      "author": "@puravparab/gitingest-mcp",
      "overview": "An MCP server for gitingest. It allows MCP clients like Claude Desktop, Cursor, Cline etc to quickly extract information about Github repositories including repository summaries, project directory structure, file contents, etc",
      "repository_url": "https://github.com/puravparab/Gitingest-MCP",
      "homepage": "https://smithery.ai/server/@puravparab/gitingest-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "582",
      "success_rate": "99.80%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@puravparab_gitingest-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "git_summary",
          "description": "\n\tGet a summary of a GitHub repository that includes \n\t\t- Repo name, \n\t\t- Files in repo\n\t\t- Number of tokens in repo\n\t\t- Summary from the README.md\n\n\tArgs:\n\t\towner: The GitHub organization or username\n\t\trepo: The repository name\n\t\tbranch: Optional branch name (default: None)\n\t",
          "input_schema": {
            "properties": {
              "owner": {
                "title": "Owner",
                "type": "string"
              },
              "repo": {
                "title": "Repo",
                "type": "string"
              },
              "branch": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Branch"
              }
            },
            "required": [
              "owner",
              "repo"
            ],
            "title": "git_summaryArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "git_tree",
          "description": "\n\tGet the tree structure of a GitHub repository\n\n\tArgs:\n\t\towner: The GitHub organization or username\n\t\trepo: The repository name\n\t\tbranch: Optional branch name (default: None)\n\t",
          "input_schema": {
            "properties": {
              "owner": {
                "title": "Owner",
                "type": "string"
              },
              "repo": {
                "title": "Repo",
                "type": "string"
              },
              "branch": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Branch"
              }
            },
            "required": [
              "owner",
              "repo"
            ],
            "title": "git_treeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "git_files",
          "description": "\n\tGet the content of specific files from a GitHub repository\n\n\tArgs:\n\t\towner: The GitHub organization or username\n\t\trepo: The repository name\n\t\tfile_paths: List of paths to files within the repository\n\t\tbranch: Optional branch name (default: None)\n\t",
          "input_schema": {
            "properties": {
              "owner": {
                "title": "Owner",
                "type": "string"
              },
              "repo": {
                "title": "Repo",
                "type": "string"
              },
              "file_paths": {
                "items": {
                  "type": "string"
                },
                "title": "File Paths",
                "type": "array"
              },
              "branch": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Branch"
              }
            },
            "required": [
              "owner",
              "repo",
              "file_paths"
            ],
            "title": "git_filesArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@puravparab/gitingest-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@puravparab/gitingest-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0117.@puravparab_gitingest-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 114
  }
}