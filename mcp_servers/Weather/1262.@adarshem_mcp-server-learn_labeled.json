{
  "labels": {
    "analysis": "The MCP Weather Server is designed to provide real-time weather alerts and forecasts for US locations by leveraging official National Weather Service data. Its core functionality revolves around weather-related data retrieval, specifically for both current alerts and future forecasts. The available tools, \"get-alerts\" and \"get-forecast,\" enable applications to dynamically fetch weather information, emphasizing simplicity and integration into other projects.",
    "reasoning": "The primary function of retrieving weather data aligns perfectly with the \"Weather\" predefined category. Given its focus on official data sources, it also connects to \"API Integration\" as it provides standardized access to weather information. The tool's utility in enriching applications suggests limited but valuable \"Daily Productivity\" applications for users needing weather context.",
    "primary_label": "Weather",
    "secondary_labels": [
      "API Integration",
      "Daily Productivity"
    ],
    "custom_label": "Official NWS Data Provider",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1261,
    "server_name": "Weather Server",
    "rank_by_usage": 1262,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@adarshem_mcp-server-learn.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@adarshem/mcp-server-learn/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get-alerts",
          "description": "Get weather alerts for a state",
          "input_schema": {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "minLength": 2,
                "maxLength": 2,
                "description": "Two-letter state code (e.g. CA, NY)"
              }
            },
            "required": [
              "state"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-forecast",
          "description": "Get weather forecast for a location",
          "input_schema": {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number",
                "minimum": -90,
                "maximum": 90,
                "description": "Latitude of the location"
              },
              "longitude": {
                "type": "number",
                "minimum": -180,
                "maximum": 180,
                "description": "Longitude of the location"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "get-alerts",
        "get-forecast"
      ]
    },
    "server_info_crawled": {
      "id": 1261,
      "name": "Weather Server",
      "author": "@adarshem/mcp-server-learn",
      "overview": "Provide real-time weather alerts and forecasts for US locations using official National Weather Service data. Enable applications to retrieve accurate weather information dynamically through simple tool calls. Enhance your projects with up-to-date weather context seamlessly integrated via MCP.",
      "repository_url": "https://github.com/adarshem/mcp-server-learn",
      "homepage": "https://smithery.ai/server/@adarshem/mcp-server-learn",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@adarshem_mcp-server-learn.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "get-alerts",
          "description": "Get weather alerts for a state",
          "input_schema": {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "minLength": 2,
                "maxLength": 2,
                "description": "Two-letter state code (e.g. CA, NY)"
              }
            },
            "required": [
              "state"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-forecast",
          "description": "Get weather forecast for a location",
          "input_schema": {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number",
                "minimum": -90,
                "maximum": 90,
                "description": "Latitude of the location"
              },
              "longitude": {
                "type": "number",
                "minimum": -180,
                "maximum": 180,
                "description": "Longitude of the location"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@adarshem/mcp-server-learn/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@adarshem/mcp-server-learn/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1262.@adarshem_mcp-server-learn_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1206
  }
}