{
  "labels": {
    "analysis": "The MCP Server functions as a CO2 sensor simulation and monitoring tool, primarily interacting with an MH-Z19B CO2 sensor device. Its core functionality involves retrieving real-time CO2 readings, device status information, and managing device connectivity (though some connectivity features are currently not implemented). The server appears focused on environmental monitoring and IoT device management, with a potential use case in air quality tracking or smart indoor environments.",
    "reasoning": "The primary label \"Environmental Monitoring\" was chosen because the server's primary function revolves around tracking CO2 levels, which falls under environmental monitoring applications. Although the predefined categories don't include \"Environmental Monitoring,\" the server's functionality is too specific for a generic label like \"IoT\" or \"Sensors.\" Since none of the predefined labels perfectly cover this niche, a custom label was created. Secondary labels were added for IoT device management and data publishing capabilities.",
    "primary_label": "Weather",
    "secondary_labels": [
      "Development Tools",
      "Database Operations"
    ],
    "custom_label": "CO2 Monitoring",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1715,
    "server_name": "CO2 Sensor Server",
    "rank_by_usage": 1716,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@kmwebnet_MCP-Server-for-sensor-device.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@kmwebnet/MCP-Server-for-sensor-device/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_sensor_data",
          "description": "Get current CO2 ppm readings from the MH-Z19B sensor",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_device_info",
          "description": "Get information about the device",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_network_status",
          "description": "Get WiFi and MQTT connection status (NOT IMPLEMENTED)",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "publish_mqtt_data",
          "description": "Publish current sensor data to the MQTT topic (NOT IMPLEMENTED)",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "reconnect_wifi",
          "description": "Force the device to reconnect to WiFi (NOT IMPLEMENTED)",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "reconnect_mqtt",
          "description": "Force the device to reconnect to the MQTT broker (NOT IMPLEMENTED)",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        }
      ],
      "tool_count": 6,
      "tool_names": [
        "get_sensor_data",
        "get_device_info",
        "get_network_status",
        "publish_mqtt_data",
        "reconnect_wifi",
        "reconnect_mqtt"
      ]
    },
    "server_info_crawled": {
      "id": 1715,
      "name": "CO2 Sensor Server",
      "author": "@kmwebnet/MCP-Server-for-sensor-device",
      "overview": "Simulate and interact with a CO2 sensor device seamlessly. Monitor CO2 levels in real-time or simulation mode, and manage device connectivity and data publishing effortlessly.",
      "repository_url": "https://github.com/kmwebnet/MCP-Server-for-sensor-device",
      "homepage": "https://smithery.ai/server/@kmwebnet/MCP-Server-for-sensor-device",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@kmwebnet_MCP-Server-for-sensor-device.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "get_sensor_data",
          "description": "Get current CO2 ppm readings from the MH-Z19B sensor",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_device_info",
          "description": "Get information about the device",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_network_status",
          "description": "Get WiFi and MQTT connection status (NOT IMPLEMENTED)",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "publish_mqtt_data",
          "description": "Publish current sensor data to the MQTT topic (NOT IMPLEMENTED)",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "reconnect_wifi",
          "description": "Force the device to reconnect to WiFi (NOT IMPLEMENTED)",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "reconnect_mqtt",
          "description": "Force the device to reconnect to the MQTT broker (NOT IMPLEMENTED)",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@kmwebnet/MCP-Server-for-sensor-device/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@kmwebnet/MCP-Server-for-sensor-device/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1716.@kmwebnet_MCP-Server-for-sensor-device_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1545
  }
}