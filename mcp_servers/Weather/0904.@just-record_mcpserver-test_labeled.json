{
  "labels": {
    "analysis": "The MCP Server Test is designed to validate and demonstrate MCP protocol features, allowing developers to experiment with MCP interactions. Its primary use case revolves around weather-related information retrieval, as evidenced by the available tools (get_alerts and get_forecast). The server enables testing and verification of MCP tool, resource, and prompt handling, making it instrumental for developers integrating MCP clients and servers. The weather data tools suggest a focus on providing real-time and forecasted weather information to users.",
    "reasoning": "The primary label is chosen because the server's core functionality is centered around delivering weather-related data (alerts and forecasts). The secondary labels are included because the server also serves as a testing platform for MCP protocol interactions, which could be relevant for development and verification purposes. No custom label is needed as the predefined categories cover the server's functionality adequately.",
    "primary_label": "Weather",
    "secondary_labels": [
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 903,
    "server_name": "MCP Server Test",
    "rank_by_usage": 904,
    "usage_count": "4",
    "original_file": "../crawler/smithery/@just-record_mcpserver-test.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@just-record/mcpserver-test/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_alerts",
          "description": "Get weather alerts for a US state.\n\n    Args:\n        state: Two-letter US state code (e.g. CA, NY)\n    ",
          "input_schema": {
            "properties": {
              "state": {
                "title": "State",
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_forecast",
          "description": "Get weather forecast for a location.\n\n    Args:\n        latitude: Latitude of the location\n        longitude: Longitude of the location\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "get_alerts",
        "get_forecast"
      ]
    },
    "server_info_crawled": {
      "id": 903,
      "name": "MCP Server Test",
      "author": "@just-record/mcpserver-test",
      "overview": "Provide a test implementation of an MCP server to validate and demonstrate MCP protocol features. Enable developers to experiment with MCP interactions and verify tool, resource, and prompt handling. Facilitate integration testing for MCP clients and servers.",
      "repository_url": "https://github.com/just-record/mcpserver-test",
      "homepage": "https://smithery.ai/server/@just-record/mcpserver-test",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "4",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@just-record_mcpserver-test.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "get_alerts",
          "description": "Get weather alerts for a US state.\n\n    Args:\n        state: Two-letter US state code (e.g. CA, NY)\n    ",
          "input_schema": {
            "properties": {
              "state": {
                "title": "State",
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_forecast",
          "description": "Get weather forecast for a location.\n\n    Args:\n        latitude: Latitude of the location\n        longitude: Longitude of the location\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@just-record/mcpserver-test/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@just-record/mcpserver-test/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0904.@just-record_mcpserver-test_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 885
  }
}