{
  "labels": {
    "analysis": "The MCP Server is designed specifically to provide weather-related information, including current weather and forecasts for major cities worldwide. It supports natural language queries in both Chinese and English, making it accessible across language barriers. The primary functionality revolves around retrieving weather data, which is useful for personal planning, travel, or informational purposes. The integration with Cursor editor suggests ease of use within development environments.",
    "reasoning": "The primary label is chosen based on the server's core function of providing weather data and forecasts, aligning with the Weather category. The secondary label of Browser Automation is included because the server allows querying weather information through a web-based or automated tool, fitting the definition of gathering data/seamless integration. No custom label is needed as the functionality is well-covered by the predefined labels.",
    "primary_label": "Weather",
    "secondary_labels": [
      "Browser Automation"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 210,
    "server_name": "Weather MCP Tool",
    "rank_by_usage": 211,
    "usage_count": "215",
    "original_file": "../crawler/smithery/@MrCare_mcp_tool.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@MrCare/mcp_tool/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 210,
      "name": "Weather MCP Tool",
      "author": "@MrCare/mcp_tool",
      "overview": "Check global weather effortlessly with a single sentence. Enjoy seamless integration with the Cursor editor, allowing for natural language queries in both Chinese and English. Get accurate weather forecasts for major cities worldwide with minimal setup.",
      "repository_url": "https://github.com/MrCare/mcp_tool",
      "homepage": "https://smithery.ai/server/@MrCare/mcp_tool",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "215",
      "success_rate": "99.38%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@MrCare_mcp_tool.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "get_weather",
          "description": "Deploy Server Weather MCP Tool @MrCare/mcp_tool Try in Playground get_weather",
          "parameters": []
        },
        {
          "name": "get_weather_forecast",
          "description": "Get weather forecast information for a specified city\n    \n    Args:\n        city: City name (supports Chinese or English, e.g., Suzhou, suzhou)\n        days: Number of forecast days (up to 5 days)\n        units: Temperature unit (metric: Celsius, imperial: Fahrenheit)\n        lang: Response language (zh_cn: Chinese, en: English)\n    \n    Returns:\n        dict: Dictionary containing weather forecast information\n\n    获取指定城市的天气预报信息\n    \n    Args:\n        city: 城市名称（支持中文或英文，如：苏州、suzhou）\n        days: 预报天数（最多5天）\n        units: 温度单位 (metric: 摄氏度, imperial: 华氏度)\n        lang: 返回语言 (zh_cn: 中文, en: 英文)\n    \n    Returns:\n        dict: 包含天气预报信息的字典",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@MrCare/mcp_tool/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "openweathermapApiKey",
          "required": true,
          "description": "API key for OpenWeatherMap. Required for fetching weather data."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@MrCare/mcp_tool/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0211.@MrCare_mcp_tool_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 207
  }
}