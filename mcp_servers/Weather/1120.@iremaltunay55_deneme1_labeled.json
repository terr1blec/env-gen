{
  "labels": {
    "analysis": "The MCP Server is designed to provide detailed weather information based on either geographical coordinates or city names, utilizing OpenWeatherMap's API. It offers functionalities to retrieve extensive weather data such as temperature, wind speed, humidity, cloudiness, sunrise/sunset times, and precipitation levels. The server also includes a user-friendly weather assistant for interactive queries. The focus is on weather forecasting and delivering this information in Turkish, making it accessible and easy to integrate into applications.",
    "reasoning": "The primary functionality of retrieving and providing weather forecasts aligns directly with the **Weather** predefined category. Additionally, the server's ability to offer interactive assistance through tools like **get_weather** and **chat_weather_assistant** suggests it also serves as an **API Integration** tool, especially since it enables easy integration into other applications.",
    "primary_label": "Weather",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": true
  },
  "metadata": {
    "server_id": 1119,
    "server_name": "Weather Forecast Server",
    "rank_by_usage": 1120,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@iremaltunay55_deneme1.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@iremaltunay55/deneme1/mcp?config=eyJ1bml0cyI6ICJtZXRyaWMiLCAiYXBpX2tleSI6ICI2YjJlOTdiMWI2NTU5NDM2YWVlMzdiODNiNzE0MTJiMyIsICJsYW5ndWFnZSI6ICJ0ciJ9&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_weather_by_coordinates",
          "description": "\n    Enlem ve boylam koordinatlarına göre hava durumu bilgilerini getirir.\n\n    Args:\n        latitude: Enlem (-90 ile 90 arasında)\n        longitude: Boylam (-180 ile 180 arasında)\n        units: Ölçü birimi (metric, imperial, standard)\n\n    Returns:\n        JSON formatında hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              },
              "units": {
                "default": null,
                "title": "Units",
                "type": "string"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "title": "get_weather_by_coordinatesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather_by_city",
          "description": "\n    Şehir adına göre hava durumu bilgilerini getirir.\n\n    Args:\n        city_name: Şehir adı\n        country_code: Ülke kodu (opsiyonel, örn: TR, US)\n        units: Ölçü birimi (metric, imperial, standard)\n\n    Returns:\n        JSON formatında hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "city_name": {
                "title": "City Name",
                "type": "string"
              },
              "country_code": {
                "default": "",
                "title": "Country Code",
                "type": "string"
              },
              "units": {
                "default": null,
                "title": "Units",
                "type": "string"
              }
            },
            "required": [
              "city_name"
            ],
            "title": "get_weather_by_cityArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather",
          "description": "\n    Kullanıcı dostu hava durumu asistanı - koordinatlara göre hava durumu getirir.\n\n    Bu araç, kullanıcıyla dostane iletişim kurar ve hava durumu bilgilerini\n    anlaşılır şekilde sunar.\n\n    Args:\n        latitude: Enlem (-90 ile 90 arasında)\n        longitude: Boylam (-180 ile 180 arasında)\n\n    Returns:\n        Kullanıcı dostu formatta hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "title": "get_weatherArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "chat_weather_assistant",
          "description": "\n    Hava durumu asistanı ile sohbet et.\n\n    Bu araç kullanıcının mesajlarını analiz eder ve uygun yanıtlar verir.\n    Koordinat bilgilerini toplar ve hava durumu sorgular.\n\n    Args:\n        message: Kullanıcının mesajı\n\n    Returns:\n        Asistan yanıtı\n    ",
          "input_schema": {
            "properties": {
              "message": {
                "title": "Message",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "title": "chat_weather_assistantArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "weather_greeting",
          "description": "\n    Hava durumu asistanının karşılama mesajı.\n\n    Returns:\n        Dostane karşılama mesajı\n    ",
          "input_schema": {
            "properties": {},
            "title": "weather_greetingArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 5,
      "tool_names": [
        "get_weather_by_coordinates",
        "get_weather_by_city",
        "get_weather",
        "chat_weather_assistant",
        "weather_greeting"
      ]
    },
    "server_info_crawled": {
      "id": 1119,
      "name": "Weather Forecast Server",
      "author": "@iremaltunay55/deneme1",
      "overview": "Provide detailed weather information based on coordinates or city names using OpenWeatherMap data. Retrieve temperature, wind, humidity, cloudiness, sunrise/sunset times, and precipitation details with Turkish descriptions. Enable easy integration for weather forecasting in your applications.",
      "repository_url": "https://github.com/iremaltunay55/deneme",
      "homepage": "https://smithery.ai/server/@iremaltunay55/deneme1",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@iremaltunay55_deneme1.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "get_weather_by_coordinates",
          "description": "\n    Enlem ve boylam koordinatlarına göre hava durumu bilgilerini getirir.\n\n    Args:\n        latitude: Enlem (-90 ile 90 arasında)\n        longitude: Boylam (-180 ile 180 arasında)\n        units: Ölçü birimi (metric, imperial, standard)\n\n    Returns:\n        JSON formatında hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              },
              "units": {
                "default": null,
                "title": "Units",
                "type": "string"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "title": "get_weather_by_coordinatesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather_by_city",
          "description": "\n    Şehir adına göre hava durumu bilgilerini getirir.\n\n    Args:\n        city_name: Şehir adı\n        country_code: Ülke kodu (opsiyonel, örn: TR, US)\n        units: Ölçü birimi (metric, imperial, standard)\n\n    Returns:\n        JSON formatında hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "city_name": {
                "title": "City Name",
                "type": "string"
              },
              "country_code": {
                "default": "",
                "title": "Country Code",
                "type": "string"
              },
              "units": {
                "default": null,
                "title": "Units",
                "type": "string"
              }
            },
            "required": [
              "city_name"
            ],
            "title": "get_weather_by_cityArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_weather",
          "description": "\n    Kullanıcı dostu hava durumu asistanı - koordinatlara göre hava durumu getirir.\n\n    Bu araç, kullanıcıyla dostane iletişim kurar ve hava durumu bilgilerini\n    anlaşılır şekilde sunar.\n\n    Args:\n        latitude: Enlem (-90 ile 90 arasında)\n        longitude: Boylam (-180 ile 180 arasında)\n\n    Returns:\n        Kullanıcı dostu formatta hava durumu bilgileri\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "title": "get_weatherArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "chat_weather_assistant",
          "description": "\n    Hava durumu asistanı ile sohbet et.\n\n    Bu araç kullanıcının mesajlarını analiz eder ve uygun yanıtlar verir.\n    Koordinat bilgilerini toplar ve hava durumu sorgular.\n\n    Args:\n        message: Kullanıcının mesajı\n\n    Returns:\n        Asistan yanıtı\n    ",
          "input_schema": {
            "properties": {
              "message": {
                "title": "Message",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "title": "chat_weather_assistantArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "weather_greeting",
          "description": "\n    Hava durumu asistanının karşılama mesajı.\n\n    Returns:\n        Dostane karşılama mesajı\n    ",
          "input_schema": {
            "properties": {},
            "title": "weather_greetingArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"units\": \"metric\",\n  \"api_key\": \"6b2e97b1b6559436aee37b83b71412b3\",\n  \"language\": \"tr\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@iremaltunay55/deneme1/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"units\": \"metric\",\n  \"api_key\": \"6b2e97b1b6559436aee37b83b71412b3\",\n  \"language\": \"tr\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@iremaltunay55/deneme1/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "1120.@iremaltunay55_deneme1_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1097
  }
}