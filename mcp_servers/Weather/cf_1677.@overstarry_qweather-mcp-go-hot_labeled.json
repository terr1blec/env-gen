{
  "labels": {
    "analysis": "The MCP Server provides comprehensive weather and environmental data through API integrations. Its core functionality includes real-time weather conditions, forecasts (hourly, daily, and long-term), air quality monitoring, precipitation predictions, life indices (e.g., sports suitability, dressing advice), and weather warnings. The server enables seamless integration of these weather-related services into AI assistants and applications via standardized interfaces, making it particularly useful for developers, researchers, and businesses that rely on accurate and timely weather information.",
    "reasoning": "The primary label \"Weather\" is chosen because the server's main focus is on providing weather-related data, including forecasts, real-time conditions, and warnings. The secondary label \"API Integration\" is relevant due to the server's role in facilitating the integration of QWeather services into other applications. The secondary label \"Daily Productivity\" is also included since weather data can be valuable for personal planning and scheduling.",
    "primary_label": "Weather",
    "secondary_labels": [
      "API Integration",
      "Daily Productivity"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1676,
    "server_name": "QWeather API Integration Server",
    "rank_by_usage": 1677,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@overstarry_qweather-mcp-go-hot.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@overstarry/qweather-mcp-go-hot/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1676,
      "name": "QWeather API Integration Server",
      "author": "@overstarry/qweather-mcp-go-hot",
      "overview": "Provide real-time weather, forecast, air quality, and life indices data through a standardized MCP interface. Enable seamless integration of QWeather services into AI assistants and applications via stdio or SSE transports. Easily configure and run the server to access comprehensive weather information programmatically.",
      "repository_url": "https://github.com/overstarry/qweather-mcp-go",
      "homepage": "https://smithery.ai/server/@overstarry/qweather-mcp-go-hot",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@overstarry_qweather-mcp-go-hot.json",
      "tools_count": 9,
      "tools": [
        {
          "name": "get-air-quality",
          "description": "Deploy Server QWeather API Integration Server @overstarry/qweather-mcp-go-hot Try in Playground get-air-quality",
          "parameters": []
        },
        {
          "name": "get-air-quality-daily",
          "description": "Daily air quality forecast API provides air quality predictions for the next 3 days, including AQI values, pollutant concentrations, and health recommendations. Data includes various air quality standards and specific concentrations of pollutants such as PM2.5, PM10, NO2, O3, SO2, etc.",
          "parameters": []
        },
        {
          "name": "get-air-quality-hourly",
          "description": "Hourly air quality forecast API provides air quality data for the next 24 hours, including AQI, pollutant concentrations, sub-indices, and health recommendations. Data includes various air quality standards (such as QAQI, GB-DEFRA, etc.) and specific concentrations of pollutants like PM2.5, PM10, NO2, O3, SO2, etc.",
          "parameters": [
            {
              "name": "cityName",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-hourly-forecast",
          "description": "Hourly weather forecast API provides detailed weather information for the next 24-168 hours for cities worldwide. Available data includes: temperature, weather conditions, wind force, wind speed, wind direction, relative humidity, atmospheric pressure, precipitation probability, dew point temperature, and cloud cover. Forecast data is updated hourly to ensure accuracy.",
          "parameters": []
        },
        {
          "name": "get-minutely-precipitation",
          "description": "Minutely precipitation forecast API provides accurate precipitation predictions for the next 2 hours for cities worldwide. Available data includes precipitation type (rain/snow) and amount for each minute. This high-precision forecast is particularly useful for outdoor activity planning and real-time weather monitoring.",
          "parameters": []
        },
        {
          "name": "get-weather-forecast",
          "description": "Weather forecast API provides detailed weather predictions for cities worldwide, supporting forecasts from 3 to 30 days. Available data includes: sunrise/sunset times, moonrise/moonset times, temperature range, weather conditions, wind direction and speed, relative humidity, precipitation, atmospheric pressure, cloud cover, and UV index. Forecasts are updated daily to ensure accuracy.",
          "parameters": []
        },
        {
          "name": "get-weather-indices",
          "description": "Weather life indices forecast API provides various life indices for cities worldwide. Supports 1-day and 3-day forecasts. Available index types: - Type 0: All index types - Type 1: Sports (indicates suitability for outdoor sports activities) - Type 2: Car Washing (suggests whether it's suitable to wash cars) - Type 3: Dressing (provides clothing suggestions based on weather) - Type 4: Fishing (shows suitability of fishing conditions) - Type 5: UV (ultraviolet radiation intensity level) - Type 6: Travel (indicates suitability for travel and sightseeing) - Type 7: Allergy (allergy and pollen risk level) - Type 8: Cold (cold risk level) - Type 9: Comfort (overall comfort level of weather) - Type 10: Wind (wind conditions and their effects) - Type 11: Sunglasses (need for wearing sunglasses) - Type 12: Makeup (weather effects on makeup) - Type 13: Sunscreen (sunscreen needs) - Type 14: Traffic (weather effects on traffic conditions) - Type 15: Sports Watching (suitability for watching outdoor sports) - Type 16: Air Pollution Diffusion Conditions (air pollution diffusion conditions) Note: Not all cities provide all indices. International cities mainly support types 1, 2, 4, and 5.",
          "parameters": []
        },
        {
          "name": "get-weather-now",
          "description": "Real-time weather API provides current weather conditions for cities worldwide. Available data includes: temperature, feels-like temperature, weather conditions, wind direction, wind force level, relative humidity, precipitation, atmospheric pressure, and visibility. Data is updated in real-time, providing the most accurate current weather information.",
          "parameters": []
        },
        {
          "name": "get-weather-warning",
          "description": "Weather warning API provides real-time weather warning data issued by official agencies in China and multiple countries/regions worldwide. Data includes warning issuing agency, publication time, warning title, detailed warning information, warning level, warning type, and other relevant information.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@overstarry/qweather-mcp-go-hot/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "qweatherApiKey",
          "required": true,
          "description": "QWeather API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@overstarry/qweather-mcp-go-hot/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1677.@overstarry_qweather-mcp-go-hot_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1518
  }
}