{
  "labels": {
    "analysis": "The MCP Server is designed to provide real-time weather information for the United States. It offers two primary tools: fetching weather alerts based on state codes and retrieving weather forecasts using geographic coordinates. The server focuses on delivering structured weather data with emphasis on reliability and user-friendly access.",
    "reasoning": "The primary label \"Weather\" is chosen because the server exclusively deals with weather-related data and functionality. \"US Geospatial Data\" is selected as a secondary label because it emphasizes the server's location-specific capabilities. \"Public Data Access\" is another relevant secondary label as it highlights the server's role in providing accessible weather information. No custom label is needed as the predefined categories sufficiently cover the server's functionality.",
    "primary_label": "Weather",
    "secondary_labels": [
      "Operating System",
      "Database Operations"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1207,
    "server_name": "Weather MCP Server",
    "rank_by_usage": 1208,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@asifdotpy_mcp-weather-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@asifdotpy/mcp-weather-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_alerts",
          "description": "Get weather alerts for a US state.\n\n    Args:\n        state: Two-letter US state code (e.g. CA, NY)\n    ",
          "input_schema": {
            "properties": {
              "state": {
                "title": "State",
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "title": "get_alertsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_forecast",
          "description": "Get weather forecast for a location.\n\n    Args:\n        latitude: Latitude of the location\n        longitude: Longitude of the location\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "title": "get_forecastArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "get_alerts",
        "get_forecast"
      ]
    },
    "server_info_crawled": {
      "id": 1207,
      "name": "Weather MCP Server",
      "author": "@asifdotpy/mcp-weather-server",
      "overview": "Fetch real-time weather alerts and forecasts for any location in the United States. Access detailed weather information effortlessly using state codes or geographic coordinates. Stay informed with structured logging and robust error handling for a seamless experience.",
      "repository_url": "https://github.com/asifdotpy/MCP-Weather-Server",
      "homepage": "https://smithery.ai/server/@asifdotpy/mcp-weather-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@asifdotpy_mcp-weather-server.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "get_alerts",
          "description": "Get weather alerts for a US state.\n\n    Args:\n        state: Two-letter US state code (e.g. CA, NY)\n    ",
          "input_schema": {
            "properties": {
              "state": {
                "title": "State",
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "title": "get_alertsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_forecast",
          "description": "Get weather forecast for a location.\n\n    Args:\n        latitude: Latitude of the location\n        longitude: Longitude of the location\n    ",
          "input_schema": {
            "properties": {
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "title": "get_forecastArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@asifdotpy/mcp-weather-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@asifdotpy/mcp-weather-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1208.@asifdotpy_mcp-weather-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1165
  }
}