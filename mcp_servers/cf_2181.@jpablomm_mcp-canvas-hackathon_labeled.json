{
  "labels": {
    "analysis": "The MCP Server provides a local interface for interacting with the Canvas Learning Management System (LMS) through various API operations. It enables users to manage courses, assignments, submissions, peer reviews, users, announcements, and groups. The server also offers analytical tools to track student performance and participation. The primary functionality revolves around educational administration, course management, and analytics, making it a specialized tool for educators and administrators using Canvas LMS.",
    "reasoning": "The primary label \"Education\" is chosen because the server's core functionality directly supports educational management within the Canvas LMS. The secondary label \"Data Analysis & Processing\" is selected due to the presence of analytics tools that process student performance data. The predefined categories adequately cover the server's functionality, so no custom label is needed.",
    "primary_label": "Education",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2180,
    "server_name": "Canvas Learning Management System Server",
    "rank_by_usage": 2181,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@jpablomm_mcp-canvas-hackathon.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@jpablomm/mcp-canvas-hackathon/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2180,
      "name": "Canvas Learning Management System Server",
      "author": "@jpablomm/mcp-canvas-hackathon",
      "overview": "Provide seamless access to Canvas LMS data and operations through a local interface. Manage courses, assignments, submissions, users, and announcements efficiently. Enable integration with Claude Desktop for interactive Canvas API usage.",
      "repository_url": "https://github.com/jpablomm/mcp-canvas-hackathon",
      "homepage": "https://smithery.ai/server/@jpablomm/mcp-canvas-hackathon",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@jpablomm_mcp-canvas-hackathon.json",
      "tools_count": 12,
      "tools": [
        {
          "name": "list_courses",
          "description": "Deploy Server Canvas Learning Management System Server @jpablomm/mcp-canvas-hackathon Try in Playground list_courses",
          "parameters": [
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            },
            {
              "name": "include_concluded",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_course_details",
          "description": "Get detailed information about a specific course. Args: course_identifier: The Canvas course code (e.g., badm_554_120251_246794) or ID",
          "parameters": []
        },
        {
          "name": "list_assignments",
          "description": "List assignments for a specific course. Args: course_identifier: The Canvas course code (e.g., badm_554_120251_246794) or ID",
          "parameters": []
        },
        {
          "name": "get_assignment_details",
          "description": "Get detailed information about a specific assignment. Args: course_identifier: The Canvas course code (e.g., badm_554_120251_246794) or ID assignment_id: The Canvas assignment ID",
          "parameters": []
        },
        {
          "name": "assign_peer_review",
          "description": "Manually assign a peer review to a student for a specific assignment. Args: course_identifier: The Canvas course code (e.g., badm_554_120251_246794) or ID assignment_id: The Canvas assignment ID reviewer_id: The Canvas user ID of the student who will do the review reviewee_id: The Canvas user ID of the student whose submission will be reviewed",
          "parameters": []
        },
        {
          "name": "list_peer_reviews",
          "description": "List all peer review assignments for a specific assignment. Args: course_identifier: The Canvas course code (e.g., badm_554_120251_246794) or ID assignment_id: The Canvas assignment ID",
          "parameters": []
        },
        {
          "name": "list_submissions",
          "description": "List submissions for a specific assignment. Args: course_identifier: The Canvas course code (e.g., badm_554_120251_246794) or ID assignment_id: The Canvas assignment ID",
          "parameters": [
            {
              "name": "assignment_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "course_identifier",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_users",
          "description": "List users enrolled in a specific course. Args: course_identifier: The Canvas course code (e.g., badm_554_120251_246794) or ID",
          "parameters": []
        },
        {
          "name": "list_announcements",
          "description": "List announcements for a specific course. Args: course_identifier: The Canvas course code (e.g., badm_554_120251_246794) or ID",
          "parameters": []
        },
        {
          "name": "list_groups",
          "description": "List all groups and their members for a specific course. Args: course_identifier: The Canvas course code (e.g., badm_554_120251_246794) or ID",
          "parameters": []
        },
        {
          "name": "get_student_analytics",
          "description": "Get detailed analytics about student activity, participation, and progress in a course. Args: course_identifier: The Canvas course code (e.g., badm_554_120251_246794) or ID current_only: Whether to include only assignments due on or before today include_participation: Whether to include participation data (discussions, submissions) include_assignment_stats: Whether to include assignment completion statistics include_access_stats: Whether to include course access statistics",
          "parameters": []
        },
        {
          "name": "get_assignment_analytics",
          "description": "Get detailed analytics about student performance on a specific assignment. Args: course_identifier: The Canvas course code (e.g., badm_554_120251_246794) or ID assignment_id: The Canvas assignment ID",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@jpablomm/mcp-canvas-hackathon/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "canvasApiToken",
          "required": true,
          "description": "Canvas API token for authenticating with the Canvas LMS API"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@jpablomm/mcp-canvas-hackathon/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2181.@jpablomm_mcp-canvas-hackathon_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1883
  }
}