{
  "labels": {
    "analysis": "The MCP Server for huuh.me appears to facilitate collaborative AI interactions by enabling users to search for and contribute to knowledge bases, manage AI personas, and create structured spaces for team workflows. The available tools cover functionalities like information retrieval, content contribution, persona management, and collaborative space creation. It serves as a platform for sharing knowledge and AI-generated content within a structured, modular environment.",
    "reasoning": "The primary label \"Memory Management\" is chosen because the server heavily revolves around knowledge bases, information retrieval, and contribution mechanisms, which fit well with data storage and retrieval systems. The \"AI/ML Tools\" label is appropriate due to the focus on AI personas and collaborative AI spaces. \"Collaboration & Knowledge Sharing\" is a custom label highlighting the server's unique capability to enable team-based interactions around AI and knowledge bases.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": "Collaboration & Knowledge Sharing",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1291,
    "server_name": "huuh?",
    "rank_by_usage": 1292,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@infolab-ai_mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@infolab-ai/mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1291,
      "name": "huuh?",
      "author": "@infolab-ai/mcp",
      "overview": "Enable collaborative AI by connecting your applications to the huuh.me platform. Search, retrieve, contribute knowledge bases and AI personas, and create collaborative spaces to enhance team workflows. Simplify knowledge sharing and AI persona management for better, flexible AI interactions.",
      "repository_url": "https://github.com/infolab-ai/mcp",
      "homepage": "https://smithery.ai/server/@infolab-ai/mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@infolab-ai_mcp.json",
      "tools_count": 11,
      "tools": [
        {
          "name": "get_user_options",
          "description": "Deploy Server @infolab-ai/mcp Try in Playground get_user_options",
          "parameters": []
        },
        {
          "name": "search_marketplace",
          "description": "Search for courses in the marketplace. Args: query: Search query string (max 150 characters) Returns: A dictionary containing search results.",
          "parameters": []
        },
        {
          "name": "retrieve_information",
          "description": "Retrieve information from course content. Args: query: Search query (max 150 characters) course_id: ID of the course to search in relevant_modules: List of module numbers to search in (optional) relevant_groups: List of group IDs to search in (optional) relevant_file_ids: List of file IDs to search in (optional) Returns: A dictionary containing document results.",
          "parameters": []
        },
        {
          "name": "contribute",
          "description": "Add a contribution to a course. Args: course_id: ID of the course to contribute to week_number: Week number to add the contribution to contribution_title: Title of the contribution contribution_content: Content of the contribution (max 30,000 characters) Returns: A dictionary containing the result of the contribution.",
          "parameters": []
        },
        {
          "name": "get_persona",
          "description": "Get persona information by title. Args: title: Title of the persona Returns: A dictionary containing persona information.",
          "parameters": []
        },
        {
          "name": "refresh_persona",
          "description": "Update persona content. Args: title: Title of the persona to update new_content: New content for the persona course_id: ID of the course if it's a course persona (optional) Returns: A dictionary containing the result of the update.",
          "parameters": []
        },
        {
          "name": "contribute_persona_to_course",
          "description": "Contribute a new persona to a course. Args: course_id: ID of the course to contribute to persona_title: Title of the new persona persona_content: Content of the new persona Returns: A dictionary containing the result of the contribution.",
          "parameters": []
        },
        {
          "name": "contribute_persona_to_user",
          "description": "Contribute a new persona to a course. Args: persona_title: Title of the new persona persona_content: Content of the new persona Returns: A dictionary containing the result of the contribution.",
          "parameters": []
        },
        {
          "name": "create_base",
          "description": "Create a new base for a user. Args: base_name: Name of the base base_description: Description of the base Returns: A dictionary containing the result of the base creation.",
          "parameters": []
        },
        {
          "name": "assign_base_to_space",
          "description": "Assign a base to a space. Args: space_id: ID of the space to assign the base to base_id: ID of the base to assign Returns: A dictionary containing the result of the assignment.",
          "parameters": [
            {
              "name": "base_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "space_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_spaces",
          "description": "Create a new space. Args: space_name: Name of the space space_description: Description of the space Returns: A dictionary containing the result of the space creation.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@infolab-ai/mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "HUUH_API_KEY",
          "required": true,
          "description": "Your huuh API key for authenticating with the huuh.me platform"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@infolab-ai/mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1292.@infolab-ai_mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1228
  }
}