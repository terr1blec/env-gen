{
  "labels": {
    "analysis": "The Citeline Query Server is a specialized MCP server designed to facilitate powerful querying of Citeline's API, a platform likely focused on life sciences, pharmaceuticals, or clinical data. Its core functionality revolves around enabling seamless data access and retrieval through standardized interfaces. The available tools suggest the server simplifies complex data queries by providing schema insights, basic and advanced query syntax support, and a generic search capability that allows users to construct precise queries with logical operators and field specifications. This server enhances information retrieval for LLM applications by abstracting the complexity of direct API interaction.",
    "reasoning": "The primary label \"Database Operations\" was chosen because the server's primary functionality is to enable querying and data retrieval from Citeline's API, which closely aligns with database operations. The secondary label \"Web Search & Research\" was selected because the tools provided are useful for gathering specialized information, which is a key aspect of research. The secondary label \"API Integration\" was also chosen because the server's entire purpose is to integrate with and simplify interaction with Citeline's API. A custom label was not deemed necessary as the predefined labels adequately cover the functionality.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Web Search & Research",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2156,
    "server_name": "Citeline Query Server",
    "rank_by_usage": 2157,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@kanoacook_citeline-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@kanoacook/citeline-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2156,
      "name": "Citeline Query Server",
      "author": "@kanoacook/citeline-mcp",
      "overview": "Enable powerful querying capabilities for Citeline's API through a dedicated MCP server. Seamlessly integrate Citeline data access into your LLM applications to enhance information retrieval and decision-making. Simplify complex data queries with a standardized interface designed for efficient interaction.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@kanoacook/citeline-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@kanoacook_citeline-mcp.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "endpoints",
          "description": "Deploy Server Citeline Query Server @kanoacook/citeline-mcp Try in Playground",
          "parameters": [
            {
              "name": "endpoints",
              "required": false,
              "type": "string"
            },
            {
              "name": "List",
              "required": false,
              "type": "string"
            },
            {
              "name": "all",
              "required": false,
              "type": "string"
            },
            {
              "name": "Citeline",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "endpoint_schema",
          "description": "Once an endpoint is selected, get the schema for that endpoint",
          "parameters": [
            {
              "name": "endpoint_schema",
              "required": false,
              "type": "string"
            },
            {
              "name": "endpoint",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "advanced_query_syntax",
          "description": "Description not available",
          "parameters": [
            {
              "name": "advanced_query_syntax",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "basic_query_syntax",
          "description": "Description not available",
          "parameters": [
            {
              "name": "basic_query_syntax",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "generic_search",
          "description": "Execute a Citeline search Args: - `endpoint`: The name of the endpoint (e.g., \"drugcatalyst\"). This is used only for routing and must NOT appear in the request body. - `and_or_clauses`: A list of search clauses like {\"contains\": {\"name\": \"brandName\", \"value\": \"Repatha\"}} - `fields`: List of fields to return (e.g., [\"catalystId\", \"brandName\", \"drugSynonyms\"]) - `and_or_or`: Logical operator between clauses, either \"and\" or \"or\" (default is \"or\") Notes: - Do NOT include `endpoint` inside the query body. - Do NOT wrap conditions in a `criteria` field. - Always include `fields`, even if it's just one field. Returns: The JSON response as a string Example Call: generic_search( endpoint=\"drugcatalyst\", and_or_clauses=[ fields=[\"catalystId\", \"brandName\", \"genericName\", \"drugSynonyms\"], and_or_or=\"or\"",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@kanoacook/citeline-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@kanoacook/citeline-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2157.@kanoacook_citeline-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1865
  }
}