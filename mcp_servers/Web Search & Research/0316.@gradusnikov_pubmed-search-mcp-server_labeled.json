{
  "labels": {
    "analysis": "The MCP Server \"PubMedSearch\" is designed specifically for academic research purposes, focusing on searching and retrieving detailed information from the PubMed database. Its core tools allow users to perform complex searches by keywords, author names, and fetch detailed paper information including abstracts, titles, journals, and DOIs. This functionality directly supports scholarly research, literature reviews, and access to scientific publications.",
    "reasoning": "The primary label is \"Web Search & Research\" because the server's main purpose is to facilitate deep web searches within a specialized academic database (PubMed). The secondary label \"Academic Research\" is added to emphasize its specific use case in scholarly workflows. While \"Database Operations\" could be applicable due to data querying capabilities, it is secondary because the focus is more on research than general database management.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Web Search & Research"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 315,
    "server_name": "PubMedSearch",
    "rank_by_usage": 316,
    "usage_count": "102",
    "original_file": "../crawler/smithery/@gradusnikov_pubmed-search-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@gradusnikov/pubmed-search-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "search_pubmed",
          "description": "\n    Search the PubMed database using specified keywords and/or author names.\n\n    This function allows users to search the PubMed database by providing keywords\n    for titles or abstracts and/or author names. It returns a specified number of\n    results in a formatted dictionary.\n\n    Parameters:\n    - title_abstract_keywords (List[str]): Keywords to search for in the title or abstract.\n    - authors (List[str]): Author names to include in the search. Format: surname followed by initials, e.g., \"Doe JP\".\n    - num_results (int): Maximum number of results to return. Default is 10.\n\n    Returns:\n    - Dict[str, Any]: A dictionary containing the success status, a list of results with PubMed IDs,\n      links, abstracts, and the total number of results found.\n    ",
          "input_schema": {
            "properties": {
              "title_abstract_keywords": {
                "default": [],
                "items": {
                  "type": "string"
                },
                "title": "Title Abstract Keywords",
                "type": "array"
              },
              "authors": {
                "default": [],
                "items": {
                  "type": "string"
                },
                "title": "Authors",
                "type": "array"
              },
              "num_results": {
                "default": 10,
                "title": "Num Results",
                "type": "integer"
              }
            },
            "title": "search_pubmedArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "format_paper_details",
          "description": "\n    Fetch and format details of multiple PubMed articles.\n\n    This function retrieves details for a list of PubMed IDs and formats them\n    into a list of dictionaries containing article information.\n\n    Parameters:\n    - pubmed_ids (List[str]): A list of PubMed IDs to fetch details for.\n\n    Returns:\n    - List[Dict[str, Any]]: A list of dictionaries, each containing details of a PubMed article.\n    ",
          "input_schema": {
            "properties": {
              "pubmed_ids": {
                "items": {
                  "type": "string"
                },
                "title": "Pubmed Ids",
                "type": "array"
              }
            },
            "required": [
              "pubmed_ids"
            ],
            "title": "format_paper_detailsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "search_pubmed",
        "format_paper_details"
      ]
    },
    "server_info_crawled": {
      "id": 315,
      "name": "PubMedSearch",
      "author": "@gradusnikov/pubmed-search-mcp-server",
      "overview": "Search and retrieve academic papers from the PubMed database effortlessly. Access detailed information including titles, authors, journals, abstracts, and DOIs with ease. Enhance your research capabilities by integrating this server into your workflow.",
      "repository_url": "https://github.com/gradusnikov/pubmed-search-mcp-server",
      "homepage": "https://smithery.ai/server/@gradusnikov/pubmed-search-mcp-server",
      "remote_or_local": "Remote",
      "license": "BSD-3-Clause",
      "usage_count": "102",
      "success_rate": "99.82%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@gradusnikov_pubmed-search-mcp-server.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "search_pubmed",
          "description": "\n    Search the PubMed database using specified keywords and/or author names.\n\n    This function allows users to search the PubMed database by providing keywords\n    for titles or abstracts and/or author names. It returns a specified number of\n    results in a formatted dictionary.\n\n    Parameters:\n    - title_abstract_keywords (List[str]): Keywords to search for in the title or abstract.\n    - authors (List[str]): Author names to include in the search. Format: surname followed by initials, e.g., \"Doe JP\".\n    - num_results (int): Maximum number of results to return. Default is 10.\n\n    Returns:\n    - Dict[str, Any]: A dictionary containing the success status, a list of results with PubMed IDs,\n      links, abstracts, and the total number of results found.\n    ",
          "input_schema": {
            "properties": {
              "title_abstract_keywords": {
                "default": [],
                "items": {
                  "type": "string"
                },
                "title": "Title Abstract Keywords",
                "type": "array"
              },
              "authors": {
                "default": [],
                "items": {
                  "type": "string"
                },
                "title": "Authors",
                "type": "array"
              },
              "num_results": {
                "default": 10,
                "title": "Num Results",
                "type": "integer"
              }
            },
            "title": "search_pubmedArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "format_paper_details",
          "description": "\n    Fetch and format details of multiple PubMed articles.\n\n    This function retrieves details for a list of PubMed IDs and formats them\n    into a list of dictionaries containing article information.\n\n    Parameters:\n    - pubmed_ids (List[str]): A list of PubMed IDs to fetch details for.\n\n    Returns:\n    - List[Dict[str, Any]]: A list of dictionaries, each containing details of a PubMed article.\n    ",
          "input_schema": {
            "properties": {
              "pubmed_ids": {
                "items": {
                  "type": "string"
                },
                "title": "Pubmed Ids",
                "type": "array"
              }
            },
            "required": [
              "pubmed_ids"
            ],
            "title": "format_paper_detailsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@gradusnikov/pubmed-search-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@gradusnikov/pubmed-search-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0316.@gradusnikov_pubmed-search-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 312
  }
}