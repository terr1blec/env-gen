{
  "labels": {
    "analysis": "The MCP Server primarily focuses on leveraging DuckDuckGo's search capabilities to retrieve text, images, news, and video content from the web. It also includes tools for fetching and parsing webpage content, enabling users to gather information efficiently. The server's main use cases revolve around web search, content retrieval, and AI-assisted summarization of search results. Additionally, it provides AI chat functionality for conversational interactions based on search queries.",
    "reasoning": "The primary label, \"Web Search & Research,\" was chosen because the server's core functionality revolves around searching the web for various types of content (text, images, news, videos). The secondary label \"Browser Automation\" was selected due to the ddg-fetch-content tool, which automates fetching and parsing content from webpages. The server's AI chat and summarization features also align with web search and research, but \"API Integration\" was added as a secondary label because the tools are exposed via API endpoints. No custom label is needed as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Browser Automation",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1705,
    "server_name": "DuckDuckGo Search API",
    "rank_by_usage": 1706,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@ddkang1_ddg-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ddkang1/ddg-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "Connection timeout (20 seconds)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1705,
      "name": "DuckDuckGo Search API",
      "author": "@ddkang1/ddg-mcp",
      "overview": "Leverage DuckDuckGo's search capabilities to find text, images, news, and videos. Engage with AI chat for insightful conversations and receive summarized search results effortlessly.",
      "repository_url": "https://github.com/ddkang1/ddg-mcp",
      "homepage": "https://smithery.ai/server/@ddkang1/ddg-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ddkang1_ddg-mcp.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "ddg-text-search",
          "description": "Deploy Server DuckDuckGo Search API @ddkang1/ddg-mcp Try in Playground ddg-text-search",
          "parameters": []
        },
        {
          "name": "ddg-image-search",
          "description": "Search the web for images using DuckDuckGo",
          "parameters": []
        },
        {
          "name": "ddg-news-search",
          "description": "Search for news articles using DuckDuckGo",
          "parameters": []
        },
        {
          "name": "ddg-video-search",
          "description": "Search for videos using DuckDuckGo",
          "parameters": []
        },
        {
          "name": "ddg-fetch-content",
          "description": "Fetch and parse content from a webpage URL",
          "parameters": [
            {
              "name": "url",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@ddkang1/ddg-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@ddkang1/ddg-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1706.@ddkang1_ddg-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1536
  }
}