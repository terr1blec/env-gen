{
  "labels": {
    "analysis": "The MCP Server is primarily designed to fetch and process web content. Its core functionality involves retrieving HTML content from websites and converting it into markdown format, making it more digestible for language models (LLMs). This can be particularly useful for automating information extraction, content aggregation, or preparing web data for further analysis. The server's tool with the fetch capability suggests a focus on automated web interaction and data retrieval.",
    "reasoning": "The primary label \"Web Search & Research\" is chosen because the Server's main function is to retrieve and process web content, which aligns with information gathering and research purposes. The secondary label \"Browser Automation\" is used because the Server involves automated fetching and processing of web content, which is a form of browser automation. No custom label is needed as the predefined labels adequately describe the Server's functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Browser Automation"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2226,
    "server_name": "Fetch Server",
    "rank_by_usage": 2227,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@p1scess_mcp-servers.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@p1scess/mcp-servers/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2226,
      "name": "Fetch Server",
      "author": "@p1scess/mcp-servers",
      "overview": "Retrieve and process web content effortlessly. Convert HTML to markdown for easier consumption by LLMs, allowing models to extract information in manageable chunks. Enhance your applications with web content fetching capabilities.",
      "repository_url": "https://github.com/p1scess/mcp-servers",
      "homepage": "https://smithery.ai/server/@p1scess/mcp-servers",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@p1scess_mcp-servers.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "fetch",
          "description": "Deploy Server Fetch Server @p1scess/mcp-servers Try in Playground",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@p1scess/mcp-servers/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@p1scess/mcp-servers/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2227.@p1scess_mcp-servers_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1920
  }
}