{
  "labels": {
    "analysis": "The MCP Server provides tools for hosting, organizing, and retrieving clean markdown documentation for libraries and frameworks. Its core functionality centers around documentation management, allowing users to list, search, index, and retrieve documentation content efficiently. The tools are designed to help LLMs and developers quickly access accurate, structured technical information.",
    "reasoning": "The primary functionality of the server aligns with the \"Web Search & Research\" category due to its focus on providing documentation access and research capabilities. Secondary labels like \"Database Operations\" and \"Development Tools\" are relevant because the server helps manage documentation like a database and serves developers needing technical references. No custom labels are needed as predefined categories sufficiently cover the functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Database Operations",
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 860,
    "server_name": "Atlas Docs",
    "rank_by_usage": 861,
    "usage_count": "5",
    "original_file": "../crawler/smithery/@CartographAI_atlas-docs-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@CartographAI/atlas-docs-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "list_docs",
          "description": "Lists all available documentation libraries and frameworks. Use this as your first step to discover available documentation sets. Returns name, description and source url for each documentation set. Required before using other documentation tools since you need the docName.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "search_docs",
          "description": "Searches a documentation set for specific content. Use this to find pages containing particular keywords, concepts, or topics. Returns matching pages ranked by relevance with their paths and descriptions. Follow up with get_docs_page to get full content.",
          "input_schema": {
            "type": "object",
            "properties": {
              "docName": {
                "type": "string",
                "description": "Name of the documentation set"
              },
              "query": {
                "type": "string",
                "description": "Search query to find relevant pages within the documentation set"
              }
            },
            "required": [
              "docName",
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_docs_index",
          "description": "Retrieves a condensed, LLM-friendly index of the pages in a documentation set. Use this for initial exploration to understand what's covered and identify relevant pages. Returns a markdown page with a list of available pages. Follow up with get_docs_page to get full content.",
          "input_schema": {
            "type": "object",
            "properties": {
              "docName": {
                "type": "string",
                "description": "Name of the documentation set"
              }
            },
            "required": [
              "docName"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_docs_page",
          "description": "Retrieves a specific documentation page's content using its relative path. Use this to get detailed information about a known topic, after identifying the relevant page through get_docs_index or search_docs. Returns the complete content of a single documentation page.",
          "input_schema": {
            "type": "object",
            "properties": {
              "docName": {
                "type": "string",
                "description": "Name of the documentation set"
              },
              "pagePath": {
                "type": "string",
                "description": "The root-relative path of the specific documentation page (e.g., '/guides/getting-started', '/api/authentication')"
              }
            },
            "required": [
              "docName",
              "pagePath"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_docs_full",
          "description": "Retrieves the complete documentation content in a single consolidated file. Use this when you need comprehensive knowledge or need to analyze the full documentation context. Returns a large volume of text - consider using get_docs_page or search_docs for targeted information.",
          "input_schema": {
            "type": "object",
            "properties": {
              "docName": {
                "type": "string",
                "description": "Name of the documentation set"
              }
            },
            "required": [
              "docName"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 5,
      "tool_names": [
        "list_docs",
        "search_docs",
        "get_docs_index",
        "get_docs_page",
        "get_docs_full"
      ]
    },
    "server_info_crawled": {
      "id": 860,
      "name": "Atlas Docs",
      "author": "@CartographAI/atlas-docs-mcp",
      "overview": "Provide LLMs with hosted, clean markdown documentation for libraries and frameworks that they can immediately use.",
      "repository_url": "https://github.com/CartographAI/atlas-docs-mcp",
      "homepage": "https://smithery.ai/server/@CartographAI/atlas-docs-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "5",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@CartographAI_atlas-docs-mcp.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "list_docs",
          "description": "Lists all available documentation libraries and frameworks. Use this as your first step to discover available documentation sets. Returns name, description and source url for each documentation set. Required before using other documentation tools since you need the docName.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "search_docs",
          "description": "Searches a documentation set for specific content. Use this to find pages containing particular keywords, concepts, or topics. Returns matching pages ranked by relevance with their paths and descriptions. Follow up with get_docs_page to get full content.",
          "input_schema": {
            "type": "object",
            "properties": {
              "docName": {
                "type": "string",
                "description": "Name of the documentation set"
              },
              "query": {
                "type": "string",
                "description": "Search query to find relevant pages within the documentation set"
              }
            },
            "required": [
              "docName",
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_docs_index",
          "description": "Retrieves a condensed, LLM-friendly index of the pages in a documentation set. Use this for initial exploration to understand what's covered and identify relevant pages. Returns a markdown page with a list of available pages. Follow up with get_docs_page to get full content.",
          "input_schema": {
            "type": "object",
            "properties": {
              "docName": {
                "type": "string",
                "description": "Name of the documentation set"
              }
            },
            "required": [
              "docName"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_docs_page",
          "description": "Retrieves a specific documentation page's content using its relative path. Use this to get detailed information about a known topic, after identifying the relevant page through get_docs_index or search_docs. Returns the complete content of a single documentation page.",
          "input_schema": {
            "type": "object",
            "properties": {
              "docName": {
                "type": "string",
                "description": "Name of the documentation set"
              },
              "pagePath": {
                "type": "string",
                "description": "The root-relative path of the specific documentation page (e.g., '/guides/getting-started', '/api/authentication')"
              }
            },
            "required": [
              "docName",
              "pagePath"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get_docs_full",
          "description": "Retrieves the complete documentation content in a single consolidated file. Use this when you need comprehensive knowledge or need to analyze the full documentation context. Returns a large volume of text - consider using get_docs_page or search_docs for targeted information.",
          "input_schema": {
            "type": "object",
            "properties": {
              "docName": {
                "type": "string",
                "description": "Name of the documentation set"
              }
            },
            "required": [
              "docName"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@CartographAI/atlas-docs-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@CartographAI/atlas-docs-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0861.@CartographAI_atlas-docs-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 842
  }
}