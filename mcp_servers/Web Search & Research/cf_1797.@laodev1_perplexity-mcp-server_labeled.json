{
  "labels": {
    "analysis": "The Perplexity MCP Server is designed to enhance AI interactions by integrating Perplexity's language models with Claude. Its core functionality involves enabling advanced chat capabilities and quick query responses between these AI models. The provided tools, perplexity_chat and perplexity_ask, indicate that the server facilitates dynamic AI conversations and efficient information retrieval through Perplexity's AI platform. The primary use case appears to be bridging AI models for improved conversational and research capabilities.",
    "reasoning": "The primary label is chosen because the server's main functionality revolves around leveraging Perplexity's AI for enhanced interactions and research capabilities. While it could also be categorized under AI/ML Tools due to its model integration, the tools and use cases are more aligned with research and information retrieval. No custom label is necessary as the predefined categories adequately describe the server's functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1796,
    "server_name": "Perplexity MCP Server",
    "rank_by_usage": 1797,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@laodev1_perplexity-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@laodev1/perplexity-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1796,
      "name": "Perplexity MCP Server",
      "author": "@laodev1/perplexity-mcp-server",
      "overview": "Enhance your AI interactions by bridging Claude with Perplexity's language models. Utilize advanced chat capabilities and quick query responses securely and efficiently. Experience seamless integration with powerful tools for dynamic AI conversations.",
      "repository_url": "https://github.com/laodev1/perplexity-mcp-server",
      "homepage": "https://smithery.ai/server/@laodev1/perplexity-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@laodev1_perplexity-mcp-server.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "perplexity_chat",
          "description": "Deploy Server Perplexity MCP Server Claim Server @laodev1/perplexity-mcp-server Try in Playground perplexity_chat",
          "parameters": []
        },
        {
          "name": "perplexity_ask",
          "description": "Send a simple query to Perplexity AI",
          "parameters": [
            {
              "name": "model",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@laodev1/perplexity-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "perplexityApiKey",
          "required": true,
          "description": "Perplexity API key for authentication"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@laodev1/perplexity-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1797.@laodev1_perplexity-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1600
  }
}