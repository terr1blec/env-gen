{
  "labels": {
    "analysis": "The Pickapicon MCP Server is designed to streamline the process of finding and integrating SVG icons into design and development workflows. It eliminates the need for manual searching and copying of icons from various websites. The server provides tools to fetch SVG icons based on descriptions or prefixes and retrieve detailed SVG code, making it particularly useful for developers and designers who frequently work with icon libraries. The core functionality revolves around searching and retrieving icon-related data efficiently.",
    "reasoning": "The primary label \"Web Search & Research\" was chosen because the MCP Server specializes in searching for and retrieving specific icon data from various repositories, similar to how research tools gather information. The secondary label \"Development Tools\" is relevant due to the server's direct application in software development workflows, particularly for developers who frequently use icons. The custom label \"Icon Management\" captures the server's unique focus on managing and retrieving SVG icons, which is not explicitly covered by the predefined categories.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Development Tools"
    ],
    "custom_label": "Icon Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 467,
    "server_name": "Pickapicon MCP",
    "rank_by_usage": 468,
    "usage_count": "39",
    "original_file": "../crawler/smithery/@Leee62_pickapicon-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Leee62/pickapicon-mcp/mcp?config=eyJwcmVmaXgiOiAiIn0=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "Connection timeout (20 seconds)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 467,
      "name": "Pickapicon MCP",
      "author": "@Leee62/pickapicon-mcp",
      "overview": "Simplify and speed up your workflow by fetching SVG icons directly through LLMs without manually searching and copying from websites. Easily retrieve icon repositories, search icons by description, and get detailed SVG code using intuitive commands. Enhance your design and development process with seamless SVG access.",
      "repository_url": "https://github.com/Leee62/pickapicon-mcp",
      "homepage": "https://smithery.ai/server/@Leee62/pickapicon-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "39",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Leee62_pickapicon-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "get_icon_repos",
          "description": "Deploy Server Pickapicon MCP Claim Server @Leee62/pickapicon-mcp Try in Playground get_icon_repos",
          "parameters": [
            {
              "name": "get_icon_repos",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_icons_by_desc_and_prefix",
          "description": "get icons by desc and prefix (LIKE AS ant-design)",
          "parameters": [
            {
              "name": "desc",
              "required": true,
              "type": "string"
            },
            {
              "name": "prefix",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_icon_detail_by_prefix_and_name",
          "description": "get icon detail by prefix and svg name",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"prefix\": \"\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@Leee62/pickapicon-mcp/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"prefix\": \"\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@Leee62/pickapicon-mcp/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "cf_0468.@Leee62_pickapicon-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 459
  }
}