{
  "labels": {
    "analysis": "The MCP Server specializes in LinkedIn data retrieval, research, and enrichment. It offers tools for searching users and companies, extracting detailed profile information, retrieving contacts (emails and phone numbers), and performing deep research jobs. These capabilities are tailored for professionals and businesses needing LinkedIn data for sales, recruitment, market research, or other data-driven decision-making processes.",
    "reasoning": "The primary label is **Web Search & Research** because the server's core functionality is retrieving and analyzing LinkedIn data, which fits this category well. **Browser Automation** is a secondary label since the server performs automated data extraction from LinkedIn. **Communication Tools** is also relevant as it helps retrieve professional contact information, which can be used for outreach.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Browser Automation",
      "Communication Tools"
    ],
    "custom_label": "LinkedIn Data Extraction",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2006,
    "server_name": "Linkd Server",
    "rank_by_usage": 2007,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@automcp-app_linkd-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@automcp-app/linkd-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2006,
      "name": "Linkd Server",
      "author": "@automcp-app/linkd-mcp",
      "overview": "Enable advanced LinkedIn data retrieval and research capabilities through a standardized protocol. Search for users and companies, enrich profiles, retrieve contacts, and perform deep research jobs seamlessly. Integrate LinkedIn insights directly into your applications to enhance data-driven decision making.",
      "repository_url": "https://github.com/automcp-app/linkd-mcp",
      "homepage": "https://smithery.ai/server/@automcp-app/linkd-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@automcp-app_linkd-mcp.json",
      "tools_count": 7,
      "tools": [
        {
          "name": "search_for_users",
          "description": "Deploy Server Linkd Server @automcp-app/linkd-mcp Try in Playground search_for_users",
          "parameters": [
            {
              "name": "search_for_users",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_for_companies",
          "description": "Search for companies on Linkd using filters like query and match threshold.",
          "parameters": [
            {
              "name": "search_for_companies",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "enrich_linkedin",
          "description": "Retrieves detailed profile information for a specific LinkedIn URL. Each successful lookup costs 1 credit.",
          "parameters": [
            {
              "name": "enrich_linkedin",
              "required": false,
              "type": "string"
            },
            {
              "name": "url",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "retrieve_contacts",
          "description": "Retrieves email addresses and phone numbers for a LinkedIn profile. Each lookup costs 1 credit.",
          "parameters": [
            {
              "name": "retrieve_contacts",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "scrape_linkedin",
          "description": "Retrieves detailed profile data and posts with comments from a LinkedIn profile URL using RapidAPI. Each request costs 2 credits.",
          "parameters": [
            {
              "name": "scrape_linkedin",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "initiate_deep_research",
          "description": "Initiate a deep research job that combines multiple search variations with optional email enrichment. Each result costs 1 credit.",
          "parameters": [
            {
              "name": "initiate_deep_research",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "check_deep_research_status",
          "description": "Check the status of an ongoing deep research job.",
          "parameters": [
            {
              "name": "check_deep_research_status",
              "required": false,
              "type": "string"
            },
            {
              "name": "job_id",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@automcp-app/linkd-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "linkdApiKey",
          "required": true,
          "description": "Linkd API key for authentication"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@automcp-app/linkd-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2007.@automcp-app_linkd-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1750
  }
}