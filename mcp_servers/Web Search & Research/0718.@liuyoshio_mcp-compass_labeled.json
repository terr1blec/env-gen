{
  "labels": {
    "analysis": "The MCP Server described as \"Compass\" functions as a discovery and recommendation service for other MCP servers. Its primary purpose is to help users explore and find relevant MCP servers based on natural language queries. The available tool (\"recommend-mcp-servers\") suggests that the server specializes in searching, analyzing, and recommending external MCP servers by comparing descriptions and similarity scores, which indicates it plays a role in knowledge discovery and resource recommendation.",
    "reasoning": "The primary label of \"Web Search & Research\" is chosen because the server's core function involves querying and retrieving information about MCP servers, similar to a search engine. \"Database Operations\" is selected as a secondary label because the tool appears to manage and query a database of MCP servers for recommendations. The functionality is highly specialized, so no custom label is needed beyond the predefined options.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Database Operations"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 717,
    "server_name": "Compass",
    "rank_by_usage": 718,
    "usage_count": "10",
    "original_file": "../crawler/smithery/@liuyoshio_mcp-compass.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@liuyoshio/mcp-compass/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "recommend-mcp-servers",
          "description": "\n          Use this tool when there is a need to findn external MCP tools.\n          It explores and recommends existing MCP servers from the \n          internet, based on the description of the MCP Server \n          needed. It returns a list of MCP servers with their IDs, \n          descriptions, GitHub URLs, and similarity scores.\n          ",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "\n                Description for the MCP Server needed. \n                It should be specific and actionable, e.g.:\n                GOOD:\n                - 'MCP Server for AWS Lambda Python3.9 deployment'\n                - 'MCP Server for United Airlines booking API'\n                - 'MCP Server for Stripe refund webhook handling'\n\n                BAD:\n                - 'MCP Server for cloud' (too vague)\n                - 'MCP Server for booking' (which booking system?)\n                - 'MCP Server for payment' (which payment provider?)\n\n                Query should explicitly specify:\n                1. Target platform/vendor (e.g. AWS, Stripe, MongoDB)\n                2. Exact operation/service (e.g. Lambda deployment, webhook handling)\n                3. Additional context if applicable (e.g. Python, refund events)\n                "
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "recommend-mcp-servers"
      ]
    },
    "server_info_crawled": {
      "id": 717,
      "name": "Compass",
      "author": "@liuyoshio/mcp-compass",
      "overview": "MCP Discovery & Recommendation Service that helps explore Model Context Protocol servers using natural language queries.",
      "repository_url": "https://github.com/liuyoshio/mcp-compass",
      "homepage": "https://smithery.ai/server/@liuyoshio/mcp-compass",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "10",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@liuyoshio_mcp-compass.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "recommend-mcp-servers",
          "description": "\n          Use this tool when there is a need to findn external MCP tools.\n          It explores and recommends existing MCP servers from the \n          internet, based on the description of the MCP Server \n          needed. It returns a list of MCP servers with their IDs, \n          descriptions, GitHub URLs, and similarity scores.\n          ",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "\n                Description for the MCP Server needed. \n                It should be specific and actionable, e.g.:\n                GOOD:\n                - 'MCP Server for AWS Lambda Python3.9 deployment'\n                - 'MCP Server for United Airlines booking API'\n                - 'MCP Server for Stripe refund webhook handling'\n\n                BAD:\n                - 'MCP Server for cloud' (too vague)\n                - 'MCP Server for booking' (which booking system?)\n                - 'MCP Server for payment' (which payment provider?)\n\n                Query should explicitly specify:\n                1. Target platform/vendor (e.g. AWS, Stripe, MongoDB)\n                2. Exact operation/service (e.g. Lambda deployment, webhook handling)\n                3. Additional context if applicable (e.g. Python, refund events)\n                "
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@liuyoshio/mcp-compass/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@liuyoshio/mcp-compass/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0718.@liuyoshio_mcp-compass_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 701
  }
}