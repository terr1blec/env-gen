{
  "labels": {
    "analysis": "The MCP Server provides functionality for performing web searches using DuckDuckGo and fetching/parsing content from webpages. This enables users to retrieve information directly from the web in a structured way, which enhances LLM interaction with real-time data.",
    "reasoning": "The primary label \"Web Search & Research\" is chosen because the main functionality revolves around searching the web and retrieving information. The secondary label \"API Integration\" is added because the server interfaces with DuckDuckGo's search API and webpage content fetching. No custom label is needed as the functionality is well-covered by predefined categories.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 18,
    "server_name": "DuckDuckGo Search Server",
    "rank_by_usage": 19,
    "usage_count": "5,604",
    "original_file": "../crawler/smithery/@nickclyde_duckduckgo-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751937975,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@nickclyde/duckduckgo-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "search",
          "description": "\n    Search DuckDuckGo and return formatted results.\n\n    Args:\n        query: The search query string\n        max_results: Maximum number of results to return (default: 10)\n        ctx: MCP context for logging\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "max_results": {
                "default": 10,
                "title": "Max Results",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "title": "searchArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "fetch_content",
          "description": "\n    Fetch and parse content from a webpage URL.\n\n    Args:\n        url: The webpage URL to fetch content from\n        ctx: MCP context for logging\n    ",
          "input_schema": {
            "properties": {
              "url": {
                "title": "Url",
                "type": "string"
              }
            },
            "required": [
              "url"
            ],
            "title": "fetch_contentArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "search",
        "fetch_content"
      ]
    },
    "server_info_crawled": {
      "id": 18,
      "name": "DuckDuckGo Search Server",
      "author": "@nickclyde/duckduckgo-mcp-server",
      "overview": "Enable web search capabilities through DuckDuckGo. Fetch and parse webpage content intelligently for enhanced LLM interaction.",
      "repository_url": "https://github.com/nickclyde/duckduckgo-mcp-server",
      "homepage": "https://smithery.ai/server/@nickclyde/duckduckgo-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "5,604",
      "success_rate": "99.94%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@nickclyde_duckduckgo-mcp-server.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "search",
          "description": "\n    Search DuckDuckGo and return formatted results.\n\n    Args:\n        query: The search query string\n        max_results: Maximum number of results to return (default: 10)\n        ctx: MCP context for logging\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "max_results": {
                "default": 10,
                "title": "Max Results",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "title": "searchArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "fetch_content",
          "description": "\n    Fetch and parse content from a webpage URL.\n\n    Args:\n        url: The webpage URL to fetch content from\n        ctx: MCP context for logging\n    ",
          "input_schema": {
            "properties": {
              "url": {
                "title": "Url",
                "type": "string"
              }
            },
            "required": [
              "url"
            ],
            "title": "fetch_contentArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@nickclyde/duckduckgo-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@nickclyde/duckduckgo-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0019.@nickclyde_duckduckgo-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 19
  }
}