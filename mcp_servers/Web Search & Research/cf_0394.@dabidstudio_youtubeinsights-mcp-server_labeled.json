{
  "labels": {
    "analysis": "The MCP Server \"YouTube Insights\" is designed to provide analytical tools for extracting valuable information from YouTube videos, channels, and searches. Its primary functionality revolves around retrieving transcripts, searching for videos by keywords, and gathering channel information. This can assist content creators, researchers, or developers in understanding video performance, keyword trends, and channel analytics to optimize content strategies.",
    "reasoning": "The primary label \"Web Search & Research\" is chosen because the server enables detailed searches and analysis of YouTube content, which is a significant aspect of web-based research. The secondary label \"Content Creation\" is relevant because the tools provided can enhance content strategy by offering insights into video transcripts, popular keywords, and channel performance. No custom label is needed as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Content Creation"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 393,
    "server_name": "YouTube Insights",
    "rank_by_usage": 394,
    "usage_count": "61",
    "original_file": "../crawler/smithery/@dabidstudio_youtubeinsights-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@dabidstudio/youtubeinsights-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 393,
      "name": "YouTube Insights",
      "author": "@dabidstudio/youtubeinsights-mcp-server",
      "overview": "Extract insights from YouTube videos effortlessly. Analyze transcripts, discover videos by keywords, and retrieve channel information to enhance your content strategy.",
      "repository_url": "https://github.com/dabidstudio/youtubeinsights-mcp-server",
      "homepage": "https://smithery.ai/server/@dabidstudio/youtubeinsights-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "61",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@dabidstudio_youtubeinsights-mcp-server.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "get_youtube_transcript",
          "description": "Deploy Server YouTube Insights @dabidstudio/youtubeinsights-mcp-server Try in Playground get_youtube_transcript",
          "parameters": [
            {
              "name": "get_youtube_transcript",
              "required": false,
              "type": "string"
            },
            {
              "name": "url",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_youtube_videos",
          "description": "Search YouTube videos by keyword and retrieve detailed information",
          "parameters": []
        },
        {
          "name": "get_channel_info",
          "description": "Get channel information and 10 recent videos from a YouTube video URL",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@dabidstudio/youtubeinsights-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "youtubeApiKey",
          "required": true,
          "description": "API key for accessing YouTube Data API"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@dabidstudio/youtubeinsights-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0394.@dabidstudio_youtubeinsights-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 388
  }
}