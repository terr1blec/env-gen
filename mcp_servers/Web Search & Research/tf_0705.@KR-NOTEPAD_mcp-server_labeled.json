{
  "labels": {
    "analysis": "The MCP Server specializes in searching and retrieving restaurant information from Diningcode.com. Its primary functionality is to allow users to find restaurants by location or food type, and to fetch detailed information such as ratings, menus, and reviews. This eliminates the need for manual web scraping, making it a convenient tool for users looking for restaurant data in Korea.",
    "reasoning": "The primary label \"Web Search & Research\" is chosen because the server's core functionality revolves around searching for specific information (restaurants) in a structured and automated manner, which aligns with research and data gathering activities. The secondary label \"Travel & Maps\" fits as the server assists users in finding dining places, which is often related to travel and location-based services. No custom label is required as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Travel & Maps"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 704,
    "server_name": "Search for restaurants in Korea",
    "rank_by_usage": 705,
    "usage_count": "11",
    "original_file": "../crawler/smithery/@KR-NOTEPAD_mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@KR-NOTEPAD/mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "search_restaurants",
          "description": "Search for restaurants on Diningcode based on the provided query\n\nArgs:\n    query: Search query for restaurants\n\nReturns:\n    List of restaurant information",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "title": "search_restaurantsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_restaurant_details",
          "description": "Get detailed information about a specific restaurant\n\nArgs:\n    restaurant_id: The ID of the restaurant on Diningcode\n\nReturns:\n    Dictionary containing restaurant details",
          "input_schema": {
            "properties": {
              "restaurant_id": {
                "title": "Restaurant Id",
                "type": "string"
              }
            },
            "required": [
              "restaurant_id"
            ],
            "title": "get_restaurant_detailsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "search_restaurants",
        "get_restaurant_details"
      ]
    },
    "server_info_crawled": {
      "id": 704,
      "name": "Search for restaurants in Korea",
      "author": "@KR-NOTEPAD/mcp-server",
      "overview": "Access restaurant information effortlessly from Diningcode.com. Search for restaurants by location or food type and retrieve detailed information including ratings, menus, and reviews. Simplify your data extraction without the hassle of web scraping.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@KR-NOTEPAD/mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "11",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@KR-NOTEPAD_mcp-server.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "search_restaurants",
          "description": "Search for restaurants on Diningcode based on the provided query\n\nArgs:\n    query: Search query for restaurants\n\nReturns:\n    List of restaurant information",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "title": "search_restaurantsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_restaurant_details",
          "description": "Get detailed information about a specific restaurant\n\nArgs:\n    restaurant_id: The ID of the restaurant on Diningcode\n\nReturns:\n    Dictionary containing restaurant details",
          "input_schema": {
            "properties": {
              "restaurant_id": {
                "title": "Restaurant Id",
                "type": "string"
              }
            },
            "required": [
              "restaurant_id"
            ],
            "title": "get_restaurant_detailsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@KR-NOTEPAD/mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@KR-NOTEPAD/mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0705.@KR-NOTEPAD_mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 688
  }
}