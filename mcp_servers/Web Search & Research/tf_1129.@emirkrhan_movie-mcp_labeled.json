{
  "labels": {
    "analysis": "The MCP Server specializes in retrieving and providing movie-related data through a standardized protocol, primarily leveraging the TMDb API. Its core functionality involves fetching movie details by genre, making it useful for applications that require access to movie metadata, such as entertainment platforms, recommendation systems, or content management tools.",
    "reasoning": "The primary label reflects the server's focus on content retrieval related to movies, which aligns with gathering information. The secondary labels cover the technical aspect of web-based API integration and potential use in content creation or media applications.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "API Integration",
      "Content Creation"
    ],
    "custom_label": "Movie Metadata Service",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1128,
    "server_name": "Movie Information Server",
    "rank_by_usage": 1129,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@emirkrhan_movie-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@emirkrhan/movie-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_movies",
          "description": "\n    Get first 10 movies by genre ID using provided TMDb API key.\n    ",
          "input_schema": {
            "properties": {
              "genre_id": {
                "title": "Genre Id",
                "type": "integer"
              },
              "api_key": {
                "title": "Api Key",
                "type": "string"
              }
            },
            "required": [
              "genre_id",
              "api_key"
            ],
            "title": "get_moviesArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_movies"
      ]
    },
    "server_info_crawled": {
      "id": 1128,
      "name": "Movie Information Server",
      "author": "@emirkrhan/movie-mcp",
      "overview": "Provide movie-related data and functionalities to enhance your applications with rich movie context. Enable dynamic access to movie details, search, and metadata through a standardized protocol. Simplify integration of movie data into your workflows and agents.",
      "repository_url": "https://github.com/emirkrhan/movie-mcp",
      "homepage": "https://smithery.ai/server/@emirkrhan/movie-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@emirkrhan_movie-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_movies",
          "description": "\n    Get first 10 movies by genre ID using provided TMDb API key.\n    ",
          "input_schema": {
            "properties": {
              "genre_id": {
                "title": "Genre Id",
                "type": "integer"
              },
              "api_key": {
                "title": "Api Key",
                "type": "string"
              }
            },
            "required": [
              "genre_id",
              "api_key"
            ],
            "title": "get_moviesArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@emirkrhan/movie-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@emirkrhan/movie-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1129.@emirkrhan_movie-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1106
  }
}