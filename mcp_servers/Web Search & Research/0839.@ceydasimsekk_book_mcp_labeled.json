{
  "labels": {
    "analysis": "The MCP Server acts as an intermediary between language models (LLMs) and external tools, resources, and prompts. It enables dynamic integration by allowing clients to access and utilize tools like book search functionality. The core purpose is to facilitate real-world data or action integration with LLMs, enhancing their capabilities with external context and seamless interactions.",
    "reasoning": "The primary functionality aligns with enabling access to external resources (books in this case), which fits well within the Web Search & Research category. The server's role as an integration layer for LLMs also suggests relevance to AI/ML Tools. No custom label is necessary as the predefined categories adequately describe its functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 838,
    "server_name": "Book MCP Server",
    "rank_by_usage": 839,
    "usage_count": "6",
    "original_file": "../crawler/smithery/@ceydasimsekk_book_mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ceydasimsekk/book_mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "search_books_tool",
          "description": "\n    Kullanıcıdan gelen sorguyla kitap araması yapar.\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "title": "search_books_toolArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "search_books_tool"
      ]
    },
    "server_info_crawled": {
      "id": 838,
      "name": "Book MCP Server",
      "author": "@ceydasimsekk/book_mcp",
      "overview": "Provide a server implementation that exposes tools, resources, and prompts for dynamic integration with language models. Enable clients to list and call tools, read resources, and retrieve prompts to enhance LLM applications with external context. Facilitate seamless interaction between LLMs and real-world data or actions through a standardized protocol.",
      "repository_url": "https://github.com/ceydasimsekk/book_mcp",
      "homepage": "https://smithery.ai/server/@ceydasimsekk/book_mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "6",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ceydasimsekk_book_mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "search_books_tool",
          "description": "\n    Kullanıcıdan gelen sorguyla kitap araması yapar.\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "title": "search_books_toolArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@ceydasimsekk/book_mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@ceydasimsekk/book_mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0839.@ceydasimsekk_book_mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 820
  }
}