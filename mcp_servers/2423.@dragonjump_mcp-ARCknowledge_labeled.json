{
  "labels": {
    "analysis": "The MCP Server \"ArcKnowledge\" primarily functions as a knowledge base management system that allows users to aggregate, query, and manage multiple document sources through a unified interface. Its tools enable adding, updating, and listing knowledge document sources, as well as querying these sources with optional image input. This makes it a powerful tool for organizing and retrieving information from diverse sources efficiently.",
    "reasoning": "The primary functionality revolves around managing and querying knowledge bases, which aligns closely with the \"Memory Management\" category. Secondary labels like \"Database Operations\" and \"AI/ML Tools\" are relevant because the system handles data storage and retrieval (like a database) and might use advanced querying techniques (possibly AI-driven) to process and return results. No custom label is needed as the predefined categories adequately cover the server's capabilities.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "Database Operations",
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2422,
    "server_name": "ArcKnowledge",
    "rank_by_usage": 2423,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@dragonjump_mcp-ARCknowledge.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@dragonjump/mcp-ARCknowledge/mcp?config=eyJrbm93bGVkZ2VEb2N1bWVudFBhdGgiOiAiIn0=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "update_knowledge_document_source",
          "description": "\n    Update the knowledge document source URL with custom config JSON file\n    \n    Args:\n        knowledge_document_path: Path to the JSON config file\n    \n    Returns:\n        str: Confirmation message\n    ",
          "input_schema": {
            "properties": {
              "knowledge_document_path": {
                "title": "Knowledge Document Path",
                "type": "string"
              }
            },
            "required": [
              "knowledge_document_path"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_knowledge_document_sources",
          "description": "\n    List all registered knowledge document sources\n    \n    Returns:\n        Dict[str, Dict[str, str]]: Dictionary of source IDs mapping to their properties\n    ",
          "input_schema": {
            "properties": {},
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "load_image",
          "description": "Load an image from disk",
          "input_schema": {
            "properties": {
              "path": {
                "title": "Path",
                "type": "string"
              }
            },
            "required": [
              "path"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "query_knowledge_base",
          "description": "\n    Query the specified knowledge document sources using knowledge base\n    \n    Args:\n        query: The search query or question user ask\n        source_ids: list of source IDs to query (if None, queries all sources)\n        image: base64 encoded image string to include in the query\n    \n    Returns:\n        str: Retrieved and processed results\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "source_ids": {
                "default": [],
                "items": {
                  "type": "string"
                },
                "title": "Source Ids",
                "type": "array"
              },
              "image": {
                "default": "",
                "title": "Image",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "add_new_knowledge_document_source",
          "description": "\n    Add a new knowledge document source URL and append to existing sources\n    \n    Args:\n        url: URL of the knowledge document source\n        description: description of the source \n        apikey: apikey of the source\n    Returns:\n        str: Confirmation message\n    ",
          "input_schema": {
            "properties": {
              "url": {
                "title": "Url",
                "type": "string"
              },
              "description": {
                "default": "",
                "title": "Description",
                "type": "string"
              },
              "apikey": {
                "default": "",
                "title": "Apikey",
                "type": "string"
              }
            },
            "required": [
              "url"
            ],
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 5,
      "tool_names": [
        "update_knowledge_document_source",
        "list_knowledge_document_sources",
        "load_image",
        "query_knowledge_base",
        "add_new_knowledge_document_source"
      ]
    },
    "server_info_crawled": {
      "id": 2422,
      "name": "ArcKnowledge",
      "author": "@dragonjump/mcp-ARCknowledge",
      "overview": "Manage and query your custom knowledge base webhook endpoints seamlessly. Add, list, and search multiple document sources through a unified interface to aggregate knowledge efficiently. Simplify knowledge base integration and querying with this easy-to-use MCP server.",
      "repository_url": "https://github.com/dragonjump/mcp-ARCknowledge",
      "homepage": "https://smithery.ai/server/@dragonjump/mcp-ARCknowledge",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@dragonjump_mcp-ARCknowledge.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "update_knowledge_document_source",
          "description": "\n    Update the knowledge document source URL with custom config JSON file\n    \n    Args:\n        knowledge_document_path: Path to the JSON config file\n    \n    Returns:\n        str: Confirmation message\n    ",
          "input_schema": {
            "properties": {
              "knowledge_document_path": {
                "title": "Knowledge Document Path",
                "type": "string"
              }
            },
            "required": [
              "knowledge_document_path"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_knowledge_document_sources",
          "description": "\n    List all registered knowledge document sources\n    \n    Returns:\n        Dict[str, Dict[str, str]]: Dictionary of source IDs mapping to their properties\n    ",
          "input_schema": {
            "properties": {},
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "load_image",
          "description": "Load an image from disk",
          "input_schema": {
            "properties": {
              "path": {
                "title": "Path",
                "type": "string"
              }
            },
            "required": [
              "path"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "query_knowledge_base",
          "description": "\n    Query the specified knowledge document sources using knowledge base\n    \n    Args:\n        query: The search query or question user ask\n        source_ids: list of source IDs to query (if None, queries all sources)\n        image: base64 encoded image string to include in the query\n    \n    Returns:\n        str: Retrieved and processed results\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "source_ids": {
                "default": [],
                "items": {
                  "type": "string"
                },
                "title": "Source Ids",
                "type": "array"
              },
              "image": {
                "default": "",
                "title": "Image",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "add_new_knowledge_document_source",
          "description": "\n    Add a new knowledge document source URL and append to existing sources\n    \n    Args:\n        url: URL of the knowledge document source\n        description: description of the source \n        apikey: apikey of the source\n    Returns:\n        str: Confirmation message\n    ",
          "input_schema": {
            "properties": {
              "url": {
                "title": "Url",
                "type": "string"
              },
              "description": {
                "default": "",
                "title": "Description",
                "type": "string"
              },
              "apikey": {
                "default": "",
                "title": "Apikey",
                "type": "string"
              }
            },
            "required": [
              "url"
            ],
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"knowledgeDocumentPath\": \"\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@dragonjump/mcp-ARCknowledge/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"knowledgeDocumentPath\": \"\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@dragonjump/mcp-ARCknowledge/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "2423.@dragonjump_mcp-ARCknowledge_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2069
  }
}