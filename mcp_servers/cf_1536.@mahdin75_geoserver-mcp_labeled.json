{
  "labels": {
    "analysis": "The GeoServer MCP Server is designed to facilitate interaction between AI assistants and geospatial data by connecting Large Language Models to the GeoServer REST API. Its core functionality includes querying and manipulating geospatial datasets, managing GeoServer workspaces, layers, and styles, performing spatial queries, and generating map visualizations. The available tools cover a broad range of geospatial data operations, making it suitable for applications requiring geospatial analysis, mapping, and data management.",
    "reasoning": "The primary label \"Geospatial Tools\" is chosen because the server's primary functionality revolves around handling geospatial data and services. Secondary labels \"Database Operations\" and \"Web Services\" are selected because the server interacts with geospatial databases and provides APIs for geospatial queries and operations. A custom label is used to better describe the server's unique geospatial focus.",
    "primary_label": "Operating System",
    "secondary_labels": [
      "Database Operations",
      "API Integration"
    ],
    "custom_label": "GeoServer Integration",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1535,
    "server_name": "GeoServer MCP Server",
    "rank_by_usage": 1536,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@mahdin75_geoserver-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mahdin75/geoserver-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1535,
      "name": "GeoServer MCP Server",
      "author": "@mahdin75/geoserver-mcp",
      "overview": "Enable AI assistants to interact with geospatial data and services by connecting Large Language Models to the GeoServer REST API. Query and manipulate GeoServer workspaces, layers, and styles, execute spatial queries, and generate map visualizations seamlessly. Integrate easily with MCP-compatible clients to enhance geospatial data handling capabilities.",
      "repository_url": "https://github.com/mahdin75/geoserver-mcp",
      "homepage": "https://smithery.ai/server/@mahdin75/geoserver-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mahdin75_geoserver-mcp.json",
      "tools_count": 9,
      "tools": [
        {
          "name": "list_workspaces",
          "description": "Deploy Server GeoServer MCP Server Claim Server @mahdin75/geoserver-mcp Try in Playground list_workspaces",
          "parameters": [
            {
              "name": "list_workspaces",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_workspace",
          "description": "Create a new workspace in GeoServer. Args: workspace: Name of the workspace to create Returns: Dict with status and result information",
          "parameters": []
        },
        {
          "name": "get_layer_info",
          "description": "Get detailed information about a layer. Args: workspace: The workspace containing the layer layer: The name of the layer Returns: Dict with layer metadata",
          "parameters": []
        },
        {
          "name": "list_layers",
          "description": "List layers in GeoServer, optionally filtered by workspace. Args: workspace: Optional workspace to filter layers Returns: List of layer information dictionaries",
          "parameters": []
        },
        {
          "name": "create_layer",
          "description": "Create a new layer in GeoServer. Args: workspace: The workspace for the new layer layer: The name of the layer to create data_store: The data store to use source: The source data (file, table name, etc.) Returns: Dict with status and layer information",
          "parameters": []
        },
        {
          "name": "delete_resource",
          "description": "Delete a resource from GeoServer. Args: resource_type: Type of resource to delete (workspace, layer, style, etc.) workspace: The workspace containing the resource name: The name of the resource Returns: Dict with status and result information",
          "parameters": []
        },
        {
          "name": "query_features",
          "description": "Query features from a vector layer using CQL filter. Args: workspace: The workspace containing the layer layer: The layer to query filter: Optional CQL filter expression properties: Optional list of properties to return max_features: Maximum number of features to return Returns: GeoJSON FeatureCollection with query results",
          "parameters": []
        },
        {
          "name": "generate_map",
          "description": "Generate a map image using WMS GetMap. Args: layers: List of layers to include (format: workspace:layer) styles: Optional styles to apply (one per layer) bbox: Bounding box [minx, miny, maxx, maxy] width: Image width in pixels height: Image height in pixels format: Image format (png, jpeg, etc.) Returns: Dict with map information and URL",
          "parameters": []
        },
        {
          "name": "create_style",
          "description": "Create a new SLD style in GeoServer. Args: name: Name for the style sld: SLD XML content workspace: Optional workspace for the style Returns: Dict with status and style information",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mahdin75/geoserver-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mahdin75/geoserver-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1536.@mahdin75_geoserver-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1411
  }
}