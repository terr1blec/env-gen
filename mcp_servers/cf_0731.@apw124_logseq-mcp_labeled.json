{
  "labels": {
    "analysis": "The MCP Server is designed to integrate AI agents with Logseq, a note-taking and knowledge management tool. It provides a comprehensive set of tools to manage pages and blocks within a Logseq graph, enabling automation of common operations like creating, updating, searching, and organizing content. The server allows for hierarchical block management, linking between pages, and querying the knowledge base, making it a powerful tool for enhancing productivity and workflow efficiency.",
    "reasoning": "The primary label \"Memory Management\" was chosen because the server's core functionality revolves around managing, organizing, and retrieving data (pages and blocks) within a personal knowledge management system. The secondary label \"File Management\" was added due to the server's capability to handle blocks of content (similar to file operations), while \"Database Operations\" reflects the querying and structuring aspects of the tools. No custom label was deemed necessary as the predefined labels adequately cover the functionality.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "File Management",
      "Database Operations"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 730,
    "server_name": "Logseq Integration Tools",
    "rank_by_usage": 731,
    "usage_count": "9",
    "original_file": "../crawler/smithery/@apw124_logseq-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@apw124/logseq-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 730,
      "name": "Logseq Integration Tools",
      "author": "@apw124/logseq-mcp",
      "overview": "Enable AI agents to interact seamlessly with your local Logseq graph by providing tools to manage pages and blocks. Automate common Logseq operations such as creating, updating, and searching pages and blocks through a standardized protocol. Enhance your productivity by integrating Logseq with AI workflows using these MCP tools.",
      "repository_url": "https://github.com/apw124/logseq-mcp",
      "homepage": "https://smithery.ai/server/@apw124/logseq-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "9",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@apw124_logseq-mcp.json",
      "tools_count": 13,
      "tools": [
        {
          "name": "get_all_pages",
          "description": "Deploy Server Logseq Integration Tools Claim Server @apw124/logseq-mcp Try in Playground get_all_pages",
          "parameters": []
        },
        {
          "name": "get_page",
          "description": "Gets a specific page from the Logseq graph by name. For journal pages, use the format \"mmm dth, yyyy\" (e.g., \"Apr 4th, 2025\"). Note that journal pages are automatically created in Logseq with this date format. Journal pages have specific attributes: - \"journal?\": true - Indicates this is a journal page - \"journalDay\": YYYYMMDD - The date in numeric format (e.g., 20250404 for April 4, 2025) Args: name (str): The name of the page to retrieve. Returns: dict: Information about the requested page.",
          "parameters": []
        },
        {
          "name": "create_page",
          "description": "Creates a new page in the Logseq graph. For journal pages, use the format \"mmm dth, yyyy\" (e.g., \"Apr 4th, 2025\"). Journal pages are specially formatted in Logseq with automatic dating. When you create a journal page, Logseq automatically: - Sets \"journal?\": true - Sets \"journalDay\": YYYYMMDD (e.g., 20250404 for April 4, 2025) - Formats the page as a journal entry Args: name (str): The name of the new page. properties (dict, optional): Properties to set on the new page. Returns: dict: Information about the created page.",
          "parameters": []
        },
        {
          "name": "delete_page",
          "description": "Deletes a page from the Logseq graph. This operation removes the specified page and all its blocks. This action cannot be undone. For journal pages, use the format \"mmm dth, yyyy\" (e.g., \"Apr 4th, 2025\"). Args: name (str): The name of the page to delete. Returns: dict: Result of the deletion operation.",
          "parameters": []
        },
        {
          "name": "get_page_linked_references",
          "description": "Gets all linked references to a specific page in the Logseq graph. This returns blocks that contain links to the specified page using the Logseq double bracket notation: [[Page Name]]. For journal pages, use the format \"mmm dth, yyyy\" (e.g., \"Apr 4th, 2025\"). Args: page_name (str): The name of the page to find references to. Returns: list: A list of blocks that reference the specified page.",
          "parameters": []
        },
        {
          "name": "get_page_blocks",
          "description": "Gets all blocks from a specific page in the Logseq graph. For journal pages, use the format \"mmm dth, yyyy\" (e.g., \"Apr 4th, 2025\"). Returned blocks contain information about their hierarchical structure: - parent: The parent block's ID - level: The indentation level (1 for top-level, 2+ for indented blocks) - left: The block to the left (typically the parent for indented blocks) Blocks from journal pages will have: - \"journal?\": true - \"journalDay\": YYYYMMDD - The date in numeric format (e.g., 20250404) Args: page_name (str): The name of the page to retrieve blocks from. Returns: list: A list of blocks from the specified page.",
          "parameters": []
        },
        {
          "name": "get_block",
          "description": "Gets a specific block from the Logseq graph by its ID. The returned block contains information about its hierarchical structure: - parent: The parent block's ID - level: The indentation level (1 for top-level, 2+ for indented blocks) - left: The block to the left (typically the parent for indented blocks) If the block is from a journal page, it will include: - \"journal?\": true - \"journalDay\": YYYYMMDD - Date in numeric format Args: block_id (str): The ID of the block to retrieve. Returns: dict: Information about the requested block.",
          "parameters": []
        },
        {
          "name": "create_block",
          "description": "Creates a new block on a page in the Logseq graph. IMPORTANT NOTES: 1. All blocks are automatically formatted as bullet points in Logseq UI 2. To create links to other pages, use double brackets: [[Page Name]] When creating blocks on journal pages: - The block will inherit the \"journal?\" and \"journalDay\" attributes from the page - \"journalDay\" will be in YYYYMMDD format (e.g., 20250404 for April 4, 2025) Args: page_name (str): The name of the page to create the block on. content (str): The content of the new block. properties (dict, optional): Properties to set on the new block. Returns: dict: Information about the created block.",
          "parameters": []
        },
        {
          "name": "insert_block",
          "description": "Inserts a new block as a child of the specified parent block. This allows for creating hierarchical content by adding children to existing blocks. IMPORTANT NOTES: 1. All blocks are automatically formatted as bullet points in Logseq UI 2. To create links to other pages, use double brackets: [[Page Name]] 3. The new block will be inserted at the beginning or end of the parent's children depending on the 'before' parameter When inserting blocks into journal pages: - The block will inherit the \"journal?\" and \"journalDay\" attributes - \"journalDay\" will be in YYYYMMDD format (e.g., 20250404 for April 4, 2025) Args: parent_block_id (str): The ID of the parent block to insert under. content (str): The content of the new block. properties (dict, optional): Properties to set on the new block. before (bool, optional): Whether to insert at the beginning of children. Default is False (append at the end). Returns: dict: Information about the created block.",
          "parameters": []
        },
        {
          "name": "update_block",
          "description": "Updates an existing block in the Logseq graph. IMPORTANT NOTES: 1. All blocks are automatically formatted as bullet points in Logseq UI 2. To create links to other pages, use double brackets: [[Page Name]] When updating blocks on journal pages: - The \"journal?\" and \"journalDay\" attributes will be preserved - \"journalDay\" will remain in YYYYMMDD format (e.g., 20250404) Args: block_id (str): The ID of the block to update. content (str): The new content for the block. properties (dict, optional): Properties to update on the block. Returns: dict: Information about the updated block.",
          "parameters": []
        },
        {
          "name": "move_block",
          "description": "Moves a block to a new location in the graph. This allows for reorganizing the structure of blocks in the graph by moving a block (and all its children) to a different location. IMPORTANT NOTES: 1. The block will maintain its children when moved 2. The hierarchical position depends on the 'as_child' parameter: - If as_child=True: The block becomes a child of the target block - If as_child=False: The block becomes a sibling after the target block Args: block_id (str): The ID of the block to move. target_block_id (str): The ID of the target block to move to. as_child (bool, optional): Whether to make the block a child of the target. Default is False (insert as sibling). Returns: dict: Result of the move operation.",
          "parameters": []
        },
        {
          "name": "remove_block",
          "description": "Removes a block from the Logseq graph. This operation permanently removes the specified block and all its children. This action cannot be undone. To remove a block, you need its block ID, which can be obtained from: - get_page_blocks() function - get_block() function - search_blocks() function Args: block_id (str): The ID of the block to remove. Returns: dict: Result of the removal operation.",
          "parameters": []
        },
        {
          "name": "search_blocks",
          "description": "Searches for blocks matching a query in the Logseq graph. Examples of useful queries: - page:\"Page Name\" - find all blocks on a specific page - \"search term\" - find blocks containing the term - page:\"Apr 4th, 2025\" - find all blocks in a journal - [[Page Name]] - find references to a specific page Returned blocks from journal pages will include: - \"journal?\": true - \"journalDay\": YYYYMMDD - The date in numeric format Args: query (str): The search query. Returns: list: A list of blocks matching the search query.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@apw124/logseq-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "logseqToken",
          "required": true,
          "description": "The API token for authenticating with Logseq"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@apw124/logseq-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0731.@apw124_logseq-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 714
  }
}