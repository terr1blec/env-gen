{
  "labels": {
    "analysis": "The MCP Server is designed for retrieving and processing web content with a focus on HTTP request handling, URL accessibility checks, and HTML fragment extraction. Its core functionality revolves around interacting with web resources programmatically, making it particularly suited for web scraping, automated data retrieval, and web content analysis. The tools provided suggest usability in scenarios requiring precise web data extraction and validation.",
    "reasoning": "The primary label \"Web Search & Research\" was chosen because the server's primary role is to fetch and analyze web content, which aligns with research and information gathering activities. The secondary label \"Browser Automation\" is included due to the tools' ability to automate the extraction of specific HTML fragments, and \"API Integration\" is relevant as the server facilitates interaction with web services. No custom label is needed as the functionality aligns well with predefined categories.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Browser Automation",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 718,
    "server_name": "Node Fetch",
    "rank_by_usage": 719,
    "usage_count": "10",
    "original_file": "../crawler/smithery/@mcollina_mcp-node-fetch.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mcollina/mcp-node-fetch/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "extract-html-fragment",
          "description": "Extract a specific HTML fragment from a webpage using CSS selectors",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to fetch"
              },
              "selector": {
                "type": "string",
                "description": "CSS selector for the HTML fragment to extract"
              },
              "anchorId": {
                "type": "string",
                "description": "Optional anchor ID to locate a specific fragment"
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST"
                ],
                "default": "GET",
                "description": "HTTP method"
              },
              "headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "HTTP headers"
              },
              "body": {
                "type": "string",
                "description": "Request body for POST requests"
              },
              "timeout": {
                "type": "number",
                "description": "Request timeout in milliseconds"
              },
              "followRedirects": {
                "type": "boolean",
                "default": true,
                "description": "Whether to follow redirects"
              },
              "fragmentSelector": {
                "type": "string",
                "description": "CSS selector for the HTML fragment to extract (when responseType is html-fragment)"
              }
            },
            "required": [
              "url",
              "selector"
            ]
          },
          "annotations": null
        },
        {
          "name": "fetch-url",
          "description": "Fetch content from a URL",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to fetch"
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "HEAD",
                  "OPTIONS",
                  "PATCH"
                ],
                "default": "GET",
                "description": "HTTP method"
              },
              "headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "HTTP headers"
              },
              "body": {
                "type": "string",
                "description": "Request body for POST/PUT/PATCH requests"
              },
              "timeout": {
                "type": "number",
                "description": "Request timeout in milliseconds"
              },
              "responseType": {
                "type": "string",
                "enum": [
                  "text",
                  "json",
                  "binary",
                  "html-fragment"
                ],
                "default": "text",
                "description": "How to parse the response"
              },
              "followRedirects": {
                "type": "boolean",
                "default": true,
                "description": "Whether to follow redirects"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "check-status",
          "description": "Check if a URL is accessible (HEAD request)",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to check"
              },
              "timeout": {
                "type": "number",
                "description": "Request timeout in milliseconds"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 3,
      "tool_names": [
        "extract-html-fragment",
        "fetch-url",
        "check-status"
      ]
    },
    "server_info_crawled": {
      "id": 718,
      "name": "Node Fetch",
      "author": "@mcollina/mcp-node-fetch",
      "overview": "Fetch web content effortlessly from any URL using various HTTP methods. Handle headers, request bodies, and response formats with ease, while managing timeouts and redirects. Enhance your applications with reliable web content retrieval capabilities.",
      "repository_url": "https://github.com/mcollina/mcp-node-fetch",
      "homepage": "https://smithery.ai/server/@mcollina/mcp-node-fetch",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "10",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mcollina_mcp-node-fetch.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "extract-html-fragment",
          "description": "Extract a specific HTML fragment from a webpage using CSS selectors",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to fetch"
              },
              "selector": {
                "type": "string",
                "description": "CSS selector for the HTML fragment to extract"
              },
              "anchorId": {
                "type": "string",
                "description": "Optional anchor ID to locate a specific fragment"
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST"
                ],
                "default": "GET",
                "description": "HTTP method"
              },
              "headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "HTTP headers"
              },
              "body": {
                "type": "string",
                "description": "Request body for POST requests"
              },
              "timeout": {
                "type": "number",
                "description": "Request timeout in milliseconds"
              },
              "followRedirects": {
                "type": "boolean",
                "default": true,
                "description": "Whether to follow redirects"
              },
              "fragmentSelector": {
                "type": "string",
                "description": "CSS selector for the HTML fragment to extract (when responseType is html-fragment)"
              }
            },
            "required": [
              "url",
              "selector"
            ]
          },
          "annotations": null
        },
        {
          "name": "fetch-url",
          "description": "Fetch content from a URL",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to fetch"
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "HEAD",
                  "OPTIONS",
                  "PATCH"
                ],
                "default": "GET",
                "description": "HTTP method"
              },
              "headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "HTTP headers"
              },
              "body": {
                "type": "string",
                "description": "Request body for POST/PUT/PATCH requests"
              },
              "timeout": {
                "type": "number",
                "description": "Request timeout in milliseconds"
              },
              "responseType": {
                "type": "string",
                "enum": [
                  "text",
                  "json",
                  "binary",
                  "html-fragment"
                ],
                "default": "text",
                "description": "How to parse the response"
              },
              "followRedirects": {
                "type": "boolean",
                "default": true,
                "description": "Whether to follow redirects"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        },
        {
          "name": "check-status",
          "description": "Check if a URL is accessible (HEAD request)",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to check"
              },
              "timeout": {
                "type": "number",
                "description": "Request timeout in milliseconds"
              }
            },
            "required": [
              "url"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mcollina/mcp-node-fetch/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mcollina/mcp-node-fetch/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0719.@mcollina_mcp-node-fetch_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 702
  }
}