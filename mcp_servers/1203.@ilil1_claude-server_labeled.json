{
  "labels": {
    "analysis": "The MCP Server is designed to manage and persist contextual information across AI interactions, focusing on project-specific organization and conversation continuity. Its core functionality revolves around storing, retrieving, and managing contextual data in a structured manner, supporting hierarchical relationships and metadata handling. The available tools enable saving project contexts with relationships, saving conversation contexts with continuation capabilities, retrieving contexts by ID, and listing contexts with filtering options.",
    "reasoning": "The primary label \"Memory Management\" was chosen because the server's main purpose is to store, organize, and retrieve contextual information, which aligns with data storage and knowledge management. The secondary label \"AI/ML Tools\" was added since the server is specifically geared towards enhancing AI interactions by maintaining organized context. A custom label \"Context Management\" was introduced to highlight the unique aspect of managing hierarchical context relationships and conversation continuity that isn't fully covered by the predefined categories.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": "Context Management",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1202,
    "server_name": "Claude Server",
    "rank_by_usage": 1203,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@ilil1_claude-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ilil1/claude-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "save_project_context",
          "description": "Save project-specific context with relationships",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the context"
              },
              "projectId": {
                "type": "string",
                "description": "Project identifier"
              },
              "content": {
                "type": "string",
                "description": "Context content to save"
              },
              "parentContextId": {
                "type": "string",
                "description": "Optional ID of parent context"
              },
              "references": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional related context IDs"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional tags for categorizing"
              },
              "metadata": {
                "type": "object",
                "description": "Optional additional metadata"
              }
            },
            "required": [
              "id",
              "projectId",
              "content"
            ]
          },
          "annotations": null
        },
        {
          "name": "save_conversation_context",
          "description": "Save conversation context with continuation support",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the context"
              },
              "sessionId": {
                "type": "string",
                "description": "Conversation session identifier"
              },
              "content": {
                "type": "string",
                "description": "Context content to save"
              },
              "continuationOf": {
                "type": "string",
                "description": "Optional ID of previous context"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional tags for categorizing"
              },
              "metadata": {
                "type": "object",
                "description": "Optional additional metadata"
              }
            },
            "required": [
              "id",
              "sessionId",
              "content"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_context",
          "description": "Retrieve context by ID and optional project ID",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the context to retrieve"
              },
              "projectId": {
                "type": "string",
                "description": "Optional project ID for project contexts"
              }
            },
            "required": [
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "list_contexts",
          "description": "List contexts with filtering options",
          "input_schema": {
            "type": "object",
            "properties": {
              "projectId": {
                "type": "string",
                "description": "Optional project ID to filter by"
              },
              "tag": {
                "type": "string",
                "description": "Optional tag to filter by"
              },
              "type": {
                "type": "string",
                "enum": [
                  "project",
                  "conversation"
                ],
                "description": "Optional type to filter by"
              }
            }
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "save_project_context",
        "save_conversation_context",
        "get_context",
        "list_contexts"
      ]
    },
    "server_info_crawled": {
      "id": 1202,
      "name": "Claude Server",
      "author": "@ilil1/claude-server",
      "overview": "Manage and persist context across sessions with project-specific organization and conversation continuity. Enable hierarchical context management, conversation chaining, and efficient JSON-based storage for enhanced context retrieval and metadata handling. Improve your workflow by maintaining rich, organized context for your AI interactions.",
      "repository_url": "https://github.com/ilil1/claude-server",
      "homepage": "https://smithery.ai/server/@ilil1/claude-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ilil1_claude-server.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "save_project_context",
          "description": "Save project-specific context with relationships",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the context"
              },
              "projectId": {
                "type": "string",
                "description": "Project identifier"
              },
              "content": {
                "type": "string",
                "description": "Context content to save"
              },
              "parentContextId": {
                "type": "string",
                "description": "Optional ID of parent context"
              },
              "references": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional related context IDs"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional tags for categorizing"
              },
              "metadata": {
                "type": "object",
                "description": "Optional additional metadata"
              }
            },
            "required": [
              "id",
              "projectId",
              "content"
            ]
          },
          "annotations": null
        },
        {
          "name": "save_conversation_context",
          "description": "Save conversation context with continuation support",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the context"
              },
              "sessionId": {
                "type": "string",
                "description": "Conversation session identifier"
              },
              "content": {
                "type": "string",
                "description": "Context content to save"
              },
              "continuationOf": {
                "type": "string",
                "description": "Optional ID of previous context"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional tags for categorizing"
              },
              "metadata": {
                "type": "object",
                "description": "Optional additional metadata"
              }
            },
            "required": [
              "id",
              "sessionId",
              "content"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_context",
          "description": "Retrieve context by ID and optional project ID",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the context to retrieve"
              },
              "projectId": {
                "type": "string",
                "description": "Optional project ID for project contexts"
              }
            },
            "required": [
              "id"
            ]
          },
          "annotations": null
        },
        {
          "name": "list_contexts",
          "description": "List contexts with filtering options",
          "input_schema": {
            "type": "object",
            "properties": {
              "projectId": {
                "type": "string",
                "description": "Optional project ID to filter by"
              },
              "tag": {
                "type": "string",
                "description": "Optional tag to filter by"
              },
              "type": {
                "type": "string",
                "enum": [
                  "project",
                  "conversation"
                ],
                "description": "Optional type to filter by"
              }
            }
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@ilil1/claude-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@ilil1/claude-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1203.@ilil1_claude-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1161
  }
}