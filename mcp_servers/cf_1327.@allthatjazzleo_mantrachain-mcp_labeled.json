{
  "labels": {
    "analysis": "The MCP Server is primarily designed for interacting with the MantraChain blockchain. Its core functionality revolves around token transactions (sending, transferring via IBC), staking/delegation operations, smart contract interactions, decentralized exchange (DEX) activities (querying pools, swapping tokens), and querying network/block information. It provides a standardized protocol for blockchain operations, allowing users to perform tasks like managing their balances, claiming rewards, and executing transactions efficiently.",
    "reasoning": "The server's primary functionality is clearly aligned with blockchain operations, particularly focusing on token management and decentralized finance (DeFi) activities. The predefined \"Cryptocurrency & Blockchain\" label best captures its core use cases. The additional tools for DEX operations and smart contract interactions also support broader DeFi and blockchain-related activities, justifying the secondary label \"Data Analysis & Processing\" (for querying and analyzing blockchain data). No unique functionality warrants a custom label.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1326,
    "server_name": "MantraChain MCP Server",
    "rank_by_usage": 1327,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@allthatjazzleo_mantrachain-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@allthatjazzleo/mantrachain-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1326,
      "name": "MantraChain MCP Server",
      "author": "@allthatjazzleo/mantrachain-mcp",
      "overview": "Interact with the MantraChain blockchain seamlessly. Send tokens, delegate to validators, and query balances using a standardized protocol. Simplify your blockchain operations with powerful tools at your fingertips.",
      "repository_url": "https://github.com/allthatjazzleo/mantrachain-mcp",
      "homepage": "https://smithery.ai/server/@allthatjazzleo/mantrachain-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@allthatjazzleo_mantrachain-mcp.json",
      "tools_count": 18,
      "tools": [
        {
          "name": "bank-send",
          "description": "Deploy Server MantraChain MCP Server Claim Server @allthatjazzleo/mantrachain-mcp Try in Playground",
          "parameters": []
        },
        {
          "name": "get-balance",
          "description": "Get balance of an address (defaults to your own address if none provided)",
          "parameters": []
        },
        {
          "name": "delegate",
          "description": "Delegate/Stake tokens to a validator",
          "parameters": [
            {
              "name": "memo",
              "required": false,
              "type": "string"
            },
            {
              "name": "denom",
              "required": false,
              "type": "string"
            },
            {
              "name": "amount",
              "required": true,
              "type": "string"
            },
            {
              "name": "networkName",
              "required": true,
              "type": "string"
            },
            {
              "name": "operatorAddress",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "undelegate",
          "description": "Undelegate/Unstake tokens from a validator",
          "parameters": [
            {
              "name": "undelegate",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "claim-rewards",
          "description": "Claim rewards for a specific validator",
          "parameters": [
            {
              "name": "memo",
              "required": false,
              "type": "string"
            },
            {
              "name": "networkName",
              "required": true,
              "type": "string"
            },
            {
              "name": "operatorAddress",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-validators",
          "description": "Description not available",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "all",
              "required": false,
              "type": "string"
            },
            {
              "name": "validators",
              "required": false,
              "type": "string"
            },
            {
              "name": "networkName",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-delegations",
          "description": "Get current staking information for an address",
          "parameters": [
            {
              "name": "address",
              "required": false,
              "type": "string"
            },
            {
              "name": "networkName",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-available-rewards",
          "description": "Get all available rewards for an address",
          "parameters": [
            {
              "name": "address",
              "required": false,
              "type": "string"
            },
            {
              "name": "networkName",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-account-info",
          "description": "Get current account information",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "current",
              "required": false,
              "type": "string"
            },
            {
              "name": "account",
              "required": false,
              "type": "string"
            },
            {
              "name": "information",
              "required": false,
              "type": "string"
            },
            {
              "name": "networkName",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-block-info",
          "description": "Get block information",
          "parameters": [
            {
              "name": "Get",
              "required": false,
              "type": "string"
            },
            {
              "name": "block",
              "required": false,
              "type": "string"
            },
            {
              "name": "information",
              "required": false,
              "type": "string"
            },
            {
              "name": "height",
              "required": false,
              "type": "string"
            },
            {
              "name": "networkName",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "query-network",
          "description": "Execute a generic network gRPC Gateway query against chain APIs when you cannot find the required information from other tools. You MUST first check the available query/service by reading the openapi specification from the resource `openapi://{networkName}` to understand available query/service, methods, required parameters and body structure.",
          "parameters": []
        },
        {
          "name": "ibc-transfer",
          "description": "Send tokens via IBC transfer.",
          "parameters": []
        },
        {
          "name": "contract-query",
          "description": "Query a smart contract by executing a read-only function",
          "parameters": []
        },
        {
          "name": "contract-execute",
          "description": "Execute a function on a smart contract that changes state",
          "parameters": []
        },
        {
          "name": "dex-get-pools",
          "description": "Get all available liquidity pools from the DEX",
          "parameters": [
            {
              "name": "networkName",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "dex-find-routes",
          "description": "Find available swap routes between two tokens - must first check two tokens are available in the DEX pools by using `dex-get-pools`",
          "parameters": []
        },
        {
          "name": "dex-simulate-swap",
          "description": "Simulate a token swap to get expected outcome without executing it - must first check two tokens are available in the DEX pools by using `dex-get-pools`",
          "parameters": []
        },
        {
          "name": "dex-swap",
          "description": "Execute a token swap on the DEX - must first check two tokens are available in the DEX pools by using `dex-get-pools`",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@allthatjazzleo/mantrachain-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@allthatjazzleo/mantrachain-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1327.@allthatjazzleo_mantrachain-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1255
  }
}