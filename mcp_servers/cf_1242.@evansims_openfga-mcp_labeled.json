{
  "labels": {
    "analysis": "The OpenFGA MCP Server enables Large Language Models (LLMs) to interact with OpenFGA (Open Fine-Grained Authorization) stores. This server facilitates authorization checks, object and relation listings, and user management within OpenFGA's authorization model. It allows LLMs to read, search, and manipulate authorization data for enhanced control over accessing resources, which is crucial for agentic AI and fine-grained access control scenarios.",
    "reasoning": "The primary functionality is centered around authorization and access control, which aligns with managing permissions in systems. The tools provided are highly specialized for querying and manipulating OpenFGA stores, making \"Database Operations\" the most appropriate primary label. \"Operating System\" or \"Security & Authentication\" could also be considered secondary, given the server's role in managing user permissions and system access.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Security & Authentication"
    ],
    "custom_label": "Authorization Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1241,
    "server_name": "OpenFGA MCP Server",
    "rank_by_usage": 1242,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@evansims_openfga-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@evansims/openfga-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1241,
      "name": "OpenFGA MCP Server",
      "author": "@evansims/openfga-mcp",
      "overview": "Enable Large Language Models to read, search, and manipulate OpenFGA stores. Unlock authorization for agentic AI and fine-grained vibe coding for enhanced user interactions.",
      "repository_url": "https://github.com/evansims/openfga-mcp",
      "homepage": "https://smithery.ai/server/@evansims/openfga-mcp",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@evansims_openfga-mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "check",
          "description": "Deploy Server OpenFGA MCP Server @evansims/openfga-mcp Try in Playground",
          "parameters": []
        },
        {
          "name": "list_objects",
          "description": "Get all objects of the given type that the user has a relation with. Args: user: User ID relation: Relation type: Type Returns: A formatted string containing the result of the authorization check.",
          "parameters": []
        },
        {
          "name": "list_relations",
          "description": "Get all relations for which the user has a relationship with the object. Args: user: User ID relations: Comma-separated list of relations object: Object Returns: A list of relations for which the specifieduser has a relationship with the object.",
          "parameters": []
        },
        {
          "name": "list_users",
          "description": "Get all users that have a given relationship with a given object. Args: object: Object type: Object Type relation: Relation Returns: A list of users that have the given relationship with the given object.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@evansims/openfga-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@evansims/openfga-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1242.@evansims_openfga-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1191
  }
}