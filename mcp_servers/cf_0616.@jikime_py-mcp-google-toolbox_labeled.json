{
  "labels": {
    "analysis": "The MCP Server \"Google Toolbox\" is designed to integrate AI assistants with various Google services, primarily focusing on Gmail, Google Calendar, Google Drive, and Google Search. Its core functionality revolves around managing emails, scheduling events, file operations, and web searches through automated interactions. The available tools enable users to perform tasks such as listing and searching emails, creating and updating calendar events, searching and reading files from Google Drive, and executing Google web searches. This server aims to streamline productivity by centralizing these Google service interactions within AI workflows.",
    "reasoning": "The primary label \"Communication Tools\" is chosen because the server heavily focuses on email and calendar management, which are core communication functions. The secondary label \"Daily Productivity\" fits well as the server enhances productivity through efficient task management. Additionally, \"File Management\" is relevant due to the inclusion of Google Drive file operations. While there isn't a unique functionality that necessitates a custom label, the server could also be loosely connected to \"API Integration\" as it interfaces with Google's APIs, but this is already partially covered by the tools it provides.",
    "primary_label": "Communication Tools",
    "secondary_labels": [
      "Daily Productivity",
      "File Management"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 615,
    "server_name": "Google Toolbox",
    "rank_by_usage": 616,
    "usage_count": "16",
    "original_file": "../crawler/smithery/@jikime_py-mcp-google-toolbox.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@jikime/py-mcp-google-toolbox/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 615,
      "name": "Google Toolbox",
      "author": "@jikime/py-mcp-google-toolbox",
      "overview": "Provide AI assistants with powerful tools to interact seamlessly with Google services such as Gmail, Google Calendar, Google Drive, and Google Search. Enable efficient management of emails, calendar events, file searches, and web searches through a unified interface. Enhance productivity by integrating these Google functionalities directly into your AI workflows.",
      "repository_url": "https://github.com/jikime/py-mcp-google-toolbox",
      "homepage": "https://smithery.ai/server/@jikime/py-mcp-google-toolbox",
      "remote_or_local": "Remote",
      "license": "https://smithery.ai/server/py-mcp-google-toolbox",
      "usage_count": "16",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@jikime_py-mcp-google-toolbox.json",
      "tools_count": 11,
      "tools": [
        {
          "name": "list_emails",
          "description": "Deploy Server Google Toolbox @jikime/py-mcp-google-toolbox Try in Playground list_emails",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "max_results",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_emails",
          "description": "Search emails with advanced query",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "max_results",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "send_email",
          "description": "Description not available",
          "parameters": [
            {
              "name": "cc",
              "required": false,
              "type": "string"
            },
            {
              "name": "to",
              "required": true,
              "type": "string"
            },
            {
              "name": "bcc",
              "required": false,
              "type": "string"
            },
            {
              "name": "body",
              "required": true,
              "type": "string"
            },
            {
              "name": "subject",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "modify_email",
          "description": "Modify email labels (archive, trash, mark read/unread, etc.)",
          "parameters": [
            {
              "name": "modify_email",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_events",
          "description": "List upcoming calendar events",
          "parameters": [
            {
              "name": "List",
              "required": false,
              "type": "string"
            },
            {
              "name": "upcoming",
              "required": false,
              "type": "string"
            },
            {
              "name": "calendar",
              "required": false,
              "type": "string"
            },
            {
              "name": "events",
              "required": false,
              "type": "string"
            },
            {
              "name": "time_max",
              "required": false,
              "type": "string"
            },
            {
              "name": "time_min",
              "required": false,
              "type": "string"
            },
            {
              "name": "max_results",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_event",
          "description": "Create a new calendar event",
          "parameters": [
            {
              "name": "start",
              "required": true,
              "type": "string"
            },
            {
              "name": "summary",
              "required": true,
              "type": "string"
            },
            {
              "name": "location",
              "required": false,
              "type": "string"
            },
            {
              "name": "attendees",
              "required": false,
              "type": "string"
            },
            {
              "name": "description",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_event",
          "description": "Update an existing calendar event",
          "parameters": [
            {
              "name": "update_event",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_event",
          "description": "Delete a calendar event",
          "parameters": [
            {
              "name": "delete_event",
              "required": false,
              "type": "string"
            },
            {
              "name": "Delete",
              "required": false,
              "type": "string"
            },
            {
              "name": "a",
              "required": false,
              "type": "string"
            },
            {
              "name": "calendar",
              "required": false,
              "type": "string"
            },
            {
              "name": "event",
              "required": false,
              "type": "string"
            },
            {
              "name": "event_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_google",
          "description": "Perform a Google search and return formatted results",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "num_results",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "read_gdrive_file",
          "description": "Read contents of a file from Google Drive",
          "parameters": [
            {
              "name": "read_gdrive_file",
              "required": false,
              "type": "string"
            },
            {
              "name": "file_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "search_gdrive",
          "description": "Search for files in Google Drive",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "page_size",
              "required": false,
              "type": "string"
            },
            {
              "name": "page_token",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@jikime/py-mcp-google-toolbox/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "googleApiKey",
          "required": true,
          "description": "Google API Key"
        },
        {
          "name": "googleClientSecret",
          "required": true,
          "description": "Google Client Secret"
        },
        {
          "name": "googleRefreshToken",
          "required": true,
          "description": "Google Refresh Token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@jikime/py-mcp-google-toolbox/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0616.@jikime_py-mcp-google-toolbox_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 601
  }
}