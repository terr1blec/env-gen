{
  "labels": {
    "analysis": "The MCP Server \"Raindrop.io Bookmark Manager\" is designed to manage and interact with bookmarks and collections in the Raindrop.io service. It provides tools for creating, updating, deleting, and organizing bookmarks, as well as managing collections and tags. The server emphasizes natural language interaction and seamless integration with Raindrop.io, making it a valuable tool for personal knowledge management and productivity. The available tools cover a wide range of operations, including collection management, bookmark manipulation, and tagging, all of which are essential for organizing and retrieving bookmarks efficiently.",
    "reasoning": "The primary functionality of this server revolves around managing bookmarks and collections, which aligns closely with the \"File Management\" category. However, the server also supports operations that enhance personal knowledge management, making \"Memory Management\" a relevant secondary category. The \"Daily Productivity\" label is also appropriate due to its role in improving workflow efficiency. No custom label is necessary as the predefined labels adequately capture the server's functionality.",
    "primary_label": "File Management",
    "secondary_labels": [
      "Memory Management",
      "Daily Productivity"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 391,
    "server_name": "Raindrop.io Bookmark Manager",
    "rank_by_usage": 392,
    "usage_count": "62",
    "original_file": "../crawler/smithery/@ddltn_raindrop-mcp-python.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ddltn/raindrop-mcp-python/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 391,
      "name": "Raindrop.io Bookmark Manager",
      "author": "@ddltn/raindrop-mcp-python",
      "overview": "Manage and interact with your Raindrop.io bookmarks and collections using natural language commands. Create, update, delete, and organize your bookmarks and collections seamlessly from Claude Desktop. Enhance your personal knowledge management by integrating Raindrop.io with AI-powered workflows.",
      "repository_url": "https://github.com/ddltn/raindrop-mcp-python",
      "homepage": "https://smithery.ai/server/@ddltn/raindrop-mcp-python",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "62",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ddltn_raindrop-mcp-python.json",
      "tools_count": 12,
      "tools": [
        {
          "name": "get_root_collections",
          "description": "Deploy Server Raindrop.io Bookmark Manager Claim Server @ddltn/raindrop-mcp-python Try in Playground get_root_collections",
          "parameters": []
        },
        {
          "name": "get_child_collections",
          "description": "Get all child collections from Raindrop.io",
          "parameters": []
        },
        {
          "name": "get_collection_by_id",
          "description": "Get a specific collection from Raindrop.io by ID Args: collection_id: ID of the collection to fetch",
          "parameters": []
        },
        {
          "name": "create_collection",
          "description": "Create a new collection in Raindrop.io Args: title: Name of the collection view: View type (list, grid, masonry, simple) public: Whether the collection is public parent_id: ID of parent collection (omit for root collection)",
          "parameters": []
        },
        {
          "name": "update_collection",
          "description": "Update an existing collection in Raindrop.io Args: collection_id: ID of the collection to update title: New name for the collection view: View type (list, grid, masonry, simple) public: Whether the collection is public parent_id: ID of parent collection (omit for root collection) expanded: Whether the collection is expanded",
          "parameters": []
        },
        {
          "name": "delete_collection",
          "description": "Delete a collection from Raindrop.io. The raindrops will be moved to Trash. Args: collection_id: ID of the collection to delete",
          "parameters": []
        },
        {
          "name": "empty_trash",
          "description": "Empty the trash in Raindrop.io, permanently deleting all raindrops in it.",
          "parameters": []
        },
        {
          "name": "get_raindrop",
          "description": "Get a single raindrop from Raindrop.io by ID Args: raindrop_id: ID of the raindrop to fetch",
          "parameters": []
        },
        {
          "name": "get_raindrops",
          "description": "Get multiple raindrops from a Raindrop.io collection Args: collection_id: ID of the collection to fetch raindrops from. Use 0 for all raindrops, -1 for unsorted, -99 for trash. search: Optional search query sort: Sorting order. Options: -created (default), created, score, -sort, title, -title, domain, -domain page: Page number (starting from 0) perpage: Items per page (max 50) nested: Whether to include raindrops from nested collections",
          "parameters": []
        },
        {
          "name": "get_tags",
          "description": "Get tags from Raindrop.io Args: collection_id: Optional ID of the collection to fetch tags from. When not specified, all tags from all collections will be retrieved.",
          "parameters": []
        },
        {
          "name": "update_raindrop",
          "description": "Update an existing raindrop (bookmark) in Raindrop.io Args: raindrop_id: ID of the raindrop to update title: New title for the raindrop excerpt: New description/excerpt link: New URL important: Set to True to mark as favorite tags: List of tags to assign collection_id: ID of collection to move the raindrop to cover: URL for the cover image type: Type of the raindrop order: Sort order (ascending) - set to 0 to move to first place pleaseParse: Set to True to reparse metadata (cover, type) in the background",
          "parameters": []
        },
        {
          "name": "update_many_raindrops",
          "description": "Update multiple raindrops at once within a collection Args: collection_id: ID of the collection containing raindrops to update ids: Optional list of specific raindrop IDs to update important: Set to True to mark as favorite, False to unmark tags: List of tags to add (or empty list to remove all tags) cover: URL for cover image (use '<screenshot>' to set screenshots for all) target_collection_id: ID of collection to move raindrops to nested: Include raindrops from nested collections search: Optional search query to filter which raindrops to update",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@ddltn/raindrop-mcp-python/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "raindropToken",
          "required": true,
          "description": "Raindrop.io API token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@ddltn/raindrop-mcp-python/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0392.@ddltn_raindrop-mcp-python_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 386
  }
}