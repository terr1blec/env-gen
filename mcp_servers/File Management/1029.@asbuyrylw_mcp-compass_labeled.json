{
  "labels": {
    "analysis": "The MCP Server \"Compass\" is designed to help users discover and explore Model Context Protocol (MCP) servers through natural language queries. Its primary function is to provide real-time recommendations and rich metadata about available MCP services, enabling users to easily find and integrate the right tools to enhance their AI assistants. The available tool, \"recommend-mcp-servers,\" allows users to search for and discover external MCP tools based on descriptions, returning relevant information such as server IDs, descriptions, GitHub URLs, and similarity scores.",
    "reasoning": "The primary label \"Directory & Discovery\" was chosen because the server's core functionality revolves around helping users find and access MCP services. This aligns closely with the purpose of a directory or discovery tool. The secondary label \"API Integration\" was selected because the server likely relies on APIs to query and retrieve information about MCP services. No custom label is needed as the predefined labels adequately cover the functionality.",
    "primary_label": "File Management",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1028,
    "server_name": "Compass",
    "rank_by_usage": 1029,
    "usage_count": "2",
    "original_file": "../crawler/smithery/@asbuyrylw_mcp-compass.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@asbuyrylw/mcp-compass/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "recommend-mcp-servers",
          "description": "\n          Use this tool when there is a need to findn external MCP tools.\n          It explores and recommends existing MCP servers from the \n          internet, based on the description of the MCP Server \n          needed. It returns a list of MCP servers with their IDs, \n          descriptions, GitHub URLs, and similarity scores.\n          ",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "\n                Description for the MCP Server needed. \n                It should be specific and actionable, e.g.:\n                GOOD:\n                - 'MCP Server for AWS Lambda Python3.9 deployment'\n                - 'MCP Server for United Airlines booking API'\n                - 'MCP Server for Stripe refund webhook handling'\n\n                BAD:\n                - 'MCP Server for cloud' (too vague)\n                - 'MCP Server for booking' (which booking system?)\n                - 'MCP Server for payment' (which payment provider?)\n\n                Query should explicitly specify:\n                1. Target platform/vendor (e.g. AWS, Stripe, MongoDB)\n                2. Exact operation/service (e.g. Lambda deployment, webhook handling)\n                3. Additional context if applicable (e.g. Python, refund events)\n                "
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "recommend-mcp-servers"
      ]
    },
    "server_info_crawled": {
      "id": 1028,
      "name": "Compass",
      "author": "@asbuyrylw/mcp-compass",
      "overview": "Discover and explore Model Context Protocol servers effortlessly using natural language queries. Get real-time recommendations and rich metadata to find the right MCP services for your AI assistant. Integrate easily to enhance your AI's capabilities with smart MCP service discovery.",
      "repository_url": "https://github.com/asbuyrylw/mcp-compass",
      "homepage": "https://smithery.ai/server/@asbuyrylw/mcp-compass",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "2",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@asbuyrylw_mcp-compass.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "recommend-mcp-servers",
          "description": "\n          Use this tool when there is a need to findn external MCP tools.\n          It explores and recommends existing MCP servers from the \n          internet, based on the description of the MCP Server \n          needed. It returns a list of MCP servers with their IDs, \n          descriptions, GitHub URLs, and similarity scores.\n          ",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "\n                Description for the MCP Server needed. \n                It should be specific and actionable, e.g.:\n                GOOD:\n                - 'MCP Server for AWS Lambda Python3.9 deployment'\n                - 'MCP Server for United Airlines booking API'\n                - 'MCP Server for Stripe refund webhook handling'\n\n                BAD:\n                - 'MCP Server for cloud' (too vague)\n                - 'MCP Server for booking' (which booking system?)\n                - 'MCP Server for payment' (which payment provider?)\n\n                Query should explicitly specify:\n                1. Target platform/vendor (e.g. AWS, Stripe, MongoDB)\n                2. Exact operation/service (e.g. Lambda deployment, webhook handling)\n                3. Additional context if applicable (e.g. Python, refund events)\n                "
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@asbuyrylw/mcp-compass/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@asbuyrylw/mcp-compass/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1029.@asbuyrylw_mcp-compass_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1007
  }
}