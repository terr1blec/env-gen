{
  "labels": {
    "analysis": "The MCP Server is designed to provide file system management capabilities for AI agents. It enables interaction with local file systems through a variety of operations such as reading, writing, updating, listing, deleting, moving, and copying files and directories. The server is platform-agnostic and offers both simple and complex file operations, making it suitable for automation, data management, and workflow integration in AI-driven applications.",
    "reasoning": "The primary functionality revolves around file and directory operations, which aligns directly with the \"File Management\" category. While it could also support broader \"Data Analysis & Processing\" tasks, its core purpose is file operations. No custom label is needed as the predefined categories adequately cover the server's functionalities.",
    "primary_label": "File Management",
    "secondary_labels": [
      "Data Analysis & Processing"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 7,
    "server_name": "Filesystem MCP Server",
    "rank_by_usage": 8,
    "usage_count": "14,715",
    "original_file": "../crawler/smithery/@cyanheads_filesystem-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@cyanheads/filesystem-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "Connection timeout (20 seconds)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 7,
      "name": "Filesystem MCP Server",
      "author": "@cyanheads/filesystem-mcp-server",
      "overview": "Empower your AI agents with robust, platform-agnostic file system capabilities. Interact securely with the local filesystem to read, write, and manage files and directories effortlessly. Enhance your AI workflows with advanced file operations and targeted updates.",
      "repository_url": "https://github.com/cyanheads/filesystem-mcp-server",
      "homepage": "https://smithery.ai/server/@cyanheads/filesystem-mcp-server",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "14,715",
      "success_rate": "99.51%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@cyanheads_filesystem-mcp-server.json",
      "tools_count": 10,
      "tools": [
        {
          "name": "read_file",
          "description": "Deploy Server Filesystem MCP Server Claim Server @cyanheads/filesystem-mcp-server Try in Playground",
          "parameters": [
            {
              "name": "read_file",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "set_filesystem_default",
          "description": "Sets a default absolute path for the current session. Relative paths used in other filesystem tools (like readFile) will be resolved against this default. The default is cleared on server restart.",
          "parameters": [
            {
              "name": "path",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "write_file",
          "description": "Writes content to a specified file. Creates the file (and necessary directories) if it doesn't exist, or overwrites it if it does. Accepts relative or absolute paths (resolved like readFile).",
          "parameters": [
            {
              "name": "path",
              "required": true,
              "type": "string"
            },
            {
              "name": "content",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_file",
          "description": "Performs targeted search-and-replace operations within an existing file using an array of {search, replace} blocks. Preferred for smaller, localized changes. For large-scale updates or overwrites, consider using `write_file`. Accepts relative or absolute paths. File must exist. Supports optional `useRegex` (boolean, default false) and `replaceAll` (boolean, default false).",
          "parameters": [
            {
              "name": "update_file",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_files",
          "description": "Lists files and directories within the specified directory. Optionally lists recursively and returns a tree-like structure. Includes an optional `maxEntries` parameter (default 50) to limit the number of items returned.",
          "parameters": [
            {
              "name": "list_files",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_file",
          "description": "Removes a specific file. Accepts relative or absolute paths.",
          "parameters": [
            {
              "name": "delete_file",
              "required": false,
              "type": "string"
            },
            {
              "name": "path",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_directory",
          "description": "Removes a directory. Optionally removes recursively. Accepts relative or absolute paths.",
          "parameters": [
            {
              "name": "delete_directory",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_directory",
          "description": "Creates a directory. Optionally creates parent directories. Accepts relative or absolute paths.",
          "parameters": [
            {
              "name": "create_directory",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "move_path",
          "description": "Moves or renames a file or directory. Accepts relative or absolute paths for source and destination.",
          "parameters": [
            {
              "name": "move_path",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "copy_path",
          "description": "Copies a file or directory to a new location. Accepts relative or absolute paths. Defaults to recursive copy for directories.",
          "parameters": [
            {
              "name": "copy_path",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@cyanheads/filesystem-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@cyanheads/filesystem-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0008.@cyanheads_filesystem-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 8
  }
}