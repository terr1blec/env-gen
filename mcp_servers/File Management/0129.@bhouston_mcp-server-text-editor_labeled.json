{
  "labels": {
    "analysis": "The MCP Server focuses on text file management through a standardized API, allowing users to view, edit, and create text files with persistent state. It essentially replicates the functionality of Claude's built-in text editor, making it ideal for applications requiring text-based file operations, directory support, and seamless integration into software workflows.",
    "reasoning": "The **File Management** label is chosen as the primary label because the server's core functionality revolves around creating, editing, and managing text filesâ€”key operations in file management. The **Content Creation** label is selected as a secondary category due to its utility in writing, editing, and media generation tasks. While not explicitly a text editor tool, its similarity to a text editor justifies this secondary association.",
    "primary_label": "File Management",
    "secondary_labels": [
      "Content Creation"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 128,
    "server_name": "Text Editor MCP Server",
    "rank_by_usage": 129,
    "usage_count": "462",
    "original_file": "../crawler/smithery/@bhouston_mcp-server-text-editor.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@bhouston/mcp-server-text-editor/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "text_editor",
          "description": "View, create, and edit files with persistent state across command calls.  This tool is identical with Claude's built in text editor tool called text_editor_20241022",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "enum": [
                  "view",
                  "create",
                  "str_replace",
                  "insert",
                  "undo_edit"
                ],
                "description": "The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`."
              },
              "path": {
                "type": "string",
                "description": "Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`."
              },
              "file_text": {
                "type": "string",
                "description": "Required parameter of `create` command, with the content of the file to be created."
              },
              "insert_line": {
                "type": "number",
                "description": "Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`."
              },
              "new_str": {
                "type": "string",
                "description": "Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert."
              },
              "old_str": {
                "type": "string",
                "description": "Required parameter of `str_replace` command containing the string in `path` to replace."
              },
              "view_range": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file."
              },
              "description": {
                "type": "string",
                "description": "The reason you are using the text editor (max 80 chars)"
              }
            },
            "required": [
              "command",
              "path",
              "description"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "text_editor"
      ]
    },
    "server_info_crawled": {
      "id": 128,
      "name": "Text Editor MCP Server",
      "author": "@bhouston/mcp-server-text-editor",
      "overview": "Enable seamless text file management through a standardized API. View, edit, and create text files effortlessly, mimicking the functionality of Claude's built-in text editor. Enhance your applications with powerful file operations and directory support.",
      "repository_url": "https://github.com/bhouston/mcp-server-text-editor",
      "homepage": "https://smithery.ai/server/@bhouston/mcp-server-text-editor",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "462",
      "success_rate": "98.01%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@bhouston_mcp-server-text-editor.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "text_editor",
          "description": "View, create, and edit files with persistent state across command calls.  This tool is identical with Claude's built in text editor tool called text_editor_20241022",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "enum": [
                  "view",
                  "create",
                  "str_replace",
                  "insert",
                  "undo_edit"
                ],
                "description": "The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`."
              },
              "path": {
                "type": "string",
                "description": "Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`."
              },
              "file_text": {
                "type": "string",
                "description": "Required parameter of `create` command, with the content of the file to be created."
              },
              "insert_line": {
                "type": "number",
                "description": "Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`."
              },
              "new_str": {
                "type": "string",
                "description": "Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert."
              },
              "old_str": {
                "type": "string",
                "description": "Required parameter of `str_replace` command containing the string in `path` to replace."
              },
              "view_range": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file."
              },
              "description": {
                "type": "string",
                "description": "The reason you are using the text editor (max 80 chars)"
              }
            },
            "required": [
              "command",
              "path",
              "description"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@bhouston/mcp-server-text-editor/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@bhouston/mcp-server-text-editor/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0129.@bhouston_mcp-server-text-editor_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 126
  }
}