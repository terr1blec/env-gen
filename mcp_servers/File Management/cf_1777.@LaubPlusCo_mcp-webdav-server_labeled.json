{
  "labels": {
    "analysis": "The MCP Server provides tools for interacting with WebDAV file systems through natural language commands. It enables users to perform CRUD operations (Create, Read, Update, Delete) on files and directories hosted on remote WebDAV servers. The tools cover a wide range of file management tasks, including file and directory creation, deletion, copying, moving, listing, and content retrieval. The server integrates with MCP clients via stdio or HTTP/SSE transport, making it accessible for remote file management tasks.",
    "reasoning": "The primary function of this server revolves around file and directory operations on remote WebDAV servers, making \"File Management\" the most appropriate primary label. Since WebDAV servers are often used for cloud-based file storage and access, \"Cloud Services\" is a relevant secondary label. The server also facilitates network-based file operations, which could be seen as part of \"Network Operations,\" though this is not a predefined category, so it is omitted.",
    "primary_label": "File Management",
    "secondary_labels": [
      "Cloud Services"
    ],
    "custom_label": "WebDAV File Operations",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1776,
    "server_name": "WebDAV Server Integration",
    "rank_by_usage": 1777,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@LaubPlusCo_mcp-webdav-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@LaubPlusCo/mcp-webdav-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1776,
      "name": "WebDAV Server Integration",
      "author": "@LaubPlusCo/mcp-webdav-server",
      "overview": "Enable natural language interaction with WebDAV file systems by performing CRUD operations through a secure MCP server. Connect to any WebDAV endpoint with optional authentication and manage files and directories seamlessly. Integrate easily with Claude Desktop or other MCP clients via stdio or HTTP/SSE transport.",
      "repository_url": "https://github.com/LaubPlusCo/mcp-webdav-server",
      "homepage": "https://smithery.ai/server/@LaubPlusCo/mcp-webdav-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@LaubPlusCo_mcp-webdav-server.json",
      "tools_count": 8,
      "tools": [
        {
          "name": "webdav_create_remote_file",
          "description": "Deploy Server WebDAV Server Integration Claim Server @LaubPlusCo/mcp-webdav-server Try in Playground webdav_create_remote_file",
          "parameters": [
            {
              "name": "webdav_create_remote_file",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "webdav_get_remote_file",
          "description": "Retrieve content from a file stored on a remote WebDAV server",
          "parameters": [
            {
              "name": "webdav_get_remote_file",
              "required": false,
              "type": "string"
            },
            {
              "name": "path",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "webdav_update_remote_file",
          "description": "Update an existing file on a remote WebDAV server with new content",
          "parameters": [
            {
              "name": "webdav_update_remote_file",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "webdav_delete_remote_item",
          "description": "Delete a file or directory from a remote WebDAV server",
          "parameters": [
            {
              "name": "webdav_delete_remote_item",
              "required": false,
              "type": "string"
            },
            {
              "name": "path",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "webdav_create_remote_directory",
          "description": "Create a new directory on a remote WebDAV server",
          "parameters": [
            {
              "name": "webdav_create_remote_directory",
              "required": false,
              "type": "string"
            },
            {
              "name": "path",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "webdav_move_remote_item",
          "description": "Move or rename a file or directory on a remote WebDAV server",
          "parameters": [
            {
              "name": "webdav_move_remote_item",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "webdav_copy_remote_item",
          "description": "Copy a file or directory to a new location on a remote WebDAV server",
          "parameters": [
            {
              "name": "webdav_copy_remote_item",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "webdav_list_remote_directory",
          "description": "List files and directories at the specified path on a remote WebDAV server",
          "parameters": [
            {
              "name": "webdav_list_remote_directory",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@LaubPlusCo/mcp-webdav-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@LaubPlusCo/mcp-webdav-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1777.@LaubPlusCo_mcp-webdav-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1588
  }
}