{
  "labels": {
    "analysis": "The MCP Server is designed for generating multimedia content, including text-to-audio, voice cloning, and video/image generation. Its core functionality revolves around enabling powerful interactions with Text to Speech (TTS) and multimedia generation APIs, which allows for the creation of speech, voice cloning, and various forms of visual media (images/videos) from text or audio inputs. The server solves problems related to the automated and seamless generation of high-quality media content for applications, offering capabilities such as custom voice synthesis, dynamic video generation with camera movement controls, and image creation from prompts.",
    "reasoning": "The primary functionality of generating multimedia content aligns with the \"Content Creation\" category, as it enables the production of speech, images, and videosâ€”core elements of content generation. Secondary relevance is given to \"AI/ML Tools\" due to the use of AI-driven models for TTS, voice cloning, and media generation. No custom label is needed as the predefined categories adequately cover the server's purpose.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1600,
    "server_name": "MiniMax MCP Server",
    "rank_by_usage": 1601,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@MiniMax-AI_MiniMax-MCP.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@MiniMax-AI/MiniMax-MCP/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1600,
      "name": "MiniMax MCP Server",
      "author": "@MiniMax-AI/MiniMax-MCP",
      "overview": "Enable powerful interactions with Text to Speech and video/image generation APIs. Generate speech, clone voices, and create multimedia content seamlessly with our server. Enhance your applications with advanced media capabilities effortlessly.",
      "repository_url": "https://github.com/MiniMax-AI/MiniMax-MCP",
      "homepage": "https://smithery.ai/server/@MiniMax-AI/MiniMax-MCP",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@MiniMax-AI_MiniMax-MCP.json",
      "tools_count": 7,
      "tools": [
        {
          "name": "text_to_audio",
          "description": "Deploy Server MiniMax MCP Server Claim Server @MiniMax-AI/MiniMax-MCP Try in Playground text_to_audio",
          "parameters": []
        },
        {
          "name": "list_voices",
          "description": "List all voices available. Args: voice_type (str, optional): The type of voices to list. Values range [\"all\", \"system\", \"voice_cloning\"], with \"all\" being the default. Returns: Text content with the list of voices.",
          "parameters": []
        },
        {
          "name": "voice_clone",
          "description": "Clone a voice using provided audio files. The new voice will be charged upon first use. COST WARNING: This tool makes an API call to Minimax which may incur costs. Only use when explicitly requested by the user. Args: voice_id (str): The id of the voice to use. file (str): The path to the audio file to clone or a URL to the audio file. text (str, optional): The text to use for the demo audio. is_url (bool, optional): Whether the file is a URL. Defaults to False. output_directory (str): The directory to save the demo audio to. Returns: Text content with the voice id of the cloned voice.",
          "parameters": []
        },
        {
          "name": "play_audio",
          "description": "Play an audio file. Supports WAV and MP3 formats. Not supports video. Args: input_file_path (str): The path to the audio file to play. is_url (bool, optional): Whether the audio file is a URL. Returns: Text content with the path to the audio file.",
          "parameters": []
        },
        {
          "name": "generate_video",
          "description": "Generate a video from a prompt. COST WARNING: This tool makes an API call to Minimax which may incur costs. Only use when explicitly requested by the user. Args: model (str, optional): The model to use. Values range [\"T2V-01\", \"T2V-01-Director\", \"I2V-01\", \"I2V-01-Director\", \"I2V-01-live\"]. \"Director\" supports inserting instructions for camera movement control. \"I2V\" for image to video. \"T2V\" for text to video. prompt (str): The prompt to generate the video from. When use Director model, the prompt supports 15 Camera Movement Instructions (Enumerated Values) -Truck: [Truck left], [Truck right] -Pan: [Pan left], [Pan right] -Push: [Push in], [Pull out] -Pedestal: [Pedestal up], [Pedestal down] -Tilt: [Tilt up], [Tilt down] -Zoom: [Zoom in], [Zoom out] -Shake: [Shake] -Follow: [Tracking shot] -Static: [Static shot] first_frame_image (str): The first frame image. The model must be \"I2V\" Series. output_directory (str): The directory to save the video to. async_mode (bool, optional): Whether to use async mode. Defaults to False. If True, the video generation task will be submitted asynchronously and the response will return a task_id. Should use `query_video_generation` tool to check the status of the task and get the result. Returns: Text content with the path to the output video file.",
          "parameters": []
        },
        {
          "name": "query_video_generation",
          "description": "Query the status of a video generation task. Args: task_id (str): The task ID to query. Should be the task_id returned by `generate_video` tool if `async_mode` is True. output_directory (str): The directory to save the video to. Returns: Text content with the status of the task.",
          "parameters": []
        },
        {
          "name": "text_to_image",
          "description": "Generate a image from a prompt. COST WARNING: This tool makes an API call to Minimax which may incur costs. Only use when explicitly requested by the user. Args: model (str, optional): The model to use. Values range [\"image-01\"], with \"image-01\" being the default. prompt (str): The prompt to generate the image from. aspect_ratio (str, optional): The aspect ratio of the image. Values range [\"1:1\", \"16:9\",\"4:3\", \"3:2\", \"2:3\", \"3:4\", \"9:16\", \"21:9\"], with \"1:1\" being the default. n (int, optional): The number of images to generate. Values range [1, 9], with 1 being the default. prompt_optimizer (bool, optional): Whether to optimize the prompt. Values range [True, False], with True being the default. output_directory (str): The directory to save the image to. Returns: Text content with the path to the output image file.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@MiniMax-AI/MiniMax-MCP/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "minimaxApiKey",
          "required": true,
          "description": "Your MiniMax API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@MiniMax-AI/MiniMax-MCP/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1601.@MiniMax-AI_MiniMax-MCP_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1458
  }
}