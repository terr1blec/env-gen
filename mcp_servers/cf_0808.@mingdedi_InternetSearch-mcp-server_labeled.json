{
  "labels": {
    "analysis": "The MCP Server described specializes in providing internet search capabilities through the Bocha AI search API. Its primary functionality involves facilitating seamless and powerful web searches, making it suitable for applications that require real-time search integration. The available tool, \"InternetSearch,\" suggests this server's core purpose is to enable users to perform internet searches programmatically or through a user-friendly interface. The simplicity of setup and configuration also indicates that it is designed for ease of use, likely targeting developers or applications that need to embed search functionality.",
    "reasoning": "The primary label, \"Web Search & Research,\" was chosen because internet search is the core functionality of this server. The secondary label, \"API Integration,\" was selected because the server integrates with the Bocha AI search API, making it a tool for developers who want to embed search capabilities into their applications. No custom label is needed as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 807,
    "server_name": "Internet Search Server",
    "rank_by_usage": 808,
    "usage_count": "7",
    "original_file": "../crawler/smithery/@mingdedi_InternetSearch-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mingdedi/InternetSearch-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 807,
      "name": "Internet Search Server",
      "author": "@mingdedi/InternetSearch-mcp-server",
      "overview": "Enable seamless internet searches through a powerful MCP server. Leverage the Bocha AI search API to enhance your applications with real-time search capabilities. Simplify your integration process with easy setup and configuration.",
      "repository_url": "https://github.com/mingdedi/InternetSearch-mcp-server",
      "homepage": "https://smithery.ai/server/@mingdedi/InternetSearch-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "7",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mingdedi_InternetSearch-mcp-server.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "InternetSearch",
          "description": "Deploy Server Internet Search Server Claim Server @mingdedi/InternetSearch-mcp-server Try in Playground InternetSearch",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "txt_count",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mingdedi/InternetSearch-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "bochaaaiApiKey",
          "required": true,
          "description": "API key for Bocha AI search service"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mingdedi/InternetSearch-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0808.@mingdedi_InternetSearch-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 789
  }
}