{
  "labels": {
    "analysis": "The MCP ClickUp Task Integration Server primarily enables direct interaction with ClickUp's task management system through natural language commands. It provides comprehensive tools for creating, retrieving, updating, moving, and managing tasks, comments, time entries, and workspace hierarchy within ClickUp. The server focuses on productivity enhancement by automating ClickUp workflows, managing task organization, tracking time, and handling documents. Its core functionality revolves around task lifecycle management within the ClickUp platform, enabling seamless integration with AI applications.",
    "reasoning": "The primary label is chosen because the server's main functionality is directly tied to managing tasks within ClickUp, which is a core productivity tool. Secondary labels are added based on additional capabilities like time tracking (Daily Productivity) and workspace organization (File Management). The custom label emphasizes the server's specialized focus on ClickUp task management.",
    "primary_label": "Daily Productivity",
    "secondary_labels": [
      "File Management",
      "Operating System"
    ],
    "custom_label": "ClickUp Task Automation",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 456,
    "server_name": "ClickUp Task Integration Server",
    "rank_by_usage": 457,
    "usage_count": "41",
    "original_file": "../crawler/smithery/@aukik_clickup-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@aukik/clickup-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 456,
      "name": "ClickUp Task Integration Server",
      "author": "@aukik/clickup-mcp-server",
      "overview": "Enable AI applications to manage and interact with ClickUp tasks, spaces, lists, and folders using natural language commands. Streamline workspace organization, task management, time tracking, and document handling through a standardized protocol. Enhance productivity by automating ClickUp workflows seamlessly within AI agents.",
      "repository_url": "https://github.com/aukik/clickup-mcp-server",
      "homepage": "https://smithery.ai/server/@aukik/clickup-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "41",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@aukik_clickup-mcp-server.json",
      "tools_count": 33,
      "tools": [
        {
          "name": "get_workspace_hierarchy",
          "description": "Deploy Server ClickUp Task Integration Server @aukik/clickup-mcp-server Try in Playground get_workspace_hierarchy",
          "parameters": [
            {
              "name": "get_workspace_hierarchy",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_task",
          "description": "Creates a single task in a ClickUp list. Use listId (preferred) or listName. Required: name + list info. For multiple tasks use create_bulk_tasks. Can create subtasks via parent param. Supports custom fields as array of {id, value}.",
          "parameters": [
            {
              "name": "create_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_task",
          "description": "Gets task details by taskId (works with regular/custom IDs) or taskName. For taskName search, provide listName for faster lookup. Set subtasks=true to include all subtask details.",
          "parameters": [
            {
              "name": "subtasks",
              "required": false,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            },
            {
              "name": "taskName",
              "required": false,
              "type": "string"
            },
            {
              "name": "customTaskId",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_task",
          "description": "Updates task properties. Use taskId (preferred) or taskName + optional listName. At least one update field required. Custom fields supported as array of {id, value}. WARNING: Using taskName without listName may match multiple tasks.",
          "parameters": [
            {
              "name": "update_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "move_task",
          "description": "Moves task to different list. Use taskId + (listId/listName) preferred, or taskName + sourceListName + (listId/listName). WARNING: Task statuses may reset if destination list has different status options.",
          "parameters": [
            {
              "name": "move_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "duplicate_task",
          "description": "Creates copy of task in same/different list. Use taskId + optional (listId/listName), or taskName + sourceListName + optional (listId/listName). Preserves original properties. Default: same list as original.",
          "parameters": [
            {
              "name": "duplicate_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_task",
          "description": "PERMANENTLY deletes task. Use taskId (preferred/safest) or taskName + optional listName. WARNING: Cannot be undone. Using taskName without listName may match multiple tasks.",
          "parameters": [
            {
              "name": "delete_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_task_comments",
          "description": "Gets task comments. Use taskId (preferred) or taskName + optional listName. Use start/startId params for pagination. Task names may not be unique across lists.",
          "parameters": [
            {
              "name": "get_task_comments",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_task_comment",
          "description": "Creates task comment. Use taskId (preferred) or taskName + listName. Required: commentText. Optional: notifyAll to notify assignees, assignee to assign comment.",
          "parameters": [
            {
              "name": "create_task_comment",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "attach_task_file",
          "description": "Attaches file to task. Use taskId (preferred) or taskName + optional listName. File sources: 1) base64 + filename (â‰¤10MB), 2) URL (http/https), 3) local path (absolute), 4) chunked for large files. WARNING: taskName without listName may match multiple tasks.",
          "parameters": [
            {
              "name": "attach_task_file",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_bulk_tasks",
          "description": "Creates multiple tasks in one list. Use listId (preferred) or listName + array of tasks (each needs name). Configure batch size/concurrency via options. Tasks can have custom fields as {id, value} array.",
          "parameters": [
            {
              "name": "create_bulk_tasks",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_bulk_tasks",
          "description": "Updates multiple tasks efficiently. For each task: use taskId (preferred) or taskName + listName. At least one update field per task. Configure batch size/concurrency via options. WARNING: taskName without listName will fail.",
          "parameters": [
            {
              "name": "update_bulk_tasks",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "move_bulk_tasks",
          "description": "Moves multiple tasks to one list. For each task: use taskId (preferred) or taskName + listName. Target list: use targetListId/Name. Configure batch size/concurrency via options. WARNING: Task statuses may reset, taskName needs listName.",
          "parameters": [
            {
              "name": "move_bulk_tasks",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_bulk_tasks",
          "description": "PERMANENTLY deletes multiple tasks. For each task: use taskId (preferred/safest) or taskName + listName. Configure batch size/concurrency via options. WARNING: Cannot be undone, taskName without listName is dangerous.",
          "parameters": [
            {
              "name": "delete_bulk_tasks",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_workspace_tasks",
          "description": "Purpose: Retrieve tasks from across the entire workspace with powerful filtering options, including tag-based filtering. Valid Usage: 1. Apply any combination of filters (tags, lists, folders, spaces, statuses, etc.) 2. Use pagination to manage large result sets Requirements: - At least one filter parameter is REQUIRED (tags, list_ids, folder_ids, space_ids, statuses, assignees, or date filters) - Pagination parameters (page, order_by, reverse) alone are not considered filters Notes: - Provides workspace-wide task access (unlike get_tasks which only searches in one list) - Returns complete task details including descriptions, assignees, custom fields, and all metadata - Tag filtering is especially useful for cross-list organization (e.g., \"project-x\", \"blocker\", \"needs-review\") - Combine multiple filters to narrow down your search scope - Use pagination for large result sets - Use the detail_level parameter to control the amount of data returned: - \"summary\": Returns lightweight task data (name, status, list, tags) - \"detailed\": Returns complete task data with all fields (DEFAULT if not specified) - Responses exceeding 50,000 tokens automatically switch to summary format to avoid hitting LLM token limits",
          "parameters": [
            {
              "name": "Valid",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_task_time_entries",
          "description": "Gets all time entries for a task with filtering options. Use taskId (preferred) or taskName + optional listName. Returns all tracked time with user info, descriptions, tags, start/end times, and durations.",
          "parameters": [
            {
              "name": "get_task_time_entries",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "start_time_tracking",
          "description": "Starts time tracking on a task. Use taskId (preferred) or taskName + optional listName. Optional fields: description, billable status, and tags. Only one timer can be running at a time.",
          "parameters": [
            {
              "name": "start_time_tracking",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "stop_time_tracking",
          "description": "Stops the currently running time tracker. Optional fields: description and tags. Returns the completed time entry details.",
          "parameters": [
            {
              "name": "stop_time_tracking",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "add_time_entry",
          "description": "Adds a manual time entry to a task. Use taskId (preferred) or taskName + optional listName. Required: start time, duration. Optional: description, billable, tags.",
          "parameters": [
            {
              "name": "add_time_entry",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_time_entry",
          "description": "Deletes a time entry. Required: time entry ID.",
          "parameters": [
            {
              "name": "delete_time_entry",
              "required": false,
              "type": "string"
            },
            {
              "name": "timeEntryId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_current_time_entry",
          "description": "Gets the currently running time entry, if any. No parameters needed.",
          "parameters": [
            {
              "name": "get_current_time_entry",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_list",
          "description": "Creates a list in a ClickUp space. Use spaceId (preferred) or spaceName + list name. Name is required. For lists in folders, use create_list_in_folder. Optional: content, dueDate, priority, assignee, status.",
          "parameters": [
            {
              "name": "create_list",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_list_in_folder",
          "description": "Creates a list in a ClickUp folder. Use folderId (preferred) or folderName + space info + list name. Name is required. When using folderName, spaceId/spaceName required as folder names may not be unique. Optional: content, status.",
          "parameters": [
            {
              "name": "create_list_in_folder",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_list",
          "description": "Gets details of a ClickUp list. Use listId (preferred) or listName. Returns list details including name, content, and space info. ListId more reliable as names may not be unique.",
          "parameters": [
            {
              "name": "get_list",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_list",
          "description": "Updates a ClickUp list. Use listId (preferred) or listName + at least one update field (name/content/status). ListId more reliable as names may not be unique. Only specified fields updated.",
          "parameters": [
            {
              "name": "update_list",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_list",
          "description": "PERMANENTLY deletes a ClickUp list and all its tasks. Use listId (preferred/safest) or listName. WARNING: Cannot be undone, all tasks will be deleted, listName risky if not unique.",
          "parameters": [
            {
              "name": "delete_list",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_folder",
          "description": "Creates folder in ClickUp space. Use spaceId (preferred) or spaceName + folder name. Optional: override_statuses for folder-specific statuses. Use create_list_in_folder to add lists after creation.",
          "parameters": [
            {
              "name": "create_folder",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_folder",
          "description": "Gets folder details. Use folderId (preferred) or folderName + (spaceId/spaceName). Helps understand folder structure before creating/updating lists.",
          "parameters": [
            {
              "name": "get_folder",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_folder",
          "description": "Updates folder properties. Use folderId (preferred) or folderName + (spaceId/spaceName). At least one update field (name/override_statuses) required. Changes apply to all lists in folder.",
          "parameters": [
            {
              "name": "update_folder",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_folder",
          "description": "PERMANENTLY deletes folder and all contents. Use folderId (preferred/safest) or folderName + (spaceId/spaceName). WARNING: Cannot be undone, all lists/tasks deleted, folderName risky if not unique.",
          "parameters": [
            {
              "name": "delete_folder",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_space_tags",
          "description": "Gets all tags in a ClickUp space. Use spaceId (preferred) or spaceName. Tags are defined at space level - check available tags before adding to tasks.",
          "parameters": [
            {
              "name": "get_space_tags",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "add_tag_to_task",
          "description": "Adds existing tag to task. Use taskId (preferred) or taskName + optional listName. Tag must exist in space (use get_space_tags to verify, create_space_tag if needed). WARNING: Will fail if tag doesn't exist.",
          "parameters": [
            {
              "name": "add_tag_to_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "remove_tag_from_task",
          "description": "Removes tag from task. Use taskId (preferred) or taskName + optional listName. Only removes tag-task association, tag remains in space. For multiple tasks, provide listName to disambiguate.",
          "parameters": [
            {
              "name": "remove_tag_from_task",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@aukik/clickup-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "clickupApiKey",
          "required": true,
          "description": "Your ClickUp API key."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@aukik/clickup-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0457.@aukik_clickup-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 448
  }
}