{
  "labels": {
    "analysis": "The MCP Server \"JigsawStack vOCR\" focuses on Optical Character Recognition (OCR) technology enhanced with AI models (vLLMs) to extract data from images consistently with high accuracy. It offers a specific tool, VOCR, which enables structured data extraction from images, leveraging advanced AI capabilities for improved performance compared to traditional OCR solutions. The primary use case revolves around extracting and organizing textual data from visual inputs, making it valuable for document processing, data entry automation, and information retrieval tasks.",
    "reasoning": "The primary label \"Data Analysis & Processing\" is chosen because the server's core functionality involves analyzing and processing image data to extract structured information. \"AI/ML Tools\" is a secondary label due to the reliance on fine-tuned AI models for OCR accuracy. These labels accurately reflect the server's role in enhancing data extraction through AI-powered automation.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "AI/ML Tools",
      "Operating System"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 895,
    "server_name": "JigsawStack vOCR",
    "rank_by_usage": 896,
    "usage_count": "4",
    "original_file": "../crawler/smithery/@JigsawStack_vocr.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@JigsawStack/vocr/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 895,
      "name": "JigsawStack vOCR",
      "author": "@JigsawStack/vocr",
      "overview": "OCR + AI = Magic: Extract data from any image in a consistent structure with fine-tuned vLLMs for the highest accuracy. Learn more about AI backed OCR here: https://jigsawstack.com/docs/api-reference/ai/vocr Get your jigsawstack API key here: https://jigsawstack.com/dashboard/",
      "repository_url": "https://github.com/JigsawStack/jigsawstack-mcp-server",
      "homepage": "https://smithery.ai/server/@JigsawStack/vocr",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "4",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@JigsawStack_vocr.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "VOCR",
          "description": "Deploy Server JigsawStack vOCR @JigsawStack/vocr Try in Playground",
          "parameters": [
            {
              "name": "prompts",
              "required": false,
              "type": "string"
            },
            {
              "name": "Add",
              "required": false,
              "type": "string"
            },
            {
              "name": "Item",
              "required": false,
              "type": "string"
            },
            {
              "name": "base64Image",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@JigsawStack/vocr/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "jigsawstackApiKey",
          "required": true,
          "description": ""
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@JigsawStack/vocr/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0896.@JigsawStack_vocr_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 877
  }
}