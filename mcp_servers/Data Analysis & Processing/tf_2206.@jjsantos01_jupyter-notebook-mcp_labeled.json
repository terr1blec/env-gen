{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate interaction with Jupyter Notebook 6.x, enabling AI-assisted workflows for data analysis and visualization. It provides tools for cell manipulation, execution, and output retrieval, allowing real-time communication between a language model (Claude AI) and the notebook environment. The server's core functionality revolves around programmatically controlling notebook operations, making it particularly valuable for automated data analysis workflows and educational purposes.",
    "reasoning": "Given the server's tight integration with Jupyter Notebook and its focus on data analysis/visualization workflows, the primary label \"Data Analysis & Processing\" is most appropriate. Secondary labels include \"Education\" due to its usefulness in learning environments and \"Development Tools\" because it facilitates code execution and manipulation. A custom label is unnecessary as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "Education",
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2205,
    "server_name": "Jupyter Notebook Integration Server",
    "rank_by_usage": 2206,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@jjsantos01_jupyter-notebook-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@jjsantos01/jupyter-notebook-mcp/mcp?config=eyJ3c0hvc3QiOiAibG9jYWxob3N0IiwgIndzUG9ydCI6IDg3NjV9&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "ping",
          "description": "Simple ping command to check server connectivity",
          "input_schema": {
            "properties": {},
            "title": "pingArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "insert_and_execute_cell",
          "description": "Insert a cell at the specified position and execute it, and optionally set slideshow type.\n    If code cell, it will be executed.\n    If markdown cell, it will be rendered.\n    \n    Args:\n        cell_type: The type of cell ('code' or 'markdown')\n        position: The position to insert the cell at\n        content: The content of the cell\n        slideshow_type: Optional slideshow type ('slide', 'subslide', 'fragment', 'skip', 'notes')\n    ",
          "input_schema": {
            "properties": {
              "cell_type": {
                "default": "code",
                "title": "Cell Type",
                "type": "string"
              },
              "position": {
                "default": 1,
                "title": "Position",
                "type": "integer"
              },
              "content": {
                "default": "",
                "title": "Content",
                "type": "string"
              },
              "slideshow_type": {
                "default": null,
                "title": "slideshow_type",
                "type": "string"
              }
            },
            "title": "insert_and_execute_cellArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "save_notebook",
          "description": "Save the current Jupyter notebook",
          "input_schema": {
            "properties": {},
            "title": "save_notebookArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_cells_info",
          "description": "Get information about all cells in the notebook",
          "input_schema": {
            "properties": {},
            "title": "get_cells_infoArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_notebook_info",
          "description": "Get information about the current Jupyter notebook",
          "input_schema": {
            "properties": {},
            "title": "get_notebook_infoArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "run_cell",
          "description": "Run a specific cell by its index\n    \n    Args:\n        index: The index of the cell to run\n    ",
          "input_schema": {
            "properties": {
              "index": {
                "title": "Index",
                "type": "integer"
              }
            },
            "required": [
              "index"
            ],
            "title": "run_cellArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "run_all_cells",
          "description": "Restart and run all cells in the notebook.\n    You need to wait for user approval",
          "input_schema": {
            "properties": {},
            "title": "run_all_cellsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_cell_text_output",
          "description": "Get the text output content of a specific code cell by its index\n    \n    Args:\n        index: The index of the cell to get output from\n        max_length: Maximum length of text output to return (default: 1500 characters)\n    ",
          "input_schema": {
            "properties": {
              "index": {
                "title": "Index",
                "type": "integer"
              },
              "max_length": {
                "default": 1500,
                "title": "Max Length",
                "type": "integer"
              }
            },
            "required": [
              "index"
            ],
            "title": "get_cell_text_outputArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_image_output",
          "description": "Get image outputs from a specific cell by its index\n    \n    Args:\n        index: The index of the cell to get images from\n    \n    Returns:\n        A list of images from the cell output\n    ",
          "input_schema": {
            "properties": {
              "index": {
                "title": "Index",
                "type": "integer"
              }
            },
            "required": [
              "index"
            ],
            "title": "get_image_outputArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "edit_cell_content",
          "description": "Edit the content of a specific cell by its index and optionally execute it\n    \n    Args:\n        index: The index of the cell to edit\n        content: The new content for the cell\n        execute: If True and the cell is code, execute after editing and return output\n    ",
          "input_schema": {
            "properties": {
              "index": {
                "title": "Index",
                "type": "integer"
              },
              "content": {
                "title": "Content",
                "type": "string"
              },
              "execute": {
                "default": true,
                "title": "Execute",
                "type": "boolean"
              }
            },
            "required": [
              "index",
              "content"
            ],
            "title": "edit_cell_contentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "set_slideshow_type",
          "description": "Set the slideshow type for a specific cell by its index\n    \n    Args:\n        index: The index of the cell to modify\n        slideshow_type: The slideshow type to set. Valid values are:\n                        \"slide\" - Start a new slide\n                        \"subslide\" - Start a new subslide\n                        \"fragment\" - Fragment (appear on click)\n                        \"skip\" - Skip cell in slideshow\n                        \"notes\" - Speaker notes\n                        \"-\" or null - Remove slideshow type\n    ",
          "input_schema": {
            "properties": {
              "index": {
                "title": "Index",
                "type": "integer"
              },
              "slideshow_type": {
                "default": "",
                "title": "Slideshow Type",
                "type": "string"
              }
            },
            "required": [
              "index"
            ],
            "title": "set_slideshow_typeArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 11,
      "tool_names": [
        "ping",
        "insert_and_execute_cell",
        "save_notebook",
        "get_cells_info",
        "get_notebook_info",
        "run_cell",
        "run_all_cells",
        "get_cell_text_output",
        "get_image_output",
        "edit_cell_content",
        "set_slideshow_type"
      ]
    },
    "server_info_crawled": {
      "id": 2205,
      "name": "Jupyter Notebook Integration Server",
      "author": "@jjsantos01/jupyter-notebook-mcp",
      "overview": "Enable AI-assisted interaction with Jupyter Notebook 6.x by allowing insertion, execution, and management of notebook cells, as well as retrieval of outputs and notebook information. Facilitate seamless two-way communication between Claude AI and Jupyter Notebook for enhanced data analysis and visualization workflows. Provide tools to control notebook execution and content dynamically through a WebSocket-based MCP server.",
      "repository_url": "https://github.com/jjsantos01/jupyter-notebook-mcp",
      "homepage": "https://smithery.ai/server/@jjsantos01/jupyter-notebook-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@jjsantos01_jupyter-notebook-mcp.json",
      "tools_count": 11,
      "tools": [
        {
          "name": "ping",
          "description": "Simple ping command to check server connectivity",
          "input_schema": {
            "properties": {},
            "title": "pingArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "insert_and_execute_cell",
          "description": "Insert a cell at the specified position and execute it, and optionally set slideshow type.\n    If code cell, it will be executed.\n    If markdown cell, it will be rendered.\n    \n    Args:\n        cell_type: The type of cell ('code' or 'markdown')\n        position: The position to insert the cell at\n        content: The content of the cell\n        slideshow_type: Optional slideshow type ('slide', 'subslide', 'fragment', 'skip', 'notes')\n    ",
          "input_schema": {
            "properties": {
              "cell_type": {
                "default": "code",
                "title": "Cell Type",
                "type": "string"
              },
              "position": {
                "default": 1,
                "title": "Position",
                "type": "integer"
              },
              "content": {
                "default": "",
                "title": "Content",
                "type": "string"
              },
              "slideshow_type": {
                "default": null,
                "title": "slideshow_type",
                "type": "string"
              }
            },
            "title": "insert_and_execute_cellArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "save_notebook",
          "description": "Save the current Jupyter notebook",
          "input_schema": {
            "properties": {},
            "title": "save_notebookArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_cells_info",
          "description": "Get information about all cells in the notebook",
          "input_schema": {
            "properties": {},
            "title": "get_cells_infoArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_notebook_info",
          "description": "Get information about the current Jupyter notebook",
          "input_schema": {
            "properties": {},
            "title": "get_notebook_infoArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "run_cell",
          "description": "Run a specific cell by its index\n    \n    Args:\n        index: The index of the cell to run\n    ",
          "input_schema": {
            "properties": {
              "index": {
                "title": "Index",
                "type": "integer"
              }
            },
            "required": [
              "index"
            ],
            "title": "run_cellArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "run_all_cells",
          "description": "Restart and run all cells in the notebook.\n    You need to wait for user approval",
          "input_schema": {
            "properties": {},
            "title": "run_all_cellsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_cell_text_output",
          "description": "Get the text output content of a specific code cell by its index\n    \n    Args:\n        index: The index of the cell to get output from\n        max_length: Maximum length of text output to return (default: 1500 characters)\n    ",
          "input_schema": {
            "properties": {
              "index": {
                "title": "Index",
                "type": "integer"
              },
              "max_length": {
                "default": 1500,
                "title": "Max Length",
                "type": "integer"
              }
            },
            "required": [
              "index"
            ],
            "title": "get_cell_text_outputArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_image_output",
          "description": "Get image outputs from a specific cell by its index\n    \n    Args:\n        index: The index of the cell to get images from\n    \n    Returns:\n        A list of images from the cell output\n    ",
          "input_schema": {
            "properties": {
              "index": {
                "title": "Index",
                "type": "integer"
              }
            },
            "required": [
              "index"
            ],
            "title": "get_image_outputArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "edit_cell_content",
          "description": "Edit the content of a specific cell by its index and optionally execute it\n    \n    Args:\n        index: The index of the cell to edit\n        content: The new content for the cell\n        execute: If True and the cell is code, execute after editing and return output\n    ",
          "input_schema": {
            "properties": {
              "index": {
                "title": "Index",
                "type": "integer"
              },
              "content": {
                "title": "Content",
                "type": "string"
              },
              "execute": {
                "default": true,
                "title": "Execute",
                "type": "boolean"
              }
            },
            "required": [
              "index",
              "content"
            ],
            "title": "edit_cell_contentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "set_slideshow_type",
          "description": "Set the slideshow type for a specific cell by its index\n    \n    Args:\n        index: The index of the cell to modify\n        slideshow_type: The slideshow type to set. Valid values are:\n                        \"slide\" - Start a new slide\n                        \"subslide\" - Start a new subslide\n                        \"fragment\" - Fragment (appear on click)\n                        \"skip\" - Skip cell in slideshow\n                        \"notes\" - Speaker notes\n                        \"-\" or null - Remove slideshow type\n    ",
          "input_schema": {
            "properties": {
              "index": {
                "title": "Index",
                "type": "integer"
              },
              "slideshow_type": {
                "default": "",
                "title": "Slideshow Type",
                "type": "string"
              }
            },
            "required": [
              "index"
            ],
            "title": "set_slideshow_typeArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"wsHost\": \"localhost\",\n  \"wsPort\": 8765\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@jjsantos01/jupyter-notebook-mcp/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"wsHost\": \"localhost\",\n  \"wsPort\": 8765\n}",
      "python_sdk_url": "https://server.smithery.ai/@jjsantos01/jupyter-notebook-mcp/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "2206.@jjsantos01_jupyter-notebook-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1902
  }
}