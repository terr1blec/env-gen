{
  "labels": {
    "analysis": "The MCP Server specializes in integrating with Mixpanel, a popular analytics platform, allowing users to query and analyze their event data, user profiles, and various reports directly from MCP clients. Its tools enable a wide range of analytics operations, including tracking user journeys, analyzing event frequency, comparing segments, and evaluating retention metrics. The server effectively bridges the gap between Mixpanel's data-rich analytics capabilities and on-demand querying needs in MCP environments.",
    "reasoning": "The primary functionality of this server revolves around analytics and data processing, making \"Data Analysis & Processing\" the most appropriate main label. Additional relevant categories include \"Database Operations\" for querying Mixpanel data (though it's not a traditional database) and \"Custom Analytics\" as a custom label to emphasize its specialized focus on Mixpanel-integrated queries not covered by broader data analysis tools.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "Database Operations"
    ],
    "custom_label": "Custom Analytics",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 62,
    "server_name": "Mixpanel Integration",
    "rank_by_usage": 63,
    "usage_count": "1,341",
    "original_file": "../crawler/smithery/@dragonkhoi_mixpanel-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@dragonkhoi/mixpanel-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 62,
      "name": "Mixpanel Integration",
      "author": "@dragonkhoi/mixpanel-mcp",
      "overview": "Talk to your Mixpanel analytics events data seamlessly! Query retention number, event data, funnels and more from any MCP client. Great for on-demand look ups like: \"What's the weekly retention for users in the Feb 1 cohort?\"\n\nI am adding more coverage of the Mixpanel API over time, let me know which tools you need or just open a PR.\n\nMake sure you go to your Mixpanel Organization Settings and create a service account. Then get your project ID from your project settings.",
      "repository_url": "https://github.com/dragonkhoi/mixpanel-mcp",
      "homepage": "https://smithery.ai/server/@dragonkhoi/mixpanel-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "1,341",
      "success_rate": "99.41%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@dragonkhoi_mixpanel-mcp.json",
      "tools_count": 19,
      "tools": [
        {
          "name": "get_today_top_events",
          "description": "Deploy Server Mixpanel Integration @dragonkhoi/mixpanel-mcp Try in Playground get_today_top_events",
          "parameters": [
            {
              "name": "get_today_top_events",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "profile_event_activity",
          "description": "Get data for a profile's event activity. Useful for understanding individual user journeys, troubleshooting user-specific issues, and analyzing behavior patterns of specific users.",
          "parameters": [
            {
              "name": "profile_event_activity",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_top_events",
          "description": "Get a list of the most common events over the last 31 days. Useful for identifying key user actions, prioritizing feature development, and understanding overall platform usage patterns.",
          "parameters": [
            {
              "name": "type",
              "required": false,
              "type": "string"
            },
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "project_id",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "aggregate_event_counts",
          "description": "Get unique, general, or average data for a set of events over N days, weeks, or months. Useful for trend analysis, comparing event performance over time, and creating time-series visualizations.",
          "parameters": [
            {
              "name": "aggregate_event_counts",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "aggregated_event_property_values",
          "description": "Get unique, general, or average data for a single event and property over days, weeks, or months. Useful for analyzing how specific properties affect event performance, segmenting users, and identifying valuable user attributes.",
          "parameters": [
            {
              "name": "aggregated_event_property_values",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_insights_report",
          "description": "Get data from your Insights reports. Useful for accessing saved analyses, sharing standardized metrics across teams, and retrieving complex pre-configured visualizations.",
          "parameters": [
            {
              "name": "query_insights_report",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_funnel_report",
          "description": "Get data for a funnel based on a funnel_id. Useful for analyzing user conversion paths, identifying drop-off points in user journeys, and optimizing multi-step processes. Funnel IDs should be retrieved using the list_saved_funnels tool.",
          "parameters": [
            {
              "name": "query_funnel_report",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_saved_funnels",
          "description": "length_unit workspace_id list_saved_funnels",
          "parameters": [
            {
              "name": "list_saved_funnels",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_saved_cohorts",
          "description": "Get all cohorts in a given project. Useful for discovering user segments, planning targeted analyses, and retrieving cohort IDs for filtering in other reports.",
          "parameters": [
            {
              "name": "list_saved_cohorts",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_retention_report",
          "description": "Get data from your Retention reports. Useful for analyzing user engagement over time, measuring product stickiness, and understanding how well your product retains users after specific actions. Only use params interval or unit, not both.",
          "parameters": [
            {
              "name": "query_retention_report",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "custom_jql",
          "description": "Run a custom JQL (JSON Query Language) script against your Mixpanel data. Useful for complex custom analyses, advanced data transformations, and queries that can't be handled by standard report types.",
          "parameters": [
            {
              "name": "custom_jql",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_segmentation_sum",
          "description": "Sum a numeric expression for events over time. Useful for calculating revenue metrics, aggregating quantitative values, and tracking cumulative totals across different time periods.",
          "parameters": [
            {
              "name": "query_segmentation_sum",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_profiles",
          "description": "Query Mixpanel user profiles with filtering options. Useful for retrieving detailed user profiles, filtering by specific properties, and analyzing user behavior across different dimensions.",
          "parameters": [
            {
              "name": "query_profiles",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_frequency_report",
          "description": "Get data for frequency of actions over time. Useful for analyzing how often users perform specific actions, identifying patterns of behavior, and tracking user engagement over time.",
          "parameters": [
            {
              "name": "query_frequency_report",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_segmentation_report",
          "description": "Get data for an event, segmented and filtered by properties. Useful for breaking down event data by user attributes, comparing performance across segments, and identifying which user groups perform specific actions.",
          "parameters": [
            {
              "name": "query_segmentation_report",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_segmentation_bucket",
          "description": "Get data for an event, segmented and filtered by properties, with values placed into numeric buckets. Useful for analyzing distributions of numeric values, creating histograms, and understanding the range of quantitative metrics.",
          "parameters": [
            {
              "name": "query_segmentation_bucket",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "query_segmentation_average",
          "description": "Averages an expression for events per unit time. Useful for calculating average values like purchase amounts, session durations, or any numeric metric, and tracking how these averages change over time.",
          "parameters": [
            {
              "name": "query_segmentation_average",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "top_event_properties",
          "description": "Get the top property names for an event. Useful for discovering which properties are most commonly associated with an event, prioritizing which dimensions to analyze, and understanding event structure.",
          "parameters": [
            {
              "name": "top_event_properties",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "top_event_property_values",
          "description": "Get the top values for a property. Useful for understanding the distribution of values for a specific property, identifying the most common categories or segments, and planning further targeted analyses.",
          "parameters": [
            {
              "name": "top_event_property_values",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@dragonkhoi/mixpanel-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@dragonkhoi/mixpanel-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0063.@dragonkhoi_mixpanel-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 62
  }
}