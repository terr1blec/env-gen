{
  "labels": {
    "analysis": "The MCP Server \"EDA Assistant\" is designed to facilitate exploratory data analysis through a conversational interface. Its tools focus on reading, analyzing, and managing data files (text and CSV files), listing directory contents, and retrieving file metadata. This suggests the server is primarily used for data handling, file operations, and basic data analysis tasks.",
    "reasoning": "The primary label \"Data Analysis & Processing\" was chosen because the server's primary functionality is centered around analyzing and exploring datasets through file operations and basic data queries. The secondary label \"File Management\" is applicable due to the tools for reading files, listing directories, and retrieving file info. The predefined categories adequately cover the server's functionality, so no custom label is needed.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "File Management"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2095,
    "server_name": "EDA Assistant",
    "rank_by_usage": 2096,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Yash-Kavaiya_eda-assistant-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Yash-Kavaiya/eda-assistant-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "read_text_file",
          "description": "\nRead the contents of a text file from the filesystem.\n\nArgs:\n    file_path: Path to the text file to read\n    \nReturns:\n    String containing the file contents\n    \nRaises:\n    FileNotFoundError: If the file doesn't exist\n    PermissionError: If there are insufficient permissions to read the file\n    UnicodeDecodeError: If the file cannot be decoded as text\n",
          "input_schema": {
            "properties": {
              "file_path": {
                "title": "File Path",
                "type": "string"
              }
            },
            "required": [
              "file_path"
            ],
            "title": "read_text_fileArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "read_csv_file",
          "description": "\nRead and analyze a CSV file from the filesystem.\n\nArgs:\n    file_path: Path to the CSV file to read\n    preview_rows: Number of rows to show in preview (default: 10)\n    encoding: File encoding (default: utf-8)\n    \nReturns:\n    String containing CSV analysis and preview\n    \nRaises:\n    FileNotFoundError: If the file doesn't exist\n    pandas.errors.EmptyDataError: If the CSV is empty\n    pandas.errors.ParserError: If the CSV format is invalid\n",
          "input_schema": {
            "properties": {
              "file_path": {
                "title": "File Path",
                "type": "string"
              },
              "preview_rows": {
                "default": 10,
                "title": "Preview Rows",
                "type": "integer"
              },
              "encoding": {
                "default": "utf-8",
                "title": "Encoding",
                "type": "string"
              }
            },
            "required": [
              "file_path"
            ],
            "title": "read_csv_fileArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_files_in_directory",
          "description": "\nList files in a directory, optionally filtered by extension.\n\nArgs:\n    directory_path: Path to the directory to list\n    file_extension: Optional file extension filter (e.g., '.txt', '.csv')\n    \nReturns:\n    String containing list of files with metadata\n",
          "input_schema": {
            "properties": {
              "directory_path": {
                "title": "Directory Path",
                "type": "string"
              },
              "file_extension": {
                "default": null,
                "title": "File Extension",
                "type": "string"
              }
            },
            "required": [
              "directory_path"
            ],
            "title": "list_files_in_directoryArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_file_info",
          "description": "\nGet detailed information about a file.\n\nArgs:\n    file_path: Path to the file to analyze\n    \nReturns:\n    String containing detailed file information\n",
          "input_schema": {
            "properties": {
              "file_path": {
                "title": "File Path",
                "type": "string"
              }
            },
            "required": [
              "file_path"
            ],
            "title": "get_file_infoArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "read_text_file",
        "read_csv_file",
        "list_files_in_directory",
        "get_file_info"
      ]
    },
    "server_info_crawled": {
      "id": 2095,
      "name": "EDA Assistant",
      "author": "@Yash-Kavaiya/eda-assistant-mcp",
      "overview": "Provide an interactive assistant for exploratory data analysis tasks. Enable users to query, analyze, and visualize datasets efficiently through a conversational interface. Streamline data exploration workflows with integrated tools and resources.",
      "repository_url": "https://github.com/Yash-Kavaiya/eda-assistant-mcp",
      "homepage": "https://smithery.ai/server/@Yash-Kavaiya/eda-assistant-mcp",
      "remote_or_local": "Remote",
      "license": "https://smithery.ai/server/@Yash-Kavaiya/e",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Yash-Kavaiya_eda-assistant-mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "read_text_file",
          "description": "\nRead the contents of a text file from the filesystem.\n\nArgs:\n    file_path: Path to the text file to read\n    \nReturns:\n    String containing the file contents\n    \nRaises:\n    FileNotFoundError: If the file doesn't exist\n    PermissionError: If there are insufficient permissions to read the file\n    UnicodeDecodeError: If the file cannot be decoded as text\n",
          "input_schema": {
            "properties": {
              "file_path": {
                "title": "File Path",
                "type": "string"
              }
            },
            "required": [
              "file_path"
            ],
            "title": "read_text_fileArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "read_csv_file",
          "description": "\nRead and analyze a CSV file from the filesystem.\n\nArgs:\n    file_path: Path to the CSV file to read\n    preview_rows: Number of rows to show in preview (default: 10)\n    encoding: File encoding (default: utf-8)\n    \nReturns:\n    String containing CSV analysis and preview\n    \nRaises:\n    FileNotFoundError: If the file doesn't exist\n    pandas.errors.EmptyDataError: If the CSV is empty\n    pandas.errors.ParserError: If the CSV format is invalid\n",
          "input_schema": {
            "properties": {
              "file_path": {
                "title": "File Path",
                "type": "string"
              },
              "preview_rows": {
                "default": 10,
                "title": "Preview Rows",
                "type": "integer"
              },
              "encoding": {
                "default": "utf-8",
                "title": "Encoding",
                "type": "string"
              }
            },
            "required": [
              "file_path"
            ],
            "title": "read_csv_fileArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_files_in_directory",
          "description": "\nList files in a directory, optionally filtered by extension.\n\nArgs:\n    directory_path: Path to the directory to list\n    file_extension: Optional file extension filter (e.g., '.txt', '.csv')\n    \nReturns:\n    String containing list of files with metadata\n",
          "input_schema": {
            "properties": {
              "directory_path": {
                "title": "Directory Path",
                "type": "string"
              },
              "file_extension": {
                "default": null,
                "title": "File Extension",
                "type": "string"
              }
            },
            "required": [
              "directory_path"
            ],
            "title": "list_files_in_directoryArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_file_info",
          "description": "\nGet detailed information about a file.\n\nArgs:\n    file_path: Path to the file to analyze\n    \nReturns:\n    String containing detailed file information\n",
          "input_schema": {
            "properties": {
              "file_path": {
                "title": "File Path",
                "type": "string"
              }
            },
            "required": [
              "file_path"
            ],
            "title": "get_file_infoArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Yash-Kavaiya/eda-assistant-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Yash-Kavaiya/eda-assistant-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "2096.@Yash-Kavaiya_eda-assistant-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1825
  }
}