{
  "labels": {
    "analysis": "The Prometheus MCP Server enables language model agents to interact with Prometheus metrics and alerting systems. Its core functionality revolves around querying time-series data, visualizing metrics, and accessing alert rules. The available tools allow querying metric ranges and alerting rules, making it useful for real-time observability and monitoring. This server bridges LLM capabilities with infrastructure monitoring systems like Prometheus.",
    "reasoning": "The primary label \"Data Analysis & Processing\" was chosen because the server's main function is querying and analyzing time-series data. The secondary label \"Operating System\" is included as the server interacts with infrastructure monitoring systems. No custom label is needed as the predefined categories cover the functionality well.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "Operating System"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2071,
    "server_name": "Prometheus MCP Server",
    "rank_by_usage": 2072,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@etruong42_prometheus-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@etruong42/prometheus-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2071,
      "name": "Prometheus MCP Server",
      "author": "@etruong42/prometheus-mcp",
      "overview": "Expose Prometheus monitoring and visualization tools to your language model agents, enabling them to query metrics and generate charts dynamically. Enhance your LLM's capabilities with real-time observability data and graphical insights. Easily integrate with Claude and other MCP-compatible clients for seamless interaction.",
      "repository_url": "https://github.com/etruong42/prometheus-mcp",
      "homepage": "https://smithery.ai/server/@etruong42/prometheus-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@etruong42_prometheus-mcp.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "prometheus_query_range",
          "description": "Deploy Server Prometheus MCP Server Claim Server @etruong42/prometheus-mcp Try in Playground prometheus_query_range",
          "parameters": []
        },
        {
          "name": "prometheus_alert_rules",
          "description": "Query the Prometheus /rules API.\n    Returns a list of alerting and recording rules that are currently loaded.\n    In addition it returns the currently active alerts fired by the Prometheus\n    instance of each alerting rule.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@etruong42/prometheus-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@etruong42/prometheus-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2072.@etruong42_prometheus-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1806
  }
}