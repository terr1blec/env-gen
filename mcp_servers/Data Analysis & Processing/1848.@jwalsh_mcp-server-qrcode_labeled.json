{
  "labels": {
    "analysis": "The MCP Server is designed to generate QR codes for various use cases, including URLs, WiFi credentials, and contact information. It offers customization options such as error correction levels and size adjustments, making it a versatile tool for content encoding. The server integrates with applications via the Model Context Protocol.",
    "reasoning": "The primary label is chosen because the server's core functionality revolves around generating QR codes, which is a form of data encoding and processing. The secondary label is selected due to the server's ability to integrate with other applications, making API integration relevant.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": "QR Code Generation",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1847,
    "server_name": "QR Code Server",
    "rank_by_usage": 1848,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@jwalsh_mcp-server-qrcode.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@jwalsh/mcp-server-qrcode/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "generate-qrcode",
          "description": "Generate QR codes in various formats with customizable error correction levels and sizes",
          "input_schema": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "description": "The text content to encode in the QR code"
              },
              "errorCorrectionLevel": {
                "type": "string",
                "enum": [
                  "L",
                  "M",
                  "Q",
                  "H"
                ],
                "description": "Error correction level (L: 7%, M: 15%, Q: 25%, H: 30%)",
                "default": "M"
              },
              "size": {
                "type": "number",
                "minimum": 1,
                "maximum": 10,
                "description": "Size of the QR code (1-10)",
                "default": 3
              },
              "format": {
                "type": "string",
                "enum": [
                  "image",
                  "text"
                ],
                "description": "Output format: 'image' for PNG QR code, 'text' for terminal-friendly output",
                "default": "image"
              }
            },
            "required": [
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "generate-qrcode"
      ]
    },
    "server_info_crawled": {
      "id": 1847,
      "name": "QR Code Server",
      "author": "@jwalsh/mcp-server-qrcode",
      "overview": "Generate QR codes effortlessly for various content types like URLs, WiFi credentials, and contact information. Customize size and format to suit your needs, and integrate seamlessly with your applications using the Model Context Protocol.",
      "repository_url": "https://github.com/jwalsh/mcp-server-qrcode",
      "homepage": "https://smithery.ai/server/@jwalsh/mcp-server-qrcode",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@jwalsh_mcp-server-qrcode.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "generate-qrcode",
          "description": "Generate QR codes in various formats with customizable error correction levels and sizes",
          "input_schema": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "description": "The text content to encode in the QR code"
              },
              "errorCorrectionLevel": {
                "type": "string",
                "enum": [
                  "L",
                  "M",
                  "Q",
                  "H"
                ],
                "description": "Error correction level (L: 7%, M: 15%, Q: 25%, H: 30%)",
                "default": "M"
              },
              "size": {
                "type": "number",
                "minimum": 1,
                "maximum": 10,
                "description": "Size of the QR code (1-10)",
                "default": 3
              },
              "format": {
                "type": "string",
                "enum": [
                  "image",
                  "text"
                ],
                "description": "Output format: 'image' for PNG QR code, 'text' for terminal-friendly output",
                "default": "image"
              }
            },
            "required": [
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@jwalsh/mcp-server-qrcode/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@jwalsh/mcp-server-qrcode/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1848.@jwalsh_mcp-server-qrcode_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1641
  }
}