{
  "labels": {
    "analysis": "The ChEMBL Server is primarily focused on providing access to and processing of chemical and biological data related to drugs, compounds, and biological targets. Its tools allow users to query various types of chemical and bioinformatics data (e.g., assay results, compound structures, biological targets) and perform chemical computations (e.g., SMILES standardization, structural alert detection). The server is designed to support research and development in areas like drug discovery, chemical biology, and biomedical research.",
    "reasoning": "The primary label \"Data Analysis & Processing\" was chosen because the server is primarily a data repository and processing tool for chemical and biological data, enabling analyses and computations on this data. The secondary labels reflect additional functionality related to database operations (querying structured data) and API integration (providing access to the data via an API). The custom label \"Chemical Informatics\" was added to capture the domain-specific nature of the data and tools offered.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "Database Operations",
      "API Integration"
    ],
    "custom_label": "Chemical Informatics",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 241,
    "server_name": "ChEMBL Server",
    "rank_by_usage": 242,
    "usage_count": "171",
    "original_file": "../crawler/smithery/@JackKuo666_chembl-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@JackKuo666/chembl-mcp-server/mcp?config=eyJob3N0IjogIjEyNy4wLjAuMSIsICJwb3J0IjogODAwMCwgImxvZ0xldmVsIjogIklORk8iLCAidHJhbnNwb3J0IjogInN0ZGlvIn0=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "example_activity",
          "description": "Get activity data for the specified assay_chembl_id\n    \n    Args:\n        assay_chembl_id: ChEMBL assay ID\n        \n    Returns:\n        List of activity data\n    ",
          "input_schema": {
            "properties": {
              "assay_chembl_id": {
                "title": "Assay Chembl Id",
                "type": "string"
              }
            },
            "required": [
              "assay_chembl_id"
            ],
            "title": "example_activityArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_activity_supplementary_data_by_activity",
          "description": "Get supplementary activity data for the specified activity_chembl_id\n    \n    Args:\n        activity_chembl_id: ChEMBL activity ID\n        \n    Returns:\n        List of supplementary activity data\n    ",
          "input_schema": {
            "properties": {
              "activity_chembl_id": {
                "title": "Activity Chembl Id",
                "type": "string"
              }
            },
            "required": [
              "activity_chembl_id"
            ],
            "title": "example_activity_supplementary_data_by_activityArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_assay",
          "description": "Get assay data for the specified type\n    \n    Args:\n        assay_type: Assay type\n        \n    Returns:\n        List of assay data\n    ",
          "input_schema": {
            "properties": {
              "assay_type": {
                "title": "Assay Type",
                "type": "string"
              }
            },
            "required": [
              "assay_type"
            ],
            "title": "example_assayArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_assay_class",
          "description": "Get assay classification data for the specified type\n    \n    Args:\n        assay_class_type: Assay classification type\n        \n    Returns:\n        List of assay classification data\n    ",
          "input_schema": {
            "properties": {
              "assay_class_type": {
                "title": "Assay Class Type",
                "type": "string"
              }
            },
            "required": [
              "assay_class_type"
            ],
            "title": "example_assay_classArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_atc_class",
          "description": "Get ATC classification data for the specified level1\n    \n    Args:\n        level1: Level1 value of ATC classification\n        \n    Returns:\n        List of ATC classification data\n    ",
          "input_schema": {
            "properties": {
              "level1": {
                "title": "Level1",
                "type": "string"
              }
            },
            "required": [
              "level1"
            ],
            "title": "example_atc_classArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_binding_site",
          "description": "Get binding site data for the specified name\n    \n    Args:\n        site_name: Binding site name\n        \n    Returns:\n        List of binding site data\n    ",
          "input_schema": {
            "properties": {
              "site_name": {
                "title": "Site Name",
                "type": "string"
              }
            },
            "required": [
              "site_name"
            ],
            "title": "example_binding_siteArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_biotherapeutic",
          "description": "Get biotherapeutic data for the specified type\n    \n    Args:\n        biotherapeutic_type: Biotherapeutic type\n        \n    Returns:\n        List of biotherapeutic data\n    ",
          "input_schema": {
            "properties": {
              "biotherapeutic_type": {
                "title": "Biotherapeutic Type",
                "type": "string"
              }
            },
            "required": [
              "biotherapeutic_type"
            ],
            "title": "example_biotherapeuticArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_cell_line",
          "description": "Get cell line data for the specified name\n    \n    Args:\n        cell_line_name: Cell line name\n        \n    Returns:\n        List of cell line data\n    ",
          "input_schema": {
            "properties": {
              "cell_line_name": {
                "title": "Cell Line Name",
                "type": "string"
              }
            },
            "required": [
              "cell_line_name"
            ],
            "title": "example_cell_lineArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_chembl_id_lookup",
          "description": "Look up ChEMBL IDs for the specified type and query\n    \n    Args:\n        available_type: Available type\n        q: Query string\n        \n    Returns:\n        List of ChEMBL IDs\n    ",
          "input_schema": {
            "properties": {
              "available_type": {
                "title": "Available Type",
                "type": "string"
              },
              "q": {
                "title": "Q",
                "type": "string"
              }
            },
            "required": [
              "available_type",
              "q"
            ],
            "title": "example_chembl_id_lookupArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_chembl_release",
          "description": "Get all ChEMBL release information\n    \n    Returns:\n        List of ChEMBL release information\n    ",
          "input_schema": {
            "properties": {},
            "title": "example_chembl_releaseArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_compound_record",
          "description": "Get compound records for the specified name\n    \n    Args:\n        compound_name: Compound name\n        \n    Returns:\n        List of compound records\n    ",
          "input_schema": {
            "properties": {
              "compound_name": {
                "title": "Compound Name",
                "type": "string"
              }
            },
            "required": [
              "compound_name"
            ],
            "title": "example_compound_recordArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_compound_structural_alert",
          "description": "Get compound structural alerts for the specified name\n    \n    Args:\n        alert_name: Alert name\n        \n    Returns:\n        List of compound structural alerts\n    ",
          "input_schema": {
            "properties": {
              "alert_name": {
                "title": "Alert Name",
                "type": "string"
              }
            },
            "required": [
              "alert_name"
            ],
            "title": "example_compound_structural_alertArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_description",
          "description": "Get description data for the specified type\n    \n    Args:\n        description_type: Description type\n        \n    Returns:\n        List of description data\n    ",
          "input_schema": {
            "properties": {
              "description_type": {
                "title": "Description Type",
                "type": "string"
              }
            },
            "required": [
              "description_type"
            ],
            "title": "example_descriptionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_document",
          "description": "Get document data for the specified journal\n    \n    Args:\n        journal: Journal name\n        \n    Returns:\n        List of document data\n    ",
          "input_schema": {
            "properties": {
              "journal": {
                "title": "Journal",
                "type": "string"
              }
            },
            "required": [
              "journal"
            ],
            "title": "example_documentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_drug",
          "description": "Get drug data for the specified type\n    \n    Args:\n        drug_type: Drug type\n        \n    Returns:\n        List of drug data\n    ",
          "input_schema": {
            "properties": {
              "drug_type": {
                "title": "Drug Type",
                "type": "string"
              }
            },
            "required": [
              "drug_type"
            ],
            "title": "example_drugArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_drug_indication",
          "description": "Get drug indication data for the specified MeSH heading\n    \n    Args:\n        mesh_heading: MeSH heading\n        \n    Returns:\n        List of drug indication data\n    ",
          "input_schema": {
            "properties": {
              "mesh_heading": {
                "title": "Mesh Heading",
                "type": "string"
              }
            },
            "required": [
              "mesh_heading"
            ],
            "title": "example_drug_indicationArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_drug_warning",
          "description": "Get drug warning data for the specified MedDRA term\n    \n    Args:\n        meddra_term: MedDRA term\n        \n    Returns:\n        List of drug warning data\n    ",
          "input_schema": {
            "properties": {
              "meddra_term": {
                "title": "Meddra Term",
                "type": "string"
              }
            },
            "required": [
              "meddra_term"
            ],
            "title": "example_drug_warningArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_go_slim",
          "description": "Get data for the specified GO Slim term\n    \n    Args:\n        go_slim_term: GO Slim term\n        \n    Returns:\n        List of GO Slim data\n    ",
          "input_schema": {
            "properties": {
              "go_slim_term": {
                "title": "Go Slim Term",
                "type": "string"
              }
            },
            "required": [
              "go_slim_term"
            ],
            "title": "example_go_slimArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_mechanism",
          "description": "Get data for the specified mechanism of action\n    \n    Args:\n        mechanism_of_action: Mechanism of action\n        \n    Returns:\n        List of mechanism data\n    ",
          "input_schema": {
            "properties": {
              "mechanism_of_action": {
                "title": "Mechanism Of Action",
                "type": "string"
              }
            },
            "required": [
              "mechanism_of_action"
            ],
            "title": "example_mechanismArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_molecule",
          "description": "Get molecule data for the specified type\n    \n    Args:\n        molecule_type: Molecule type\n        \n    Returns:\n        List of molecule data\n    ",
          "input_schema": {
            "properties": {
              "molecule_type": {
                "title": "Molecule Type",
                "type": "string"
              }
            },
            "required": [
              "molecule_type"
            ],
            "title": "example_moleculeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_molecule_form",
          "description": "Get molecule form data for the specified description\n    \n    Args:\n        form_description: Form description\n        \n    Returns:\n        List of molecule form data\n    ",
          "input_schema": {
            "properties": {
              "form_description": {
                "title": "Form Description",
                "type": "string"
              }
            },
            "required": [
              "form_description"
            ],
            "title": "example_molecule_formArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_organism",
          "description": "Get organism data for the specified taxonomy ID\n    \n    Args:\n        tax_id: Taxonomy ID\n        \n    Returns:\n        List of organism data\n    ",
          "input_schema": {
            "properties": {
              "tax_id": {
                "title": "Tax Id",
                "type": "integer"
              }
            },
            "required": [
              "tax_id"
            ],
            "title": "example_organismArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_protein_classification",
          "description": "Get protein classification data for the specified class name\n    \n    Args:\n        protein_class_name: Protein class name\n        \n    Returns:\n        List of protein classification data\n    ",
          "input_schema": {
            "properties": {
              "protein_class_name": {
                "title": "Protein Class Name",
                "type": "string"
              }
            },
            "required": [
              "protein_class_name"
            ],
            "title": "example_protein_classificationArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_source",
          "description": "Get source information for the specified description\n    \n    Args:\n        source_description: Source description\n        \n    Returns:\n        List of source information\n    ",
          "input_schema": {
            "properties": {
              "source_description": {
                "title": "Source Description",
                "type": "string"
              }
            },
            "required": [
              "source_description"
            ],
            "title": "example_sourceArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_target",
          "description": "Get target data for the specified type\n    \n    Args:\n        target_type: Target type\n        \n    Returns:\n        List of target data\n    ",
          "input_schema": {
            "properties": {
              "target_type": {
                "title": "Target Type",
                "type": "string"
              }
            },
            "required": [
              "target_type"
            ],
            "title": "example_targetArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_target_component",
          "description": "Get target component data for the specified type\n    \n    Args:\n        component_type: Component type\n        \n    Returns:\n        List of target component data\n    ",
          "input_schema": {
            "properties": {
              "component_type": {
                "title": "Component Type",
                "type": "string"
              }
            },
            "required": [
              "component_type"
            ],
            "title": "example_target_componentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_target_relation",
          "description": "Get target relationship data for the specified relationship type\n    \n    Args:\n        relationship_type: Relationship type\n        \n    Returns:\n        List of target relationship data\n    ",
          "input_schema": {
            "properties": {
              "relationship_type": {
                "title": "Relationship Type",
                "type": "string"
              }
            },
            "required": [
              "relationship_type"
            ],
            "title": "example_target_relationArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_tissue",
          "description": "Get tissue data for the specified name\n    \n    Args:\n        tissue_name: Tissue name\n        \n    Returns:\n        List of tissue data\n    ",
          "input_schema": {
            "properties": {
              "tissue_name": {
                "title": "Tissue Name",
                "type": "string"
              }
            },
            "required": [
              "tissue_name"
            ],
            "title": "example_tissueArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_xref_source",
          "description": "Get cross-reference source data for the specified name\n    \n    Args:\n        xref_name: Cross-reference source name\n        \n    Returns:\n        List of cross-reference source data\n    ",
          "input_schema": {
            "properties": {
              "xref_name": {
                "title": "Xref Name",
                "type": "string"
              }
            },
            "required": [
              "xref_name"
            ],
            "title": "example_xref_sourceArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_canonicalizeSmiles",
          "description": "Convert SMILES string to canonical form\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        Canonicalized SMILES string\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_canonicalizeSmilesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_chemblDescriptors",
          "description": "Get ChEMBL descriptors for the SMILES string\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        Dictionary of ChEMBL descriptors\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_chemblDescriptorsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_description_utils",
          "description": "\n    Get description information for the ChEMBL ID\n    \n    Args:\n        chembl_id: ChEMBL ID\n        \n    Returns:\n        Description information\n    ",
          "input_schema": {
            "properties": {
              "chembl_id": {
                "title": "Chembl Id",
                "type": "string"
              }
            },
            "required": [
              "chembl_id"
            ],
            "title": "example_description_utilsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_descriptors",
          "description": "\n    Get descriptors for the SMILES string\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        Dictionary of descriptors\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_descriptorsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_getParent",
          "description": "\n    Get parent ChEMBL ID for the given ChEMBL ID\n    \n    Args:\n        chembl_id: ChEMBL ID\n        \n    Returns:\n        Parent ChEMBL ID\n    ",
          "input_schema": {
            "properties": {
              "chembl_id": {
                "title": "Chembl Id",
                "type": "string"
              }
            },
            "required": [
              "chembl_id"
            ],
            "title": "example_getParentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_highlightSmilesFragmentSvg",
          "description": "\n    Generate SVG image with highlighted fragment for SMILES string\n    \n    Args:\n        smiles: SMILES string\n        fragment: Fragment to highlight\n        \n    Returns:\n        SVG image string\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              },
              "fragment": {
                "title": "Fragment",
                "type": "string"
              }
            },
            "required": [
              "smiles",
              "fragment"
            ],
            "title": "example_highlightSmilesFragmentSvgArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_inchi2inchiKey",
          "description": "\n    Convert InChI to InChI Key\n    \n    Args:\n        inchi: InChI string\n        \n    Returns:\n        InChI Key\n    ",
          "input_schema": {
            "properties": {
              "inchi": {
                "title": "Inchi",
                "type": "string"
              }
            },
            "required": [
              "inchi"
            ],
            "title": "example_inchi2inchiKeyArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_inchi2svg",
          "description": "\n    Convert InChI to SVG image\n    \n    Args:\n        inchi: InChI string\n        \n    Returns:\n        SVG image string\n    ",
          "input_schema": {
            "properties": {
              "inchi": {
                "title": "Inchi",
                "type": "string"
              }
            },
            "required": [
              "inchi"
            ],
            "title": "example_inchi2svgArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_is3D",
          "description": "\n    Check if SMILES string represents a 3D structure\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        True if 3D structure, False otherwise\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_is3DArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_official_utils",
          "description": "\n    Get official name for the ChEMBL ID\n    \n    Args:\n        chembl_id: ChEMBL ID\n        \n    Returns:\n        Official name\n    ",
          "input_schema": {
            "properties": {
              "chembl_id": {
                "title": "Chembl Id",
                "type": "string"
              }
            },
            "required": [
              "chembl_id"
            ],
            "title": "example_official_utilsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_removeHs",
          "description": "\n    Remove hydrogen atoms from SMILES string\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        SMILES string without hydrogen atoms\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_removeHsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_smiles2inchi",
          "description": "\n    Convert SMILES string to InChI\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        InChI string\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_smiles2inchiArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_smiles2inchiKey",
          "description": "\n    Convert SMILES string to InChI Key\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        InChI Key\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_smiles2inchiKeyArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_smiles2svg",
          "description": "\n    Convert SMILES string to SVG image\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        SVG image string\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_smiles2svgArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_standardize",
          "description": "\n    Standardize SMILES string\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        Standardized SMILES string\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_standardizeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_status",
          "description": "\n    Get status information for ChEMBL Web Services\n    \n    Returns:\n        Dictionary of status information\n    ",
          "input_schema": {
            "properties": {},
            "title": "example_statusArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_structuralAlerts",
          "description": "\n    Get structural alerts for SMILES string\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        List of structural alerts\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_structuralAlertsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 46,
      "tool_names": [
        "example_activity",
        "example_activity_supplementary_data_by_activity",
        "example_assay",
        "example_assay_class",
        "example_atc_class",
        "example_binding_site",
        "example_biotherapeutic",
        "example_cell_line",
        "example_chembl_id_lookup",
        "example_chembl_release",
        "example_compound_record",
        "example_compound_structural_alert",
        "example_description",
        "example_document",
        "example_drug",
        "example_drug_indication",
        "example_drug_warning",
        "example_go_slim",
        "example_mechanism",
        "example_molecule",
        "example_molecule_form",
        "example_organism",
        "example_protein_classification",
        "example_source",
        "example_target",
        "example_target_component",
        "example_target_relation",
        "example_tissue",
        "example_xref_source",
        "example_canonicalizeSmiles",
        "example_chemblDescriptors",
        "example_description_utils",
        "example_descriptors",
        "example_getParent",
        "example_highlightSmilesFragmentSvg",
        "example_inchi2inchiKey",
        "example_inchi2svg",
        "example_is3D",
        "example_official_utils",
        "example_removeHs",
        "example_smiles2inchi",
        "example_smiles2inchiKey",
        "example_smiles2svg",
        "example_standardize",
        "example_status",
        "example_structuralAlerts"
      ]
    },
    "server_info_crawled": {
      "id": 241,
      "name": "ChEMBL Server",
      "author": "@JackKuo666/chembl-mcp-server",
      "overview": "Access the ChEMBL database seamlessly with a fast and efficient API. Retrieve chemical data and perform various chemical computations asynchronously. Enhance your research and development with reliable data access and processing capabilities.",
      "repository_url": "https://github.com/JackKuo666/ChEMBL-MCP-Server",
      "homepage": "https://smithery.ai/server/@JackKuo666/chembl-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "171",
      "success_rate": "99.48%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@JackKuo666_chembl-mcp-server.json",
      "tools_count": 46,
      "tools": [
        {
          "name": "example_activity",
          "description": "Get activity data for the specified assay_chembl_id\n    \n    Args:\n        assay_chembl_id: ChEMBL assay ID\n        \n    Returns:\n        List of activity data\n    ",
          "input_schema": {
            "properties": {
              "assay_chembl_id": {
                "title": "Assay Chembl Id",
                "type": "string"
              }
            },
            "required": [
              "assay_chembl_id"
            ],
            "title": "example_activityArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_activity_supplementary_data_by_activity",
          "description": "Get supplementary activity data for the specified activity_chembl_id\n    \n    Args:\n        activity_chembl_id: ChEMBL activity ID\n        \n    Returns:\n        List of supplementary activity data\n    ",
          "input_schema": {
            "properties": {
              "activity_chembl_id": {
                "title": "Activity Chembl Id",
                "type": "string"
              }
            },
            "required": [
              "activity_chembl_id"
            ],
            "title": "example_activity_supplementary_data_by_activityArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_assay",
          "description": "Get assay data for the specified type\n    \n    Args:\n        assay_type: Assay type\n        \n    Returns:\n        List of assay data\n    ",
          "input_schema": {
            "properties": {
              "assay_type": {
                "title": "Assay Type",
                "type": "string"
              }
            },
            "required": [
              "assay_type"
            ],
            "title": "example_assayArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_assay_class",
          "description": "Get assay classification data for the specified type\n    \n    Args:\n        assay_class_type: Assay classification type\n        \n    Returns:\n        List of assay classification data\n    ",
          "input_schema": {
            "properties": {
              "assay_class_type": {
                "title": "Assay Class Type",
                "type": "string"
              }
            },
            "required": [
              "assay_class_type"
            ],
            "title": "example_assay_classArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_atc_class",
          "description": "Get ATC classification data for the specified level1\n    \n    Args:\n        level1: Level1 value of ATC classification\n        \n    Returns:\n        List of ATC classification data\n    ",
          "input_schema": {
            "properties": {
              "level1": {
                "title": "Level1",
                "type": "string"
              }
            },
            "required": [
              "level1"
            ],
            "title": "example_atc_classArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_binding_site",
          "description": "Get binding site data for the specified name\n    \n    Args:\n        site_name: Binding site name\n        \n    Returns:\n        List of binding site data\n    ",
          "input_schema": {
            "properties": {
              "site_name": {
                "title": "Site Name",
                "type": "string"
              }
            },
            "required": [
              "site_name"
            ],
            "title": "example_binding_siteArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_biotherapeutic",
          "description": "Get biotherapeutic data for the specified type\n    \n    Args:\n        biotherapeutic_type: Biotherapeutic type\n        \n    Returns:\n        List of biotherapeutic data\n    ",
          "input_schema": {
            "properties": {
              "biotherapeutic_type": {
                "title": "Biotherapeutic Type",
                "type": "string"
              }
            },
            "required": [
              "biotherapeutic_type"
            ],
            "title": "example_biotherapeuticArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_cell_line",
          "description": "Get cell line data for the specified name\n    \n    Args:\n        cell_line_name: Cell line name\n        \n    Returns:\n        List of cell line data\n    ",
          "input_schema": {
            "properties": {
              "cell_line_name": {
                "title": "Cell Line Name",
                "type": "string"
              }
            },
            "required": [
              "cell_line_name"
            ],
            "title": "example_cell_lineArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_chembl_id_lookup",
          "description": "Look up ChEMBL IDs for the specified type and query\n    \n    Args:\n        available_type: Available type\n        q: Query string\n        \n    Returns:\n        List of ChEMBL IDs\n    ",
          "input_schema": {
            "properties": {
              "available_type": {
                "title": "Available Type",
                "type": "string"
              },
              "q": {
                "title": "Q",
                "type": "string"
              }
            },
            "required": [
              "available_type",
              "q"
            ],
            "title": "example_chembl_id_lookupArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_chembl_release",
          "description": "Get all ChEMBL release information\n    \n    Returns:\n        List of ChEMBL release information\n    ",
          "input_schema": {
            "properties": {},
            "title": "example_chembl_releaseArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_compound_record",
          "description": "Get compound records for the specified name\n    \n    Args:\n        compound_name: Compound name\n        \n    Returns:\n        List of compound records\n    ",
          "input_schema": {
            "properties": {
              "compound_name": {
                "title": "Compound Name",
                "type": "string"
              }
            },
            "required": [
              "compound_name"
            ],
            "title": "example_compound_recordArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_compound_structural_alert",
          "description": "Get compound structural alerts for the specified name\n    \n    Args:\n        alert_name: Alert name\n        \n    Returns:\n        List of compound structural alerts\n    ",
          "input_schema": {
            "properties": {
              "alert_name": {
                "title": "Alert Name",
                "type": "string"
              }
            },
            "required": [
              "alert_name"
            ],
            "title": "example_compound_structural_alertArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_description",
          "description": "Get description data for the specified type\n    \n    Args:\n        description_type: Description type\n        \n    Returns:\n        List of description data\n    ",
          "input_schema": {
            "properties": {
              "description_type": {
                "title": "Description Type",
                "type": "string"
              }
            },
            "required": [
              "description_type"
            ],
            "title": "example_descriptionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_document",
          "description": "Get document data for the specified journal\n    \n    Args:\n        journal: Journal name\n        \n    Returns:\n        List of document data\n    ",
          "input_schema": {
            "properties": {
              "journal": {
                "title": "Journal",
                "type": "string"
              }
            },
            "required": [
              "journal"
            ],
            "title": "example_documentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_drug",
          "description": "Get drug data for the specified type\n    \n    Args:\n        drug_type: Drug type\n        \n    Returns:\n        List of drug data\n    ",
          "input_schema": {
            "properties": {
              "drug_type": {
                "title": "Drug Type",
                "type": "string"
              }
            },
            "required": [
              "drug_type"
            ],
            "title": "example_drugArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_drug_indication",
          "description": "Get drug indication data for the specified MeSH heading\n    \n    Args:\n        mesh_heading: MeSH heading\n        \n    Returns:\n        List of drug indication data\n    ",
          "input_schema": {
            "properties": {
              "mesh_heading": {
                "title": "Mesh Heading",
                "type": "string"
              }
            },
            "required": [
              "mesh_heading"
            ],
            "title": "example_drug_indicationArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_drug_warning",
          "description": "Get drug warning data for the specified MedDRA term\n    \n    Args:\n        meddra_term: MedDRA term\n        \n    Returns:\n        List of drug warning data\n    ",
          "input_schema": {
            "properties": {
              "meddra_term": {
                "title": "Meddra Term",
                "type": "string"
              }
            },
            "required": [
              "meddra_term"
            ],
            "title": "example_drug_warningArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_go_slim",
          "description": "Get data for the specified GO Slim term\n    \n    Args:\n        go_slim_term: GO Slim term\n        \n    Returns:\n        List of GO Slim data\n    ",
          "input_schema": {
            "properties": {
              "go_slim_term": {
                "title": "Go Slim Term",
                "type": "string"
              }
            },
            "required": [
              "go_slim_term"
            ],
            "title": "example_go_slimArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_mechanism",
          "description": "Get data for the specified mechanism of action\n    \n    Args:\n        mechanism_of_action: Mechanism of action\n        \n    Returns:\n        List of mechanism data\n    ",
          "input_schema": {
            "properties": {
              "mechanism_of_action": {
                "title": "Mechanism Of Action",
                "type": "string"
              }
            },
            "required": [
              "mechanism_of_action"
            ],
            "title": "example_mechanismArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_molecule",
          "description": "Get molecule data for the specified type\n    \n    Args:\n        molecule_type: Molecule type\n        \n    Returns:\n        List of molecule data\n    ",
          "input_schema": {
            "properties": {
              "molecule_type": {
                "title": "Molecule Type",
                "type": "string"
              }
            },
            "required": [
              "molecule_type"
            ],
            "title": "example_moleculeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_molecule_form",
          "description": "Get molecule form data for the specified description\n    \n    Args:\n        form_description: Form description\n        \n    Returns:\n        List of molecule form data\n    ",
          "input_schema": {
            "properties": {
              "form_description": {
                "title": "Form Description",
                "type": "string"
              }
            },
            "required": [
              "form_description"
            ],
            "title": "example_molecule_formArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_organism",
          "description": "Get organism data for the specified taxonomy ID\n    \n    Args:\n        tax_id: Taxonomy ID\n        \n    Returns:\n        List of organism data\n    ",
          "input_schema": {
            "properties": {
              "tax_id": {
                "title": "Tax Id",
                "type": "integer"
              }
            },
            "required": [
              "tax_id"
            ],
            "title": "example_organismArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_protein_classification",
          "description": "Get protein classification data for the specified class name\n    \n    Args:\n        protein_class_name: Protein class name\n        \n    Returns:\n        List of protein classification data\n    ",
          "input_schema": {
            "properties": {
              "protein_class_name": {
                "title": "Protein Class Name",
                "type": "string"
              }
            },
            "required": [
              "protein_class_name"
            ],
            "title": "example_protein_classificationArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_source",
          "description": "Get source information for the specified description\n    \n    Args:\n        source_description: Source description\n        \n    Returns:\n        List of source information\n    ",
          "input_schema": {
            "properties": {
              "source_description": {
                "title": "Source Description",
                "type": "string"
              }
            },
            "required": [
              "source_description"
            ],
            "title": "example_sourceArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_target",
          "description": "Get target data for the specified type\n    \n    Args:\n        target_type: Target type\n        \n    Returns:\n        List of target data\n    ",
          "input_schema": {
            "properties": {
              "target_type": {
                "title": "Target Type",
                "type": "string"
              }
            },
            "required": [
              "target_type"
            ],
            "title": "example_targetArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_target_component",
          "description": "Get target component data for the specified type\n    \n    Args:\n        component_type: Component type\n        \n    Returns:\n        List of target component data\n    ",
          "input_schema": {
            "properties": {
              "component_type": {
                "title": "Component Type",
                "type": "string"
              }
            },
            "required": [
              "component_type"
            ],
            "title": "example_target_componentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_target_relation",
          "description": "Get target relationship data for the specified relationship type\n    \n    Args:\n        relationship_type: Relationship type\n        \n    Returns:\n        List of target relationship data\n    ",
          "input_schema": {
            "properties": {
              "relationship_type": {
                "title": "Relationship Type",
                "type": "string"
              }
            },
            "required": [
              "relationship_type"
            ],
            "title": "example_target_relationArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_tissue",
          "description": "Get tissue data for the specified name\n    \n    Args:\n        tissue_name: Tissue name\n        \n    Returns:\n        List of tissue data\n    ",
          "input_schema": {
            "properties": {
              "tissue_name": {
                "title": "Tissue Name",
                "type": "string"
              }
            },
            "required": [
              "tissue_name"
            ],
            "title": "example_tissueArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_xref_source",
          "description": "Get cross-reference source data for the specified name\n    \n    Args:\n        xref_name: Cross-reference source name\n        \n    Returns:\n        List of cross-reference source data\n    ",
          "input_schema": {
            "properties": {
              "xref_name": {
                "title": "Xref Name",
                "type": "string"
              }
            },
            "required": [
              "xref_name"
            ],
            "title": "example_xref_sourceArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_canonicalizeSmiles",
          "description": "Convert SMILES string to canonical form\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        Canonicalized SMILES string\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_canonicalizeSmilesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_chemblDescriptors",
          "description": "Get ChEMBL descriptors for the SMILES string\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        Dictionary of ChEMBL descriptors\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_chemblDescriptorsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_description_utils",
          "description": "\n    Get description information for the ChEMBL ID\n    \n    Args:\n        chembl_id: ChEMBL ID\n        \n    Returns:\n        Description information\n    ",
          "input_schema": {
            "properties": {
              "chembl_id": {
                "title": "Chembl Id",
                "type": "string"
              }
            },
            "required": [
              "chembl_id"
            ],
            "title": "example_description_utilsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_descriptors",
          "description": "\n    Get descriptors for the SMILES string\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        Dictionary of descriptors\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_descriptorsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_getParent",
          "description": "\n    Get parent ChEMBL ID for the given ChEMBL ID\n    \n    Args:\n        chembl_id: ChEMBL ID\n        \n    Returns:\n        Parent ChEMBL ID\n    ",
          "input_schema": {
            "properties": {
              "chembl_id": {
                "title": "Chembl Id",
                "type": "string"
              }
            },
            "required": [
              "chembl_id"
            ],
            "title": "example_getParentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_highlightSmilesFragmentSvg",
          "description": "\n    Generate SVG image with highlighted fragment for SMILES string\n    \n    Args:\n        smiles: SMILES string\n        fragment: Fragment to highlight\n        \n    Returns:\n        SVG image string\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              },
              "fragment": {
                "title": "Fragment",
                "type": "string"
              }
            },
            "required": [
              "smiles",
              "fragment"
            ],
            "title": "example_highlightSmilesFragmentSvgArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_inchi2inchiKey",
          "description": "\n    Convert InChI to InChI Key\n    \n    Args:\n        inchi: InChI string\n        \n    Returns:\n        InChI Key\n    ",
          "input_schema": {
            "properties": {
              "inchi": {
                "title": "Inchi",
                "type": "string"
              }
            },
            "required": [
              "inchi"
            ],
            "title": "example_inchi2inchiKeyArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_inchi2svg",
          "description": "\n    Convert InChI to SVG image\n    \n    Args:\n        inchi: InChI string\n        \n    Returns:\n        SVG image string\n    ",
          "input_schema": {
            "properties": {
              "inchi": {
                "title": "Inchi",
                "type": "string"
              }
            },
            "required": [
              "inchi"
            ],
            "title": "example_inchi2svgArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_is3D",
          "description": "\n    Check if SMILES string represents a 3D structure\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        True if 3D structure, False otherwise\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_is3DArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_official_utils",
          "description": "\n    Get official name for the ChEMBL ID\n    \n    Args:\n        chembl_id: ChEMBL ID\n        \n    Returns:\n        Official name\n    ",
          "input_schema": {
            "properties": {
              "chembl_id": {
                "title": "Chembl Id",
                "type": "string"
              }
            },
            "required": [
              "chembl_id"
            ],
            "title": "example_official_utilsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_removeHs",
          "description": "\n    Remove hydrogen atoms from SMILES string\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        SMILES string without hydrogen atoms\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_removeHsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_smiles2inchi",
          "description": "\n    Convert SMILES string to InChI\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        InChI string\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_smiles2inchiArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_smiles2inchiKey",
          "description": "\n    Convert SMILES string to InChI Key\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        InChI Key\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_smiles2inchiKeyArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_smiles2svg",
          "description": "\n    Convert SMILES string to SVG image\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        SVG image string\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_smiles2svgArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_standardize",
          "description": "\n    Standardize SMILES string\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        Standardized SMILES string\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_standardizeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_status",
          "description": "\n    Get status information for ChEMBL Web Services\n    \n    Returns:\n        Dictionary of status information\n    ",
          "input_schema": {
            "properties": {},
            "title": "example_statusArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "example_structuralAlerts",
          "description": "\n    Get structural alerts for SMILES string\n    \n    Args:\n        smiles: SMILES string\n        \n    Returns:\n        List of structural alerts\n    ",
          "input_schema": {
            "properties": {
              "smiles": {
                "title": "Smiles",
                "type": "string"
              }
            },
            "required": [
              "smiles"
            ],
            "title": "example_structuralAlertsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"host\": \"127.0.0.1\",\n  \"port\": 8000,\n  \"logLevel\": \"INFO\",\n  \"transport\": \"stdio\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@JackKuo666/chembl-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"host\": \"127.0.0.1\",\n  \"port\": 8000,\n  \"logLevel\": \"INFO\",\n  \"transport\": \"stdio\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@JackKuo666/chembl-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0242.@JackKuo666_chembl-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 238
  }
}