{
  "labels": {
    "analysis": "The MCP Server, named \"Calculate Server,\" focuses on performing mathematical calculations and symbolic computations. It utilizes SymPy, a powerful symbolic mathematics library, to solve equations, perform algebraic and calculus operations, handle matrix computations, and execute various advanced mathematical tasks. The server is designed to be flexible, supporting basic arithmetic through complex operations like solving equations, computing derivatives, integrals, and working with matrices.",
    "reasoning": "The primary functionality of the server revolves around mathematical computations and symbolic mathematics, which aligns with advanced mathematical and scientific applications. While the server could be useful in development scenarios (e.g., simulation or algorithm testing), the core purpose is mathematical computation. No custom label is needed as the predefined categories adequately cover its functionality.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 688,
    "server_name": "Calculate Server",
    "rank_by_usage": 689,
    "usage_count": "12",
    "original_file": "../crawler/smithery/@611711Dark_mcp_sympy_calculate_server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@611711Dark/mcp_sympy_calculate_server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "calculate_expression",
          "description": "\ncalculate mathematical expressions using the `sympify` function from `sympy`, parse and compute the input mathematical expression string, supports direct calls to SymPy functions (automatically recognizes x, y, z as symbolic variables)\nParameters:\n    expression (str): Mathematical expression, e.g., \"223 - 344 * 6\" or \"sin(pi/2) + log(10)\".Replace special symbols with approximate values, e.g., pi → 3.1415\"\nExample expressions:\n    \"2 + 3*5\"                          # Basic arithmetic → 17\n    \"expand((x + 1)**2)\"               # Expand → x² + 2x + 1\n    \"diff(sin(x), x)\"                  # Derivative → cos(x)\n    \"integrate(exp(x), (x, 0, 1))\"      # Definite integral → E - 1\n    \"solve(x**2 - 4, x)\"               # Solve equation → [-2, 2]\n    \"limit(tan(x)/x, x, 0)\"            # Limit → 1\n    \"Sum(k, (k, 1, 10)).doit()\"        # Summation → 55\n    \"Matrix([[1, 2], [3, 4]]).inv()\"   # Matrix inverse → [[-2, 1], [3/2, -1/2]]\n    \"simplify((x**2 - 1)/(x + 1))\"     # Simplify → x - 1\n    \"factor(x**2 - 2*x - 15)\"          # Factorize → (x - 5)(x + 3)\n    \"series(cos(x), x, 0, 4)\"          # Taylor series → 1 - x²/2 + x⁴/24 + O(x⁴)\n    \"integrate(exp(-x**2)*sin(x), (x, -oo, oo))\"  # Complex integral\n    \"solve([x**2 + y**2 - 1, x + y - 1], [x, y])\"  # Solve system of equations\n    \"Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]).eigenvals()\"  # Matrix eigenvalues\nReturns:\n    str: Calculation result. If the expression cannot be parsed or computed, returns an error message (str).\n",
          "input_schema": {
            "properties": {
              "expression": {
                "title": "Expression",
                "type": "string"
              }
            },
            "required": [
              "expression"
            ],
            "title": "calculate_expressionArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "calculate_expression"
      ]
    },
    "server_info_crawled": {
      "id": 688,
      "name": "Calculate Server",
      "author": "@611711Dark/mcp_sympy_calculate_server",
      "overview": "Perform complex mathematical calculations effortlessly. Leverage powerful symbolic computation capabilities to solve equations, perform algebraic manipulations, and execute calculus operations with ease.",
      "repository_url": "https://github.com/611711Dark/mcp_calculate_server",
      "homepage": "https://smithery.ai/server/@611711Dark/mcp_sympy_calculate_server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "12",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@611711Dark_mcp_sympy_calculate_server.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "calculate_expression",
          "description": "\ncalculate mathematical expressions using the `sympify` function from `sympy`, parse and compute the input mathematical expression string, supports direct calls to SymPy functions (automatically recognizes x, y, z as symbolic variables)\nParameters:\n    expression (str): Mathematical expression, e.g., \"223 - 344 * 6\" or \"sin(pi/2) + log(10)\".Replace special symbols with approximate values, e.g., pi → 3.1415\"\nExample expressions:\n    \"2 + 3*5\"                          # Basic arithmetic → 17\n    \"expand((x + 1)**2)\"               # Expand → x² + 2x + 1\n    \"diff(sin(x), x)\"                  # Derivative → cos(x)\n    \"integrate(exp(x), (x, 0, 1))\"      # Definite integral → E - 1\n    \"solve(x**2 - 4, x)\"               # Solve equation → [-2, 2]\n    \"limit(tan(x)/x, x, 0)\"            # Limit → 1\n    \"Sum(k, (k, 1, 10)).doit()\"        # Summation → 55\n    \"Matrix([[1, 2], [3, 4]]).inv()\"   # Matrix inverse → [[-2, 1], [3/2, -1/2]]\n    \"simplify((x**2 - 1)/(x + 1))\"     # Simplify → x - 1\n    \"factor(x**2 - 2*x - 15)\"          # Factorize → (x - 5)(x + 3)\n    \"series(cos(x), x, 0, 4)\"          # Taylor series → 1 - x²/2 + x⁴/24 + O(x⁴)\n    \"integrate(exp(-x**2)*sin(x), (x, -oo, oo))\"  # Complex integral\n    \"solve([x**2 + y**2 - 1, x + y - 1], [x, y])\"  # Solve system of equations\n    \"Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]).eigenvals()\"  # Matrix eigenvalues\nReturns:\n    str: Calculation result. If the expression cannot be parsed or computed, returns an error message (str).\n",
          "input_schema": {
            "properties": {
              "expression": {
                "title": "Expression",
                "type": "string"
              }
            },
            "required": [
              "expression"
            ],
            "title": "calculate_expressionArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@611711Dark/mcp_sympy_calculate_server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@611711Dark/mcp_sympy_calculate_server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0689.@611711Dark_mcp_sympy_calculate_server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 673
  }
}