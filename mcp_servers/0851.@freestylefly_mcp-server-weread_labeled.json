{
  "labels": {
    "analysis": "The WeRead MCP Server focuses on managing and analyzing reading data from WeChat, particularly notes and reading activities. It provides tools for retrieving bookshelf information, book notes, recent reads, and searching notes with keywords. The server's core functionality revolves around organizing and accessing reading-related data, enabling users to gain insights from their reading habits and notes through AI-powered interactions. It serves as a bridge between WeChat reading data and AI analysis for enhanced reading experiences.",
    "reasoning": "The primary label \"Memory Management\" is chosen because the server primarily handles storage, retrieval, and organization of reading notes and records, functioning like a knowledge base for reading activities. The secondary label \"Browser Automation\" is included because while not full automation, some tools like searching and extracting notes resemble automated data retrieval. The server also facilitates insights and analysis, partly justifying \"Data Analysis & Processing,\" though this is less central. A custom label \"Reading Experience Enhancement\" captures the unique focus on improving and analyzing personal reading data.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "Data Analysis & Processing",
      "Browser Automation"
    ],
    "custom_label": "Reading Experience Enhancement",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 850,
    "server_name": "WeRead MCP Server",
    "rank_by_usage": 851,
    "usage_count": "5",
    "original_file": "../crawler/smithery/@freestylefly_mcp-server-weread.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@freestylefly/mcp-server-weread/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_bookshelf",
          "description": "Get the user's bookshelf information",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_notebooks",
          "description": "Get the list of books with notes",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_book_notes",
          "description": "Get all notes for a specific book",
          "input_schema": {
            "type": "object",
            "properties": {
              "bookId": {
                "type": "string",
                "description": "The ID of the book"
              }
            },
            "required": [
              "bookId"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_book_info",
          "description": "Get detailed information about a book",
          "input_schema": {
            "type": "object",
            "properties": {
              "bookId": {
                "type": "string",
                "description": "The ID of the book"
              }
            },
            "required": [
              "bookId"
            ]
          },
          "annotations": null
        },
        {
          "name": "search_notes",
          "description": "Search for notes containing a specific keyword",
          "input_schema": {
            "type": "object",
            "properties": {
              "keyword": {
                "type": "string",
                "description": "The keyword to search for"
              }
            },
            "required": [
              "keyword"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_recent_reads",
          "description": "Get the user's recent reading records",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        }
      ],
      "tool_count": 6,
      "tool_names": [
        "get_bookshelf",
        "get_notebooks",
        "get_book_notes",
        "get_book_info",
        "search_notes",
        "get_recent_reads"
      ]
    },
    "server_info_crawled": {
      "id": 850,
      "name": "WeRead MCP Server",
      "author": "@freestylefly/mcp-server-weread",
      "overview": "Bridge your WeChat reading data with AI for seamless access to notes and reading insights. Enhance your reading experience by extracting and analyzing your notes through intelligent conversations.",
      "repository_url": "https://github.com/freestylefly/mcp-server-weread",
      "homepage": "https://smithery.ai/server/@freestylefly/mcp-server-weread",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "5",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@freestylefly_mcp-server-weread.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "get_bookshelf",
          "description": "Get the user's bookshelf information",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_notebooks",
          "description": "Get the list of books with notes",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "get_book_notes",
          "description": "Get all notes for a specific book",
          "input_schema": {
            "type": "object",
            "properties": {
              "bookId": {
                "type": "string",
                "description": "The ID of the book"
              }
            },
            "required": [
              "bookId"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_book_info",
          "description": "Get detailed information about a book",
          "input_schema": {
            "type": "object",
            "properties": {
              "bookId": {
                "type": "string",
                "description": "The ID of the book"
              }
            },
            "required": [
              "bookId"
            ]
          },
          "annotations": null
        },
        {
          "name": "search_notes",
          "description": "Search for notes containing a specific keyword",
          "input_schema": {
            "type": "object",
            "properties": {
              "keyword": {
                "type": "string",
                "description": "The keyword to search for"
              }
            },
            "required": [
              "keyword"
            ]
          },
          "annotations": null
        },
        {
          "name": "get_recent_reads",
          "description": "Get the user's recent reading records",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@freestylefly/mcp-server-weread/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@freestylefly/mcp-server-weread/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0851.@freestylefly_mcp-server-weread_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 832
  }
}