{
  "labels": {
    "analysis": "The MCP Server enables AI coding assistants to interact with Figjam whiteboards by extracting structured content, analyzing board hierarchies, and targeting specific nodes. It provides real-time synchronization to maintain design consistency. The available tools focus on retrieving specific board content, node information, and comments, making it ideal for collaborative development workflows where design and coding need to stay aligned.",
    "reasoning": "The primary functionality of the server revolves around interfacing with Figjam whiteboards, which aligns with collaborative development workflows. The tools provided are specialized for extracting and analyzing design elements, which fits best under the \"Content Creation\" category. Secondary labels are added for broader applicability in collaborative workflows and real-time updates.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "Development Tools",
      "Web Search & Research"
    ],
    "custom_label": "Figjam Integration",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 751,
    "server_name": "Figjam MCP Server",
    "rank_by_usage": 752,
    "usage_count": "9",
    "original_file": "../crawler/smithery/@MinimumDaan_figjam-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@MinimumDaan/figjam-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 751,
      "name": "Figjam MCP Server",
      "author": "@MinimumDaan/figjam-mcp",
      "overview": "Enable your AI coding assistant to access and interact with Figjam whiteboard data seamlessly. Extract structured content, analyze board hierarchies, and target specific nodes to enhance collaborative development workflows. Stay synchronized with real-time updates to maintain design consistency effortlessly.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@MinimumDaan/figjam-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "9",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@MinimumDaan_figjam-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "getFigjamContent",
          "description": "Deploy Server Figjam MCP Server @MinimumDaan/figjam-mcp Try in Playground getFigjamContent",
          "parameters": [
            {
              "name": "Example",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "getFigjamNodes",
          "description": "Get specific nodes from a Figjam board. Example URL: https://www.figma.com/board/asdf1234/example-board?node-id=0-1 URL Structure: - Figjam URLs always start with 'https://www.figma.com/board/' - The file ID comes after '/board/' (in this case 'asdf1234') - Node IDs in the API use colons (:) not hyphens (-). Example: '173:240' not '173-240' Node Types: Common node types you might want to filter for include: - STICKY: Sticky notes - SHAPE: Basic shapes - TEXT: Text elements - CONNECTOR: Connection lines - FRAME: Frames/containers You can specify one or more node types to filter the results.",
          "parameters": []
        },
        {
          "name": "getFigjamComments",
          "description": "Get all comments from a Figjam board. Example URL: https://www.figma.com/board/asdf1234/example-board The URL format is: - Base: https://www.figma.com/board/ - File ID: The string after /board/ and before the next / or ? This tool will return: - All comments in the file - Comment metadata (author, timestamp, etc.) - Node information if the comment is attached to a specific node - Resolution status of comments Note: Comments are returned in chronological order, with the oldest comments first.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@MinimumDaan/figjam-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "figjamApiToken",
          "required": true,
          "description": "Your Figjam API access token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@MinimumDaan/figjam-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0752.@MinimumDaan_figjam-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 734
  }
}