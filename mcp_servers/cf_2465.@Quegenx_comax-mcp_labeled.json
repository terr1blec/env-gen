{
  "labels": {
    "analysis": "The MCP Server is designed to interact with the Comax ERP/payment system, focusing on payment link creation, order management, and customer information retrieval. It provides tools for generating payment links, updating order payments, retrieving order details and statuses, and managing order-related operations like setting pickup status or checking item existence. The core functionality revolves around payment processing and order lifecycle management within the Comax system.",
    "reasoning": "The primary label \"Financial Services\" was chosen because the server's core functionality is centered around payment processing and financial transactions within the Comax ERP system. \"E-commerce\" is added as a secondary label due to its role in order management, which is a key component of e-commerce platforms. No custom label is needed as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Financial Services",
    "secondary_labels": [
      "E-commerce"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2464,
    "server_name": "Comax Payment Link",
    "rank_by_usage": 2465,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Quegenx_comax-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Quegenx/comax-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2464,
      "name": "Comax Payment Link",
      "author": "@Quegenx/comax-mcp",
      "overview": "Create and manage payment links, orders, and customer information by integrating seamlessly with the Comax ERP/payment system. Simplify payment workflows and order management with ready-to-use tools for key Comax operations. Enhance your applications with robust, validated, and session-aware MCP server capabilities.",
      "repository_url": "https://github.com/Quegenx/comax-mcp",
      "homepage": "https://smithery.ai/server/@Quegenx/comax-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Quegenx_comax-mcp.json",
      "tools_count": 11,
      "tools": [
        {
          "name": "create_comax_payment_link",
          "description": "Deploy Server Comax Payment Link @Quegenx/comax-mcp Try in Playground create_comax_payment_link",
          "parameters": [
            {
              "name": "create_comax_payment_link",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_comax_order_payment",
          "description": "Updates a Comax order with payment confirmation after user completes payment. Use this after receiving payment result (logc) from returnPage.",
          "parameters": [
            {
              "name": "update_comax_order_payment",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_comax_customer_details",
          "description": "Fetches Comax business customer details by CustomerID. Returns all available fields, including price list, discount, and contact info.",
          "parameters": [
            {
              "name": "get_comax_customer_details",
              "required": false,
              "type": "string"
            },
            {
              "name": "customerId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_comax_order_status",
          "description": "Get order status by DocNumber or Reference. Returns status code, name, tracking, and more.",
          "parameters": [
            {
              "name": "get_comax_order_status",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_comax_order_details",
          "description": "Get order details by DocNumber, DocYear, and Reference. All are required. Returns all order fields, customer, errors, etc.",
          "parameters": [
            {
              "name": "get_comax_order_details",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_comax_order_pdf_link",
          "description": "Get order PDF link by DocNumber, Reference, or DocYear. Returns a direct PDF URL if available.",
          "parameters": [
            {
              "name": "get_comax_order_pdf_link",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "set_comax_order_status",
          "description": "Set order status by DocNumber, DocYear, Reference, Status, and StatusCode. Returns true if successful.",
          "parameters": [
            {
              "name": "set_comax_order_status",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_comax_orders_by_credit_card",
          "description": "Get all orders by credit card number. Returns array of {docNumber, docYear, reference}.",
          "parameters": [
            {
              "name": "get_comax_orders_by_credit_card",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_comax_orders_simple",
          "description": "Get orders by date range and optional filters. Returns a result string (usually XML or CSV).",
          "parameters": [
            {
              "name": "get_comax_orders_simple",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "chk_item_exists_in_orders",
          "description": "Check if an item exists in an order by itemID and orderNumber/orderYear/reference. Returns true if exists, false otherwise.",
          "parameters": [
            {
              "name": "chk_item_exists_in_orders",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "set_comax_order_self_pickup",
          "description": "Set order self-pickup by DocNumber, DocYear, or Reference. Returns true if successful.",
          "parameters": [
            {
              "name": "set_comax_order_self_pickup",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Quegenx/comax-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "TOKEN_LOGIN_NAME",
          "required": true,
          "description": "Comax token service login name"
        },
        {
          "name": "TOKEN_LOGIN_PASSWORD",
          "required": true,
          "description": "Comax token service password"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Quegenx/comax-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2465.@Quegenx_comax-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2103
  }
}