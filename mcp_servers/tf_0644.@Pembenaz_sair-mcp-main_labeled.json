{
  "labels": {
    "analysis": "The MCP Server is designed to act as a middleware layer between language models and external tools, enabling dynamic interaction through a standardized JSON-RPC interface. Its primary functionality is to facilitate integration between LLMs and custom tools (like the poem retrieval tool mentioned). The server enhances LLM capabilities by making external data and actions accessible in a structured manner.",
    "reasoning": "The primary label \"API Integration\" was chosen because the server's core function is to enable programmatic integration between LLMs and external tools. The secondary label \"Content Creation\" fits due to the presence of a poem retrieval tool, which is related to content access and generation. No custom label is needed as the predefined options cover the server's functionality well.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Content Creation"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 643,
    "server_name": "Sair MCP Server",
    "rank_by_usage": 644,
    "usage_count": "14",
    "original_file": "../crawler/smithery/@Pembenaz_sair-mcp-main.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Pembenaz/sair-mcp-main/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_poem_lines_tool",
          "description": "\n    Get lines from a poem with the given title.\n    ",
          "input_schema": {
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              }
            },
            "required": [
              "title"
            ],
            "title": "get_poem_lines_toolArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "get_poem_lines_tool"
      ]
    },
    "server_info_crawled": {
      "id": 643,
      "name": "Sair MCP Server",
      "author": "@Pembenaz/sair-mcp-main",
      "overview": "Provide a Python-based MCP server implementation that enables integration of LLMs with external tools and resources. Facilitate dynamic interaction with data and actions through a standardized JSON-RPC interface. Enhance LLM applications by exposing customizable tools, resources, and prompts.",
      "repository_url": "https://github.com/Pembenaz/sair-mcp-main",
      "homepage": "https://smithery.ai/server/@Pembenaz/sair-mcp-main",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "14",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Pembenaz_sair-mcp-main.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "get_poem_lines_tool",
          "description": "\n    Get lines from a poem with the given title.\n    ",
          "input_schema": {
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              }
            },
            "required": [
              "title"
            ],
            "title": "get_poem_lines_toolArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Pembenaz/sair-mcp-main/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Pembenaz/sair-mcp-main/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0644.@Pembenaz_sair-mcp-main_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 629
  }
}