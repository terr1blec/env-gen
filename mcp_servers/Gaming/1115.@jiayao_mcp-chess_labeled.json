{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate interactive chess gameplay and analysis against large language models. It provides tools for visualizing the chessboard, making moves, analyzing game positions, starting new games, and exploring PGN files. The core functionality revolves around chess-related gameplay, testing strategies, and reviewing chess positions.",
    "reasoning": "The primary label \"Gaming\" is chosen because the server's main functionality is centered around playing chess, which is a game. The secondary label \"Education\" is selected due to the tools that allow users to analyze positions and explore moves from PGN files, which can be educational. The custom label \"Chess Interaction\" is added to specifically describe the server's unique focus on chess gameplay and analysis.",
    "primary_label": "Gaming",
    "secondary_labels": [
      "Education"
    ],
    "custom_label": "Chess Interaction",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1114,
    "server_name": "Chess Server",
    "rank_by_usage": 1115,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@jiayao_mcp-chess.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@jiayao/mcp-chess/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_board_visualization",
          "description": "Provides the current state of the chessboard as an image.",
          "input_schema": {
            "properties": {},
            "title": "get_board_visualizationArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_turn",
          "description": "Indicates whose turn it is ('white' or 'black').",
          "input_schema": {
            "properties": {},
            "title": "get_turnArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_valid_moves",
          "description": "Lists all legal moves for the current player in UCI notation.",
          "input_schema": {
            "properties": {},
            "title": "get_valid_movesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "make_move",
          "description": "\n    Makes a move on the board using standard algebraic notation (SAN).\n    Args:\n        move_san: The player's move in algebraic notation (e.g., 'e4', 'Nf3', 'Bxe5').\n    Returns:\n        A dictionary containing the move in SAN format, the move in UCI format, the new board FEN,\n        whether the game is over, and the result if applicable.\n    ",
          "input_schema": {
            "properties": {
              "move_san": {
                "title": "Move San",
                "type": "string"
              }
            },
            "required": [
              "move_san"
            ],
            "title": "make_moveArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "new_game",
          "description": "\n    Starts a new game, resetting the board to the initial position.\n\n    Args:\n        user_plays_white: Whether the user will play as white. Defaults to True.\n    \n    Returns:\n        A confirmation message indicating the game has started and the user's color.\n    ",
          "input_schema": {
            "properties": {
              "user_plays_white": {
                "default": true,
                "title": "User Plays White",
                "type": "boolean"
              }
            },
            "title": "new_gameArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "find_position_in_pgn",
          "description": "\n    Finds the first board position in a PGN string that matches a given condition\n    (e.g., 'bishop on a3') and returns an image of that board.\n\n    Args:\n        pgn_string: The PGN string of the game.\n        condition: A string describing the condition, format: \"piece_type on square_name\"\n                   (e.g., \"bishop on a3\", \"knight on f6\", \"king on g1\").\n\n    Returns:\n        An Image dictionary containing the PNG data of the board state if found,\n        or a string with an error message.\n    ",
          "input_schema": {
            "properties": {
              "pgn_string": {
                "title": "Pgn String",
                "type": "string"
              },
              "condition": {
                "title": "Condition",
                "type": "string"
              }
            },
            "required": [
              "pgn_string",
              "condition"
            ],
            "title": "find_position_in_pgnArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 6,
      "tool_names": [
        "get_board_visualization",
        "get_turn",
        "get_valid_moves",
        "make_move",
        "new_game",
        "find_position_in_pgn"
      ]
    },
    "server_info_crawled": {
      "id": 1114,
      "name": "Chess Server",
      "author": "@jiayao/mcp-chess",
      "overview": "Play chess against any large language model with interactive game features. Visualize the board, make moves, and analyze positions directly through the server's tools. Start new games and explore positions from PGN files with ease.",
      "repository_url": "https://github.com/jiayao/mcp-chess",
      "homepage": "https://smithery.ai/server/@jiayao/mcp-chess",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@jiayao_mcp-chess.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "get_board_visualization",
          "description": "Provides the current state of the chessboard as an image.",
          "input_schema": {
            "properties": {},
            "title": "get_board_visualizationArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_turn",
          "description": "Indicates whose turn it is ('white' or 'black').",
          "input_schema": {
            "properties": {},
            "title": "get_turnArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_valid_moves",
          "description": "Lists all legal moves for the current player in UCI notation.",
          "input_schema": {
            "properties": {},
            "title": "get_valid_movesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "make_move",
          "description": "\n    Makes a move on the board using standard algebraic notation (SAN).\n    Args:\n        move_san: The player's move in algebraic notation (e.g., 'e4', 'Nf3', 'Bxe5').\n    Returns:\n        A dictionary containing the move in SAN format, the move in UCI format, the new board FEN,\n        whether the game is over, and the result if applicable.\n    ",
          "input_schema": {
            "properties": {
              "move_san": {
                "title": "Move San",
                "type": "string"
              }
            },
            "required": [
              "move_san"
            ],
            "title": "make_moveArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "new_game",
          "description": "\n    Starts a new game, resetting the board to the initial position.\n\n    Args:\n        user_plays_white: Whether the user will play as white. Defaults to True.\n    \n    Returns:\n        A confirmation message indicating the game has started and the user's color.\n    ",
          "input_schema": {
            "properties": {
              "user_plays_white": {
                "default": true,
                "title": "User Plays White",
                "type": "boolean"
              }
            },
            "title": "new_gameArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "find_position_in_pgn",
          "description": "\n    Finds the first board position in a PGN string that matches a given condition\n    (e.g., 'bishop on a3') and returns an image of that board.\n\n    Args:\n        pgn_string: The PGN string of the game.\n        condition: A string describing the condition, format: \"piece_type on square_name\"\n                   (e.g., \"bishop on a3\", \"knight on f6\", \"king on g1\").\n\n    Returns:\n        An Image dictionary containing the PNG data of the board state if found,\n        or a string with an error message.\n    ",
          "input_schema": {
            "properties": {
              "pgn_string": {
                "title": "Pgn String",
                "type": "string"
              },
              "condition": {
                "title": "Condition",
                "type": "string"
              }
            },
            "required": [
              "pgn_string",
              "condition"
            ],
            "title": "find_position_in_pgnArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@jiayao/mcp-chess/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@jiayao/mcp-chess/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1115.@jiayao_mcp-chess_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1092
  }
}