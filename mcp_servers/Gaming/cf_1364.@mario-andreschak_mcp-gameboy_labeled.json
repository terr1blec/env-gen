{
  "labels": {
    "analysis": "The MCP Server is a GameBoy emulator designed to allow LLMs to interact with classic GameBoy games. It provides tools to control the emulator's buttons, load ROMs, capture the screen, and wait for frames, enabling AI applications to engage with retro gaming environments in real-time. The server bridges the gap between AI systems and emulator-based interactions, facilitating tasks like game testing, bot playing, or even creative AI-generated gaming experiences.",
    "reasoning": "The primary functionality of the server is to enable emulator-based interactions, which fits best under the \"Gaming\" category. While it involves some browser-like controls (e.g., button presses), the core purpose is not browser automation but rather classic gaming interaction. The secondary labels \"Media Generation\" and \"API Integration\" are relevant because the server allows for real-time screen capture (media generation) and provides an API-like interface for controlling the emulator. A custom label is not necessary as the predefined categories suffice.",
    "primary_label": "Gaming",
    "secondary_labels": [
      "Content Creation",
      "Content Creation"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1363,
    "server_name": "GameBoy Emulator Server",
    "rank_by_usage": 1364,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@mario-andreschak_mcp-gameboy.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mario-andreschak/mcp-gameboy/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1363,
      "name": "GameBoy Emulator Server",
      "author": "@mario-andreschak/mcp-gameboy",
      "overview": "Enable LLMs to interact with a GameBoy emulator by providing controls, ROM loading, and screen capture tools. Control the emulator via standard input/output or server-sent events transports, with real-time screen feedback. Enhance your AI applications with classic gaming context and visual outputs.",
      "repository_url": "https://github.com/mario-andreschak/mcp-gameboy",
      "homepage": "https://smithery.ai/server/@mario-andreschak/mcp-gameboy",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mario-andreschak_mcp-gameboy.json",
      "tools_count": 13,
      "tools": [
        {
          "name": "press_up",
          "description": "Deploy Server GameBoy Emulator Server @mario-andreschak/mcp-gameboy Try in Playground",
          "parameters": [
            {
              "name": "press_up",
              "required": false,
              "type": "string"
            },
            {
              "name": "duration_frames",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "press_down",
          "description": "Press the DOWN button on the GameBoy",
          "parameters": [
            {
              "name": "press_down",
              "required": false,
              "type": "string"
            },
            {
              "name": "duration_frames",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "press_left",
          "description": "Press the LEFT button on the GameBoy",
          "parameters": [
            {
              "name": "press_left",
              "required": false,
              "type": "string"
            },
            {
              "name": "duration_frames",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "press_right",
          "description": "Press the RIGHT button on the GameBoy",
          "parameters": [
            {
              "name": "press_right",
              "required": false,
              "type": "string"
            },
            {
              "name": "duration_frames",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "press_a",
          "description": "Press the A button on the GameBoy",
          "parameters": [
            {
              "name": "press_a",
              "required": false,
              "type": "string"
            },
            {
              "name": "duration_frames",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "press_b",
          "description": "Press the B button on the GameBoy",
          "parameters": [
            {
              "name": "press_b",
              "required": false,
              "type": "string"
            },
            {
              "name": "duration_frames",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "press_start",
          "description": "Press the START button on the GameBoy",
          "parameters": [
            {
              "name": "press_start",
              "required": false,
              "type": "string"
            },
            {
              "name": "duration_frames",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "press_select",
          "description": "Press the SELECT button on the GameBoy",
          "parameters": [
            {
              "name": "press_select",
              "required": false,
              "type": "string"
            },
            {
              "name": "duration_frames",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "wait_frames",
          "description": "Wait for a specified number of frames",
          "parameters": [
            {
              "name": "wait_frames",
              "required": false,
              "type": "string"
            },
            {
              "name": "duration_frames",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "load_rom",
          "description": "Load a GameBoy ROM file",
          "parameters": [
            {
              "name": "load_rom",
              "required": false,
              "type": "string"
            },
            {
              "name": "romPath",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_screen",
          "description": "Get the current GameBoy screen (advances one frame)",
          "parameters": [
            {
              "name": "get_screen",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "is_rom_loaded",
          "description": "Check if a ROM is currently loaded in the emulator",
          "parameters": [
            {
              "name": "is_rom_loaded",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_roms",
          "description": "List all available GameBoy ROM files",
          "parameters": [
            {
              "name": "list_roms",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mario-andreschak/mcp-gameboy/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mario-andreschak/mcp-gameboy/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1364.@mario-andreschak_mcp-gameboy_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1283
  }
}