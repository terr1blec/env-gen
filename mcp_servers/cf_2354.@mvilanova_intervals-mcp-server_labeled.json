{
  "labels": {
    "analysis": "The Intervals.icu MCP Server is designed to interact with the Intervals.icu API, which is a platform primarily used for managing athletic activities, events, and wellness data. The server provides tools to retrieve detailed fitness-related data such as activities, events, wellness metrics, and interval-specific performance metrics. Its core functionality revolves around accessing and analyzing fitness and wellness data to enhance users' training experiences and provide real-time insights into their physical activities.",
    "reasoning": "The primary functionality of the server is directly tied to health and fitness, as it manages exercise activities, events, and wellness data. The predefined category \"Health & Fitness\" best captures this core purpose. The server also involves data analysis and processing of fitness metrics, which is why \"Data Analysis & Processing\" is selected as a secondary label. \"API Integration\" is added because the server is essentially a bridge to the Intervals.icu API.",
    "primary_label": "Health & Fitness",
    "secondary_labels": [
      "Data Analysis & Processing",
      "API Integration"
    ],
    "custom_label": "Fitness Data Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2353,
    "server_name": "Intervals.icu MCP Server",
    "rank_by_usage": 2354,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@mvilanova_intervals-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mvilanova/intervals-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2353,
      "name": "Intervals.icu MCP Server",
      "author": "@mvilanova/intervals-mcp-server",
      "overview": "Connect Claude with the Intervals.icu API to retrieve and manage your activities, events, and wellness data. Access your fitness insights seamlessly and enhance your training experience with real-time data retrieval and analysis.",
      "repository_url": "https://github.com/mvilanova/intervals-mcp-server",
      "homepage": "https://smithery.ai/server/@mvilanova/intervals-mcp-server",
      "remote_or_local": "Remote",
      "license": "GPL-3.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mvilanova_intervals-mcp-server.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "get_activities",
          "description": "Deploy Server Intervals.icu MCP Server Claim Server @mvilanova/intervals-mcp-server Try in Playground get_activities",
          "parameters": []
        },
        {
          "name": "get_activity_details",
          "description": "Get detailed information for a specific activity from Intervals.icu Args: activity_id: The Intervals.icu activity ID api_key: The Intervals.icu API key (optional, will use API_KEY from .env if not provided)",
          "parameters": []
        },
        {
          "name": "get_events",
          "description": "Get events for an athlete from Intervals.icu Args: athlete_id: The Intervals.icu athlete ID (optional, will use ATHLETE_ID from .env if not provided) api_key: The Intervals.icu API key (optional, will use API_KEY from .env if not provided) start_date: Start date in YYYY-MM-DD format (optional, defaults to today) end_date: End date in YYYY-MM-DD format (optional, defaults to 30 days from today)",
          "parameters": []
        },
        {
          "name": "get_event_by_id",
          "description": "Get detailed information for a specific event from Intervals.icu Args: event_id: The Intervals.icu event ID athlete_id: The Intervals.icu athlete ID (optional, will use ATHLETE_ID from .env if not provided) api_key: The Intervals.icu API key (optional, will use API_KEY from .env if not provided)",
          "parameters": []
        },
        {
          "name": "get_wellness_data",
          "description": "Get wellness data for an athlete from Intervals.icu Args: athlete_id: The Intervals.icu athlete ID (optional, will use ATHLETE_ID from .env if not provided) api_key: The Intervals.icu API key (optional, will use API_KEY from .env if not provided) start_date: Start date in YYYY-MM-DD format (optional, defaults to 30 days ago) end_date: End date in YYYY-MM-DD format (optional, defaults to today)",
          "parameters": []
        },
        {
          "name": "get_activity_intervals",
          "description": "Get interval data for a specific activity from Intervals.icu This endpoint returns detailed metrics for each interval in an activity, including power, heart rate, cadence, speed, and environmental data. It also includes grouped intervals if applicable. Args: activity_id: The Intervals.icu activity ID api_key: The Intervals.icu API key (optional, will use API_KEY from .env if not provided)",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mvilanova/intervals-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiKey",
          "required": true,
          "description": "Your Intervals.icu API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mvilanova/intervals-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2354.@mvilanova_intervals-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2022
  }
}