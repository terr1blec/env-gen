{
  "labels": {
    "analysis": "The MCP Server is designed to streamline the process of distributing Solana tokens to employees within a corporate HR setting. It enables role-based allocation, automated email notifications, and manages wallets, token creation, and gas fee estimation. The server supports CSV imports, wallet generation, liquidity addition, and compressed airdrops, catering specifically to token rewards distribution and corporate HR use cases.",
    "reasoning": "The primary functionality aligns with **Cryptocurrency & Blockchain** due to its focus on managing wallets, creating tokens, adding liquidity, and performing airdrops on the Solana blockchain. The tools for sending emails and managing employee data via CSV suggest integration with **Daily Productivity** features. The server also deals with financial aspects like token rewards and gas fees, which could be associated with **Financial Services**, though this is less central.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "Daily Productivity",
      "Financial Services"
    ],
    "custom_label": "Corporate Token Distribution",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2284,
    "server_name": "Crossmint HR Airdrop",
    "rank_by_usage": 2285,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@monostate_Employees-Airdrop-Rewards-MCP.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@monostate/Employees-Airdrop-Rewards-MCP/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2284,
      "name": "Crossmint HR Airdrop",
      "author": "@monostate/Employees-Airdrop-Rewards-MCP",
      "overview": "Enable corporate HR teams to efficiently distribute Solana tokens to employees with role-based allocation and automated email notifications. Manage wallets, create tokens, add liquidity, and perform compressed airdrops seamlessly. Simplify token rewards distribution with CSV imports and gas fee estimation.",
      "repository_url": "https://github.com/monostate/Employees-Airdrop-Rewards-MCP",
      "homepage": "https://smithery.ai/server/@monostate/Employees-Airdrop-Rewards-MCP",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@monostate_Employees-Airdrop-Rewards-MCP.json",
      "tools_count": 12,
      "tools": [
        {
          "name": "connect_wallet",
          "description": "Deploy Server Crossmint HR Airdrop Claim Server @monostate/Employees-Airdrop-Rewards-MCP Try in Playground connect_wallet",
          "parameters": [
            {
              "name": "rpcUrl",
              "required": false,
              "type": "string"
            },
            {
              "name": "privateKey",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "connect_crossmint_wallet",
          "description": "Connect a Crossmint wallet to the airdrop server",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "type": "string"
            },
            {
              "name": "apiKey",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "check_balance",
          "description": "Check the SOL balance of the connected wallet",
          "parameters": [
            {
              "name": "check_balance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_token",
          "description": "Create a new Solana token",
          "parameters": [
            {
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "name": "supply",
              "required": true,
              "type": "string"
            },
            {
              "name": "symbol",
              "required": true,
              "type": "string"
            },
            {
              "name": "decimals",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "add_liquidity",
          "description": "Add liquidity to the created token",
          "parameters": [
            {
              "name": "solAmount",
              "required": true,
              "type": "string"
            },
            {
              "name": "tokenAmount",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "generate_wallets",
          "description": "Generate custodial wallets for employees using Crossmint",
          "parameters": [
            {
              "name": "apiKey",
              "required": false,
              "type": "string"
            },
            {
              "name": "employees",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "upload_csv",
          "description": "Process employee data from a CSV file",
          "parameters": [
            {
              "name": "upload_csv",
              "required": false,
              "type": "string"
            },
            {
              "name": "filePath",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "calculate_amounts",
          "description": "Calculate token amounts for each employee",
          "parameters": [
            {
              "name": "roleAmounts",
              "required": false,
              "type": "string"
            },
            {
              "name": "uniformAmount",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "calculate_fees",
          "description": "Calculate gas fees for the airdrop",
          "parameters": [
            {
              "name": "calculate_fees",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "start_airdrop",
          "description": "Perform the token airdrop to employee wallets",
          "parameters": [
            {
              "name": "start_airdrop",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "send_emails",
          "description": "Send emails to employees with wallet access instructions",
          "parameters": [
            {
              "name": "send_emails",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_state",
          "description": "Get the current state of the airdrop process",
          "parameters": [
            {
              "name": "get_state",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@monostate/Employees-Airdrop-Rewards-MCP/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "resendApiKey",
          "required": true,
          "description": "Resend API key"
        },
        {
          "name": "crossmintApiKey",
          "required": true,
          "description": "Crossmint API key (sk_development_ or ck_development_)"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@monostate/Employees-Airdrop-Rewards-MCP/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2285.@monostate_Employees-Airdrop-Rewards-MCP_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1965
  }
}