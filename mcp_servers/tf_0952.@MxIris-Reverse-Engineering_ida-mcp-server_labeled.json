{
  "labels": {
    "analysis": "The MCP Server is designed to automate and enhance interactions with IDA (Interactive Disassembler) databases, which are commonly used for reverse engineering and binary analysis. It provides tools for retrieving function assembly and decompiled pseudocode, querying global variables, and modifying database elements such as renaming functions, variables, and adding comments. Additionally, it supports executing custom Python scripts within the IDA environment, enabling extensive automation and customization of reverse engineering workflows.",
    "reasoning": "The primary functionality revolves around database operations, specifically interacting with and manipulating IDA databases. This falls under the \"Database Operations\" category as it primarily deals with querying and modifying database entries. The secondary label \"Development Tools\" is chosen because the server aids in software development tasks such as code analysis and debugging, and it supports scripting. The custom label \"Reverse Engineering Tools\" is used to highlight the server's specialized use case in binary analysis and reverse engineering.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Development Tools"
    ],
    "custom_label": "Reverse Engineering Tools",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 951,
    "server_name": "IDA MCP Server",
    "rank_by_usage": 952,
    "usage_count": "3",
    "original_file": "../crawler/smithery/@MxIris-Reverse-Engineering_ida-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@MxIris-Reverse-Engineering/ida-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "ida_get_function_assembly_by_name",
          "description": "Get assembly code for a function by name",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              }
            },
            "required": [
              "function_name"
            ],
            "title": "GetFunctionAssemblyByName",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_function_assembly_by_address",
          "description": "Get assembly code for a function by address",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "GetFunctionAssemblyByAddress",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_function_decompiled_by_name",
          "description": "Get decompiled pseudocode for a function by name",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              }
            },
            "required": [
              "function_name"
            ],
            "title": "GetFunctionDecompiledByName",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_function_decompiled_by_address",
          "description": "Get decompiled pseudocode for a function by address",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "GetFunctionDecompiledByAddress",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_global_variable_by_name",
          "description": "Get information about a global variable by name",
          "input_schema": {
            "properties": {
              "variable_name": {
                "title": "Variable Name",
                "type": "string"
              }
            },
            "required": [
              "variable_name"
            ],
            "title": "GetGlobalVariableByName",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_global_variable_by_address",
          "description": "Get information about a global variable by address",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "GetGlobalVariableByAddress",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_current_function_assembly",
          "description": "Get assembly code for the function at the current cursor position",
          "input_schema": {
            "properties": {},
            "title": "GetCurrentFunctionAssembly",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_current_function_decompiled",
          "description": "Get decompiled pseudocode for the function at the current cursor position",
          "input_schema": {
            "properties": {},
            "title": "GetCurrentFunctionDecompiled",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_local_variable",
          "description": "Rename a local variable within a function in the IDA database",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              },
              "old_name": {
                "title": "Old Name",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "function_name",
              "old_name",
              "new_name"
            ],
            "title": "RenameLocalVariable",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_global_variable",
          "description": "Rename a global variable in the IDA database",
          "input_schema": {
            "properties": {
              "old_name": {
                "title": "Old Name",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "old_name",
              "new_name"
            ],
            "title": "RenameGlobalVariable",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_function",
          "description": "Rename a function in the IDA database",
          "input_schema": {
            "properties": {
              "old_name": {
                "title": "Old Name",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "old_name",
              "new_name"
            ],
            "title": "RenameFunction",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_multi_local_variables",
          "description": "Rename multiple local variables within a function at once in the IDA database",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              },
              "rename_pairs_old2new": {
                "items": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "title": "Rename Pairs Old2New",
                "type": "array"
              }
            },
            "required": [
              "function_name",
              "rename_pairs_old2new"
            ],
            "title": "RenameMultiLocalVariables",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_multi_global_variables",
          "description": "Rename multiple global variables at once in the IDA database",
          "input_schema": {
            "properties": {
              "rename_pairs_old2new": {
                "items": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "title": "Rename Pairs Old2New",
                "type": "array"
              }
            },
            "required": [
              "rename_pairs_old2new"
            ],
            "title": "RenameMultiGlobalVariables",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_multi_functions",
          "description": "Rename multiple functions at once in the IDA database",
          "input_schema": {
            "properties": {
              "rename_pairs_old2new": {
                "items": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "title": "Rename Pairs Old2New",
                "type": "array"
              }
            },
            "required": [
              "rename_pairs_old2new"
            ],
            "title": "RenameMultiFunctions",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_add_assembly_comment",
          "description": "Add a comment at a specific address in the assembly view of the IDA database",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "comment": {
                "title": "Comment",
                "type": "string"
              },
              "is_repeatable": {
                "default": false,
                "title": "Is Repeatable",
                "type": "boolean"
              }
            },
            "required": [
              "address",
              "comment"
            ],
            "title": "AddAssemblyComment",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_add_function_comment",
          "description": "Add a comment to a function in the IDA database",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              },
              "comment": {
                "title": "Comment",
                "type": "string"
              },
              "is_repeatable": {
                "default": false,
                "title": "Is Repeatable",
                "type": "boolean"
              }
            },
            "required": [
              "function_name",
              "comment"
            ],
            "title": "AddFunctionComment",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_add_pseudocode_comment",
          "description": "Add a comment to a specific address in the function's decompiled pseudocode",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              },
              "address": {
                "title": "Address",
                "type": "string"
              },
              "comment": {
                "title": "Comment",
                "type": "string"
              },
              "is_repeatable": {
                "default": false,
                "title": "Is Repeatable",
                "type": "boolean"
              }
            },
            "required": [
              "function_name",
              "address",
              "comment"
            ],
            "title": "AddPseudocodeComment",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_execute_script",
          "description": "Execute a Python script in IDA Pro and return its output. The script runs in IDA's context with access to all IDA API modules.",
          "input_schema": {
            "properties": {
              "script": {
                "title": "Script",
                "type": "string"
              }
            },
            "required": [
              "script"
            ],
            "title": "ExecuteScript",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_execute_script_from_file",
          "description": "Execute a Python script from a file path in IDA Pro and return its output. The file should be accessible from IDA's process.",
          "input_schema": {
            "properties": {
              "file_path": {
                "title": "File Path",
                "type": "string"
              }
            },
            "required": [
              "file_path"
            ],
            "title": "ExecuteScriptFromFile",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 19,
      "tool_names": [
        "ida_get_function_assembly_by_name",
        "ida_get_function_assembly_by_address",
        "ida_get_function_decompiled_by_name",
        "ida_get_function_decompiled_by_address",
        "ida_get_global_variable_by_name",
        "ida_get_global_variable_by_address",
        "ida_get_current_function_assembly",
        "ida_get_current_function_decompiled",
        "ida_rename_local_variable",
        "ida_rename_global_variable",
        "ida_rename_function",
        "ida_rename_multi_local_variables",
        "ida_rename_multi_global_variables",
        "ida_rename_multi_functions",
        "ida_add_assembly_comment",
        "ida_add_function_comment",
        "ida_add_pseudocode_comment",
        "ida_execute_script",
        "ida_execute_script_from_file"
      ]
    },
    "server_info_crawled": {
      "id": 951,
      "name": "IDA MCP Server",
      "author": "@MxIris-Reverse-Engineering/ida-mcp-server",
      "overview": "Interact with and automate IDA database operations using Large Language Models. Leverage powerful tools to read and search your IDA databases programmatically, enhancing your development workflow.",
      "repository_url": "https://github.com/MxIris-Reverse-Engineering/ida-mcp-server",
      "homepage": "https://smithery.ai/server/@MxIris-Reverse-Engineering/ida-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "3",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@MxIris-Reverse-Engineering_ida-mcp-server.json",
      "tools_count": 19,
      "tools": [
        {
          "name": "ida_get_function_assembly_by_name",
          "description": "Get assembly code for a function by name",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              }
            },
            "required": [
              "function_name"
            ],
            "title": "GetFunctionAssemblyByName",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_function_assembly_by_address",
          "description": "Get assembly code for a function by address",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "GetFunctionAssemblyByAddress",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_function_decompiled_by_name",
          "description": "Get decompiled pseudocode for a function by name",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              }
            },
            "required": [
              "function_name"
            ],
            "title": "GetFunctionDecompiledByName",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_function_decompiled_by_address",
          "description": "Get decompiled pseudocode for a function by address",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "GetFunctionDecompiledByAddress",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_global_variable_by_name",
          "description": "Get information about a global variable by name",
          "input_schema": {
            "properties": {
              "variable_name": {
                "title": "Variable Name",
                "type": "string"
              }
            },
            "required": [
              "variable_name"
            ],
            "title": "GetGlobalVariableByName",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_global_variable_by_address",
          "description": "Get information about a global variable by address",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "GetGlobalVariableByAddress",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_current_function_assembly",
          "description": "Get assembly code for the function at the current cursor position",
          "input_schema": {
            "properties": {},
            "title": "GetCurrentFunctionAssembly",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_get_current_function_decompiled",
          "description": "Get decompiled pseudocode for the function at the current cursor position",
          "input_schema": {
            "properties": {},
            "title": "GetCurrentFunctionDecompiled",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_local_variable",
          "description": "Rename a local variable within a function in the IDA database",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              },
              "old_name": {
                "title": "Old Name",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "function_name",
              "old_name",
              "new_name"
            ],
            "title": "RenameLocalVariable",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_global_variable",
          "description": "Rename a global variable in the IDA database",
          "input_schema": {
            "properties": {
              "old_name": {
                "title": "Old Name",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "old_name",
              "new_name"
            ],
            "title": "RenameGlobalVariable",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_function",
          "description": "Rename a function in the IDA database",
          "input_schema": {
            "properties": {
              "old_name": {
                "title": "Old Name",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "old_name",
              "new_name"
            ],
            "title": "RenameFunction",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_multi_local_variables",
          "description": "Rename multiple local variables within a function at once in the IDA database",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              },
              "rename_pairs_old2new": {
                "items": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "title": "Rename Pairs Old2New",
                "type": "array"
              }
            },
            "required": [
              "function_name",
              "rename_pairs_old2new"
            ],
            "title": "RenameMultiLocalVariables",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_multi_global_variables",
          "description": "Rename multiple global variables at once in the IDA database",
          "input_schema": {
            "properties": {
              "rename_pairs_old2new": {
                "items": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "title": "Rename Pairs Old2New",
                "type": "array"
              }
            },
            "required": [
              "rename_pairs_old2new"
            ],
            "title": "RenameMultiGlobalVariables",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_rename_multi_functions",
          "description": "Rename multiple functions at once in the IDA database",
          "input_schema": {
            "properties": {
              "rename_pairs_old2new": {
                "items": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "title": "Rename Pairs Old2New",
                "type": "array"
              }
            },
            "required": [
              "rename_pairs_old2new"
            ],
            "title": "RenameMultiFunctions",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_add_assembly_comment",
          "description": "Add a comment at a specific address in the assembly view of the IDA database",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "comment": {
                "title": "Comment",
                "type": "string"
              },
              "is_repeatable": {
                "default": false,
                "title": "Is Repeatable",
                "type": "boolean"
              }
            },
            "required": [
              "address",
              "comment"
            ],
            "title": "AddAssemblyComment",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_add_function_comment",
          "description": "Add a comment to a function in the IDA database",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              },
              "comment": {
                "title": "Comment",
                "type": "string"
              },
              "is_repeatable": {
                "default": false,
                "title": "Is Repeatable",
                "type": "boolean"
              }
            },
            "required": [
              "function_name",
              "comment"
            ],
            "title": "AddFunctionComment",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_add_pseudocode_comment",
          "description": "Add a comment to a specific address in the function's decompiled pseudocode",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              },
              "address": {
                "title": "Address",
                "type": "string"
              },
              "comment": {
                "title": "Comment",
                "type": "string"
              },
              "is_repeatable": {
                "default": false,
                "title": "Is Repeatable",
                "type": "boolean"
              }
            },
            "required": [
              "function_name",
              "address",
              "comment"
            ],
            "title": "AddPseudocodeComment",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_execute_script",
          "description": "Execute a Python script in IDA Pro and return its output. The script runs in IDA's context with access to all IDA API modules.",
          "input_schema": {
            "properties": {
              "script": {
                "title": "Script",
                "type": "string"
              }
            },
            "required": [
              "script"
            ],
            "title": "ExecuteScript",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "ida_execute_script_from_file",
          "description": "Execute a Python script from a file path in IDA Pro and return its output. The file should be accessible from IDA's process.",
          "input_schema": {
            "properties": {
              "file_path": {
                "title": "File Path",
                "type": "string"
              }
            },
            "required": [
              "file_path"
            ],
            "title": "ExecuteScriptFromFile",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@MxIris-Reverse-Engineering/ida-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@MxIris-Reverse-Engineering/ida-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0952.@MxIris-Reverse-Engineering_ida-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 930
  }
}