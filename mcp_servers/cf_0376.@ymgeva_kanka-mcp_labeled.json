{
  "labels": {
    "analysis": "The Kanka API Server is designed to manage worldbuilding projects through full CRUD operations on campaigns, characters, locations, posts, notes, and journals. It handles rich HTML content, privacy settings, and hierarchical organization of entities. The server integrates with the Kanka platform, which is geared toward role-playing game (RPG) and fictional world creation, enabling users to maintain complex narratives, character relationships, and location networks. Its functionality focuses on organization, creation, and management of creative assets within a structured campaign framework.",
    "reasoning": "The primary label \"Worldbuilding\" was chosen because the server's core functionality centers around managing and organizing elements of fictional worlds, which is the heart of Kanka's purpose. While some predefined categories like \"Database Operations\" and \"Content Creation\" are relevant, they don't fully capture the specific domain of RPG worldbuilding. The server allows for hierarchical entity management with relationships between characters, locations, and campaigns, which aligns closely with content creation for fantasy or narrative purposes.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "Database Operations",
      "Content Creation"
    ],
    "custom_label": "RPG Campaign Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 375,
    "server_name": "Kanka API Server",
    "rank_by_usage": 376,
    "usage_count": "70",
    "original_file": "../crawler/smithery/@ymgeva_kanka-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ymgeva/kanka-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 375,
      "name": "Kanka API Server",
      "author": "@ymgeva/kanka-mcp",
      "overview": "Manage your Kanka worldbuilding projects through AI assistants by listing, retrieving, creating, updating, and deleting campaigns, characters, locations, posts, notes, and journals. Seamlessly handle HTML content and privacy settings for your entities. Enhance your creative workflow by integrating Kanka API capabilities directly into your MCP environment.",
      "repository_url": "https://github.com/ymgeva/kanka-mcp",
      "homepage": "https://smithery.ai/server/@ymgeva/kanka-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "70",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ymgeva_kanka-mcp.json",
      "tools_count": 26,
      "tools": [
        {
          "name": "show_campaigns",
          "description": "Deploy Server Kanka API Server @ymgeva/kanka-mcp Try in Playground show_campaigns",
          "parameters": [
            {
              "name": "show_campaigns",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_characters",
          "description": "List all characters in a campaign.",
          "parameters": [
            {
              "name": "list_characters",
              "required": false,
              "type": "string"
            },
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_character",
          "description": "Get a single character by ID.",
          "parameters": [
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "character_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_character",
          "description": "Create a new character in a campaign. Fields: campaign_id: The ID of the campaign to add the character to name: The name of the character (required) title: The character's title (optional) type: The type or class of the character (optional) age: The age of the character (optional) sex: The sex/gender of the character (optional) pronouns: The pronouns of the character (optional) race_id: The ID of the race entity (optional) family_id: The ID of the family entity (optional) is_dead: Whether the character is dead (optional) image: URL or path to the character's image (optional) tags: Comma-separated list of tags (optional) entry: The character's entry/description (optional, must be HTML. If not HTML, it will be wrapped in <p> tags.) is_private: If the character is only visible to admin members (optional)",
          "parameters": []
        },
        {
          "name": "update_character",
          "description": "Update an existing character. Fields: campaign_id: The ID of the campaign character_id: The ID of the character to update name: The name of the character (optional) title: The character's title (optional) type: The type or class of the character (optional) age: The age of the character (optional) sex: The sex/gender of the character (optional) pronouns: The pronouns of the character (optional) race_id: The ID of the race entity (optional) family_id: The ID of the family entity (optional) is_dead: Whether the character is dead (optional) image: URL or path to the character's image (optional) tags: Comma-separated list of tags (optional) entry: The character's entry/description (optional, must be HTML. If not HTML, it will be wrapped in <p> tags.) is_private: If the character is only visible to admin members (optional)",
          "parameters": []
        },
        {
          "name": "delete_character",
          "description": "Delete a character by ID.",
          "parameters": [
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "character_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_locations",
          "description": "List all locations in a campaign.",
          "parameters": [
            {
              "name": "list_locations",
              "required": false,
              "type": "string"
            },
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_location",
          "description": "Get a single location by ID.",
          "parameters": [
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "location_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_location",
          "description": "Create a new location in a campaign. Fields: campaign_id: The ID of the campaign to add the location to name: The name of the location (required) entry: The location's entry/description (optional, must be HTML. If not HTML, it will be wrapped in <p> tags.) type: Type of location (optional) location_id: The parent location id (optional) tags: Array of tag ids (optional) is_destroyed: If the location is destroyed (optional) is_private: If the location is only visible to admin members (optional)",
          "parameters": []
        },
        {
          "name": "update_location",
          "description": "Update an existing location. Fields: campaign_id: The ID of the campaign location_id: The ID of the location to update name: The name of the location (optional) entry: The location's entry/description (optional, must be HTML. If not HTML, it will be wrapped in <p> tags.) type: Type of location (optional) new_parent_location_id: The parent location id (optional) tags: Array of tag ids (optional) is_destroyed: If the location is destroyed (optional) is_private: If the location is only visible to admin members (optional)",
          "parameters": []
        },
        {
          "name": "delete_location",
          "description": "Delete a location by ID.",
          "parameters": [
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "location_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_posts",
          "description": "List all posts for a given entity in a campaign. Note: entity_id is the ID of the entity, not the post object ID.",
          "parameters": [
            {
              "name": "list_posts",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_post",
          "description": "Get a single post by ID for a given entity. Note: entity_id is the ID of the entity, not the post object ID.",
          "parameters": [
            {
              "name": "get_post",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_post",
          "description": "Create a new post for an entity in a campaign. Fields: campaign_id: The ID of the campaign entity_id: The ID of the entity this post belongs to (Required) name: The name/title of the post (required) entry: The post content (optional, must be HTML. If not HTML, it will be wrapped in <p> tags.) position: The position/order of the post for ordering pinned posts (optional) visibility_id: The visibility: 1 for all, 2 self, 3 admin, 4 self-admin or 5 members (optional) is_pinned: Whether the post is pinned (optional) settings: Settings object. E.g. {'collapsed': 1} if pinned post should be collapsed on load (optional) tags: Array of tag ids (optional)",
          "parameters": []
        },
        {
          "name": "update_post",
          "description": "Update a post for an entity in a campaign. Fields: campaign_id: The ID of the campaign entity_id: The ID of the entity this post belongs to post_id: The ID of the post to update name: The name/title of the post (optional) entry: The post content (optional, must be HTML. If not HTML, it will be wrapped in <p> tags.) position: The position/order of the post for ordering pinned posts (optional) visibility_id: The visibility: 1 for all, 2 self, 3 admin, 4 self-admin or 5 members (optional) is_pinned: Whether the post is pinned (optional) settings: Settings object. E.g. {'collapsed': 1} if pinned post should be collapsed on load (optional) tags: Array of tag ids (optional)",
          "parameters": []
        },
        {
          "name": "delete_post",
          "description": "Delete a post by ID for a given entity. Note: entity_id is the ID of the entity, not the post object ID.",
          "parameters": [
            {
              "name": "delete_post",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_notes",
          "description": "List all notes in a campaign.",
          "parameters": [
            {
              "name": "list_notes",
              "required": false,
              "type": "string"
            },
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_note",
          "description": "Get a single note by ID.",
          "parameters": [
            {
              "name": "note_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_note",
          "description": "Create a new note in a campaign. Fields: campaign_id: The ID of the campaign to add the note to name: The name of the note (required) entry: The note's entry/description (optional, must be HTML. If not HTML, it will be wrapped in <p> tags.) type: The note's type (optional) note_id: The parent note id (optional) tags: Array of tag ids (optional) entity_image_uuid: Gallery image UUID for the entity image (optional) entity_header_uuid: Gallery image UUID for the entity header (limited to premium campaigns) (optional) is_private: If the note is only visible to admin members (optional)",
          "parameters": []
        },
        {
          "name": "update_note",
          "description": "Update an existing note. Fields: campaign_id: The ID of the campaign note_id: The ID of the note to update name: The name of the note (optional) entry: The note's entry/description (optional, must be HTML. If not HTML, it will be wrapped in <p> tags.) type: The note's type (optional) parent_note_id: The parent note id (optional) tags: Array of tag ids (optional) entity_image_uuid: Gallery image UUID for the entity image (optional) entity_header_uuid: Gallery image UUID for the entity header (limited to premium campaigns) (optional) is_private: If the note is only visible to admin members (optional)",
          "parameters": []
        },
        {
          "name": "delete_note",
          "description": "Description not available",
          "parameters": [
            {
              "name": "note_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_journals",
          "description": "List all journals in a campaign.",
          "parameters": [
            {
              "name": "list_journals",
              "required": false,
              "type": "string"
            },
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_journal",
          "description": "Get a single journal by ID.",
          "parameters": [
            {
              "name": "journal_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_journal",
          "description": "Create a new journal in a campaign. Fields: campaign_id: The ID of the campaign to add the journal to name: The name of the journal (required) entry: The journal's entry/description (optional, must be HTML. If not HTML, it will be wrapped in <p> tags.) type: The journal's type (optional) date: The date of the session (optional) journal_id: The ID of the journal's parent journal (optional) author_id: The \"author\" of the journal (entity id) (optional) tags: Array of tag ids (optional) entity_image_uuid: Gallery image UUID for the entity image (optional) entity_header_uuid: Gallery image UUID for the entity header (premium campaigns) (optional) is_private: If the journal is only visible to admin members (optional)",
          "parameters": []
        },
        {
          "name": "update_journal",
          "description": "Update an existing journal. Fields: campaign_id: The ID of the campaign journal_id: The ID of the journal to update name: The name of the journal (optional) entry: The journal's entry/description (optional, must be HTML. If not HTML, it will be wrapped in <p> tags.) type: The journal's type (optional) date: The date of the session (optional) parent_journal_id: The ID of the journal's parent journal (optional) author_id: The \"author\" of the journal (entity id) (optional) tags: Array of tag ids (optional) entity_image_uuid: Gallery image UUID for the entity image (optional) entity_header_uuid: Gallery image UUID for the entity header (premium campaigns) (optional) is_private: If the journal is only visible to admin members (optional)",
          "parameters": []
        },
        {
          "name": "delete_journal",
          "description": "Delete a journal by ID.",
          "parameters": [
            {
              "name": "journal_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "campaign_id",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@ymgeva/kanka-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "KANKA_API_KEY",
          "required": true,
          "description": "Your Kanka API key, obtained from your Kanka account settings"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@ymgeva/kanka-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0376.@ymgeva_kanka-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 370
  }
}