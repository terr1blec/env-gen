{
  "labels": {
    "analysis": "The MCP Server primarily functions as a utility to fetch and manage dog images from a public API. Its core purpose is to provide easy access to random dog pictures with filtering options by breed or category. The server also offers tools to retrieve breed information and check API status, making it useful for both entertainment and testing purposes. The tools are designed to simplify integration into applications that require dog images.",
    "reasoning": "The primary label \"Web Search & Research\" is chosen because the server's main function is to fetch and provide dog images and breed information from an external API, which aligns with data retrieval and research capabilities. The secondary label \"Content Creation\" is selected because the dog images can be used in various creative or media-related applications. There is no unique functionality that requires a custom label.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Content Creation"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2328,
    "server_name": "Dog Image Fetcher",
    "rank_by_usage": 2329,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Ilaydauygun_dog_mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Ilaydauygun/dog_mcp/mcp?config=eyJkb2dBcGlLZXkiOiAiIn0=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_random_dog_image",
          "description": "\n    Get random dog images with optional breed and category filtering.\n\n    Args:\n        breed_id: Optional breed ID to filter by specific breed\n        category_ids: Optional category IDs (comma-separated) to filter by\n        format: Response format (json or src)\n        limit: Number of images to return (1-10)\n\n    Returns:\n        JSON string with dog image data\n    ",
          "input_schema": {
            "properties": {
              "breed_id": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Breed Id"
              },
              "category_ids": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Category Ids"
              },
              "format": {
                "default": "json",
                "title": "Format",
                "type": "string"
              },
              "limit": {
                "default": 1,
                "title": "Limit",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_dog_breeds",
          "description": "\n    Get list of dog breeds with detailed information.\n\n    Args:\n        limit: Number of breeds to return (1-100)\n        page: Page number for pagination\n        search: Search term to filter breeds by name\n\n    Returns:\n        JSON string with breed information\n    ",
          "input_schema": {
            "properties": {
              "limit": {
                "default": 10,
                "title": "Limit",
                "type": "integer"
              },
              "page": {
                "default": 0,
                "title": "Page",
                "type": "integer"
              },
              "search": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Search"
              }
            },
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "search_dog_images",
          "description": "\n    Search for dog images by breed name.\n\n    Args:\n        breed_name: Name of the dog breed to search for\n        limit: Number of images to return (1-10)\n        has_breeds: Whether to include breed information\n\n    Returns:\n        JSON string with search results\n    ",
          "input_schema": {
            "properties": {
              "breed_name": {
                "title": "Breed Name",
                "type": "string"
              },
              "limit": {
                "default": 5,
                "title": "Limit",
                "type": "integer"
              },
              "has_breeds": {
                "default": true,
                "title": "Has Breeds",
                "type": "boolean"
              }
            },
            "required": [
              "breed_name"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "check_dog_api_status",
          "description": "\n    Check the status and configuration of The Dog API connection.\n\n    Returns:\n        JSON string with API status information\n    ",
          "input_schema": {
            "properties": {},
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "get_random_dog_image",
        "get_dog_breeds",
        "search_dog_images",
        "check_dog_api_status"
      ]
    },
    "server_info_crawled": {
      "id": 2328,
      "name": "Dog Image Fetcher",
      "author": "@Ilaydauygun/dog_mcp",
      "overview": "Provide random dog images by fetching from a public dog image API. Enhance your applications with easy access to dog pictures for entertainment or testing purposes. Simplify integration with a lightweight Python server that serves dog images on demand.",
      "repository_url": "https://github.com/Ilaydauygun/dog_mcp",
      "homepage": "https://smithery.ai/server/@Ilaydauygun/dog_mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Ilaydauygun_dog_mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "get_random_dog_image",
          "description": "\n    Get random dog images with optional breed and category filtering.\n\n    Args:\n        breed_id: Optional breed ID to filter by specific breed\n        category_ids: Optional category IDs (comma-separated) to filter by\n        format: Response format (json or src)\n        limit: Number of images to return (1-10)\n\n    Returns:\n        JSON string with dog image data\n    ",
          "input_schema": {
            "properties": {
              "breed_id": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Breed Id"
              },
              "category_ids": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Category Ids"
              },
              "format": {
                "default": "json",
                "title": "Format",
                "type": "string"
              },
              "limit": {
                "default": 1,
                "title": "Limit",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_dog_breeds",
          "description": "\n    Get list of dog breeds with detailed information.\n\n    Args:\n        limit: Number of breeds to return (1-100)\n        page: Page number for pagination\n        search: Search term to filter breeds by name\n\n    Returns:\n        JSON string with breed information\n    ",
          "input_schema": {
            "properties": {
              "limit": {
                "default": 10,
                "title": "Limit",
                "type": "integer"
              },
              "page": {
                "default": 0,
                "title": "Page",
                "type": "integer"
              },
              "search": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Search"
              }
            },
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "search_dog_images",
          "description": "\n    Search for dog images by breed name.\n\n    Args:\n        breed_name: Name of the dog breed to search for\n        limit: Number of images to return (1-10)\n        has_breeds: Whether to include breed information\n\n    Returns:\n        JSON string with search results\n    ",
          "input_schema": {
            "properties": {
              "breed_name": {
                "title": "Breed Name",
                "type": "string"
              },
              "limit": {
                "default": 5,
                "title": "Limit",
                "type": "integer"
              },
              "has_breeds": {
                "default": true,
                "title": "Has Breeds",
                "type": "boolean"
              }
            },
            "required": [
              "breed_name"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "check_dog_api_status",
          "description": "\n    Check the status and configuration of The Dog API connection.\n\n    Returns:\n        JSON string with API status information\n    ",
          "input_schema": {
            "properties": {},
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"dogApiKey\": \"\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@Ilaydauygun/dog_mcp/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"dogApiKey\": \"\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@Ilaydauygun/dog_mcp/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "2329.@Ilaydauygun_dog_mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 2004
  }
}