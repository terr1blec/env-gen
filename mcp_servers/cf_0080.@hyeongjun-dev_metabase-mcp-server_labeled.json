{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate interaction with Metabase, an analytics platform, through AI assistants. It provides tools to access dashboards, execute queries, and retrieve data in a conversational manner. The core functionality revolves around enabling structured data access, querying, and analytics operations through an AI interface, with robust error handling capabilities.",
    "reasoning": "The primary label \"Data Analysis & Processing\" is chosen because the server's main functionality is to execute queries, retrieve data, and manage analytics dashboards. The \"Database Operations\" label is a secondary fit due to its SQL execution capabilities and database listing tools. There is no need for a custom label as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "Database Operations"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 79,
    "server_name": "Metabase MCP",
    "rank_by_usage": 80,
    "usage_count": "982",
    "original_file": "../crawler/smithery/@hyeongjun-dev_metabase-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@hyeongjun-dev/metabase-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 79,
      "name": "Metabase MCP",
      "author": "@hyeongjun-dev/metabase-mcp-server",
      "overview": "Connect AI assistants to your Metabase analytics platform. Access dashboards, execute queries, and retrieve data seamlessly through conversational interfaces. Enhance your analytics experience with structured data access and robust error handling.",
      "repository_url": "https://github.com/hyeongjun-dev/metabase-mcp-server",
      "homepage": "https://smithery.ai/server/@hyeongjun-dev/metabase-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "982",
      "success_rate": "99.11%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@hyeongjun-dev_metabase-mcp-server.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "list_dashboards",
          "description": "Deploy Server Metabase MCP @hyeongjun-dev/metabase-mcp-server Try in Playground list_dashboards",
          "parameters": [
            {
              "name": "list_dashboards",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_cards",
          "description": "List all questions/cards in Metabase",
          "parameters": [
            {
              "name": "list_cards",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_databases",
          "description": "List all databases in Metabase",
          "parameters": [
            {
              "name": "list_databases",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "execute_card",
          "description": "Execute a Metabase question/card and get results",
          "parameters": [
            {
              "name": "card_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "parameters",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_dashboard_cards",
          "description": "Get all cards in a dashboard",
          "parameters": [
            {
              "name": "get_dashboard_cards",
              "required": false,
              "type": "string"
            },
            {
              "name": "dashboard_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "execute_query",
          "description": "Execute a SQL query against a Metabase database",
          "parameters": [
            {
              "name": "execute_query",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@hyeongjun-dev/metabase-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@hyeongjun-dev/metabase-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0080.@hyeongjun-dev_metabase-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 79
  }
}