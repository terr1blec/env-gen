{
  "labels": {
    "analysis": "The 高德地图 MCP Server provides comprehensive map-related services, focusing primarily on geolocation, route planning, distance measurement, and point-of-interest (POI) search. Its core functionality includes geocoding (address to coordinates), reverse geocoding, weather queries, IP location, and various transportation route planning (bicycling, walking, driving, public transit). The server supports both address-based and coordinate-based inputs, making it versatile for different use cases. It also offers detailed POI searches and distance measurements between locations, catering to a wide range of mapping and navigation needs.",
    "reasoning": "The primary label \"Travel & Maps\" was chosen because the server's core functionality revolves around map services, location-based features, and navigation. Secondary labels \"Web Search & Research\" and \"Daily Productivity\" were selected because the server enables research through POI searches and can assist with productivity through route planning and location services. No custom label is needed as the predefined categories sufficiently cover the server's functionality.",
    "primary_label": "Travel & Maps",
    "secondary_labels": [
      "Web Search & Research",
      "Daily Productivity"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 293,
    "server_name": "高德地图 MCP Server",
    "rank_by_usage": 294,
    "usage_count": "116",
    "original_file": "../crawler/smithery/@sseaan_amap-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@sseaan/amap-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 293,
      "name": "高德地图 MCP Server",
      "author": "@sseaan/amap-mcp-server",
      "overview": "Provide comprehensive map-related services including geocoding, location, weather, route planning, distance measurement, and POI search through a standardized MCP interface. Enable seamless integration of high-quality map data and location-based functionalities into your applications. Support multiple transport protocols for flexible deployment and real-time data access.",
      "repository_url": "https://github.com/sseaan/amap-mcp-server",
      "homepage": "https://smithery.ai/server/@sseaan/amap-mcp-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "116",
      "success_rate": "98.53%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@sseaan_amap-mcp-server.json",
      "tools_count": 16,
      "tools": [
        {
          "name": "maps_regeocode",
          "description": "Deploy Server 高德地图 MCP Server @sseaan/amap-mcp-server Try in Playground maps_regeocode",
          "parameters": [
            {
              "name": "maps_regeocode",
              "required": false,
              "type": "string"
            },
            {
              "name": "location",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "maps_geo",
          "description": "将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标",
          "parameters": [
            {
              "name": "city",
              "required": false,
              "type": "string"
            },
            {
              "name": "address",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "maps_ip_location",
          "description": "IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置",
          "parameters": [
            {
              "name": "maps_ip_location",
              "required": false,
              "type": "string"
            },
            {
              "name": "ip",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "maps_weather",
          "description": "根据城市名称或者标准adcode查询指定城市的天气",
          "parameters": [
            {
              "name": "maps_weather",
              "required": false,
              "type": "string"
            },
            {
              "name": "city",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "maps_bicycling_by_address",
          "description": "Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool. Args: origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\") destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\") origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy Returns: Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions. Considers bridges, one-way streets, and road closures. Supports routes up to 500km.",
          "parameters": []
        },
        {
          "name": "maps_bicycling_by_coordinates",
          "description": "Plans a bicycle route between two coordinates. Args: origin_coordinates (str): Starting point coordinates in the format \"longitude,latitude\" (e.g. \"116.434307,39.90909\") destination_coordinates (str): Ending point coordinates in the format \"longitude,latitude\" (e.g. \"116.434307,39.90909\") Returns: Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions. Considers bridges, one-way streets, and road closures. Supports routes up to 500km.",
          "parameters": []
        },
        {
          "name": "maps_direction_walking_by_address",
          "description": "Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool. Args: origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\") destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\") origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy Returns: Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions. Supports routes up to 100km.",
          "parameters": []
        },
        {
          "name": "maps_direction_walking_by_coordinates",
          "description": "步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据 Args: origin (str): 起点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\") destination (str): 终点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\") Returns: Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据",
          "parameters": []
        },
        {
          "name": "maps_direction_driving_by_address",
          "description": "Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool. Args: origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\") destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\") origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy Returns: Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions. Considers traffic conditions and road restrictions.",
          "parameters": []
        },
        {
          "name": "maps_direction_driving_by_coordinates",
          "description": "驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据 Args: origin (str): 起点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\") destination (str): 终点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\") Returns: Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据",
          "parameters": [
            {
              "name": "origin",
              "required": true,
              "type": "string"
            },
            {
              "name": "destination",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "maps_direction_transit_integrated_by_address",
          "description": "Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool. Args: origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\") destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\") origin_city (str): City name for the origin address (required for cross-city transit) destination_city (str): City name for the destination address (required for cross-city transit) Returns: Dict[str, Any]: Route information including distance, duration, and detailed transit instructions. Considers various public transit options including buses, subways, and trains.",
          "parameters": []
        },
        {
          "name": "maps_direction_transit_integrated_by_coordinates",
          "description": "根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市 Args: origin (str): 起点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\") destination (str): 终点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\") city (str): 起点城市名称 cityd (str): 终点城市名称 Returns: Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据",
          "parameters": [
            {
              "name": "city",
              "required": true,
              "type": "string"
            },
            {
              "name": "cityd",
              "required": true,
              "type": "string"
            },
            {
              "name": "origin",
              "required": true,
              "type": "string"
            },
            {
              "name": "destination",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "maps_distance",
          "description": "测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量",
          "parameters": [
            {
              "name": "type",
              "required": false,
              "type": "string"
            },
            {
              "name": "origins",
              "required": true,
              "type": "string"
            },
            {
              "name": "destination",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "maps_text_search",
          "description": "关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息",
          "parameters": [
            {
              "name": "city",
              "required": false,
              "type": "string"
            },
            {
              "name": "keywords",
              "required": true,
              "type": "string"
            },
            {
              "name": "citylimit",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "maps_around_search",
          "description": "周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI",
          "parameters": [
            {
              "name": "radius",
              "required": false,
              "type": "string"
            },
            {
              "name": "keywords",
              "required": false,
              "type": "string"
            },
            {
              "name": "location",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "maps_search_detail",
          "description": "查询关键词搜或者周边搜获取到的POI ID的详细信息",
          "parameters": [
            {
              "name": "maps_search_detail",
              "required": false,
              "type": "string"
            },
            {
              "name": "id",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@sseaan/amap-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiKey",
          "required": true,
          "description": "Your Amap Maps API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@sseaan/amap-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0294.@sseaan_amap-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 290
  }
}