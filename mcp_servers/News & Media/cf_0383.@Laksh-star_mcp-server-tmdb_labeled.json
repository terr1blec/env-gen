{
  "labels": {
    "analysis": "The TMDB Server primarily focuses on interacting with The Movie Database (TMDB) API to provide movie-related data and functionality. Its core purpose is to enable users to search for movies, get recommendations based on specific movies, and access trending movies. This aligns with functionalities typically associated with media and entertainment platforms.",
    "reasoning": "The primary label \"News & Media\" was chosen because the server's functionality revolves around access to movie information and trends, which is a subset of media content. The secondary label \"Content Creation\" is appropriate as the server facilitates content discovery and recommendations. No custom label is needed as the predefined labels sufficiently describe the server's functionality.",
    "primary_label": "News & Media",
    "secondary_labels": [
      "Content Creation"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 382,
    "server_name": "TMDB Server",
    "rank_by_usage": 383,
    "usage_count": "67",
    "original_file": "../crawler/smithery/@Laksh-star_mcp-server-tmdb.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Laksh-star/mcp-server-tmdb/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 382,
      "name": "TMDB Server",
      "author": "@Laksh-star/mcp-server-tmdb",
      "overview": "This server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.",
      "repository_url": "https://github.com/Laksh-star/mcp-server-tmdb",
      "homepage": "https://smithery.ai/server/@Laksh-star/mcp-server-tmdb",
      "remote_or_local": "Remote",
      "license": "ISC",
      "usage_count": "67",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Laksh-star_mcp-server-tmdb.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "search_movies",
          "description": "Deploy Server TMDB Server @Laksh-star/mcp-server-tmdb Try in Playground search_movies",
          "parameters": [
            {
              "name": "search_movies",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_recommendations",
          "description": "Get movie recommendations based on a movie ID",
          "parameters": [
            {
              "name": "get_recommendations",
              "required": false,
              "type": "string"
            },
            {
              "name": "movieId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_trending",
          "description": "Get trending movies for a time window",
          "parameters": [
            {
              "name": "get_trending",
              "required": false,
              "type": "string"
            },
            {
              "name": "timeWindow",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Laksh-star/mcp-server-tmdb/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "tmdbApiKey",
          "required": true,
          "description": "The TMDB API key from your TMDB account"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Laksh-star/mcp-server-tmdb/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0383.@Laksh-star_mcp-server-tmdb_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 377
  }
}