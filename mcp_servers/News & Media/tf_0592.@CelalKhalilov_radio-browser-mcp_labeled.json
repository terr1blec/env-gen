{
  "labels": {
    "analysis": "The MCP Server, Radio Browser, provides access to a global directory of internet radio stations with tools for searching stations by country code or name. It also offers statistics about the radio station database and available API servers. The core functionality revolves around discovering and retrieving radio station data, making it a specialist tool for media and streaming applications.",
    "reasoning": "The primary label \"News & Media\" was chosen because the server's main function is delivering access to radio stations, which fall under media streaming. The secondary label \"API Integration\" was selected due to the focus on server data retrieval and infrastructure. A custom label \"Radio Station Discovery\" was added to highlight this specific niche functionality.",
    "primary_label": "News & Media",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": "Radio Station Discovery",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 591,
    "server_name": "Radio Browser",
    "rank_by_usage": 592,
    "usage_count": "18",
    "original_file": "../crawler/smithery/@CelalKhalilov_radio-browser-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@CelalKhalilov/radio-browser-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "get_radio_stats",
          "description": "\n    Get Radio Browser statistics including total number of stations, countries, and other metrics.\n\n    Returns:\n        dict: Statistics about the Radio Browser database\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_radio_statsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_available_servers",
          "description": "\n    Get list of all available Radio Browser API servers.\n\n    Returns:\n        list: List of Radio Browser server URLs\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_available_serversArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "search_stations_by_country_code",
          "description": "\n    Search radio stations by country code.\n\n    Args:\n        country_code (str): Two-letter country code (e.g., 'US', 'DE', 'TR', 'GB', 'FR')\n\n    Returns:\n        list: List of radio stations in the specified country\n    ",
          "input_schema": {
            "properties": {
              "country_code": {
                "title": "Country Code",
                "type": "string"
              }
            },
            "required": [
              "country_code"
            ],
            "title": "search_stations_by_country_codeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "search_stations_by_station_name",
          "description": "\n    Search radio stations by name or partial name.\n\n    Args:\n        name (str): Name or partial name of the radio station to search for\n\n    Returns:\n        list: List of radio stations matching the search term\n    ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "search_stations_by_station_nameArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 4,
      "tool_names": [
        "get_radio_stats",
        "get_available_servers",
        "search_stations_by_country_code",
        "search_stations_by_station_name"
      ]
    },
    "server_info_crawled": {
      "id": 591,
      "name": "Radio Browser",
      "author": "@CelalKhalilov/radio-browser-mcp",
      "overview": "Provide access to a global directory of internet radio stations, enabling search and discovery by country code or station name. Retrieve comprehensive statistics about the radio station database and available API servers. Enhance your applications with real-time, reliable radio station data from around the world.",
      "repository_url": "https://github.com/CelalKhalilov/Radio-Browser-MCP",
      "homepage": "https://smithery.ai/server/@CelalKhalilov/radio-browser-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "18",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@CelalKhalilov_radio-browser-mcp.json",
      "tools_count": 4,
      "tools": [
        {
          "name": "get_radio_stats",
          "description": "\n    Get Radio Browser statistics including total number of stations, countries, and other metrics.\n\n    Returns:\n        dict: Statistics about the Radio Browser database\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_radio_statsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_available_servers",
          "description": "\n    Get list of all available Radio Browser API servers.\n\n    Returns:\n        list: List of Radio Browser server URLs\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_available_serversArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "search_stations_by_country_code",
          "description": "\n    Search radio stations by country code.\n\n    Args:\n        country_code (str): Two-letter country code (e.g., 'US', 'DE', 'TR', 'GB', 'FR')\n\n    Returns:\n        list: List of radio stations in the specified country\n    ",
          "input_schema": {
            "properties": {
              "country_code": {
                "title": "Country Code",
                "type": "string"
              }
            },
            "required": [
              "country_code"
            ],
            "title": "search_stations_by_country_codeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "search_stations_by_station_name",
          "description": "\n    Search radio stations by name or partial name.\n\n    Args:\n        name (str): Name or partial name of the radio station to search for\n\n    Returns:\n        list: List of radio stations matching the search term\n    ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "search_stations_by_station_nameArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@CelalKhalilov/radio-browser-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@CelalKhalilov/radio-browser-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0592.@CelalKhalilov_radio-browser-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 578
  }
}