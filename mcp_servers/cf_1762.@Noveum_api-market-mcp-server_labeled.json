{
  "labels": {
    "analysis": "The MCP Server provides access to 40+ APIs and AI models, enabling a wide range of functionalities including audio and image processing, geolocation services, search capabilities, domain checking, coding assistance, and more. The tools span various domains, with a strong focus on AI-driven tasks such as text-to-image generation, NSFW detection, face swapping, deblurring, and aging simulations. Additionally, it offers standard search functionalities (web, videos, images, news) along with routing and domain availability checks.",
    "reasoning": "The primary label is \"AI/ML Tools\" because the majority of the tools leverage AI models for tasks like image processing, audio transcription, and content generation. The secondary labels \"Web Search & Research\" and \"API Integration\" reflect the server's capabilities in search functionalities and its role as a gateway to multiple external APIs.",
    "primary_label": "AI/ML Tools",
    "secondary_labels": [
      "Web Search & Research",
      "API Integration"
    ],
    "custom_label": "Media Processing & Geolocation Services",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1761,
    "server_name": "API.Market MCP Server (40 tools)",
    "rank_by_usage": 1762,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Noveum_api-market-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Noveum/api-market-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "Connection timeout (20 seconds)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1761,
      "name": "API.Market MCP Server (40 tools)",
      "author": "@Noveum/api-market-mcp-server",
      "overview": "Connect with 40+ APIs and AI models from API.market through a single powerful MCP server.",
      "repository_url": "https://github.com/Noveum/api-market-mcp-server",
      "homepage": "https://smithery.ai/server/@Noveum/api-market-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Noveum_api-market-mcp-server.json",
      "tools_count": 34,
      "tools": [
        {
          "name": "distance_and_duration_bw_starts_and_stops",
          "description": "Deploy Server API.Market MCP Server (40 tools) @Noveum/api-market-mcp-server Try in Playground distance_and_duration_bw_starts_and_stops",
          "parameters": [
            {
              "name": "distance_and_duration_bw_starts_and_stops",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Get_audio_analysis_URL",
          "description": "This endpoint retrieves the URL of the transcription and analysis of the audio for the given request ID.",
          "parameters": [
            {
              "name": "Get_audio_analysis_URL",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Whisper_Audio_Processing",
          "description": "API for sentece wise transcription and analysis of audio, using AI models. Make sure to call get audio analysis URL with the request ID received from this API.",
          "parameters": [
            {
              "name": "condition_on_previous_text",
              "required": true,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            },
            {
              "name": "compression_ratio_threshold",
              "required": true,
              "type": "string"
            },
            {
              "name": "temperature_increment_on_fallback",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "Upload",
          "description": "Make a POST request to capix/faceswap/upload/",
          "parameters": [
            {
              "name": "Upload",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "ImageFaceSwap",
          "description": "Make a POST request to capix/faceswap/faceswap/v1/image",
          "parameters": [
            {
              "name": "swap_url",
              "required": true,
              "type": "string"
            },
            {
              "name": "target_url",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "VideoFaceSwap",
          "description": "Make a POST request to capix/faceswap/faceswap/v1/video",
          "parameters": [
            {
              "name": "swap_url",
              "required": true,
              "type": "string"
            },
            {
              "name": "target_url",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "Result",
          "description": "Make a POST request to capix/faceswap/result/",
          "parameters": [
            {
              "name": "Result",
              "required": false,
              "type": "string"
            },
            {
              "name": "request_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "Forward_Geocoding",
          "description": "Obtain location(geographic coordinates) for address.",
          "parameters": [
            {
              "name": "Forward_Geocoding",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Reverse_Geocoding",
          "description": "Obtain address for location.",
          "parameters": [
            {
              "name": "Obtain",
              "required": false,
              "type": "string"
            },
            {
              "name": "address",
              "required": false,
              "type": "string"
            },
            {
              "name": "for",
              "required": false,
              "type": "string"
            },
            {
              "name": "language",
              "required": false,
              "type": "string"
            },
            {
              "name": "location",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "DNS_Checker_API",
          "description": "Make a POST request to magicapi/dnschecker/dnschecker",
          "parameters": [
            {
              "name": "DNS_Checker_API",
              "required": false,
              "type": "string"
            },
            {
              "name": "domain",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "Get_coder_output_URL",
          "description": "This endpoint retrieves the URL of the coding assistant's response for a given request ID.",
          "parameters": [
            {
              "name": "Get_coder_output_URL",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Coding_Assistant",
          "description": "Coding Assistant. Make sure you call get coder output URL MCP tool to get the URL for the request id received from this API",
          "parameters": [
            {
              "name": "Coding_Assistant",
              "required": false,
              "type": "string"
            },
            {
              "name": "Coding",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "A_fast_nsfw_detection_API",
          "description": "Make a POST request to bridgeml/nsfw!detection/nsfw_detection",
          "parameters": [
            {
              "name": "A_fast_nsfw_detection_API",
              "required": false,
              "type": "string"
            },
            {
              "name": "image",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "getWhoisInfo",
          "description": "Make a GET request to magicapi/whois/whois/{domain}",
          "parameters": [
            {
              "name": "getWhoisInfo",
              "required": false,
              "type": "string"
            },
            {
              "name": "domain",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "Get_Unblurred_Image_URL",
          "description": "This endpoint retrieves the URL of the Unblurred image for a given request ID.",
          "parameters": [
            {
              "name": "Get_Unblurred_Image_URL",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Deblurer",
          "description": "API for image deblurring. Make sure you call get deblurred image URL, MCP tool to get the URL for the request id received from this API",
          "parameters": [
            {
              "name": "Deblurer",
              "required": false,
              "type": "string"
            },
            {
              "name": "API",
              "required": false,
              "type": "string"
            },
            {
              "name": "for",
              "required": false,
              "type": "string"
            },
            {
              "name": "image",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "text-to-image",
          "description": "Make a POST request to bridgeml/text!to!image/text_to_image",
          "parameters": []
        },
        {
          "name": "Get_ageing_gif_URL",
          "description": "This endpoint retrieves the URL of the ageing gif for a given request ID.",
          "parameters": [
            {
              "name": "Get_ageing_gif_URL",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Period_changer",
          "description": "API for generating ageing gif using AI models. Make sure to call get ageing gif URL, with the result id received from this API",
          "parameters": [
            {
              "name": "Period_changer",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Search_for_places_by_text",
          "description": "Search for places by text string",
          "parameters": [
            {
              "name": "text",
              "required": true,
              "type": "string"
            },
            {
              "name": "bounds",
              "required": false,
              "type": "string"
            },
            {
              "name": "language",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Search_for_nearby_places",
          "description": "Search for places around location within a specified radius.",
          "parameters": [
            {
              "name": "Search_for_nearby_places",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Get_hairstyled_image_URL",
          "description": "This endpoint retrieves the URL of the simulated hairstyle image for a given request ID.",
          "parameters": [
            {
              "name": "Get_hairstyled_image_URL",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Hair_style_simulator",
          "description": "API for simulating different hair styles using AI models. Make sure to call get hairstyled image after with the request id received from this API.",
          "parameters": [
            {
              "name": "Hair_style_simulator",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "BridgeML_API",
          "description": "Make a POST request to bridgeml/codellama/bridgeml/codellama",
          "parameters": [
            {
              "name": "BridgeML_API",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Search_Videos",
          "description": "Retrieve video search results based on query parameters",
          "parameters": [
            {
              "name": "Search_Videos",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Search_Web",
          "description": "Retrieve web search results based on query parameters",
          "parameters": [
            {
              "name": "Search_Web",
              "required": false,
              "type": "string"
            },
            {
              "name": "q",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "Search_Images",
          "description": "Retrieve image search results based on query parameters",
          "parameters": [
            {
              "name": "Search_Images",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Search_News",
          "description": "Retrieve news search results based on query parameters",
          "parameters": [
            {
              "name": "Search_News",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Search_Suggestions",
          "description": "Retrieve search suggestions based on query parameters",
          "parameters": [
            {
              "name": "q",
              "required": true,
              "type": "string"
            },
            {
              "name": "count",
              "required": false,
              "type": "string"
            },
            {
              "name": "country",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Spellcheck_Search",
          "description": "Retrieve spellcheck suggestions based on query parameters",
          "parameters": [
            {
              "name": "q",
              "required": true,
              "type": "string"
            },
            {
              "name": "country",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Check_domain_availability",
          "description": "Submit a domain name to check its availability.",
          "parameters": [
            {
              "name": "domain_name",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "best_route_for_multiple_stops",
          "description": "Finding optimal route to visit several locations.",
          "parameters": [
            {
              "name": "best_route_for_multiple_stops",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "best_route_bw_start_and_stop",
          "description": "Finding optimal route from a origin to a destination, passing through multiple waypoints(optional).",
          "parameters": [
            {
              "name": "best_route_bw_start_and_stop",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "Extract_information_from_a_URL",
          "description": "Make a POST request to pipfeed/parse/extract",
          "parameters": [
            {
              "name": "Extract_information_from_a_URL",
              "required": false,
              "type": "string"
            },
            {
              "name": "url",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Noveum/api-market-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "x-magicapi-key",
          "required": true,
          "description": "The API key for the api.market website"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Noveum/api-market-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1762.@Noveum_api-market-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1578
  }
}