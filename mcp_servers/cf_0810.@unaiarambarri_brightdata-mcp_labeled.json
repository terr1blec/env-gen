{
  "labels": {
    "analysis": "The MCP Server \"Bright Data\" is designed to enable web data extraction and automation, with a focus on bypassing bot detection, geo-restrictions, and CAPTCHAs. The tools provided allow for:\n    - Web scraping of various website types (e.g., Amazon, LinkedIn, Instagram, Facebook, etc.)\n    - Browser navigation with automation capabilities (clicking, typing, waiting for elements, etc.)\n    - Access to structured real-time web data through cached or direct scraping methods\n    - Support for major platforms like e-commerce (Amazon), social media (Instagram, LinkedIn), and real estate (Zillow)\n    The core functionality revolves around accessing and processing web data for AI or application enhancement.",
    "reasoning": "The primary label is chosen as \"Web Scraping & Data Extraction\" (custom label) due to the server's focus on scraping and navigating web pages with advanced capabilities. \"Browser Automation\" is a secondary label because of the tools for navigating and interacting with web pages programmatically. The server doesn't fit neatly into predefined categories like \"Database Operations\" or \"API Integration,\" though it does interact with web APIs indirectly. The unique functionality of bypassing bot detection and accessing structured web data justifies a custom primary label.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Browser Automation",
      "Web Search & Research"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 809,
    "server_name": "Bright Data",
    "rank_by_usage": 810,
    "usage_count": "7",
    "original_file": "../crawler/smithery/@unaiarambarri_brightdata-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@unaiarambarri/brightdata-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 809,
      "name": "Bright Data",
      "author": "@unaiarambarri/brightdata-mcp",
      "overview": "Enable AI agents to access and extract real-time web data seamlessly. Bypass geo-restrictions and bot detection to retrieve up-to-date information from websites. Enhance your applications with powerful web navigation and browser automation capabilities.",
      "repository_url": "https://github.com/unaiarambarri/brightdata-mcp",
      "homepage": "https://smithery.ai/server/@unaiarambarri/brightdata-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "7",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@unaiarambarri_brightdata-mcp.json",
      "tools_count": 30,
      "tools": [
        {
          "name": "search_engine",
          "description": "Deploy Server Bright Data @unaiarambarri/brightdata-mcp Try in Playground search_engine",
          "parameters": [
            {
              "name": "search_engine",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "scrape_as_markdown",
          "description": "Scrape a single webpage URL with advanced options for content extraction and get back the results in MarkDown language. This tool can unlock any webpage even if it uses bot detection or CAPTCHA.",
          "parameters": [
            {
              "name": "scrape_as_markdown",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "scrape_as_html",
          "description": "Scrape a single webpage URL with advanced options for content extraction and get back the results in HTML. This tool can unlock any webpage even if it uses bot detection or CAPTCHA.",
          "parameters": [
            {
              "name": "scrape_as_html",
              "required": false,
              "type": "string"
            },
            {
              "name": "url",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "session_stats",
          "description": "Tell the user about the tool usage during this session",
          "parameters": [
            {
              "name": "session_stats",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "web_data_amazon_product",
          "description": "Quickly read structured amazon product data. Requires a valid product URL with /dp/ in it. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": [
            {
              "name": "url",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "web_data_amazon_product_reviews",
          "description": "Quickly read structured amazon product review data. Requires a valid product URL with /dp/ in it. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_linkedin_person_profile",
          "description": "Quickly read structured linkedin people profile data. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": [
            {
              "name": "web_data_linkedin_person_profile",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "web_data_linkedin_company_profile",
          "description": "Quickly read structured linkedin company profile data This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": [
            {
              "name": "web_data_linkedin_company_profile",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "web_data_zoominfo_company_profile",
          "description": "Quickly read structured ZoomInfo company profile data. Requires a valid ZoomInfo company URL. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_instagram_profiles",
          "description": "Quickly read structured Instagram profile data. Requires a valid Instagram URL. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_instagram_posts",
          "description": "Quickly read structured Instagram post data. Requires a valid Instagram URL. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_instagram_reels",
          "description": "Quickly read structured Instagram reel data. Requires a valid Instagram URL. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_instagram_comments",
          "description": "Quickly read structured Instagram comments data. Requires a valid Instagram URL. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_facebook_posts",
          "description": "Quickly read structured Facebook post data. Requires a valid Facebook post URL. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_facebook_marketplace_listings",
          "description": "Quickly read structured Facebook marketplace listing data. Requires a valid Facebook marketplace listing URL. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_facebook_company_reviews",
          "description": "Quickly read structured Facebook company reviews data. Requires a valid Facebook company URL and number of reviews. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_x_posts",
          "description": "Quickly read structured X post data. Requires a valid X post URL. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_zillow_properties_listing",
          "description": "Quickly read structured zillow properties listing data. Requires a valid zillow properties listing URL. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_booking_hotel_listings",
          "description": "Quickly read structured booking hotel listings data. Requires a valid booking hotel listing URL. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "web_data_youtube_videos",
          "description": "Quickly read structured YouTube videos data. Requires a valid YouTube video URL. This can be a cache lookup, so it can be more reliable than scraping",
          "parameters": []
        },
        {
          "name": "scraping_browser_navigate",
          "description": "Navigate a scraping browser session to a new URL",
          "parameters": [
            {
              "name": "scraping_browser_navigate",
              "required": false,
              "type": "string"
            },
            {
              "name": "url",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "scraping_browser_go_back",
          "description": "Go back to the previous page",
          "parameters": [
            {
              "name": "scraping_browser_go_back",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "scraping_browser_go_forward",
          "description": "Go forward to the next page",
          "parameters": [
            {
              "name": "scraping_browser_go_forward",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "scraping_browser_links",
          "description": "Get all links on the current page, text and selectors It's strongly recommended that you call the links tool to check that your click target is valid",
          "parameters": [
            {
              "name": "scraping_browser_links",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "scraping_browser_click",
          "description": "Click on an element. Avoid calling this unless you know the element selector (you can use other tools to find those)",
          "parameters": [
            {
              "name": "scraping_browser_click",
              "required": false,
              "type": "string"
            },
            {
              "name": "Click",
              "required": false,
              "type": "string"
            },
            {
              "name": "on",
              "required": false,
              "type": "string"
            },
            {
              "name": "an",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "scraping_browser_type",
          "description": "Type text into an element",
          "parameters": [
            {
              "name": "text",
              "required": true,
              "type": "string"
            },
            {
              "name": "submit",
              "required": false,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            },
            {
              "name": "selector",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "scraping_browser_wait_for",
          "description": "Wait for an element to be visible on the page",
          "parameters": [
            {
              "name": "timeout",
              "required": false,
              "type": "string"
            },
            {
              "name": "selector",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "scraping_browser_screenshot",
          "description": "Take a screenshot of the current page",
          "parameters": [
            {
              "name": "full_page",
              "required": false,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "scraping_browser_get_text",
          "description": "Get the text content of the current page",
          "parameters": [
            {
              "name": "scraping_browser_get_text",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "scraping_browser_get_html",
          "description": "Get the HTML content of the current page. Avoid using the full_page option unless it is important to see things like script tags since this can be large",
          "parameters": [
            {
              "name": "scraping_browser_get_html",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@unaiarambarri/brightdata-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "apiToken",
          "required": true,
          "description": "Bright Data API token, available in your Bright Data account settings"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@unaiarambarri/brightdata-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0810.@unaiarambarri_brightdata-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 791
  }
}