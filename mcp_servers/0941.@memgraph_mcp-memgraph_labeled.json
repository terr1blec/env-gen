{
  "labels": {
    "analysis": "The MCP Server described enables integration between Memgraph graph database and large language models (LLMs), allowing for AI-driven graph data exploration and querying through Cypher queries. The primary functionality involves running queries against Memgraph, which suggests database operations with a focus on graph data structures and AI-enhanced querying capabilities.",
    "reasoning": "The primary database operations functionality is clearly indicated by the use of Cypher queries against Memgraph. The AI/ML tools label is also relevant due to the integration with large language models for enhanced querying. The custom label \"Graph Database Integration\" is added to specifically highlight the unique combination of graph database operations with AI.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": "Graph Database Integration",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 940,
    "server_name": "Memgraph MCP Server",
    "rank_by_usage": 941,
    "usage_count": "3",
    "original_file": "../crawler/smithery/@memgraph_mcp-memgraph.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@memgraph/mcp-memgraph/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "run_query",
          "description": "Run a query against Memgraph",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "title": "run_queryArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "run_query"
      ]
    },
    "server_info_crawled": {
      "id": 940,
      "name": "Memgraph MCP Server",
      "author": "@memgraph/mcp-memgraph",
      "overview": "Connect Memgraph graph database with large language models to run Cypher queries and retrieve schema information seamlessly. Enable interactive AI-driven graph data exploration and querying through an easy-to-use MCP server. Enhance your AI workflows by integrating Memgraph's powerful graph capabilities with modern LLMs.",
      "repository_url": "https://github.com/memgraph/mcp-memgraph",
      "homepage": "https://smithery.ai/server/@memgraph/mcp-memgraph",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "3",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@memgraph_mcp-memgraph.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "run_query",
          "description": "Run a query against Memgraph",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "title": "run_queryArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@memgraph/mcp-memgraph/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@memgraph/mcp-memgraph/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0941.@memgraph_mcp-memgraph_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 920
  }
}