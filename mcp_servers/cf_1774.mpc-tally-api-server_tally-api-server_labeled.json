{
  "labels": {
    "analysis": "The MCP Server, \"Tally API Server,\" provides tools specifically designed for interacting with DAO (Decentralized Autonomous Organization) governance data. Its core functionality revolves around accessing detailed information about DAOs, delegates, proposals, and voting activities within the blockchain governance ecosystem. The tools available focus on data retrieval, analysis, and security assessment related to blockchain-based governance, making it a specialized server for blockchain and DAO governance operations.",
    "reasoning": "The primary label is \"Cryptocurrency & Blockchain\" because the server's tools are directly related to blockchain governance and DAO operations, which are core to the cryptocurrency ecosystem. The secondary labels \"Database Operations\" and \"Data Analysis & Processing\" are chosen because the tools involve querying data (DAO, delegate, and proposal information) and analyzing voting patterns, delegations, and proposal timelines. A custom label is added to describe the server's specialized focus within the broader blockchain category.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "Database Operations",
      "Data Analysis & Processing"
    ],
    "custom_label": "DAO Governance",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1773,
    "server_name": "Tally API Server",
    "rank_by_usage": 1774,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/mpc-tally-api-server_tally-api-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/mpc-tally-api-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1773,
      "name": "Tally API Server",
      "author": "mpc-tally-api-server",
      "overview": "Access DAO governance data from Tally API.",
      "repository_url": "https://github.com/crazyrabbitLTC/mpc-tally-api-server",
      "homepage": "https://smithery.ai/server/mpc-tally-api-server",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/mpc-tally-api-server_tally-api-server.json",
      "tools_count": 19,
      "tools": [
        {
          "name": "list-daos",
          "description": "Deploy Server Tally API Server Claim Server mpc-tally-api-server Try in Playground",
          "parameters": [
            {
              "name": "limit",
              "required": false,
              "type": "string"
            },
            {
              "name": "sortBy",
              "required": false,
              "type": "string"
            },
            {
              "name": "afterCursor",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-dao",
          "description": "Get detailed information about a specific DAO",
          "parameters": [
            {
              "name": "slug",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "list-delegates",
          "description": "List delegates for a specific organization with their metadata",
          "parameters": []
        },
        {
          "name": "get-delegators",
          "description": "Get list of delegators for a specific address",
          "parameters": []
        },
        {
          "name": "list-proposals",
          "description": "List proposals for a specific DAO or organization using its slug",
          "parameters": [
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            },
            {
              "name": "includeArchived",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-proposal",
          "description": "Get detailed information about a specific proposal. You must provide either the Tally ID (globally unique) or both onchainId and governorId (unique within a governor).",
          "parameters": []
        },
        {
          "name": "get-address-votes",
          "description": "Get votes cast by an address for a specific organization",
          "parameters": []
        },
        {
          "name": "get-address-created-proposals",
          "description": "Get proposals created by an address for a specific organization",
          "parameters": []
        },
        {
          "name": "get-address-daos-proposals",
          "description": "Returns proposals from DAOs where a given address has participated (voted, proposed, etc.)",
          "parameters": []
        },
        {
          "name": "get-address-received-delegations",
          "description": "Returns delegations received by an address",
          "parameters": []
        },
        {
          "name": "get-delegate-statement",
          "description": "Get a delegate's statement for a specific governor or organization",
          "parameters": []
        },
        {
          "name": "get-address-governances",
          "description": "Returns the list of governances (DAOs) an address has delegated to",
          "parameters": []
        },
        {
          "name": "get-proposal-timeline",
          "description": "Get the timeline of events for a specific proposal",
          "parameters": [
            {
              "name": "proposalId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-proposal-voters",
          "description": "Get a list of all voters who have voted on a specific proposal",
          "parameters": []
        },
        {
          "name": "get-address-metadata",
          "description": "Get metadata information about a specific Ethereum address",
          "parameters": [
            {
              "name": "address",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get-proposal-security-analysis",
          "description": "Get security analysis for a specific proposal, including threat analysis and simulations",
          "parameters": []
        },
        {
          "name": "get-proposal-votes-cast",
          "description": "Get vote statistics and formatted vote counts for a specific proposal",
          "parameters": []
        },
        {
          "name": "get-proposal-votes-cast-list",
          "description": "Get a list of votes cast for a specific proposal, including formatted vote amounts",
          "parameters": []
        },
        {
          "name": "get-governance-proposals-stats",
          "description": "Get statistics about passed and failed proposals for a specific DAO",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/mpc-tally-api-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "tallyApiKey",
          "required": true,
          "description": "The API key to access Tally API"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/mpc-tally-api-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1774.mpc-tally-api-server_tally-api-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1587
  }
}