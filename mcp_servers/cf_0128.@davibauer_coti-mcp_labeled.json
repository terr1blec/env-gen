{
  "labels": {
    "analysis": "The MCP Server for COTI Blockchain primarily focuses on blockchain interaction, allowing users to manage COTI accounts, create and manage both private ERC20 tokens and ERC721 NFTs, perform native COTI token transactions, and interact with smart contracts. It provides tools for encryption/decryption, signing/verifying messages, transferring assets, and querying blockchain data. The server's functionality is heavily centered around blockchain operations, particularly the COTI ecosystem.",
    "reasoning": "The primary label of \"Cryptocurrency & Blockchain\" is chosen because the server's core functionality revolves around interacting with the COTI blockchain, managing accounts, tokens, and NFTs, and performing blockchain transactions. The secondary labels of \"Security & Authentication\" and \"API Integration\" are included because the server provides tools for message signing/verification and contract interactions, which are closely related to security and API operations. No custom label is needed as the predefined categories sufficiently cover the server's functionality.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "Security & Authentication",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 127,
    "server_name": "COTI Blockchain MCP Server",
    "rank_by_usage": 128,
    "usage_count": "479",
    "original_file": "../crawler/smithery/@davibauer_coti-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@davibauer/coti-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 127,
      "name": "COTI Blockchain MCP Server",
      "author": "@davibauer/coti-mcp",
      "overview": "This tool lets you play with the COTI blockchain right from your AI assistant.",
      "repository_url": "https://github.com/davibauer/coti-mcp",
      "homepage": "https://smithery.ai/server/@davibauer/coti-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "479",
      "success_rate": "99.70%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@davibauer_coti-mcp.json",
      "tools_count": 35,
      "tools": [
        {
          "name": "change_default_account",
          "description": "Deploy Server COTI Blockchain MCP Server @davibauer/coti-mcp Try in Playground change_default_account",
          "parameters": [
            {
              "name": "change_default_account",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_account",
          "description": "Create a new COTI account with a randomly generated private key and AES key. Returns the new account address, private key, and AES key.",
          "parameters": [
            {
              "name": "create_account",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "decrypt_value",
          "description": "Decrypt a value using the COTI AES key. Requires a ciphertext as input. Returns the decrypted value.",
          "parameters": [
            {
              "name": "decrypt_value",
              "required": false,
              "type": "string"
            },
            {
              "name": "ciphertext",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "encrypt_value",
          "description": "Encrypt a value using the COTI AES key. This is used for encrypting values to be sent to another address. Requires a value, contract address, and function selector as input. Returns the signature.",
          "parameters": [
            {
              "name": "encrypt_value",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "export_accounts",
          "description": "Backup all available COTI accounts and export them as a JSON string for future import. Returns a JSON string that can be copied and used for importing later.",
          "parameters": [
            {
              "name": "export_accounts",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "generate_aes_key",
          "description": "Generate a new AES key for the current account. Returns the AES key.",
          "parameters": [
            {
              "name": "generate_aes_key",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "import_accounts",
          "description": "Import COTI accounts from a JSON backup string previously created with the export_accounts tool.",
          "parameters": [
            {
              "name": "import_accounts",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_accounts",
          "description": "List all available COTI accounts configured in the environment. Returns the account addresses, current default account, and masked versions of the private and AES keys.",
          "parameters": [
            {
              "name": "list_accounts",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "sign_message",
          "description": "Sign a message using the COTI private key. This creates a cryptographic signature that proves the message was signed by the owner of the private key. Requires a message to sign as input. Returns the signature.",
          "parameters": [
            {
              "name": "sign_message",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "verify_signature",
          "description": "Verify a message signature and recover the address that signed it. This is used to determine who signed a specific message. Requires the original message and the signature as input. Returns the address that created the signature.",
          "parameters": [
            {
              "name": "verify_signature",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "approve_erc20_spender",
          "description": "Approve another address to spend tokens on behalf of the owner. This is used for allowing another address (like a contract) to transfer your tokens. Requires token contract address, spender address, and amount as input. Returns the transaction hash upon successful approval.",
          "parameters": [
            {
              "name": "approve_erc20_spender",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "deploy_private_erc20_contract",
          "description": "Deploy a new standard private ERC20 token contract on the COTI blockchain. This creates a new private token with the specified name, symbol, and decimals. Returns the deployed contract address upon successful deployment.",
          "parameters": [
            {
              "name": "deploy_private_erc20_contract",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_erc20_allowance",
          "description": "Check how many tokens a spender is allowed to use. This is used for checking the current allowance a spender has for an owner's tokens. Requires token contract address, owner address, and spender address as input. Returns the allowance amount.",
          "parameters": [
            {
              "name": "get_erc20_allowance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_private_erc20_balance",
          "description": "Get the balance of a private ERC20 token on the COTI blockchain. This is used for checking the current balance of a private token for a COTI account. Requires a COTI account address and token contract address as input. Returns the decrypted token balance.",
          "parameters": [
            {
              "name": "get_private_erc20_balance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_private_erc20_decimals",
          "description": "Get the number of decimals for a private ERC20 token on the COTI blockchain. This is used for checking the number of decimals in this token. Requires token contract address as input. Returns the number of decimals in this contract.",
          "parameters": [
            {
              "name": "get_private_erc20_decimals",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_private_erc20_total_supply",
          "description": "Get the total supply of tokens for a private ERC20 token on the COTI blockchain. This is used for checking how many tokens have been minted in this token. Requires token contract address as input. Returns the total number of tokens in this contract.",
          "parameters": [
            {
              "name": "get_private_erc20_total_supply",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "mint_private_erc20_token",
          "description": "Mint additional private ERC20 tokens on the COTI blockchain. This adds new tokens to the specified recipient address. Returns the transaction hash upon successful minting.",
          "parameters": [
            {
              "name": "mint_private_erc20_token",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "transfer_private_erc20",
          "description": "Transfer private ERC20 tokens on the COTI blockchain. This is used for sending private tokens from your wallet to another address. Requires token contract address, recipient address, and amount as input. Returns the transaction hash upon successful transfer.",
          "parameters": [
            {
              "name": "transfer_private_erc20",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "approve_private_erc721",
          "description": "Approve an address to transfer a specific private ERC721 NFT token on the COTI blockchain. This allows the approved address to transfer the specified NFT on behalf of the owner. Requires token contract address, token ID, and spender address as input. Returns the transaction hash upon successful approval.",
          "parameters": [
            {
              "name": "approve_private_erc721",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "deploy_private_erc721_contract",
          "description": "Deploy a new standard private ERC721 NFT contract on the COTI blockchain. This creates a new private NFT collection with the specified name and symbol. Returns the deployed contract address upon successful deployment.",
          "parameters": [
            {
              "name": "deploy_private_erc721_contract",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_private_erc721_approved",
          "description": "Get the approved address for a private ERC721 NFT token on the COTI blockchain. This is used for checking which address is currently approved to transfer a specific NFT. Requires token contract address and token ID as input. Returns the address that is approved to transfer the specified NFT.",
          "parameters": [
            {
              "name": "get_private_erc721_approved",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_private_erc721_balance",
          "description": "Get the balance of a private ERC721 NFT collection on the COTI blockchain. This is used for checking how many NFTs an address owns in a collection. Requires token contract address and account address as input. Returns the number of NFTs owned by the specified address.",
          "parameters": [
            {
              "name": "get_private_erc721_balance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_private_erc721_is_approved_for_all",
          "description": "Check if an operator is approved to transfer all private ERC721 NFT tokens on the COTI blockchain. This is used for checking if an operator has been granted approval to manage all NFTs owned by an address. Requires token contract address, owner address, and operator address as input. Returns whether the operator is approved for all NFTs.",
          "parameters": [
            {
              "name": "get_private_erc721_is_approved_for_all",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_private_erc721_token_owner",
          "description": "Get the owner address of a private ERC721 NFT token on the COTI blockchain. This is used for checking who currently owns a specific NFT. Requires token contract address and token ID as input. Returns the owner's address of the specified NFT.",
          "parameters": [
            {
              "name": "get_private_erc721_token_owner",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_private_erc721_token_uri",
          "description": "Get the tokenURI for a private ERC721 NFT token on the COTI blockchain. This is used for retrieving the metadata URI of a private NFT. Requires token contract address and token ID as input. Returns the decrypted tokenURI.",
          "parameters": [
            {
              "name": "get_private_erc721_token_uri",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_private_erc721_total_supply",
          "description": "Get the total supply of tokens for a private ERC721 NFT collection on the COTI blockchain. This is used for checking how many NFTs have been minted in a collection. Requires token contract address as input. Returns the total number of tokens in the collection.",
          "parameters": [
            {
              "name": "get_private_erc721_total_supply",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "mint_private_erc721_token",
          "description": "Mint a new private ERC721 NFT token on the COTI blockchain. This creates a new NFT in the specified collection with the provided token URI. Returns the transaction hash and token ID upon successful minting.",
          "parameters": [
            {
              "name": "mint_private_erc721_token",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "set_private_erc721_approval_for_all",
          "description": "Approve or revoke an operator to transfer all private ERC721 NFT tokens on the COTI blockchain. This allows the operator to transfer any NFT owned by the caller in this collection. Requires token contract address, operator address, and approval status as input. Returns the transaction hash upon successful approval setting.",
          "parameters": [
            {
              "name": "set_private_erc721_approval_for_all",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "transfer_private_erc721",
          "description": "Transfer a private ERC721 NFT token on the COTI blockchain. This is used for sending a private NFT from your wallet to another address. Requires token contract address, recipient address, and token ID as input. Returns the transaction hash upon successful transfer.",
          "parameters": [
            {
              "name": "transfer_private_erc721",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_native_balance",
          "description": "Get the native COTI token balance of a COTI blockchain account. This is used for checking the current balance of a COTI account. Requires a COTI account address as input. Returns the account balance in COTI tokens.",
          "parameters": [
            {
              "name": "get_native_balance",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "transfer_native",
          "description": "Transfer native COTI tokens to another wallet. This is used for sending COTI tokens from your wallet to another address. Requires recipient address and amount in Wei as input. Returns the transaction hash upon successful transfer.",
          "parameters": [
            {
              "name": "transfer_native",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "call_contract_function",
          "description": "Call a read-only function on any smart contract on the COTI blockchain. This allows retrieving data from any contract by specifying the contract address, function name, and parameters. Returns the function result in a human-readable format.",
          "parameters": [
            {
              "name": "call_contract_function",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "decode_event_data",
          "description": "Decode event data from a transaction log based on the event signature. This helps interpret the raw data in transaction logs by matching the event signature to known event types and decoding the parameters. Requires event signature, topics, and data from a transaction log.",
          "parameters": [
            {
              "name": "decode_event_data",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_transaction_logs",
          "description": "Get the logs from a transaction on the COTI blockchain. This is used for retrieving event logs emitted during transaction execution. Requires a transaction hash as input. Returns detailed information about the transaction logs including event names, topics, and data.",
          "parameters": [
            {
              "name": "get_transaction_logs",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_transaction_status",
          "description": "Get the status of a transaction on the COTI blockchain. This is used for checking if a transaction has been confirmed, pending, or failed. Requires a transaction hash as input. Returns detailed information about the transaction status.",
          "parameters": [
            {
              "name": "get_transaction_status",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@davibauer/coti-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "cotiMcpAesKey",
          "required": true,
          "description": "COTI MCP AES key for encrypting values."
        },
        {
          "name": "cotiMcpPublicKey",
          "required": true,
          "description": "COTI MCP public key that corresponds to the private key."
        },
        {
          "name": "cotiMcpPrivateKey",
          "required": true,
          "description": "COTI MCP private key for signing transactions."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@davibauer/coti-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0128.@davibauer_coti-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 125
  }
}