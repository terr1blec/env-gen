{
  "labels": {
    "analysis": "The MCP Server serves as a versatile platform for integrating and managing multiple language models in a unified environment. Its primary functionality revolves around enhancing conversational AI through dynamic model selection. The available tools primarily focus on code-related tasks like code review, debugging, analysis, and collaboration, with additional capabilities for version control and pre-commit validation. This indicates the server is heavily oriented towards software development, code quality, and AI-assisted programming.",
    "reasoning": "The primary label \"Development Tools\" is chosen because the bulk of the tools (codereview, debug, analyze, precommit, testgen, refactor, tracer) are specifically aimed at software development workflows. The secondary labels \"AI/ML Tools\" and \"Database Operations\" (for the multiple model integration and unified protocol) are relevant as they support the overall functionality of managing and invoking different AI models, which is a key feature of this server.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "AI/ML Tools",
      "Database Operations"
    ],
    "custom_label": "Unified AI Model Management",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 952,
    "server_name": "Multiple Model MCP Server",
    "rank_by_usage": 953,
    "usage_count": "3",
    "original_file": "../crawler/smithery/@samihalawa_multiple-model-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@samihalawa/multiple-model-mcp/mcp?config=eyJsb2dMZXZlbCI6ICJJTkZPIiwgInJlZGlzVXJsIjogInJlZGlzOi8vbG9jYWxob3N0OjYzNzkvMCIsICJkZWZhdWx0TW9kZWwiOiAiYXV0byIsICJ3b3Jrc3BhY2VSb290IjogIn4iLCAiY3VzdG9tTW9kZWxOYW1lIjogImxsYW1hMy4yIiwgImRlZmF1bHRUaGlua2luZ01vZGUiOiAiaGlnaCIsICJtYXhDb252ZXJzYXRpb25UdXJucyI6IDIwLCAiY29udmVyc2F0aW9uVGltZW91dEhvdXJzIjogM30=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "Connection timeout (20 seconds)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 952,
      "name": "Multiple Model MCP Server",
      "author": "@samihalawa/multiple-model-mcp",
      "overview": "Enable seamless integration of multiple language models within a single MCP server environment. Facilitate dynamic selection and usage of different models to enhance conversational AI capabilities. Simplify managing and invoking various LLMs through a unified protocol interface.",
      "repository_url": "https://github.com/samihalawa/multiple-model-mcp",
      "homepage": "https://smithery.ai/server/@samihalawa/multiple-model-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "3",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@samihalawa_multiple-model-mcp.json",
      "tools_count": 10,
      "tools": [
        {
          "name": "thinkdeep",
          "description": "Deploy Server Multiple Model MCP Server @samihalawa/multiple-model-mcp Try in Playground",
          "parameters": [
            {
              "name": "thinkdeep",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "codereview",
          "description": "COMPREHENSIVE CODE REVIEW - Professional-grade code review and quality analysis including security, performance, maintainability, best practices, and detailed improvement suggestions. Analyzes multiple files, dependencies, architecture patterns.",
          "parameters": [
            {
              "name": "codereview",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "debug",
          "description": "DEBUG & ROOT CAUSE ANALYSIS - Systematic debugging assistance for identifying root causes of errors, exceptions, unexpected behavior, and performance issues.",
          "parameters": [
            {
              "name": "thinking_mode",
              "required": false,
              "type": "string"
            },
            {
              "name": "use_websearch",
              "required": false,
              "type": "string"
            },
            {
              "name": "True",
              "required": false,
              "type": "string"
            },
            {
              "name": "False",
              "required": false,
              "type": "string"
            },
            {
              "name": "continuation_id",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "analyze",
          "description": "GENERAL CODE ANALYSIS - Analyze and understand code, files, or technical content. Perfect for: explaining how code works, summarizing functionality, identifying patterns, understanding unfamiliar codebases.",
          "parameters": [
            {
              "name": "analyze",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "chat",
          "description": "GENERAL CHAT & COLLABORATIVE THINKING - Use the AI model as your thinking partner! Perfect for: bouncing ideas, getting second opinions, collaborative brainstorming, validating approaches, exploring alternatives, explanations, comparisons.",
          "parameters": [
            {
              "name": "chat",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "precommit",
          "description": "PRE-COMMIT VALIDATION - Validate git changes before committing. Reviews staged changes for code quality, standards compliance, and potential issues.",
          "parameters": [
            {
              "name": "precommit",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "testgen",
          "description": "COMPREHENSIVE TEST GENERATION - Generate thorough test suites with edge cases, boundary conditions, error scenarios, and comprehensive coverage.",
          "parameters": [
            {
              "name": "testgen",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "refactor",
          "description": "INTELLIGENT CODE REFACTORING - Get precise refactoring suggestions with exact line references, code smell detection, and improvement recommendations.",
          "parameters": [
            {
              "name": "refactor",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "tracer",
          "description": "STATIC CALL PATH ANALYSIS - Analyze code execution paths, control flow, and predict call sequences without running the code.",
          "parameters": [
            {
              "name": "tracer",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "version",
          "description": "VERSION & CONFIGURATION - Get server version, configuration details, and list of available tools. Useful for debugging and understanding capabilities.",
          "parameters": [
            {
              "name": "version",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"logLevel\": \"INFO\",\n  \"redisUrl\": \"redis://localhost:6379/0\",\n  \"defaultModel\": \"auto\",\n  \"workspaceRoot\": \"~\",\n  \"customModelName\": \"llama3.2\",\n  \"defaultThinkingMode\": \"high\",\n  \"maxConversationTurns\": 20,\n  \"conversationTimeoutHours\": 3\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@samihalawa/multiple-model-mcp/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"logLevel\": \"INFO\",\n  \"redisUrl\": \"redis://localhost:6379/0\",\n  \"defaultModel\": \"auto\",\n  \"workspaceRoot\": \"~\",\n  \"customModelName\": \"llama3.2\",\n  \"defaultThinkingMode\": \"high\",\n  \"maxConversationTurns\": 20,\n  \"conversationTimeoutHours\": 3\n}",
      "python_sdk_url": "https://server.smithery.ai/@samihalawa/multiple-model-mcp/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "cf_0953.@samihalawa_multiple-model-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 931
  }
}