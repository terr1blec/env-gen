{
  "labels": {
    "analysis": "The Rhombus MCP Server is a comprehensive security management platform that integrates physical security devices (cameras, sensors, access control) with AI-driven analytics. It provides tools for real-time monitoring, device management, and policy-based alerting. The core functionality revolves around security operations, surveillance, and physical access control, with strong emphasis on actionable intelligence and cybersecurity principles.",
    "reasoning": "The primary label \"Security & Surveillance\" was chosen because the server's core functionality is centered around physical security and monitoring. Secondary labels \"AI/ML Tools\" and \"IoT Management\" were selected due to the AI-powered analytics and IoT device integration capabilities. A custom label was added to highlight the specialized nature of the security platform.",
    "primary_label": "Security & Authentication",
    "secondary_labels": [
      "AI/ML Tools"
    ],
    "custom_label": "Physical Security Operations",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2167,
    "server_name": "Rhombus MCP Server",
    "rank_by_usage": 2168,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@RhombusSystems_rhombus-node-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@RhombusSystems/rhombus-node-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2167,
      "name": "Rhombus MCP Server",
      "author": "@RhombusSystems/rhombus-node-mcp",
      "overview": "üîç About Rhombus Rhombus is the #1 rated commercial security system, built to protect and designed to adapt! We deliver enterprise-grade physical security with a cybersecurity focus, combining:\n\nüí° Smart Cameras - Innovative dome, fisheye, bullet, and multisensor security cameras üö™ Access Control - Secure door controllers, readers, and intercoms with mobile, card, and fob access üì° IoT Sensors - Advanced audio, environmental, motion, entry, and multipurpose panic sensors üîí Alarm Monitoring - TMA 5-diamond certified live agent verification and dispatch Our platform is powered by actionable AI insights that help you respond faster with real-time detections, all while being rooted in strong cybersecurity principles.\n\nüß™ Join Our Beta Test! We're thrilled to be part of the AI Generation! Help us shape the future of AI-powered security by testing our MCP server implementation and providing valuable feedback.\n\nüëâhttps://rhmbs.link/beta_test üëà\n\nYour insights will directly influence our development roadmap and help us create the most powerful AI security tools on the market!",
      "repository_url": "https://github.com/RhombusSystems/rhombus-node-mcp",
      "homepage": "https://smithery.ai/server/@RhombusSystems/rhombus-node-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@RhombusSystems_rhombus-node-mcp.json",
      "tools_count": 11,
      "tools": [
        {
          "name": "clips-tool",
          "description": "Deploy Server Rhombus MCP Server @RhombusSystems/rhombus-node-mcp Try in Playground",
          "parameters": []
        },
        {
          "name": "create-tool",
          "description": "Tool for creating many entity types such as video walls.",
          "parameters": []
        },
        {
          "name": "camera-tool",
          "description": "This tool can perform some action pertaining to the video stream of a camera. There are three types of requests that can be passed into \"requestType\": - image - get-settings - update-settings What follows is a description of the behavior of this tool given the requestType If the requestType is \"image\": This tool captures and returns a real-time snapshot from a designated security camera. The image reflects the current scene in the camera's field of view and serves as a contextual input source for downstream tasks such as object recognition, anomaly detection, incident investigation, or situational assessment. When invoked, the tool provides the following: ‚Ä¢ Visual Scene Capture: A high-resolution image of what the camera is actively observing, including people, vehicles, license plates, and any detectable objects. ‚Ä¢ Enriched Data Potential: The image can be paired with AI models or downstream analytics to extract insights such as: ‚Ä¢ Number and type of objects in frame (e.g., humans, cars, packages) ‚Ä¢ Unusual behaviors (e.g., loitering, unauthorized access) ‚Ä¢ Environmental conditions (e.g., lighting, obstruction, cleanliness) Use Cases: ‚Ä¢ Verify what triggered a motion alert or analytic rule. ‚Ä¢ Provide visual context for access events or alarms. ‚Ä¢ Support live incident triage or retrospective investigations. ‚Ä¢ Feed contextual imagery to agents making security or operational decisions. Invocation Notes: To use this tool correctly, the agent should provide the specific camera identifier or location name. If possible, include the intent (e.g., \"verify unauthorized access\", \"identify vehicle\", \"check for obstructions\") to enhance downstream processing or summarization. If the requestType is \"get-settings\": THIS TOOL UPDATES AND SETS DATA. This tool retrieves the current configuration for a specified camera or associated device (e.g., sensor, access controller). The returned JSON object can include detailed camera settings (e.g., resolution, bitrate) and various device-specific configurations. Use Cases: Retrieve the current resolution of Camera A. If the requestType is \"update-settings\": THIS TOOL UPDATES AND SETS DATA. You can call call this tool with requestType \"get-settings\" and/or with \"image\" first to get a better idea of what needs to be updated. This tool updates the configuration for a camera or associated device using the \"configUpdate\" parameter, which must be a JSON object containing the specific fields and their new values. For example, you can modify streaming parameters. Thus, \"configUpdate' is a necessary parameter if updating settings. Please make sure you only update the necessary fields, since any unnecessary changes may cause the camera to behave improperly. It may be a good idea to call \"image\" on this tool again after updating settings to make sure the new settings were effective in fulfilling the user's request. Use Cases: Adjust streaming parameters for Camera E.",
          "parameters": []
        },
        {
          "name": "get-entity-tool",
          "description": "Retrieves entities (or devices) of certain types. Can request multiple entity types at once. The return structure is a JSON string that continues the states of the requested entities. This data is exact. Whatever entities exist will be returned here.",
          "parameters": []
        },
        {
          "name": "events-tool",
          "description": "event data for certain types of information like faces, license plates, and access-control events",
          "parameters": []
        },
        {
          "name": "faces-tool",
          "description": "This tool interacts with the Rhombus face recognition system to retrieve information about face events and registered faces. It has two primary modes of operation, determined by the \"requestType\" parameter: If the requestType is \"get-face-events\": This tool retrieves detailed face events recorded by your Rhombus cameras, such as detections and recognitions. It provides comprehensive information about each event, including details about the detected face, the person matched (if any), and the event context. You can filter face events using parameters like 'deviceUuids', 'faceNameContains', 'faceNames', 'hasEmbedding', 'hasName', 'labels', 'locationUuids', 'personUuids', and a time range using 'rangeStart' and 'rangeEnd' (timestamps in milliseconds). The tool returns a JSON object with the following structure and important fields: * **lastEvaluatedKey (string | null):** A key for pagination; if not null, it can be used to retrieve the next page of results. * **faceEvents (array of objects | null):** An array where each object represents a single face event. Each face event object contains the following important fields: * **uuid (string):** The unique identifier for this specific face event. * **eventTimestamp (int64):** The timestamp (in milliseconds since epoch) when the face event occurred. * **faceName (string | null):** The name of the person that matched the face image, if a match was found. * **personUuid (string | null):** The UUID of the person that matched the face image, if a match was found. * **deviceUuid (string):** The UUID of the device (e.g., camera) where the face event was detected. * **locationUuid (string | null):** The UUID of the location where the face event occurred. * **orgUuid (string | null):** The UUID of the organization associated with the event. * **detectionConfidence (float | null):** A confidence value (between 0.0 and 1.0) indicating the likelihood that the detected image is a face. * **thumbnailS3Key (string | null):** The S3 key for accessing the thumbnail image of the detected face. * **selectedPersonMatch (object | null):** An object containing details about the top person match found for the face image, if any. Important fields within this object include: * **confidence (float | null):** The match confidence level, expressed as a value in the range [0,1]. * **faceId (string | null):** The face ID of the matched person. * **name (string | null):** The name of the matched person. * **uuid (string | null):** The UUID of the matched person. If the requestType is \"get-registered-faces\": This tool retrieves a list of all people (registered faces) currently known to the Rhombus system for your organization. This list includes information about each registered person. This tool takes no arguments. The tool returns a JSON object with the following structure and important fields: * **people (array of objects | null):** An array where each object represents a registered person. Each person object contains the following important fields: * **uuid (string):** The unique identifier for the registered person. * **name (string | null):** The name associated with the registered person. * **createdOn (date-time | null):** The date and time when the person was registered. * **updatedOn (date-time | null):** The date and time when the person's information was last updated. * **orgUuid (string | null):** The UUID of the organization to which the person belongs.",
          "parameters": []
        },
        {
          "name": "get-org-information",
          "description": "Get general information about the organization including org name, camera configuration defaults, contact information, and org settings.",
          "parameters": []
        },
        {
          "name": "location-tool",
          "description": "This tool performs operations on locations. - 'get': Retrieves all locations.",
          "parameters": []
        },
        {
          "name": "policy-alerts-tool",
          "description": "Retrieves Rhombus policy alerts. Policy alerts in the Rhombus system are generated based on user-defined alert policies configured in the Rhombus Console. These policies trigger alerts when specific events occur, such as: * AI & Computer Vision Events: Based on intelligent video analytics for motion, people, vehicles, facial recognition, license plate recognition, or unusual behavior. * Device Status Changes: Like camera disconnections or sensor low battery. * Physical or Visual Tamper: Detection of physical movement of a device or obstruction of a camera's field of view. * Access Control Events: Such as unauthorized access attempts in restricted areas. Please note, this is not an exhaustive list, and there may be other types of triggers or events that generate policy alerts within the Rhombus system. This tool allows you to filter existing alerts by a specific time range (before or after a timestamp in milliseconds), by a list of device UUIDs, or by a list of location UUIDs. You can also specify the maximum number of results to return. The output is provided in JSON format.",
          "parameters": []
        },
        {
          "name": "reboot-cameras",
          "description": "this tool is for rebooting one or more cameras causing them to reconnect to the server, this is a helpful option when a camera is experiencing connectivity issues or is in need of troubleshooting. THIS TOOL PERFORMS AN ACTION.",
          "parameters": []
        },
        {
          "name": "time-tool",
          "description": "Tool for converting a natural language time description into a timestamp in milliseconds.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@RhombusSystems/rhombus-node-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "rhombusApiKey",
          "required": true,
          "description": "Rhombus API Key for authentication with the Rhombus server"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@RhombusSystems/rhombus-node-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2168.@RhombusSystems_rhombus-node-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1875
  }
}