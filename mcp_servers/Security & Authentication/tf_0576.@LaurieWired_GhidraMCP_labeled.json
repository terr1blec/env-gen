{
  "labels": {
    "analysis": "The MCP Server \"GhidraMCP\" is designed to automate reverse engineering tasks by integrating with Ghidra, a powerful software reverse engineering suite. Its core functionality revolves around decompiling binaries, analyzing code structures, renaming methods and variables, and managing references within executable files. The available tools enable detailed inspection of functions, classes, memory segments, imports/exports, and cross-references, making it particularly suitable for security researchers, software developers, and anyone involved in binary analysis.",
    "reasoning": "The primary label \"Security & Authentication\" is chosen because the server's tools are heavily used in reverse engineering, which is a critical aspect of security research, vulnerability analysis, and software protection. Secondary labels like \"Development Tools\" and \"Memory Management\" are relevant due to its role in binary analysis and data organization within reverse engineering workflows. No custom label is needed as the predefined categories adequately capture the server's functionality.",
    "primary_label": "Security & Authentication",
    "secondary_labels": [
      "Development Tools",
      "Memory Management"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 575,
    "server_name": "GhidraMCP",
    "rank_by_usage": 576,
    "usage_count": "20",
    "original_file": "../crawler/smithery/@LaurieWired_GhidraMCP.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@LaurieWired/GhidraMCP/mcp?config=eyJtY3BIb3N0IjogIjEyNy4wLjAuMSIsICJtY3BQb3J0IjogODA4MSwgInRyYW5zcG9ydCI6ICJzdGRpbyIsICJnaGlkcmFTZXJ2ZXIiOiAiaHR0cDovLzEyNy4wLjAuMTo4MDgwLyJ9&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "list_methods",
          "description": "\n    List all function names in the program with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_methodsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_classes",
          "description": "\n    List all namespace/class names in the program with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_classesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "decompile_function",
          "description": "\n    Decompile a specific function by name and return the decompiled C code.\n    ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "decompile_functionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "rename_function",
          "description": "\n    Rename a function by its current name to a new user-defined name.\n    ",
          "input_schema": {
            "properties": {
              "old_name": {
                "title": "Old Name",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "old_name",
              "new_name"
            ],
            "title": "rename_functionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "rename_data",
          "description": "\n    Rename a data label at the specified address.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "address",
              "new_name"
            ],
            "title": "rename_dataArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_segments",
          "description": "\n    List all memory segments in the program with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_segmentsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_imports",
          "description": "\n    List imported symbols in the program with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_importsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_exports",
          "description": "\n    List exported functions/symbols with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_exportsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_namespaces",
          "description": "\n    List all non-global namespaces in the program with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_namespacesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_data_items",
          "description": "\n    List defined data labels and their values with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_data_itemsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "search_functions_by_name",
          "description": "\n    Search for functions whose name contains the given substring.\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "title": "search_functions_by_nameArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "rename_variable",
          "description": "\n    Rename a local variable within a function.\n    ",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              },
              "old_name": {
                "title": "Old Name",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "function_name",
              "old_name",
              "new_name"
            ],
            "title": "rename_variableArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_function_by_address",
          "description": "\n    Get a function by its address.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "get_function_by_addressArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_current_address",
          "description": "\n    Get the address currently selected by the user.\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_current_addressArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_current_function",
          "description": "\n    Get the function currently selected by the user.\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_current_functionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_functions",
          "description": "\n    List all functions in the database.\n    ",
          "input_schema": {
            "properties": {},
            "title": "list_functionsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "decompile_function_by_address",
          "description": "\n    Decompile a function at the given address.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "decompile_function_by_addressArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "disassemble_function",
          "description": "\n    Get assembly code (address: instruction; comment) for a function.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "disassemble_functionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "set_decompiler_comment",
          "description": "\n    Set a comment for a given address in the function pseudocode.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "comment": {
                "title": "Comment",
                "type": "string"
              }
            },
            "required": [
              "address",
              "comment"
            ],
            "title": "set_decompiler_commentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "set_disassembly_comment",
          "description": "\n    Set a comment for a given address in the function disassembly.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "comment": {
                "title": "Comment",
                "type": "string"
              }
            },
            "required": [
              "address",
              "comment"
            ],
            "title": "set_disassembly_commentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "rename_function_by_address",
          "description": "\n    Rename a function by its address.\n    ",
          "input_schema": {
            "properties": {
              "function_address": {
                "title": "Function Address",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "function_address",
              "new_name"
            ],
            "title": "rename_function_by_addressArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "set_function_prototype",
          "description": "\n    Set a function's prototype.\n    ",
          "input_schema": {
            "properties": {
              "function_address": {
                "title": "Function Address",
                "type": "string"
              },
              "prototype": {
                "title": "Prototype",
                "type": "string"
              }
            },
            "required": [
              "function_address",
              "prototype"
            ],
            "title": "set_function_prototypeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "set_local_variable_type",
          "description": "\n    Set a local variable's type.\n    ",
          "input_schema": {
            "properties": {
              "function_address": {
                "title": "Function Address",
                "type": "string"
              },
              "variable_name": {
                "title": "Variable Name",
                "type": "string"
              },
              "new_type": {
                "title": "New Type",
                "type": "string"
              }
            },
            "required": [
              "function_address",
              "variable_name",
              "new_type"
            ],
            "title": "set_local_variable_typeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_xrefs_to",
          "description": "\n    Get all references to the specified address (xref to).\n    \n    Args:\n        address: Target address in hex format (e.g. \"0x1400010a0\")\n        offset: Pagination offset (default: 0)\n        limit: Maximum number of references to return (default: 100)\n        \n    Returns:\n        List of references to the specified address\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "address"
            ],
            "title": "get_xrefs_toArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_xrefs_from",
          "description": "\n    Get all references from the specified address (xref from).\n    \n    Args:\n        address: Source address in hex format (e.g. \"0x1400010a0\")\n        offset: Pagination offset (default: 0)\n        limit: Maximum number of references to return (default: 100)\n        \n    Returns:\n        List of references from the specified address\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "address"
            ],
            "title": "get_xrefs_fromArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_function_xrefs",
          "description": "\n    Get all references to the specified function by name.\n    \n    Args:\n        name: Function name to search for\n        offset: Pagination offset (default: 0)\n        limit: Maximum number of references to return (default: 100)\n        \n    Returns:\n        List of references to the specified function\n    ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              },
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "name"
            ],
            "title": "get_function_xrefsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_strings",
          "description": "\n    List all defined strings in the program with their addresses.\n    \n    Args:\n        offset: Pagination offset (default: 0)\n        limit: Maximum number of strings to return (default: 2000)\n        filter: Optional filter to match within string content\n        \n    Returns:\n        List of strings with their addresses\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 2000,
                "title": "Limit",
                "type": "integer"
              },
              "filter": {
                "default": null,
                "title": "Filter",
                "type": "string"
              }
            },
            "title": "list_stringsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 27,
      "tool_names": [
        "list_methods",
        "list_classes",
        "decompile_function",
        "rename_function",
        "rename_data",
        "list_segments",
        "list_imports",
        "list_exports",
        "list_namespaces",
        "list_data_items",
        "search_functions_by_name",
        "rename_variable",
        "get_function_by_address",
        "get_current_address",
        "get_current_function",
        "list_functions",
        "decompile_function_by_address",
        "disassemble_function",
        "set_decompiler_comment",
        "set_disassembly_comment",
        "rename_function_by_address",
        "set_function_prototype",
        "set_local_variable_type",
        "get_xrefs_to",
        "get_xrefs_from",
        "get_function_xrefs",
        "list_strings"
      ]
    },
    "server_info_crawled": {
      "id": 575,
      "name": "GhidraMCP",
      "author": "@LaurieWired/GhidraMCP",
      "overview": "Enable LLMs to autonomously reverse engineer applications by leveraging Ghidra's powerful analysis tools. Decompile, analyze binaries, and automate method renaming seamlessly. Integrate with various MCP clients to enhance your reverse engineering workflows.",
      "repository_url": "https://github.com/LaurieWired/GhidraMCP",
      "homepage": "https://smithery.ai/server/@LaurieWired/GhidraMCP",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "20",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@LaurieWired_GhidraMCP.json",
      "tools_count": 27,
      "tools": [
        {
          "name": "list_methods",
          "description": "\n    List all function names in the program with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_methodsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_classes",
          "description": "\n    List all namespace/class names in the program with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_classesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "decompile_function",
          "description": "\n    Decompile a specific function by name and return the decompiled C code.\n    ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "decompile_functionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "rename_function",
          "description": "\n    Rename a function by its current name to a new user-defined name.\n    ",
          "input_schema": {
            "properties": {
              "old_name": {
                "title": "Old Name",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "old_name",
              "new_name"
            ],
            "title": "rename_functionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "rename_data",
          "description": "\n    Rename a data label at the specified address.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "address",
              "new_name"
            ],
            "title": "rename_dataArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_segments",
          "description": "\n    List all memory segments in the program with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_segmentsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_imports",
          "description": "\n    List imported symbols in the program with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_importsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_exports",
          "description": "\n    List exported functions/symbols with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_exportsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_namespaces",
          "description": "\n    List all non-global namespaces in the program with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_namespacesArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_data_items",
          "description": "\n    List defined data labels and their values with pagination.\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "title": "list_data_itemsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "search_functions_by_name",
          "description": "\n    Search for functions whose name contains the given substring.\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "title": "search_functions_by_nameArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "rename_variable",
          "description": "\n    Rename a local variable within a function.\n    ",
          "input_schema": {
            "properties": {
              "function_name": {
                "title": "Function Name",
                "type": "string"
              },
              "old_name": {
                "title": "Old Name",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "function_name",
              "old_name",
              "new_name"
            ],
            "title": "rename_variableArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_function_by_address",
          "description": "\n    Get a function by its address.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "get_function_by_addressArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_current_address",
          "description": "\n    Get the address currently selected by the user.\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_current_addressArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_current_function",
          "description": "\n    Get the function currently selected by the user.\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_current_functionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_functions",
          "description": "\n    List all functions in the database.\n    ",
          "input_schema": {
            "properties": {},
            "title": "list_functionsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "decompile_function_by_address",
          "description": "\n    Decompile a function at the given address.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "decompile_function_by_addressArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "disassemble_function",
          "description": "\n    Get assembly code (address: instruction; comment) for a function.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              }
            },
            "required": [
              "address"
            ],
            "title": "disassemble_functionArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "set_decompiler_comment",
          "description": "\n    Set a comment for a given address in the function pseudocode.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "comment": {
                "title": "Comment",
                "type": "string"
              }
            },
            "required": [
              "address",
              "comment"
            ],
            "title": "set_decompiler_commentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "set_disassembly_comment",
          "description": "\n    Set a comment for a given address in the function disassembly.\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "comment": {
                "title": "Comment",
                "type": "string"
              }
            },
            "required": [
              "address",
              "comment"
            ],
            "title": "set_disassembly_commentArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "rename_function_by_address",
          "description": "\n    Rename a function by its address.\n    ",
          "input_schema": {
            "properties": {
              "function_address": {
                "title": "Function Address",
                "type": "string"
              },
              "new_name": {
                "title": "New Name",
                "type": "string"
              }
            },
            "required": [
              "function_address",
              "new_name"
            ],
            "title": "rename_function_by_addressArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "set_function_prototype",
          "description": "\n    Set a function's prototype.\n    ",
          "input_schema": {
            "properties": {
              "function_address": {
                "title": "Function Address",
                "type": "string"
              },
              "prototype": {
                "title": "Prototype",
                "type": "string"
              }
            },
            "required": [
              "function_address",
              "prototype"
            ],
            "title": "set_function_prototypeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "set_local_variable_type",
          "description": "\n    Set a local variable's type.\n    ",
          "input_schema": {
            "properties": {
              "function_address": {
                "title": "Function Address",
                "type": "string"
              },
              "variable_name": {
                "title": "Variable Name",
                "type": "string"
              },
              "new_type": {
                "title": "New Type",
                "type": "string"
              }
            },
            "required": [
              "function_address",
              "variable_name",
              "new_type"
            ],
            "title": "set_local_variable_typeArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_xrefs_to",
          "description": "\n    Get all references to the specified address (xref to).\n    \n    Args:\n        address: Target address in hex format (e.g. \"0x1400010a0\")\n        offset: Pagination offset (default: 0)\n        limit: Maximum number of references to return (default: 100)\n        \n    Returns:\n        List of references to the specified address\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "address"
            ],
            "title": "get_xrefs_toArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_xrefs_from",
          "description": "\n    Get all references from the specified address (xref from).\n    \n    Args:\n        address: Source address in hex format (e.g. \"0x1400010a0\")\n        offset: Pagination offset (default: 0)\n        limit: Maximum number of references to return (default: 100)\n        \n    Returns:\n        List of references from the specified address\n    ",
          "input_schema": {
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "address"
            ],
            "title": "get_xrefs_fromArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_function_xrefs",
          "description": "\n    Get all references to the specified function by name.\n    \n    Args:\n        name: Function name to search for\n        offset: Pagination offset (default: 0)\n        limit: Maximum number of references to return (default: 100)\n        \n    Returns:\n        List of references to the specified function\n    ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              },
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 100,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "name"
            ],
            "title": "get_function_xrefsArguments",
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "list_strings",
          "description": "\n    List all defined strings in the program with their addresses.\n    \n    Args:\n        offset: Pagination offset (default: 0)\n        limit: Maximum number of strings to return (default: 2000)\n        filter: Optional filter to match within string content\n        \n    Returns:\n        List of strings with their addresses\n    ",
          "input_schema": {
            "properties": {
              "offset": {
                "default": 0,
                "title": "Offset",
                "type": "integer"
              },
              "limit": {
                "default": 2000,
                "title": "Limit",
                "type": "integer"
              },
              "filter": {
                "default": null,
                "title": "Filter",
                "type": "string"
              }
            },
            "title": "list_stringsArguments",
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"mcpHost\": \"127.0.0.1\",\n  \"mcpPort\": 8081,\n  \"transport\": \"stdio\",\n  \"ghidraServer\": \"http://127.0.0.1:8080/\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@LaurieWired/GhidraMCP/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"mcpHost\": \"127.0.0.1\",\n  \"mcpPort\": 8081,\n  \"transport\": \"stdio\",\n  \"ghidraServer\": \"http://127.0.0.1:8080/\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@LaurieWired/GhidraMCP/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0576.@LaurieWired_GhidraMCP_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 563
  }
}