{
  "labels": {
    "analysis": "The MCP Server \"Intruder\" is designed to provide simplified access to Intruder's security vulnerability scanning and management capabilities within LLM-based workflows. The available tools focus on managing targets, initiating scans, and handling security issues, including filtering by status, severity, and tags. It essentially acts as an interface for security operations, allowing users to monitor, manage, and remediate vulnerabilities in their systems or applications.",
    "reasoning": "The primary label \"Security & Authentication\" is chosen because the server's main functionality revolves around vulnerability scanning, issue management, and security operationsâ€”key aspects of security and authentication. The secondary label \"Database Operations\" is selected due to the server's ability to list, filter, and manage targets, scans, and issues, which involves querying and managing data. No custom label is needed as the predefined labels adequately cover the server's functionality.",
    "primary_label": "Security & Authentication",
    "secondary_labels": [
      "Database Operations"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 352,
    "server_name": "Intruder",
    "rank_by_usage": 353,
    "usage_count": "85",
    "original_file": "../crawler/smithery/@intruder-io_intruder-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@intruder-io/intruder-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 352,
      "name": "Intruder",
      "author": "@intruder-io/intruder-mcp",
      "overview": "Simplify access to Intruder's capabilities within LLM-based workflows and tools.",
      "repository_url": "https://github.com/intruder-io/intruder-mcp",
      "homepage": "https://smithery.ai/server/@intruder-io/intruder-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "85",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@intruder-io_intruder-mcp.json",
      "tools_count": 18,
      "tools": [
        {
          "name": "get_user",
          "description": "Deploy Server @intruder-io/intruder-mcp Try in Playground",
          "parameters": [
            {
              "name": "get_user",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_status",
          "description": "Get the status of the Intruder API",
          "parameters": [
            {
              "name": "get_status",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "list_targets",
          "description": "List all targets in the Intruder account and their associated IDs and status (one of 'live', 'license_exceeded', 'unscanned', 'unresponsive', 'agent_uninstalled').",
          "parameters": []
        },
        {
          "name": "list_issues",
          "description": "List issues in the Intruder account with optional filters. Args: target_addresses: Filter by a list of target addresses tag_names: Filter by a list of tag names snoozed: Filter by snoozed status (true or false) severity: Filter by severity level (one of 'critical', 'high', 'medium', 'low')",
          "parameters": []
        },
        {
          "name": "list_scans",
          "description": "List scans in the Intruder account with optional filters. Args: status: Filter by scan status (in_progress, completed, cancelled, cancelled_no_active_targets, cancelled_no_valid_targets, analysing_results) scan_type: Filter by scan type (assessment_schedule, new_service, cloudbot_new_target, rapid_remediation, advisory, cloud_security) The scan_type parameters mean: - assessment_schedule: Scans that run on a regular schedule - new_service: Scans that are triggered when a new service is exposed on a target - cloudbot_new_target: Scans that are triggered when CloudBot discovers a new target in a connected cloud account - rapid_remediation: Scans that a user can trigger to test if a specific issue has been remediated - advisory: An issue created by the Intruder security team based on their manual work - cloud_security: Scans of cloud accounts, checking the configuration of the resources in the cloud account",
          "parameters": []
        },
        {
          "name": "list_tags",
          "description": "List all tags in the Intruder account with optional filters. Tags are applied to targets. Args: target_address: Filter by a list of target address",
          "parameters": []
        },
        {
          "name": "list_occurrences",
          "description": "List all occurrences for a specific issue with optional filters. Args: issue_id: The ID of the issue to list occurrences for target_addresses: Filter by a list of target addresses tag_names: Filter by a list of tag names snoozed: Filter by snoozed status (true or false)",
          "parameters": []
        },
        {
          "name": "get_scanner_output",
          "description": "Get scanner output for a specific occurrence of an issue. Args: issue_id: The ID of the issue occurrence_id: The ID of the occurrence",
          "parameters": [
            {
              "name": "issue_id",
              "required": true,
              "type": "string"
            },
            {
              "name": "occurrence_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_scan",
          "description": "Create a new scan. Args: target_addresses: List of target addresses to scan tag_names: List of tag names to scan targets with these tags",
          "parameters": []
        },
        {
          "name": "get_scan",
          "description": "Get details of a specific scan.\n\n        Args:\n            scan_id: The ID of the scan to get",
          "parameters": []
        },
        {
          "name": "cancel_scan",
          "description": "Cancel a running scan.\n\n        Args:\n            scan_id: The ID of the scan to cancel",
          "parameters": [
            {
              "name": "scan_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "delete_target",
          "description": "Delete a target.\n\n        Args:\n            target_id: The ID of the target to delete",
          "parameters": [
            {
              "name": "target_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_targets",
          "description": "Create one or more targets. Args: addresses: List of target addresses to create Example: ['example.com'] for a single target Example: ['example.com', 'test.com'] for multiple targets",
          "parameters": []
        },
        {
          "name": "create_target_tag",
          "description": "Add a tag to a target. Args: target_id: The ID of the target to add the tag to name: The name of the tag to add (max 40 characters)",
          "parameters": []
        },
        {
          "name": "delete_target_tag",
          "description": "Remove a tag from a target. Args: target_id: The ID of the target to remove the tag from tag_name: The name of the tag to remove",
          "parameters": []
        },
        {
          "name": "list_licenses",
          "description": "List license information for the Intruder account. Shows usage and limits for infrastructure and application licenses. When a license is used, it is tied to the target that used it for 30 days.",
          "parameters": []
        },
        {
          "name": "snooze_issue",
          "description": "Snooze an issue and all its current and future occurrences. Args: issue_id: The ID of the issue to snooze reason: Reason for snoozing (required, must one of ACCEPT_RISK, FALSE_POSITIVE, MITIGATING_CONTROLS) details: Optional details for the snooze duration: Optional duration for the snooze (in seconds) duration_type: Optional duration type (e.g., 'days', 'hours') The reasons mean: - ACCEPT_RISK - Risk accepted for the issue and all of its occurrences - FALSE_POSITIVE - False positive - issue and all occurrences have been verified as not exploitable - MITIGATING_CONTROLS - Mitigating controls are in place",
          "parameters": []
        },
        {
          "name": "snooze_occurrence",
          "description": "Snooze a specific occurrence of an issue. Args: issue_id: The ID of the issue occurrence_id: The ID of the occurrence to snooze reason: Reason for snoozing (required, must be one of ACCEPT_RISK, FALSE_POSITIVE, MITIGATING_CONTROLS) details: Optional details for the snooze duration: Optional duration for the snooze (in seconds) duration_type: Optional duration type (e.g., 'days', 'hours') The reasons mean: - ACCEPT_RISK - Risk accepted for the issue and all of its occurrences - FALSE_POSITIVE - False positive - issue and all occurrences have been verified as not exploitable - MITIGATING_CONTROLS - Mitigating controls are in place",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@intruder-io/intruder-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "INTRUDER_API_KEY",
          "required": true,
          "description": "Your Intruder API key for authentication."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@intruder-io/intruder-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0353.@intruder-io_intruder-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 349
  }
}