{
  "labels": {
    "analysis": "The MCP Server is designed for seamless interaction with VictoriaMetrics, a time series database. Its core functionality revolves around writing, querying, and managing time series data, as well as importing data from Prometheus. The available tools enable users to perform operations like writing data, querying time series values, exploring labels, and importing Prometheus metrics, which are essential for monitoring and observability workflows.",
    "reasoning": "The primary label \"Data Analysis & Processing\" was chosen because the server's main functionality is centered around analyzing and processing time series data. The secondary label \"Database Operations\" was selected due to the direct interaction with VictoriaMetrics for querying and writing data. The custom label \"Time Series Monitoring\" was added to highlight the server's specialized focus on time series data, which is critical for performance monitoring and observability.",
    "primary_label": "Data Analysis & Processing",
    "secondary_labels": [
      "Database Operations"
    ],
    "custom_label": "Time Series Monitoring",
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 609,
    "server_name": "VictoriaMetrics Server",
    "rank_by_usage": 610,
    "usage_count": "17",
    "original_file": "../crawler/smithery/@yincongcyincong_VictoriaMetrics-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@yincongcyincong/VictoriaMetrics-mcp-server/mcp?config=eyJWTV9VUkwiOiAiIiwgIlZNX0lOU0VSVF9VUkwiOiAiIiwgIlZNX1NFTEVDVF9VUkwiOiAiIn0=&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "vm_data_write",
          "description": "Write data to the VM database",
          "input_schema": {
            "type": "object",
            "properties": {
              "metric": {
                "type": "object",
                "description": "tag of metric"
              },
              "values": {
                "type": "array",
                "description": "Array of metric values",
                "items": {
                  "type": "number"
                }
              },
              "timestamps": {
                "type": "array",
                "description": "Array of metric timestamps",
                "items": {
                  "type": "number"
                }
              }
            },
            "required": [
              "metric",
              "values",
              "timestamps"
            ]
          },
          "annotations": null
        },
        {
          "name": "vm_query_range",
          "description": "Query time series over a time range",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "PromQL expression"
              },
              "start": {
                "type": "number",
                "description": "Start timestamp in Unix seconds"
              },
              "end": {
                "type": "number",
                "description": "End timestamp in Unix seconds"
              },
              "step": {
                "type": "string",
                "description": "Query resolution step width"
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        },
        {
          "name": "vm_query",
          "description": "Query current value of a time series",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "PromQL expression to evaluate"
              },
              "time": {
                "type": "number",
                "description": "Evaluation timestamp in Unix seconds (optional)"
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        },
        {
          "name": "vm_labels",
          "description": "Get all unique label names",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "vm_label_values",
          "description": "Get all unique values for a specific label",
          "input_schema": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "description": "Label name to retrieve values for"
              }
            },
            "required": [
              "label"
            ]
          },
          "annotations": null
        },
        {
          "name": "vm_prometheus_write",
          "description": "mport Prometheus exposition format data into VictoriaMetrics",
          "input_schema": {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "description": "Metrics data in Prometheus exposition format"
              }
            },
            "required": [
              "data"
            ]
          },
          "annotations": null
        }
      ],
      "tool_count": 6,
      "tool_names": [
        "vm_data_write",
        "vm_query_range",
        "vm_query",
        "vm_labels",
        "vm_label_values",
        "vm_prometheus_write"
      ]
    },
    "server_info_crawled": {
      "id": 609,
      "name": "VictoriaMetrics Server",
      "author": "@yincongcyincong/VictoriaMetrics-mcp-server",
      "overview": "Enable seamless interaction with VictoriaMetrics by writing data, importing Prometheus metrics, and querying time series data efficiently. Simplify monitoring workflows by accessing unique labels and label values directly through standardized API calls. Enhance your data operations with a dedicated server tailored for VictoriaMetrics integration.",
      "repository_url": "https://github.com/yincongcyincong/VictoriaMetrics-mcp-server",
      "homepage": "https://smithery.ai/server/@yincongcyincong/VictoriaMetrics-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "17",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@yincongcyincong_VictoriaMetrics-mcp-server.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "vm_data_write",
          "description": "Write data to the VM database",
          "input_schema": {
            "type": "object",
            "properties": {
              "metric": {
                "type": "object",
                "description": "tag of metric"
              },
              "values": {
                "type": "array",
                "description": "Array of metric values",
                "items": {
                  "type": "number"
                }
              },
              "timestamps": {
                "type": "array",
                "description": "Array of metric timestamps",
                "items": {
                  "type": "number"
                }
              }
            },
            "required": [
              "metric",
              "values",
              "timestamps"
            ]
          },
          "annotations": null
        },
        {
          "name": "vm_query_range",
          "description": "Query time series over a time range",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "PromQL expression"
              },
              "start": {
                "type": "number",
                "description": "Start timestamp in Unix seconds"
              },
              "end": {
                "type": "number",
                "description": "End timestamp in Unix seconds"
              },
              "step": {
                "type": "string",
                "description": "Query resolution step width"
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        },
        {
          "name": "vm_query",
          "description": "Query current value of a time series",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "PromQL expression to evaluate"
              },
              "time": {
                "type": "number",
                "description": "Evaluation timestamp in Unix seconds (optional)"
              }
            },
            "required": [
              "query"
            ]
          },
          "annotations": null
        },
        {
          "name": "vm_labels",
          "description": "Get all unique label names",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          },
          "annotations": null
        },
        {
          "name": "vm_label_values",
          "description": "Get all unique values for a specific label",
          "input_schema": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "description": "Label name to retrieve values for"
              }
            },
            "required": [
              "label"
            ]
          },
          "annotations": null
        },
        {
          "name": "vm_prometheus_write",
          "description": "mport Prometheus exposition format data into VictoriaMetrics",
          "input_schema": {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "description": "Metrics data in Prometheus exposition format"
              }
            },
            "required": [
              "data"
            ]
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"VM_URL\": \"\",\n  \"VM_INSERT_URL\": \"\",\n  \"VM_SELECT_URL\": \"\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@yincongcyincong/VictoriaMetrics-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"VM_URL\": \"\",\n  \"VM_INSERT_URL\": \"\",\n  \"VM_SELECT_URL\": \"\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@yincongcyincong/VictoriaMetrics-mcp-server/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0610.@yincongcyincong_VictoriaMetrics-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 595
  }
}