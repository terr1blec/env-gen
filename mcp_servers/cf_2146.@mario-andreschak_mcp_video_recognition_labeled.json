{
  "labels": {
    "analysis": "The MCP Server specializes in multimedia recognition, offering tools for analyzing and transcribing image, audio, and video content using Google Gemini AI. Its primary use cases involve extracting contextual insights from multimedia files, making it suitable for applications requiring visual/audio understanding.",
    "reasoning": "The **AI/ML Tools** category was chosen as the primary label because the server leverages advanced AI models (Google Gemini) for recognition tasks. **Data Analysis & Processing** is a secondary fit due to its data extraction capabilities, while **Content Creation** could apply as it enables rich descriptive outputs from raw media.",
    "primary_label": "AI/ML Tools",
    "secondary_labels": [
      "Data Analysis & Processing",
      "Content Creation"
    ],
    "custom_label": "Multimedia Recognition",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2145,
    "server_name": "Video Recognition Server",
    "rank_by_usage": 2146,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@mario-andreschak_mcp_video_recognition.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mario-andreschak/mcp_video_recognition/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2145,
      "name": "Video Recognition Server",
      "author": "@mario-andreschak/mcp_video_recognition",
      "overview": "Provide advanced image, audio, and video recognition capabilities using Google's Gemini AI. Analyze and describe multimedia content to enhance your applications with rich contextual understanding. Easily integrate with MCP clients to leverage powerful recognition tools.",
      "repository_url": "https://github.com/mario-andreschak/mcp_video_recognition",
      "homepage": "https://smithery.ai/server/@mario-andreschak/mcp_video_recognition",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mario-andreschak_mcp_video_recognition.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "image_recognition",
          "description": "Deploy Server Video Recognition Server Claim Server @mario-andreschak/mcp_video_recognition Try in Playground image_recognition",
          "parameters": [
            {
              "name": "image_recognition",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "audio_recognition",
          "description": "Analyze and transcribe audio using Google Gemini AI",
          "parameters": []
        },
        {
          "name": "video_recognition",
          "description": "Deploy Server Video Recognition Server Claim Server @mario-andreschak/mcp_video_recognition Try in Playground image_recognition",
          "parameters": [
            {
              "name": "Tools",
              "required": false,
              "type": "string"
            },
            {
              "name": "image_recognition",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mario-andreschak/mcp_video_recognition/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "googleApiKey",
          "required": true,
          "description": "Google Gemini API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mario-andreschak/mcp_video_recognition/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2146.@mario-andreschak_mcp_video_recognition_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1857
  }
}