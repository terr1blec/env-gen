{
  "labels": {
    "analysis": "CodeRide is a development tool that enhances AI coding workflows by maintaining context and organizing tasks in a structured Kanban system. It connects with various AI code editors and MCP clients, allowing developers to manage coding projects with persistent context and task automation. The available tools focus on project and task management, including creation, retrieval, and updates of structured development tasks, making it a specialized platform for AI-assisted software development.",
    "reasoning": "The primary label \"Development Tools\" is chosen because the server's core functionality revolves around enhancing AI-powered coding workflows, which directly supports software development processes. Secondary labels \"Memory Management\" and \"Daily Productivity\" are included due to its structured task management (Kanban-style) and contextual preservation features. No custom label is needed as predefined categories adequately cover its functionality.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Memory Management",
      "Daily Productivity"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 278,
    "server_name": "CodeRide",
    "rank_by_usage": 279,
    "usage_count": "133",
    "original_file": "../crawler/smithery/@PixdataOrg_coderide.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@PixdataOrg/coderide/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 278,
      "name": "CodeRide",
      "author": "@PixdataOrg/coderide",
      "overview": "CodeRide eliminates the context reset cycle once and for all. Through MCP integration, it seamlessly connects to your existing AI coding workflow, enhancing how you vibe code. Once connected, CodeRide transforms your development tasks into a structured Kanban, where each task preserves complete context and instructions your AI needs to work autonomously. Compatible with all major AI code editors including Cursor, Cline, and Windsurf, plus any MCP client like Claude.ai.",
      "repository_url": "https://github.com/PixdataOrg/coderide-mcp",
      "homepage": "https://smithery.ai/server/@PixdataOrg/coderide",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "133",
      "success_rate": "98.96%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@PixdataOrg_coderide.json",
      "tools_count": 6,
      "tools": [
        {
          "name": "start_project",
          "description": "Deploy Server @PixdataOrg/coderide Try in Playground start_project",
          "parameters": [
            {
              "name": "start_project",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_prompt",
          "description": "Retrieves the specific instructions or prompt for a given task, identified by its unique task number (e.g., 'CRD-1'). This is typically used to understand the detailed requirements or context for an AI agent to work on the task.",
          "parameters": [
            {
              "name": "get_prompt",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_task",
          "description": "Retrieves detailed information for a specific task using its unique task number (e.g., 'CRD-1').",
          "parameters": [
            {
              "name": "get_task",
              "required": false,
              "type": "string"
            },
            {
              "name": "number",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_project",
          "description": "Retrieves detailed information about a specific project using its unique 'slug' (three uppercase letters, e.g., 'CRD').",
          "parameters": [
            {
              "name": "get_project",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_task",
          "description": "Updates an existing task's 'description' and/or 'status'. The task is identified by its unique 'number' (e.g., 'CRD-1'). At least one of 'description' or 'status' must be provided for an update.",
          "parameters": [
            {
              "name": "update_task",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update_project",
          "description": "Updates a project's knowledge graph data and/or its structure diagram (in Mermaid.js format). The project is identified by its unique 'slug'. At least one of 'project_knowledge' or 'project_diagram' must be provided for an update to occur.",
          "parameters": [
            {
              "name": "update_project",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@PixdataOrg/coderide/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "CODERIDE_API_KEY",
          "required": true,
          "description": "CodeRide API key for authentication"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@PixdataOrg/coderide/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0279.@PixdataOrg_coderide_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 275
  }
}