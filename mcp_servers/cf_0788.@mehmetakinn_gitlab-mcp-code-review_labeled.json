{
  "labels": {
    "analysis": "The MCP Server is designed specifically for GitLab code review integration, enabling AI assistants to perform comprehensive code reviews by leveraging GitLab's API. It provides tools to fetch merge request details, compare versions, add comments, manage approvals, and retrieve project merge requests. The core functionality revolves around streamlining code review workflows, making it a valuable assistant for developers working within GitLab environments. The integration with development tools like Cursor IDE further enhances its utility.",
    "reasoning": "The server's primary functionality centers around code review workflows within GitLab, which aligns most closely with the Development Tools category due to its focus on code analysis and review. The secondary labels include API Integration as it relies heavily on GitLab's API, and Code Quality as it directly assists in improving code through automated reviews. While GitLab-specific, the functionality is general enough to fit within established categories without needing a custom label.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "API Integration",
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 787,
    "server_name": "GitLab Code Review Integration",
    "rank_by_usage": 788,
    "usage_count": "7",
    "original_file": "../crawler/smithery/@mehmetakinn_gitlab-mcp-code-review.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@mehmetakinn/gitlab-mcp-code-review/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 787,
      "name": "GitLab Code Review Integration",
      "author": "@mehmetakinn/gitlab-mcp-code-review",
      "overview": "Enable AI assistants to perform comprehensive code reviews on GitLab merge requests by accessing diffs, commits, comments, and managing reviews directly through the GitLab API. Streamline code review workflows with tools for version comparison, commenting, and approval management. Integrate seamlessly with development environments like Cursor IDE for enhanced productivity.",
      "repository_url": "https://github.com/mehmetakinn/gitlab-mcp-code-review",
      "homepage": "https://smithery.ai/server/@mehmetakinn/gitlab-mcp-code-review",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "7",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@mehmetakinn_gitlab-mcp-code-review.json",
      "tools_count": 8,
      "tools": [
        {
          "name": "fetch_merge_request",
          "description": "Deploy Server GitLab Code Review Integration Claim Server @mehmetakinn/gitlab-mcp-code-review Try in Playground fetch_merge_request",
          "parameters": []
        },
        {
          "name": "fetch_merge_request_diff",
          "description": "Fetch the diff for a specific file in a merge request, or all files if none specified. Args: project_id: The GitLab project ID or URL-encoded path merge_request_iid: The merge request IID (project-specific ID) file_path: Optional specific file path to get diff for Returns: Dict containing the diff information",
          "parameters": []
        },
        {
          "name": "fetch_commit_diff",
          "description": "Fetch the diff for a specific commit, or for a specific file in that commit. Args: project_id: The GitLab project ID or URL-encoded path commit_sha: The commit SHA file_path: Optional specific file path to get diff for Returns: Dict containing the diff information",
          "parameters": []
        },
        {
          "name": "compare_versions",
          "description": "Compare two commits/branches/tags to see the differences between them. Args: project_id: The GitLab project ID or URL-encoded path from_sha: The source commit/branch/tag to_sha: The target commit/branch/tag Returns: Dict containing the comparison information",
          "parameters": []
        },
        {
          "name": "add_merge_request_comment",
          "description": "Add a comment to a merge request, optionally at a specific position in a file. Args: project_id: The GitLab project ID or URL-encoded path merge_request_iid: The merge request IID (project-specific ID) body: The comment text position: Optional position data for line comments Returns: Dict containing the created comment information",
          "parameters": []
        },
        {
          "name": "approve_merge_request",
          "description": "Approve a merge request. Args: project_id: The GitLab project ID or URL-encoded path merge_request_iid: The merge request IID (project-specific ID) approvals_required: Optional number of required approvals to set Returns: Dict containing the approval information",
          "parameters": []
        },
        {
          "name": "unapprove_merge_request",
          "description": "Unapprove a merge request. Args: project_id: The GitLab project ID or URL-encoded path merge_request_iid: The merge request IID (project-specific ID) Returns: Dict containing the unapproval information",
          "parameters": []
        },
        {
          "name": "get_project_merge_requests",
          "description": "Get all merge requests for a project. Args: project_id: The GitLab project ID or URL-encoded path state: Filter merge requests by state (all, opened, closed, merged, or locked) limit: Maximum number of merge requests to return Returns: List of merge request objects",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@mehmetakinn/gitlab-mcp-code-review/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "gitlabToken",
          "required": true,
          "description": "GitLab personal access token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@mehmetakinn/gitlab-mcp-code-review/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0788.@mehmetakinn_gitlab-mcp-code-review_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 770
  }
}