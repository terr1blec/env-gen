{
  "labels": {
    "analysis": "The MCP Server \"Vibe Marketing MCP (HyperFeed.ai)\" is primarily focused on AI-powered marketing and social media content creation. Its tools enable users to generate engaging social media content using frameworks, archetypes, and trending content, while also ensuring content adheres to platform-specific formatting rules and avoids problematic phrases. The core functionality revolves around content generation, optimization, and analysis for social media marketing.",
    "reasoning": "The primary label \"Social Media\" was chosen because the server's tools are explicitly designed for creating and optimizing content on social media platforms. Secondary labels \"Content Creation\" and \"Data Analysis & Processing\" were selected because the server aids in content generation (e.g., templates, frameworks) and includes analysis tools like trending content and content validation. The custom label \"AI-Powered Marketing\" was chosen because the server leverages AI to assist with marketing tasks, which is a unique and central aspect of its functionality.",
    "primary_label": "Social Media",
    "secondary_labels": [
      "Content Creation",
      "Data Analysis & Processing"
    ],
    "custom_label": "AI-Powered Marketing",
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 562,
    "server_name": "Vibe Marketing MCP (HyperFeed.ai)",
    "rank_by_usage": 563,
    "usage_count": "21",
    "original_file": "../crawler/smithery/@synthetic-ci_vibe-marketing.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@synthetic-ci/vibe-marketing/mcp?config=eyJkZWJ1ZyI6IGZhbHNlfQ==&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "find-hooks",
          "description": "Find social media hooks by network and/or category",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Social media network (twitter, instagram, linkedin, tiktok, youtube)"
              },
              "category": {
                "type": "string",
                "description": "Hook category (engagement, educational, promotional, storytelling, etc.)"
              },
              "limit": {
                "type": "number",
                "default": 10,
                "description": "Maximum number of hooks to return"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-network-categories-for-hooks",
          "description": "Get all available categories for a specific social media network",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Social media network name (twitter, instagram, linkedin, tiktok, youtube)"
              }
            },
            "required": [
              "network"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "list-copywriting-frameworks",
          "description": "Get a list of available copywriting frameworks and their descriptions for a specific social media network",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Social media network (twitter, instagram, linkedin, tiktok, youtube, facebook)"
              }
            },
            "required": [
              "network"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-copywriting-framework",
          "description": "Get detailed information about a specific copywriting framework for a network",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Social media network (twitter, instagram, linkedin, tiktok, youtube, facebook)"
              },
              "framework": {
                "type": "string",
                "description": "Framework name (aida, pas, bab, 4cs, uuuu, pppp, slap, app, storybrand)"
              }
            },
            "required": [
              "network",
              "framework"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "list-archetypes",
          "description": "Get a list of all available voice archetypes with their names and descriptions",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-archetype",
          "description": "Get detailed information about a specific voice archetype including tweet examples",
          "input_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The archetype name (e.g., 'AUTHORITY', 'COMEDIAN', 'HUSTLER')"
              }
            },
            "required": [
              "name"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "flag-problematic-phrases",
          "description": "Check text for phrases that should be avoided to make content more human and less AI-like. Returns any flagged phrases found in the text.",
          "input_schema": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "The text to check for problematic phrases"
              }
            },
            "required": [
              "text"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "validate-content-before-fold",
          "description": "Check if content meets the before-fold character and line limits for each social media platform",
          "input_schema": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "The text content to validate"
              },
              "platform": {
                "type": "string",
                "enum": [
                  "twitter",
                  "instagram",
                  "facebook",
                  "tiktok",
                  "linkedin",
                  "youtube"
                ],
                "description": "Social media platform"
              },
              "contentType": {
                "type": "string",
                "enum": [
                  "title",
                  "description",
                  "post"
                ],
                "default": "post",
                "description": "Content type (only relevant for YouTube: 'title' or 'description')"
              }
            },
            "required": [
              "text",
              "platform"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-text-before-fold",
          "description": "Truncate text to fit within the 'before fold' character limits for each social media platform for previewing purposes",
          "input_schema": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "The text content to truncate"
              },
              "platform": {
                "type": "string",
                "enum": [
                  "twitter",
                  "instagram",
                  "facebook",
                  "tiktok",
                  "linkedin",
                  "youtube"
                ],
                "description": "Social media platform"
              },
              "contentType": {
                "type": "string",
                "enum": [
                  "title",
                  "description",
                  "post"
                ],
                "default": "post",
                "description": "Content type (only relevant for YouTube: 'title' or 'description')"
              }
            },
            "required": [
              "text",
              "platform"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-trending-content",
          "description": "Fetch trending social media content from the HyperFeed API",
          "input_schema": {
            "type": "object",
            "properties": {
              "networks": {
                "type": "string",
                "default": "twitter",
                "description": "Social media networks to get trending content from (e.g., 'twitter' and 'reddit')"
              },
              "limit": {
                "type": "number",
                "description": "Maximum number of trending items to return"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 10,
      "tool_names": [
        "find-hooks",
        "get-network-categories-for-hooks",
        "list-copywriting-frameworks",
        "get-copywriting-framework",
        "list-archetypes",
        "get-archetype",
        "flag-problematic-phrases",
        "validate-content-before-fold",
        "get-text-before-fold",
        "get-trending-content"
      ]
    },
    "server_info_crawled": {
      "id": 562,
      "name": "Vibe Marketing MCP (HyperFeed.ai)",
      "author": "@synthetic-ci/vibe-marketing",
      "overview": "An MCP server designed for AI-powered marketing and social media content creation. This service provides tools, templates, and frameworks to help create engaging content across top social media platforms.",
      "repository_url": "https://github.com/synthetic-ci/vibe-marketing",
      "homepage": "https://smithery.ai/server/@synthetic-ci/vibe-marketing",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "21",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@synthetic-ci_vibe-marketing.json",
      "tools_count": 10,
      "tools": [
        {
          "name": "find-hooks",
          "description": "Find social media hooks by network and/or category",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Social media network (twitter, instagram, linkedin, tiktok, youtube)"
              },
              "category": {
                "type": "string",
                "description": "Hook category (engagement, educational, promotional, storytelling, etc.)"
              },
              "limit": {
                "type": "number",
                "default": 10,
                "description": "Maximum number of hooks to return"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-network-categories-for-hooks",
          "description": "Get all available categories for a specific social media network",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Social media network name (twitter, instagram, linkedin, tiktok, youtube)"
              }
            },
            "required": [
              "network"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "list-copywriting-frameworks",
          "description": "Get a list of available copywriting frameworks and their descriptions for a specific social media network",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Social media network (twitter, instagram, linkedin, tiktok, youtube, facebook)"
              }
            },
            "required": [
              "network"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-copywriting-framework",
          "description": "Get detailed information about a specific copywriting framework for a network",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Social media network (twitter, instagram, linkedin, tiktok, youtube, facebook)"
              },
              "framework": {
                "type": "string",
                "description": "Framework name (aida, pas, bab, 4cs, uuuu, pppp, slap, app, storybrand)"
              }
            },
            "required": [
              "network",
              "framework"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "list-archetypes",
          "description": "Get a list of all available voice archetypes with their names and descriptions",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-archetype",
          "description": "Get detailed information about a specific voice archetype including tweet examples",
          "input_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The archetype name (e.g., 'AUTHORITY', 'COMEDIAN', 'HUSTLER')"
              }
            },
            "required": [
              "name"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "flag-problematic-phrases",
          "description": "Check text for phrases that should be avoided to make content more human and less AI-like. Returns any flagged phrases found in the text.",
          "input_schema": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "The text to check for problematic phrases"
              }
            },
            "required": [
              "text"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "validate-content-before-fold",
          "description": "Check if content meets the before-fold character and line limits for each social media platform",
          "input_schema": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "The text content to validate"
              },
              "platform": {
                "type": "string",
                "enum": [
                  "twitter",
                  "instagram",
                  "facebook",
                  "tiktok",
                  "linkedin",
                  "youtube"
                ],
                "description": "Social media platform"
              },
              "contentType": {
                "type": "string",
                "enum": [
                  "title",
                  "description",
                  "post"
                ],
                "default": "post",
                "description": "Content type (only relevant for YouTube: 'title' or 'description')"
              }
            },
            "required": [
              "text",
              "platform"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-text-before-fold",
          "description": "Truncate text to fit within the 'before fold' character limits for each social media platform for previewing purposes",
          "input_schema": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "The text content to truncate"
              },
              "platform": {
                "type": "string",
                "enum": [
                  "twitter",
                  "instagram",
                  "facebook",
                  "tiktok",
                  "linkedin",
                  "youtube"
                ],
                "description": "Social media platform"
              },
              "contentType": {
                "type": "string",
                "enum": [
                  "title",
                  "description",
                  "post"
                ],
                "default": "post",
                "description": "Content type (only relevant for YouTube: 'title' or 'description')"
              }
            },
            "required": [
              "text",
              "platform"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "get-trending-content",
          "description": "Fetch trending social media content from the HyperFeed API",
          "input_schema": {
            "type": "object",
            "properties": {
              "networks": {
                "type": "string",
                "default": "twitter",
                "description": "Social media networks to get trending content from (e.g., 'twitter' and 'reddit')"
              },
              "limit": {
                "type": "number",
                "description": "Maximum number of trending items to return"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"debug\": false\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@synthetic-ci/vibe-marketing/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"debug\": false\n}",
      "python_sdk_url": "https://server.smithery.ai/@synthetic-ci/vibe-marketing/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "0563.@synthetic-ci_vibe-marketing_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 551
  }
}