{
  "labels": {
    "analysis": "The MCP Server is primarily focused on web-based data extraction and information retrieval using AI-powered tools. Its core functionality includes structured data extraction from webpages, AI-driven web searches with structured results, and conversion of web content to markdown. These tools enable users to quickly gather and format information from the web in a structured manner, making them ideal for research, automation, and content processing tasks.",
    "reasoning": "The primary label \"Web Search & Research\" was chosen because the server's main tools (searchscraper and smartscraper) are designed for finding and extracting information from the web, which aligns closely with this category. The secondary label \"Browser Automation\" was selected because the smartscraper tool performs automated data extraction from webpages, which is a form of browser automation. The secondary label \"Content Creation\" was added because the markdownify tool helps transform web content into a more digestible format, which is relevant for content creators.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Browser Automation",
      "Content Creation"
    ],
    "custom_label": "Structured Web Data Extraction",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 244,
    "server_name": "ScrapeGraph MCP Server",
    "rank_by_usage": 245,
    "usage_count": "163",
    "original_file": "../crawler/smithery/@ScrapeGraphAI_scrapegraph-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@ScrapeGraphAI/scrapegraph-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 244,
      "name": "ScrapeGraph MCP Server",
      "author": "@ScrapeGraphAI/scrapegraph-mcp",
      "overview": "ScrapeGraphAI is a LLM-powered scraping API for structured data extraction from any website. SmartScraper allows you to extract structured data from a specific webpage, SearchScraper finds the information you're looking for on the web and returns a structured response, and Markdownify converts webpages into markdown.\n\nWeb search integration and content filtering\n\nAPI KEY --> dashboard.scrapegraphai.com",
      "repository_url": "https://github.com/ScrapeGraphAI/scrapegraph-mcp",
      "homepage": "https://smithery.ai/server/@ScrapeGraphAI/scrapegraph-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "163",
      "success_rate": "99.59%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@ScrapeGraphAI_scrapegraph-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "markdownify",
          "description": "Deploy Server ScrapeGraph MCP Server @ScrapeGraphAI/scrapegraph-mcp Try in Playground markdownify",
          "parameters": []
        },
        {
          "name": "smartscraper",
          "description": "Extract structured data from a webpage using AI.\n\n    Args:\n        user_prompt: Instructions for what data to extract\n        website_url: URL of the webpage to scrape\n\n    Returns:\n        Dictionary containing the extracted data",
          "parameters": []
        },
        {
          "name": "searchscraper",
          "description": "Perform AI-powered web searches with structured results.\n\n    Args:\n        user_prompt: Search query or instructions\n\n    Returns:\n        Dictionary containing search results and reference URLs",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@ScrapeGraphAI/scrapegraph-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "scrapegraphApiKey",
          "required": true,
          "description": "Your Scrapegraph API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@ScrapeGraphAI/scrapegraph-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0245.@ScrapeGraphAI_scrapegraph-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 241
  }
}