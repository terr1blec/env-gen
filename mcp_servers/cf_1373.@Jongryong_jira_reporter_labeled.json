{
  "labels": {
    "analysis": "The MCP Server's core functionality centers around generating automated weekly reports for Jira issues based on custom JQL queries. It helps users monitor, track, and analyze Jira project statuses, plus it offers additional features to identify delayed issues and optionally analyze them using a client's LLM for insights. This makes it particularly useful for project management, issue tracking, and team productivity in software development environments.",
    "reasoning": "The primary functionality of generating and analyzing Jira reports falls under development tools due to its focus on issue tracking in software development workflows. The additional tool for finding delayed issues and analyzing them aligns with project management practices. While the LLM integration could be seen as an AI/ML feature, the primary use case remains tied to development workflows.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Project Management",
      "AI/ML Tools"
    ],
    "custom_label": "Issue Tracking Automation",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1372,
    "server_name": "Jira Weekly Reporter",
    "rank_by_usage": 1373,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@Jongryong_jira_reporter.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Jongryong/jira_reporter/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1372,
      "name": "Jira Weekly Reporter",
      "author": "@Jongryong/jira_reporter",
      "overview": "Generate detailed weekly reports of Jira issues based on customizable JQL queries. Connect securely to your Jira instance and optionally summarize reports using the client's Large Language Model. Easily integrate with Claude Desktop or run standalone for flexible reporting workflows.",
      "repository_url": "https://github.com/Jongryong/jira_reporter",
      "homepage": "https://smithery.ai/server/@Jongryong/jira_reporter",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Jongryong_jira_reporter.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "generate_jira_report",
          "description": "Deploy Server Jira Weekly Reporter Claim Server @Jongryong/jira_reporter Try in Playground generate_jira_report",
          "parameters": []
        },
        {
          "name": "find_delayed_issues",
          "description": "마감일이 지났지만 아직 해결되지 않은 Jira 이슈를 찾아 보고합니다.\n    선택적으로 클라이언트 LLM을 사용하여 각 이슈의 지연 이유를 분석합니다.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Jongryong/jira_reporter/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "jiraApiToken",
          "required": true,
          "description": "Jira API token or Personal Access Token"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Jongryong/jira_reporter/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1373.@Jongryong_jira_reporter_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1289
  }
}