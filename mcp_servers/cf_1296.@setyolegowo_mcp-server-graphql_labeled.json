{
  "labels": {
    "analysis": "The MCP Server functions as a GraphQL API service, providing a flexible and efficient interface for querying and manipulating MCP data. This indicates a focus on data integration and manipulation through standardized API interactions. The optional tool for server access management suggests basic operational control but the core value is in the API capabilities.",
    "reasoning": "The primary purpose is data querying/manipulation, which closely aligns with API services. While it involves database access patterns, it's more about providing an interface than direct database operations. Only one minor tool was mentioned (user authentication), so secondary labels should reinforce the API-focused nature. No unique features justify a custom label beyond existing categories.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Database Operations",
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1295,
    "server_name": "GraphQL API Service",
    "rank_by_usage": 1296,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@setyolegowo_mcp-server-graphql.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@setyolegowo/mcp-server-graphql/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1295,
      "name": "GraphQL API Service",
      "author": "@setyolegowo/mcp-server-graphql",
      "overview": "Provide a flexible and efficient interface for querying and manipulating MCP data. Streamline your interactions with MCP services through a powerful GraphQL API. Enhance your applications with seamless data integration and manipulation capabilities.",
      "repository_url": "https://github.com/setyolegowo/mcp-server-graphql",
      "homepage": "https://smithery.ai/server/@setyolegowo/mcp-server-graphql",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@setyolegowo_mcp-server-graphql.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "Optional Settings",
          "description": "Access and manage servers by signing in.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@setyolegowo/mcp-server-graphql/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@setyolegowo/mcp-server-graphql/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1296.@setyolegowo_mcp-server-graphql_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1232
  }
}