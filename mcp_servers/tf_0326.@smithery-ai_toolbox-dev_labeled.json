{
  "labels": {
    "analysis": "The MCP Server acts as a middleware layer enabling Large Language Models (LLMs) to interact with external tools and resources. It facilitates dynamic access to services through a standardized interface for tool management, allowing for seamless integration of AI-driven workflows. The core functionality involves searching for available MCP servers and executing operations through them. This bridge between AI agents and external services enhances automation and extends capabilities beyond pure conversational AI.",
    "reasoning": "The primary label \"API Integration\" was chosen because the server's main function is bridging AI systems with external services through a standardized interface. \"Browser Automation\" and \"Development Tools\" were selected as secondary labels due to the potential use cases involving web-scraping-like operations and developer-oriented workflow enhancements. No custom label was needed as the functionality aligns well with established categories.",
    "primary_label": "API Integration",
    "secondary_labels": [
      "Browser Automation",
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 325,
    "server_name": "Toolbox (Preview)",
    "rank_by_usage": 326,
    "usage_count": "98",
    "original_file": "../crawler/smithery/@smithery-ai_toolbox-dev.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@smithery-ai/toolbox-dev/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "search_servers",
          "description": "Search for Model Context Protocol (MCP) servers in the Smithery MCP registry. MCPs are tools that allow you to interact with other services to perform tasks. This tool allows you to find MCP servers by name, description, or other attributes. Each server on the registry comes with a set of available tools, which can be used once added.",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query for finding MCP servers. You can either write keywords if you want something broad or are referencing a specific server by name, or you can write a detailed description (1-2 sentences) specifying exactly what you are looking for. We perform hybrid search."
              },
              "n": {
                "type": "number",
                "maximum": 5,
                "description": "Number of results to return (default: 3)"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "use_tool",
          "description": "Execute a specific tool call on an MCP server.",
          "input_schema": {
            "type": "object",
            "properties": {
              "qualifiedName": {
                "type": "string",
                "description": "The qualified name of the server to use"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the tool to call"
                  },
                  "arguments": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "The arguments to pass to the tool"
                  }
                },
                "required": [
                  "name"
                ],
                "additionalProperties": false
              }
            },
            "required": [
              "qualifiedName",
              "parameters"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 2,
      "tool_names": [
        "search_servers",
        "use_tool"
      ]
    },
    "server_info_crawled": {
      "id": 325,
      "name": "Toolbox (Preview)",
      "author": "@smithery-ai/toolbox-dev",
      "overview": "Enable seamless integration of LLM applications with external tools and resources through a flexible MCP server. Facilitate dynamic access to data, actions, and prompt templates to enhance AI-driven workflows. Simplify the orchestration of complex tasks by providing a standardized interface for tool and resource management.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@smithery-ai/toolbox-dev",
      "remote_or_local": "Remote",
      "license": "Not specified",
      "usage_count": "98",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@smithery-ai_toolbox-dev.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "search_servers",
          "description": "Search for Model Context Protocol (MCP) servers in the Smithery MCP registry. MCPs are tools that allow you to interact with other services to perform tasks. This tool allows you to find MCP servers by name, description, or other attributes. Each server on the registry comes with a set of available tools, which can be used once added.",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query for finding MCP servers. You can either write keywords if you want something broad or are referencing a specific server by name, or you can write a detailed description (1-2 sentences) specifying exactly what you are looking for. We perform hybrid search."
              },
              "n": {
                "type": "number",
                "maximum": 5,
                "description": "Number of results to return (default: 3)"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        },
        {
          "name": "use_tool",
          "description": "Execute a specific tool call on an MCP server.",
          "input_schema": {
            "type": "object",
            "properties": {
              "qualifiedName": {
                "type": "string",
                "description": "The qualified name of the server to use"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the tool to call"
                  },
                  "arguments": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "The arguments to pass to the tool"
                  }
                },
                "required": [
                  "name"
                ],
                "additionalProperties": false
              }
            },
            "required": [
              "qualifiedName",
              "parameters"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@smithery-ai/toolbox-dev/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "smitheryApiKey",
          "required": true,
          "description": "The API key to authenticate against Smithery services."
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@smithery-ai/toolbox-dev/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "0326.@smithery-ai_toolbox-dev_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 322
  }
}