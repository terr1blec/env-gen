{
  "labels": {
    "analysis": "The MCP Server provides an interface to generate professional diagrams (such as flowcharts, architecture diagrams, and UML diagrams) from text descriptions using the Eraser API. It offers robust error handling, input validation, and integration capabilities, making it useful for software developers, engineers, and technical documentation creators. The core functionality revolves around automated diagram generation, which falls under the category of tools that assist in technical documentation and visualization.",
    "reasoning": "The primary functionality of the MCP Server is diagram generation from text, which aligns closely with the \"Content Creation\" category, as it helps in creating visual content (diagrams) for technical documentation. The \"Development Tools\" category is also relevant, as diagrams are often used in software development workflows. A custom label is not required as the functionality fits well within the predefined categories.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 481,
    "server_name": "Eraser Diagram Generator",
    "rank_by_usage": 482,
    "usage_count": "36",
    "original_file": "../crawler/smithery/@dravidsajinraj-iex_ai-diagram-generator-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@dravidsajinraj-iex/ai-diagram-generator-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 481,
      "name": "Eraser Diagram Generator",
      "author": "@dravidsajinraj-iex/ai-diagram-generator-mcp",
      "overview": "Generate professional diagrams from text descriptions using the Eraser API through a simple MCP interface. Create flowcharts, architecture diagrams, UML diagrams, and more with robust error handling and input validation. Seamlessly integrate diagram generation capabilities into your MCP-compatible clients.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@dravidsajinraj-iex/ai-diagram-generator-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "36",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@dravidsajinraj-iex_ai-diagram-generator-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "generateDiagram",
          "description": "Deploy Server Eraser Diagram Generator @dravidsajinraj-iex/ai-diagram-generator-mcp Try in Playground generateDiagram",
          "parameters": [
            {
              "name": "generateDiagram",
              "required": false,
              "type": "string"
            },
            {
              "name": "prompt",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@dravidsajinraj-iex/ai-diagram-generator-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "eraserApiKey",
          "required": true,
          "description": "Eraser API key for authentication"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@dravidsajinraj-iex/ai-diagram-generator-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0482.@dravidsajinraj-iex_ai-diagram-generator-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 472
  }
}