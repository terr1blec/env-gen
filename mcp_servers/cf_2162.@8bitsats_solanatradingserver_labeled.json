{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate trading and management of Solana tokens. It provides tools for creating and importing wallets, checking token balances, and executing token swaps. The server includes real-time transaction tracking and customizable slippage options, indicating its focus on cryptocurrency trading and blockchain interaction.",
    "reasoning": "The primary functionality of the server revolves around cryptocurrency and blockchain operations, specifically Solana token trading. This aligns with the \"Cryptocurrency & Blockchain\" category. Additionally, the server offers wallet management and transaction execution, which further supports this classification. Secondary labels like \"Security & Authentication\" (due to wallet creation/import) and \"Financial Services\" (due to token swaps and trading) are also relevant.",
    "primary_label": "Cryptocurrency & Blockchain",
    "secondary_labels": [
      "Security & Authentication",
      "Financial Services"
    ],
    "custom_label": "Solana Trading Tools",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 2161,
    "server_name": "Solana Trading Server",
    "rank_by_usage": 2162,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@8bitsats_solanatradingserver.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@8bitsats/solanatradingserver/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "Connection timeout (20 seconds)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 2161,
      "name": "Solana Trading Server",
      "author": "@8bitsats/solanatradingserver",
      "overview": "Facilitate seamless Solana token trading with our server. Create wallets, check balances, and execute swaps effortlessly through a user-friendly interface. Enhance your trading experience with real-time transaction tracking and customizable slippage options.",
      "repository_url": "https://github.com/8bitsats/solana-MCP-trading-server-1",
      "homepage": "https://smithery.ai/server/@8bitsats/solanatradingserver",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@8bitsats_solanatradingserver.json",
      "tools_count": 5,
      "tools": [
        {
          "name": "create_wallet",
          "description": "Deploy Server Solana Trading Server @8bitsats/solanatradingserver Try in Playground create_wallet",
          "parameters": [
            {
              "name": "create_wallet",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "import_wallet",
          "description": "Import an existing Solana wallet using private key",
          "parameters": [
            {
              "name": "import_wallet",
              "required": false,
              "type": "string"
            },
            {
              "name": "privateKey",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_token_balance",
          "description": "Get token balance for a wallet",
          "parameters": [
            {
              "name": "tokenMint",
              "required": true,
              "type": "string"
            },
            {
              "name": "walletAddress",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_swap_quote",
          "description": "Get a quote for swapping tokens",
          "parameters": [
            {
              "name": "amount",
              "required": true,
              "type": "string"
            },
            {
              "name": "slippage",
              "required": true,
              "type": "string"
            },
            {
              "name": "inputMint",
              "required": true,
              "type": "string"
            },
            {
              "name": "outputMint",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "execute_swap",
          "description": "Description not available",
          "parameters": [
            {
              "name": "Execute",
              "required": false,
              "type": "string"
            },
            {
              "name": "a",
              "required": false,
              "type": "string"
            },
            {
              "name": "token",
              "required": false,
              "type": "string"
            },
            {
              "name": "swap",
              "required": false,
              "type": "string"
            },
            {
              "name": "quote",
              "required": true,
              "type": "string"
            },
            {
              "name": "walletPrivateKey",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@8bitsats/solanatradingserver/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@8bitsats/solanatradingserver/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_2162.@8bitsats_solanatradingserver_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1870
  }
}