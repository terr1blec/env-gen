{
  "labels": {
    "analysis": "The MCP Server described provides a scalable framework for implementing the Model Context Protocol (MCP) using Node.js and NestJS. Its core functionality revolves around integrating LLMs with external data and tools, facilitating rapid development and deployment. The available tool \"subway\" suggests a specific use case for querying subway arrival information. The server appears to be a general-purpose framework with specialized tools for access to real-time transportation data.",
    "reasoning": "The primary label \"Development Tools\" was chosen because the server primarily serves as a framework for developing MCP applications. It leverages modern development tools like TypeScript and NestJS. \"Transportation\" was chosen as a secondary label because of the subway tool, indicating real-time data access capabilities. The server doesn't fit neatly into any other predefined categories despite its sophisticated architecture, so no additional secondary labels or custom labels are needed.",
    "primary_label": "Development Tools",
    "secondary_labels": [
      "Travel & Maps"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1306,
    "server_name": "Subway MCP Server",
    "rank_by_usage": 1307,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@cyong80_subway-mcp.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@cyong80/subway-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "subway",
          "description": "지하철 도착 정보 조회",
          "input_schema": {
            "type": "object",
            "properties": {
              "station": {
                "type": "string"
              }
            },
            "required": [
              "station"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "tool_count": 1,
      "tool_names": [
        "subway"
      ]
    },
    "server_info_crawled": {
      "id": 1306,
      "name": "Subway MCP Server",
      "author": "@cyong80/subway-mcp",
      "overview": "Provide a scalable and efficient server-side application framework to implement the Model Context Protocol (MCP) using Node.js and NestJS. Enable seamless integration of LLMs with external data and tools through a robust and maintainable server architecture. Facilitate rapid development and deployment of MCP servers with modern TypeScript tooling and best practices.",
      "repository_url": "https://github.com/smithery-ai",
      "homepage": "https://smithery.ai/server/@cyong80/subway-mcp",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@cyong80_subway-mcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "subway",
          "description": "지하철 도착 정보 조회",
          "input_schema": {
            "type": "object",
            "properties": {
              "station": {
                "type": "string"
              }
            },
            "required": [
              "station"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@cyong80/subway-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@cyong80/subway-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "1307.@cyong80_subway-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1241
  }
}