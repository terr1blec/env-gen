{
  "labels": {
    "analysis": "The MCP Server specializes in video format conversion using FFmpeg, offering tools to check for FFmpeg installation, convert videos between various formats, and retrieve supported video formats. Its core functionality revolves around media processing, automating transcoding tasks, and enabling efficient video format compatibility. The server enhances media workflows by providing structured video conversion capabilities with customizable quality, framerate, and format options.",
    "reasoning": "The primary label is chosen based on the server's core functionality of converting and processing video files, which aligns with media workflow enhancement. Secondary labels are selected due to its dependency on system-level tools (FFmpeg) and the structured approach to file operations. No custom label is needed as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Content Creation",
    "secondary_labels": [
      "File Management",
      "Operating System"
    ],
    "custom_label": null,
    "is_connected": true,
    "is_remote_tool_valid": true,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1055,
    "server_name": "Video Convert",
    "rank_by_usage": 1056,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@adamanz_video-convert.json",
    "mode": "smithery",
    "timestamp": 1751938055,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@adamanz/video-convert/mcp?config=eyJxdWFsaXR5IjogIm1lZGl1bSJ9&api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": true,
      "error": null,
      "tools": [
        {
          "name": "check_ffmpeg_installed",
          "description": "\n    Checks if FFmpeg is installed and accessible.\n    Returns a dictionary with 'installed' (bool) and 'version' (str) or 'error' (str).\n\n    Args:\n        ctx: Context for logging progress and results.\n    ",
          "input_schema": {
            "additionalProperties": false,
            "properties": {},
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "convert_video",
          "description": "\n    Converts a video file to the specified output format using FFmpeg.\n\n    Args:\n        input_file_path: The absolute path to the input video file.\n        output_format: The desired output format (e.g., \"mp4\", \"webm\", \"mov\").\n        quality: Optional quality setting (\"low\", \"medium\", \"high\").\n        framerate: Optional framerate for video output.\n        ctx: Context for progress reporting.\n\n    Returns:\n        A dictionary with conversion status, output file path, or an error message.\n    ",
          "input_schema": {
            "additionalProperties": false,
            "properties": {
              "input_file_path": {
                "title": "Input File Path",
                "type": "string"
              },
              "output_format": {
                "title": "Output Format",
                "type": "string"
              },
              "quality": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Quality"
              },
              "framerate": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Framerate"
              }
            },
            "required": [
              "input_file_path",
              "output_format"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_supported_formats",
          "description": "\n    Returns a list of supported formats for conversion.\n\n    Args:\n        ctx: Context for logging.\n\n    Returns:\n        A dictionary with lists of supported formats by category.\n    ",
          "input_schema": {
            "additionalProperties": false,
            "properties": {},
            "type": "object"
          },
          "annotations": null
        }
      ],
      "tool_count": 3,
      "tool_names": [
        "check_ffmpeg_installed",
        "convert_video",
        "get_supported_formats"
      ]
    },
    "server_info_crawled": {
      "id": 1055,
      "name": "Video Convert",
      "author": "@adamanz/video-convert",
      "overview": "Convert videos between various formats quickly and easily. Enhance your media workflow by automating video transcoding tasks. Support multiple input and output formats to fit your needs.",
      "repository_url": "https://github.com/adamanz/mcp-video-converter",
      "homepage": "https://smithery.ai/server/@adamanz/video-convert",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@adamanz_video-convert.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "check_ffmpeg_installed",
          "description": "\n    Checks if FFmpeg is installed and accessible.\n    Returns a dictionary with 'installed' (bool) and 'version' (str) or 'error' (str).\n\n    Args:\n        ctx: Context for logging progress and results.\n    ",
          "input_schema": {
            "additionalProperties": false,
            "properties": {},
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "convert_video",
          "description": "\n    Converts a video file to the specified output format using FFmpeg.\n\n    Args:\n        input_file_path: The absolute path to the input video file.\n        output_format: The desired output format (e.g., \"mp4\", \"webm\", \"mov\").\n        quality: Optional quality setting (\"low\", \"medium\", \"high\").\n        framerate: Optional framerate for video output.\n        ctx: Context for progress reporting.\n\n    Returns:\n        A dictionary with conversion status, output file path, or an error message.\n    ",
          "input_schema": {
            "additionalProperties": false,
            "properties": {
              "input_file_path": {
                "title": "Input File Path",
                "type": "string"
              },
              "output_format": {
                "title": "Output Format",
                "type": "string"
              },
              "quality": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Quality"
              },
              "framerate": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Framerate"
              }
            },
            "required": [
              "input_file_path",
              "output_format"
            ],
            "type": "object"
          },
          "annotations": null
        },
        {
          "name": "get_supported_formats",
          "description": "\n    Returns a list of supported formats for conversion.\n\n    Args:\n        ctx: Context for logging.\n\n    Returns:\n        A dictionary with lists of supported formats by category.\n    ",
          "input_schema": {
            "additionalProperties": false,
            "properties": {},
            "type": "object"
          },
          "annotations": null
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nconfig = {\n  \"quality\": \"medium\"\n}\n# Encode config in base64\nconfig_b64 = base64.b64encode(json.dumps(config).encode()).decode()\nsmithery_api_key = \"\"\n\n# Create server URL\nurl = f\"https://server.smithery.ai/@adamanz/video-convert/mcp?config={config_b64}&api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "{\n  \"quality\": \"medium\"\n}",
      "python_sdk_url": "https://server.smithery.ai/@adamanz/video-convert/mcp?config={config_b64}&api_key={smithery_api_key}"
    },
    "source_filename": "1056.@adamanz_video-convert_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1034
  }
}