{
  "labels": {
    "analysis": "The MCP Server in question is a specialized tool that bridges the gap between language models (LLMs) and real-time Google search results. It enables AI agents to perform dynamic web searches, ensuring responses are up-to-date and accurate. The core functionality revolves around providing search capabilities through the Serper API, which allows for quick and efficient retrieval of information from Google. This is particularly useful for applications requiring current data, such as Q&A systems, research assistants, or any AI-powered tool that benefits from real-time web information.",
    "reasoning": "The primary functionality of fetching real-time search results via Serper API aligns closely with the \"Web Search & Research\" category. The integration aspect with MCP clients suggests a secondary relevance to \"API Integration.\" While the server does involve web interactions, it is distinctly focused on search rather than broad browser automation or data analysis, which justifies the primary label choice.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 309,
    "server_name": "Serper Google Search Server",
    "rank_by_usage": 310,
    "usage_count": "105",
    "original_file": "../crawler/smithery/@garylab_serper-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@garylab/serper-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 309,
      "name": "Serper Google Search Server",
      "author": "@garylab/serper-mcp-server",
      "overview": "Provide Google search results to LLMs via Serper integration. Enable your agents to fetch up-to-date search information dynamically to enhance their responses. Easily integrate with MCP clients using simple configuration and API key setup.",
      "repository_url": "https://github.com/garylab/serper-mcp-server",
      "homepage": "https://smithery.ai/server/@garylab/serper-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "105",
      "success_rate": "99.40%",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@garylab_serper-mcp-server.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "google_search",
          "description": "Deploy Server Serper Google Search Server Claim Server @garylab/serper-mcp-server Try in Playground google_search",
          "parameters": [
            {
              "name": "hl",
              "required": false,
              "type": "string"
            },
            {
              "name": "num",
              "required": false,
              "type": "string"
            },
            {
              "name": "tbs",
              "required": false,
              "type": "string"
            },
            {
              "name": "page",
              "required": false,
              "type": "string"
            },
            {
              "name": "location",
              "required": false,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@garylab/serper-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "serperApiKey",
          "required": true,
          "description": "Your Serper API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@garylab/serper-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0310.@garylab_serper-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 306
  }
}