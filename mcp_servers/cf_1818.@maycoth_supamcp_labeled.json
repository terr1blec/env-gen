{
  "labels": {
    "analysis": "The MCP Server is designed for controlling Supabase projects using natural language, allowing users to execute SQL queries, manage schema changes, and utilize the Supabase Management API. It emphasizes secure and efficient project management with built-in safety controls and IDE integration. The available tool (optional server access via login) suggests a focus on authentication and secure interaction with Supabase services.",
    "reasoning": "The primary functionality aligns closely with database operations (SQL execution, schema management) and API integration (Supabase Management API). The emphasis on security and project management suggests that Cloud Services and Development Tools may also be relevant. No unique functionality beyond predefined categories was identified.",
    "primary_label": "Database Operations",
    "secondary_labels": [
      "API Integration",
      "Development Tools"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1817,
    "server_name": "Query",
    "rank_by_usage": 1818,
    "usage_count": "Not available",
    "original_file": "../crawler/smithery/@maycoth_supamcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@maycoth/supamcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1817,
      "name": "Query",
      "author": "@maycoth/supamcp",
      "overview": "Control your Supabase projects with natural language. Execute SQL queries, manage schema changes, and utilize the Supabase Management API securely and efficiently. Enhance your development experience with built-in safety controls and seamless integration into your IDE.",
      "repository_url": "https://github.com/maycoth/supamcp",
      "homepage": "https://smithery.ai/server/@maycoth/supamcp",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "Not available",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@maycoth_supamcp.json",
      "tools_count": 1,
      "tools": [
        {
          "name": "Optional Settings",
          "description": "Access and manage servers by signing in.",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@maycoth/supamcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "queryApiKey",
          "required": true,
          "description": "(required) - Your Query API key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@maycoth/supamcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1818.@maycoth_supamcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1616
  }
}