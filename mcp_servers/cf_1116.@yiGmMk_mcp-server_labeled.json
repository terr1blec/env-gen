{
  "labels": {
    "analysis": "The MCP Server is designed to facilitate the creation and operation of servers that integrate large language models (LLMs) with real-world data and tools. It leverages Python and the uv package manager to build dynamic integrations. The available tools, such as 'fetch' and 'search', indicate that the server supports deploying applications and performing web searches to provide up-to-date information to LLMs, thus enhancing their accuracy and reducing hallucinations. The primary function is to bridge the gap between LLMs and external data sources, making it a powerful tool for applications requiring real-time, accurate information retrieval.",
    "reasoning": "The primary label is chosen because the server's core functionality revolves around enabling dynamic integrations and real-time data retrieval to support LLMs, which aligns with web search and research tasks. The secondary labels are included because the server also handles browser automation (via search functionality) and API integration (as inferred from the description of building dynamic integrations). No custom label is necessary as the predefined categories cover the server's main functionalities adequately.",
    "primary_label": "Web Search & Research",
    "secondary_labels": [
      "Browser Automation",
      "API Integration"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 1115,
    "server_name": "mcp-server",
    "rank_by_usage": 1116,
    "usage_count": "1",
    "original_file": "../crawler/smithery/@yiGmMk_mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@yiGmMk/mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 1115,
      "name": "mcp-server",
      "author": "@yiGmMk/mcp-server",
      "overview": "Create and run your own MCP server with ease. Leverage the power of Python and the uv package manager to build dynamic integrations for your applications. Simplify the process of connecting large language models with real-world data and tools.",
      "repository_url": "https://github.com/yiGmMk/mcp-server",
      "homepage": "https://smithery.ai/server/@yiGmMk/mcp-server",
      "remote_or_local": "Remote",
      "license": "Apache-2.0",
      "usage_count": "1",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@yiGmMk_mcp-server.json",
      "tools_count": 2,
      "tools": [
        {
          "name": "fetch",
          "description": "Deploy Server @yiGmMk/mcp-server Try in Playground",
          "parameters": [
            {
              "name": "fetch",
              "required": false,
              "type": "string"
            },
            {
              "name": "url",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "search",
          "description": "使用 s.jina.ai 搜索网络并获取 SERP,Reader 就会搜索网络并返回前五个结果及其 URL 和内容，每个结果都以干净、LLM 友好的文本显示。这样，您就可以始终让您的 LLM 保持最新状态，提高其真实性，并减少幻觉。不支持用作翻译",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@yiGmMk/mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "jinaApiKey",
          "required": true,
          "description": "Jina API key for authenticating requests"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@yiGmMk/mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_1116.@yiGmMk_mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 1093
  }
}