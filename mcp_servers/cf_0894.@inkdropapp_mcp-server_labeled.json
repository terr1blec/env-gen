{
  "labels": {
    "analysis": "The Inkdrop MCP Server is primarily focused on note management and retrieval. It provides tools to create, read, update, search, and organize notes, as well as listing notebooks and tags. The functionality revolves around a standardized protocol for handling notes, making it suitable for users who need efficient access and manipulation of their notes, possibly as part of a larger workflow.",
    "reasoning": "The primary functionality centers around note management, which aligns with \"Memory Management\" as it involves storage, retrieval, and organization of information. The search, listing, and update capabilities suggest productivity enhancements, making \"Daily Productivity\" a relevant secondary label. Since the server operates via HTTP, \"API Integration\" is also relevant as it deals with interactions through a protocol.",
    "primary_label": "Memory Management",
    "secondary_labels": [
      "Daily Productivity",
      "API Integration"
    ],
    "custom_label": "Note Organization & Retrieval",
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 893,
    "server_name": "Inkdrop MCP Server",
    "rank_by_usage": 894,
    "usage_count": "4",
    "original_file": "../crawler/smithery/@inkdropapp_mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@inkdropapp/mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 893,
      "name": "Inkdrop MCP Server",
      "author": "@inkdropapp/mcp-server",
      "overview": "Retrieve, create, and manage your notes seamlessly with this server. Enhance your Inkdrop experience by integrating local HTTP server capabilities for efficient note handling. Access your notes and notebooks effortlessly through a standardized protocol.",
      "repository_url": "https://github.com/inkdropapp/mcp-server",
      "homepage": "https://smithery.ai/server/@inkdropapp/mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "4",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@inkdropapp_mcp-server.json",
      "tools_count": 7,
      "tools": [
        {
          "name": "read-note",
          "description": "Deploy Server Inkdrop MCP Server Claim Server @inkdropapp/mcp-server Try in Playground",
          "parameters": [
            {
              "name": "noteId",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "search-notes",
          "description": "List all notes that contain a given keyword. The result does not include entire note bodies as they are truncated in 200 characters. You have to retrieve the full note content by calling `read-note`. Here are tips to specify keywords effectively: ## Use special qualifiers to narrow down results You can use special qualifiers to get more accurate results. See the qualifiers and their usage examples: - **book** `book:Blog`: Searches for notes in the 'Blog' notebook. `book:\"Desktop App\"`: Searches for notes in the 'Desktop App' notebook. - **bookId** `bookId:kGlLniaV`: Searches for notes in the notebook ID 'book:kGlLniaV'. - **tag** `tag:JavaScript`: Searches for all notes having the 'JavaScript' tag. Read more about [tags](https://docs.inkdrop.app/manual/write-notes#tag-notes). - **status** `status:onHold`: Searches for all notes with the 'On hold' status. Read more about [statuses](/reference/note-statuses). - **title** `title:\"JavaScript setTimeout\"`: Searches for the note with the specified title. - **body** `body:KEYWORD`: Searches for a specific word in all notes. Equivalent to a [global search](#search-for-notes-across-all-notebooks). ### Combine qualifiers You can combine the filter qualifiers to refine data even more. **Find notes that contain the word 'Hello' and have the 'Issue' tag.** ```text Hello tag:Issue **Find notes that contain the word 'Typescript,' have the 'Contribution' tag, and the 'Completed' status** ```text Typescript tag:Contribution status:Completed ## Search for text with spaces To find the text that includes spaces, put the text into the double quotation marks (\"): ```text \"database associations\" ## Exclude text from search To exclude text from the search results or ignore a specific qualifier, put the minus sign (-) before it. You can also combine the exclusions. See the examples: - `-book:Backend \"closure functions\"`: Ignores the 'Backend' notebook while searching for the 'closure functions' phrase. - `-tag:JavaScript`: Ignores all notes having the 'JavaScript' tag. - `-book:Typescript tag:work \"Data types\"`: Ignores the 'Typescript' notebook and the 'work' tag while searching for the 'Data types' phrase. - `-status:dropped title:\"Sprint 10.0\" debounce`: Ignores notes with the 'Dropped' status while searching for the 'debounce' word in the note with the 'Sprint 10.0' title. - `-\"Phrase to ignore\" \"in the rest of a sentence\"`: Ignores the 'Phrase to ignore' part while searching for 'in the rest of a sentence'. Note that you can't specify excluding modifiers only without including conditions. **WARNING**: Make sure to enter a text to search for after the exclusion modifier. - ✅ Will work `-book:Backend \"closure functions\"` - ⛔️ Won't work `-book:Backend`. There's no query. Inkdrop doesn't understand what to search for.",
          "parameters": []
        },
        {
          "name": "list-notes",
          "description": "List all notes in a specified notebook with ID. The result does not include entire note bodies as they are truncated in 200 characters. You have to retrieve the full note content by calling `read-note`.",
          "parameters": []
        },
        {
          "name": "create-note",
          "description": "Create a new note in the database",
          "parameters": [
            {
              "name": "body",
              "required": true,
              "type": "string"
            },
            {
              "name": "title",
              "required": true,
              "type": "string"
            },
            {
              "name": "bookId",
              "required": true,
              "type": "string"
            },
            {
              "name": "status",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "update-note",
          "description": "Update the existing note in the database. You should retrieve the existing note with `read-note` first. When updating the note, you must specify not only the changed fields but also all the un-changed fields.",
          "parameters": []
        },
        {
          "name": "list-notebooks",
          "description": "Retrieve a list of all notebooks",
          "parameters": []
        },
        {
          "name": "list-tags",
          "description": "Retrieve a list of all tags",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@inkdropapp/mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@inkdropapp/mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0894.@inkdropapp_mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 875
  }
}