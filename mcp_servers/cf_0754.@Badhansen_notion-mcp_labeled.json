{
  "labels": {
    "analysis": "The MCP Server described is focused on task management using Notion's API. It allows users to add, view, and mark tasks as completed within their Notion workspace. The tools provided are specifically designed to streamline productivity by managing todo lists efficiently. The integration with Notion suggests a workflow enhancement for users who rely on Notion for organization.",
    "reasoning": "The primary functionality is clearly related to personal task management, which fits under the <b>Daily Productivity</b> category. The integration with a digital workspace tool like Notion aligns with enhancing productivity. There is no indication of tools that would require custom labeling.",
    "primary_label": "Daily Productivity",
    "secondary_labels": [],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 753,
    "server_name": "Notion MCP",
    "rank_by_usage": 754,
    "usage_count": "8",
    "original_file": "../crawler/smithery/@Badhansen_notion-mcp.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@Badhansen/notion-mcp/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 753,
      "name": "Notion MCP",
      "author": "@Badhansen/notion-mcp",
      "overview": "Manage your personal todo list seamlessly with Notion's API. Add, update, and view tasks directly from your workspace using a simple and efficient interface. Enhance your productivity by integrating your tasks with a powerful Model Context Protocol server.",
      "repository_url": "https://github.com/Badhansen/notion-mcp",
      "homepage": "https://smithery.ai/server/@Badhansen/notion-mcp",
      "remote_or_local": "Remote",
      "license": "MIT",
      "usage_count": "8",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@Badhansen_notion-mcp.json",
      "tools_count": 3,
      "tools": [
        {
          "name": "add_todo",
          "description": "Deploy Server @Badhansen/notion-mcp Try in Playground",
          "parameters": [
            {
              "name": "add_todo",
              "required": false,
              "type": "string"
            },
            {
              "name": "task",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "show_all_todos",
          "description": "Show all todo items from Notion.",
          "parameters": [
            {
              "name": "show_all_todos",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "complete_todo",
          "description": "Mark a todo item as completed.",
          "parameters": [
            {
              "name": "complete_todo",
              "required": false,
              "type": "string"
            },
            {
              "name": "task_id",
              "required": true,
              "type": "string"
            }
          ]
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@Badhansen/notion-mcp/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "notionToken",
          "required": true,
          "description": "API token for the Notion integration"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@Badhansen/notion-mcp/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0754.@Badhansen_notion-mcp_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 736
  }
}