{
  "labels": {
    "analysis": "The Trello MCP Server is designed to interact with Trello, a popular project management tool. Its core functionality revolves around managing Trello boards, lists, cards, and checklists through natural language commands. The available tools allow users to perform CRUD (Create, Read, Update, Delete) operations on these Trello objects, making it a powerful tool for daily productivity and task management. The server facilitates seamless integration with Trello's API to automate and streamline workflows.",
    "reasoning": "The primary label \"Daily Productivity\" is chosen because the server's functionality directly supports task and project management, which are key aspects of daily productivity. \"Project Management\" is a secondary label as it specifically deals with organizing tasks and projects via Trello. \"File Management\" is also relevant, given the tools' capabilities to handle lists, cards, and checklists, which can be seen as structured data items being managed. No custom label is needed as the predefined categories adequately cover the server's functionality.",
    "primary_label": "Daily Productivity",
    "secondary_labels": [
      "Project Management",
      "File Management"
    ],
    "custom_label": null,
    "is_connected": false,
    "is_remote_tool_valid": false,
    "featured_server": false
  },
  "metadata": {
    "server_id": 379,
    "server_name": "Trello MCP Server",
    "rank_by_usage": 380,
    "usage_count": "68",
    "original_file": "../crawler/smithery/@m0xai_trello-mcp-server.json",
    "mode": "smithery",
    "timestamp": 1751941824,
    "remote_server_response": {
      "url": "https://server.smithery.ai/@m0xai/trello-mcp-server/mcp?api_key=8675feae-43b6-4170-beb5-d8fa5a938222&profile=monetary-anteater-CCaAaT",
      "is_success": false,
      "error": "unhandled errors in a TaskGroup (1 sub-exception)",
      "tools": [],
      "tool_count": 0,
      "tool_names": []
    },
    "server_info_crawled": {
      "id": 379,
      "name": "Trello MCP Server",
      "author": "@m0xai/trello-mcp-server",
      "overview": "Interact with your Trello boards, lists, and cards seamlessly through AI Hosts. Manage your Trello tasks effortlessly by using natural language commands to read, create, and update your boards and cards.",
      "repository_url": "https://github.com/m0xai/trello-mcp-server",
      "homepage": "https://smithery.ai/server/@m0xai/trello-mcp-server",
      "remote_or_local": "Remote",
      "license": "Smithery",
      "usage_count": "68",
      "success_rate": "Not available",
      "tags": [
        "search",
        "web",
        "api",
        "mcp"
      ],
      "categories": [
        "search",
        "api"
      ],
      "file_path": "../crawler/smithery/@m0xai_trello-mcp-server.json",
      "tools_count": 20,
      "tools": [
        {
          "name": "get_board",
          "description": "Deploy Server Trello MCP Server Claim Server @m0xai/trello-mcp-server Try in Playground",
          "parameters": []
        },
        {
          "name": "get_boards",
          "description": "Retrieves all boards for the authenticated user. Returns: List[TrelloBoard]: A list of board objects.",
          "parameters": []
        },
        {
          "name": "get_list",
          "description": "Retrieves a specific list by its ID. Args: list_id (str): The ID of the list to retrieve. Returns: TrelloList: The list object containing list details.",
          "parameters": []
        },
        {
          "name": "get_lists",
          "description": "Retrieves all lists on a given board. Args: board_id (str): The ID of the board whose lists to retrieve. Returns: List[TrelloList]: A list of list objects.",
          "parameters": []
        },
        {
          "name": "create_list",
          "description": "Creates a new list on a given board. Args: board_id (str): The ID of the board to create the list in. name (str): The name of the new list. pos (str, optional): The position of the new list. Can be \"top\" or \"bottom\". Defaults to \"bottom\". Returns: TrelloList: The newly created list object.",
          "parameters": []
        },
        {
          "name": "update_list",
          "description": "Updates the name of a list. Args: list_id (str): The ID of the list to update. name (str): The new name for the list. Returns: TrelloList: The updated list object.",
          "parameters": []
        },
        {
          "name": "delete_list",
          "description": "Archives a list. Args: list_id (str): The ID of the list to close. Returns: TrelloList: The archived list object.",
          "parameters": []
        },
        {
          "name": "get_card",
          "description": "Retrieves a specific card by its ID. Args: card_id (str): The ID of the card to retrieve. Returns: TrelloCard: The card object containing card details.",
          "parameters": []
        },
        {
          "name": "get_cards",
          "description": "Retrieves all cards in a given list. Args: list_id (str): The ID of the list whose cards to retrieve. Returns: List[TrelloCard]: A list of card objects.",
          "parameters": [
            {
              "name": "list_id",
              "required": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "create_card",
          "description": "Creates a new card in a given list. Args: list_id (str): The ID of the list to create the card in. name (str): The name of the new card. desc (str, optional): The description of the new card. Defaults to None. Returns: TrelloCard: The newly created card object.",
          "parameters": []
        },
        {
          "name": "update_card",
          "description": "Updates a card's attributes. Args: card_id (str): The ID of the card to update. **kwargs: Keyword arguments representing the attributes to update on the card. Returns: TrelloCard: The updated card object.",
          "parameters": []
        },
        {
          "name": "delete_card",
          "description": "Deletes a card. Args: card_id (str): The ID of the card to delete. Returns: dict: The response from the delete operation.",
          "parameters": []
        },
        {
          "name": "get_checklist",
          "description": "Get a specific checklist by ID. Args: checklist_id (str): The ID of the checklist to retrieve Returns: Dict: The checklist data",
          "parameters": [
            {
              "name": "The",
              "required": false,
              "type": "string"
            },
            {
              "name": "checklist",
              "required": false,
              "type": "string"
            },
            {
              "name": "data",
              "required": false,
              "type": "string"
            }
          ]
        },
        {
          "name": "get_card_checklists",
          "description": "Get all checklists for a specific card. Args: card_id (str): The ID of the card to get checklists for Returns: List[Dict]: List of checklists on the card",
          "parameters": []
        },
        {
          "name": "create_checklist",
          "description": "Create a new checklist on a card. Args: card_id (str): The ID of the card to create the checklist on name (str): The name of the checklist pos (Optional[str]): The position of the checklist (top, bottom, or a positive number) Returns: Dict: The created checklist data",
          "parameters": []
        },
        {
          "name": "update_checklist",
          "description": "Update an existing checklist. Args: checklist_id (str): The ID of the checklist to update name (Optional[str]): New name for the checklist pos (Optional[str]): New position for the checklist Returns: Dict: The updated checklist data",
          "parameters": []
        },
        {
          "name": "delete_checklist",
          "description": "Delete a checklist. Args: checklist_id (str): The ID of the checklist to delete Returns: Dict: The response from the delete operation",
          "parameters": []
        },
        {
          "name": "add_checkitem",
          "description": "Add a new item to a checklist. Args: checklist_id (str): The ID of the checklist to add the item to name (str): The name of the checkitem checked (bool): Whether the item is checked pos (Optional[str]): The position of the item Returns: Dict: The created checkitem data",
          "parameters": []
        },
        {
          "name": "update_checkitem",
          "description": "Update a checkitem in a checklist. Args: checklist_id (str): The ID of the checklist containing the item checkitem_id (str): The ID of the checkitem to update name (Optional[str]): New name for the checkitem checked (Optional[bool]): New checked state pos (Optional[str]): New position for the item Returns: Dict: The updated checkitem data",
          "parameters": []
        },
        {
          "name": "delete_checkitem",
          "description": "Delete a checkitem from a checklist. Args: checklist_id (str): The ID of the checklist containing the item checkitem_id (str): The ID of the checkitem to delete Returns: Dict: The response from the delete operation",
          "parameters": []
        }
      ],
      "python_sdk": "import mcp\nfrom mcp.client.streamable_http import streamablehttp_client\nimport json\nimport base64\n\nsmithery_api_key = \"\"\nurl = f\"https://server.smithery.ai/@m0xai/trello-mcp-server/mcp?api_key={smithery_api_key}\"\n\nasync def main():\n    # Connect to the server using HTTP client\n    async with streamablehttp_client(url) as (read_stream, write_stream, _):\n        async with mcp.ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n            # List available tools\n            tools_result = await session.list_tools()\n            print(f\"Available tools: {', '.join([t.name for t in tools_result.tools])}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
      "configuration_schema": "",
      "smithery_configuration_requirements": [
        {
          "name": "trelloToken",
          "required": true,
          "description": "Your Trello Token"
        },
        {
          "name": "trelloApiKey",
          "required": true,
          "description": "Your Trello API Key"
        }
      ],
      "python_sdk_config": "",
      "python_sdk_url": "https://server.smithery.ai/@m0xai/trello-mcp-server/mcp?api_key={smithery_api_key}"
    },
    "source_filename": "cf_0380.@m0xai_trello-mcp-server_prepared.json",
    "processed_timestamp": 1753731940,
    "processing_mode": "smithery",
    "rank": 374
  }
}